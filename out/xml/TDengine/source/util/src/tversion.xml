<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tversion.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tversion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>taosVersionStrToInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vstr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>vint</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>vstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_VERSION_STRING</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>vnum</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>spos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>spos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>vpos</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>spos</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>vstr</name><index>[<expr><name>spos</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>spos</name> <operator>-</operator> <name>tpos</name></expr>]</index></name> <operator>=</operator> <name><name>vstr</name><index>[<expr><name>spos</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>vnum</name><index>[<expr><name>vpos</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>vpos</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tpos</name> <operator>=</operator> <name>spos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>vnum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_VERSION_STRING</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>vint</name> <operator>=</operator> <name><name>vnum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>vnum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">10000</literal> <operator>+</operator> <name><name>vnum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name><name>vnum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosVersionIntToStr</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>vint</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>vstr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>s1</name> <init>= <expr><operator>(</operator><name>vint</name> <operator>%</operator> <literal type="number">100000000</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>s2</name> <init>= <expr><operator>(</operator><name>vint</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>/</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>s3</name> <init>= <expr><operator>(</operator><name>vint</name> <operator>%</operator> <literal type="number">10000</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>s4</name> <init>= <expr><name>vint</name> <operator>%</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s1</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_VERSION_NUMBER</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%02d.%02d.%02d.%02d"</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosCheckVersionCompatible</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>clientVer</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>serverVer</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>comparedSegments</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>comparedSegments</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
      <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <expr_stmt><expr><name>clientVer</name> <operator>%=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>serverVer</name> <operator>%=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><name>clientVer</name> <operator>%=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>serverVer</name> <operator>%=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><name>clientVer</name> <operator>%=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>serverVer</name> <operator>%=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_VERSION_NUMBER</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>clientVer</name> <operator>==</operator> <name>serverVer</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VERSION_NOT_COMPATIBLE</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
