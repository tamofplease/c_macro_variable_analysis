<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/ttimer.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttimer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsched.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmrFatal</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                     \
  <cpp:value>{                                                                       \
    if (tmrDebugFlag &amp; DEBUG_FATAL) {                                     \
      taosPrintLog("TMR FATAL ", DEBUG_FATAL, tmrDebugFlag, __VA_ARGS__); \
    }                                                                     \
  }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmrError</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                     \
  <cpp:value>{                                                                       \
    if (tmrDebugFlag &amp; DEBUG_ERROR) {                                     \
      taosPrintLog("TMR ERROR ", DEBUG_ERROR, tmrDebugFlag, __VA_ARGS__); \
    }                                                                     \
  }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmrWarn</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                    \
  <cpp:value>{                                                                     \
    if (tmrDebugFlag &amp; DEBUG_WARN) {                                    \
      taosPrintLog("TMR WARN ", DEBUG_WARN, tmrDebugFlag, __VA_ARGS__); \
    }                                                                   \
  }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmrInfo</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                               \
  <cpp:value>{                                                                \
    if (tmrDebugFlag &amp; DEBUG_INFO) {                               \
      taosPrintLog("TMR ", DEBUG_INFO, tmrDebugFlag, __VA_ARGS__); \
    }                                                              \
  }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmrDebug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                               \
  <cpp:value>{                                                                 \
    if (tmrDebugFlag &amp; DEBUG_DEBUG) {                               \
      taosPrintLog("TMR ", DEBUG_DEBUG, tmrDebugFlag, __VA_ARGS__); \
    }                                                               \
  }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmrTrace</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                               \
  <cpp:value>{                                                                 \
    if (tmrDebugFlag &amp; DEBUG_TRACE) {                               \
      taosPrintLog("TMR ", DEBUG_TRACE, tmrDebugFlag, __VA_ARGS__); \
    }                                                               \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMER_STATE_WAITING</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMER_STATE_EXPIRED</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMER_STATE_STOPPED</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMER_STATE_CANCELED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><union>union <name>_tmr_ctrl_t</name> <block>{
  <decl_stmt><decl><type><name>char</name></type> <name><name>label</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <struct>struct <block>{
    <comment type="line">// pad to ensure 'next' is the end of this union</comment>
    <macro><name>char</name></macro>               <expr_stmt><expr><name><name>padding</name><index>[<expr><literal type="number">16</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>union <name>_tmr_ctrl_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>union</name> <name>_tmr_ctrl_t</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
  }</block>;</struct>
}</block></union></type> <name>tmr_ctrl_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>tmr_obj_t</name> <block>{
  <decl_stmt><decl><type><name>uintptr_t</name></type>         <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmr_ctrl_t</name><modifier>*</modifier></type>       <name>ctrl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tmr_obj_t</name></name><modifier>*</modifier></type> <name>mnext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tmr_obj_t</name></name><modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tmr_obj_t</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type>          <name>slot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>           <name>wheel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>           <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>           <name>refCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>           <name>reserved1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type>          <name>reserved2</name></decl>;</decl_stmt>
  <union>union <block>{
    <decl_stmt><decl><type><name>int64_t</name></type> <name>expireAt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>executedBy</name></decl>;</decl_stmt>
  }</block>;</union>
  <decl_stmt><decl><type><name>TAOS_TMR_CALLBACK</name></type> <name>fp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>             <name>param</name></decl>;</decl_stmt>
}</block></struct></type> <name>tmr_obj_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>timer_list_t</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>lockedBy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timers</name></decl>;</decl_stmt>
}</block></struct></type> <name>timer_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>timer_map_t</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>timer_list_t</name><modifier>*</modifier></type> <name>slots</name></decl>;</decl_stmt>
}</block></struct></type> <name>timer_map_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>time_wheel_t</name> <block>{
  <decl_stmt><decl><type><name>TdThreadMutex</name></type> <name>mutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>       <name>nextScanAt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>resolution</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type>      <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type>      <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier><modifier>*</modifier></type>   <name>slots</name></decl>;</decl_stmt>
}</block></struct></type> <name>time_wheel_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsMaxTmrCtrl</name> <init>= <expr><name>TSDB_MAX_VNODES_PER_DB</name> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type>  <name>tmrModuleInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadMutex</name></type> <name>tmrCtrlMutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>tmr_ctrl_t</name><modifier>*</modifier></type>   <name>tmrCtrls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>tmr_ctrl_t</name><modifier>*</modifier></type>   <name>unusedTmrCtrl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type>         <name>tmrQhandle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type>       <name>numOfTmrCtrl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type>          <name>taosTmrThreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uintptr_t</name></type> <name>nextTimerId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>time_wheel_t</name></type> <name><name>wheels</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><operator>.</operator><name>resolution</name> <operator>=</operator> <name>MSECONDS_PER_TICK</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">4096</literal></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>resolution</name> <operator>=</operator> <literal type="number">1000</literal></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">1024</literal></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>resolution</name> <operator>=</operator> <literal type="number">60000</literal></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">1024</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>timer_map_t</name></type> <name>timerMap</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uintptr_t</name></type> <name>getNextTimerId</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uintptr_t</name></type> <name>id</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>atomic_add_fetch_ptr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nextTimerId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>
  <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timerAddRef</name><parameter_list>(<parameter><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_add_fetch_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timerDecRef</name><parameter_list>(<parameter><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_sub_fetch_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lockTimerList</name><parameter_list>(<parameter><decl><type><name>timer_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tid</name> <init>= <expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>atomic_val_compare_exchange_64</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>lockedBy</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unlockTimerList</name><parameter_list>(<parameter><decl><type><name>timer_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tid</name> <init>= <expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_64</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>lockedBy</name></name><operator>)</operator></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>tid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmrError</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" trying to unlock a timer list not locked by current thread."</literal></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addTimer</name><parameter_list>(<parameter><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>timerAddRef</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>wheel</name></name> <operator>=</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>idx</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>timer</name><operator>-&gt;</operator><name>id</name></name> <operator>%</operator> <name><name>timerMap</name><operator>.</operator><name>size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>timer_list_t</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><name><name>timerMap</name><operator>.</operator><name>slots</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>lockTimerList</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>mnext</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>timers</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>timers</name></name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unlockTimerList</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tmr_obj_t</name><modifier>*</modifier></type> <name>findTimer</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type>      <name>idx</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>id</name> <operator>%</operator> <name><name>timerMap</name><operator>.</operator><name>size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>timer_list_t</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><name><name>timerMap</name><operator>.</operator><name>slots</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lockTimerList</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>timer</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>timers</name></name></expr>;</init> <condition><expr><name>timer</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>timer</name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>mnext</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>timerAddRef</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>unlockTimerList</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>timer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>removeTimer</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type>    <name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>idx</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>id</name> <operator>%</operator> <name><name>timerMap</name><operator>.</operator><name>size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>timer_list_t</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><name><name>timerMap</name><operator>.</operator><name>slots</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lockTimerList</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>timers</name></name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mnext</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>timers</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mnext</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>mnext</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mnext</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>timerDecRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>unlockTimerList</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addToWheel</name><parameter_list>(<parameter><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>delay</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>timerAddRef</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// select a wheel for the timer, we are not an accurate timer,</comment>
  <comment type="line">// but the inaccuracy should not be too large.</comment>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>wheel</name></name> <operator>=</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>time_wheel_t</name><modifier>*</modifier></type> <name>wheel</name> <init>= <expr><name>wheels</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <name><name>wheel</name><operator>-&gt;</operator><name>resolution</name></name> <operator>*</operator> <name><name>wheel</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>wheel</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>time_wheel_t</name><modifier>*</modifier></type> <name>wheel</name> <init>= <expr><name>wheels</name> <operator>+</operator> <name><name>timer</name><operator>-&gt;</operator><name>wheel</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>expireAt</name></name> <operator>=</operator> <call><name>taosGetMonotonicMs</name><argument_list>()</argument_list></call> <operator>+</operator> <name>delay</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wheel</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>expireAt</name></name> <operator>&gt;</operator> <name><name>wheel</name><operator>-&gt;</operator><name>nextScanAt</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// adjust delay according to next scan time of this wheel</comment>
    <comment type="line">// so that the timer is not fired earlier than desired.</comment>
    <expr_stmt><expr><name>delay</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>timer</name><operator>-&gt;</operator><name>expireAt</name></name> <operator>-</operator> <name><name>wheel</name><operator>-&gt;</operator><name>nextScanAt</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>delay</name> <operator>+</operator> <name><name>wheel</name><operator>-&gt;</operator><name>resolution</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>wheel</name><operator>-&gt;</operator><name>resolution</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>wheel</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>wheel</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>wheel</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name><name>timer</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>wheel</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name><name>timer</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wheel</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>removeFromWheel</name><parameter_list>(<parameter><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>wheelIdx</name> <init>= <expr><name><name>timer</name><operator>-&gt;</operator><name>wheel</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wheelIdx</name> <operator>&gt;=</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>time_wheel_t</name><modifier>*</modifier></type> <name>wheel</name> <init>= <expr><name>wheels</name> <operator>+</operator> <name>wheelIdx</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>removed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wheel</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// other thread may modify timer-&gt;wheel, check again.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>wheel</name></name> <operator>&lt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name><name>wheel</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name><name>timer</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>wheel</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name><name>timer</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>wheel</name></name> <operator>=</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>timerDecRef</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>removed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wheel</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>removed</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>processExpiredTimer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><operator>(</operator><name>tmr_obj_t</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>executedBy</name></name> <operator>=</operator> <call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>state</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>TIMER_STATE_WAITING</name></expr></argument>, <argument><expr><name>TIMER_STATE_EXPIRED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>TIMER_STATE_WAITING</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name> <init>= <expr><literal type="string">"%s timer[id=%"</literal> <name>PRIuPTR</name> <literal type="string">", fp=%p, param=%p] execution start."</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>timer</name><operator>-&gt;</operator><name>fp</name></name>)<argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><operator>(</operator><name>tmr_h</name><operator>)</operator><name><name>timer</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>TIMER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%s timer[id=%"</literal> <name>PRIuPTR</name> <literal type="string">", fp=%p, param=%p] execution end."</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>removeTimer</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>timerDecRef</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addToExpired</name><parameter_list>(<parameter><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name> <init>= <expr><literal type="string">"%s adding expired timer[id=%"</literal> <name>PRIuPTR</name> <literal type="string">", fp=%p, param=%p] to queue."</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>head</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uintptr_t</name></type>  <name>id</name> <init>= <expr><name><name>head</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SSchedMsg</name></type> <name>schedMsg</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>tfp</name></name> <operator>=</operator> <name>processExpiredTimer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>thandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosScheduleTask</name><argument_list>(<argument><expr><name>tmrQhandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schedMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><literal type="string">"timer[id=%"</literal> <name>PRIuPTR</name> <literal type="string">"] has been added to queue."</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>head</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uintptr_t</name></type> <name>doStartTimer</name><parameter_list>(<parameter><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>, <parameter><decl><type><name>TAOS_TMR_CALLBACK</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>mseconds</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>tmr_ctrl_t</name><modifier>*</modifier></type> <name>ctrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uintptr_t</name></type> <name>id</name> <init>= <expr><call><name>getNextTimerId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TIMER_STATE_WAITING</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>ctrl</name></name> <operator>=</operator> <name>ctrl</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>addTimer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name> <init>= <expr><literal type="string">"%s timer[id=%"</literal> <name>PRIuPTR</name> <literal type="string">", fp=%p, param=%p] started"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>mseconds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>wheel</name></name> <operator>=</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>timerAddRef</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addToExpired</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>addToWheel</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>mseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// note: use `timer-&gt;id` here is unsafe as `timer` may already be freed</comment>
  <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tmr_h</name></type> <name>taosTmrStart</name><parameter_list>(<parameter><decl><type><name>TAOS_TMR_CALLBACK</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>mseconds</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmr_ctrl_t</name><modifier>*</modifier></type> <name>ctrl</name> <init>= <expr><operator>(</operator><name>tmr_ctrl_t</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctrl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><operator>(</operator><name>tmr_obj_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmr_obj_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmrError</name><argument_list>(<argument><expr><literal type="string">"%s failed to allocated memory for new timer object."</literal></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><name>tmr_h</name><operator>)</operator><call><name>doStartTimer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>mseconds</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosTimerLoopFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>taosGetMonotonicMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// `expried` is a temporary expire list.</comment>
    <comment type="line">// expired timers are first add to this list, then move</comment>
    <comment type="line">// to expired queue as a batch to improve performance.</comment>
    <comment type="line">// note this list is used as a stack in this function.</comment>
    <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>expired</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>time_wheel_t</name><modifier>*</modifier></type> <name>wheel</name> <init>= <expr><name>wheels</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>now</name> <operator>&gt;=</operator> <name><name>wheel</name><operator>-&gt;</operator><name>nextScanAt</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wheel</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>wheel</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>(</operator><name><name>wheel</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>wheel</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><name><name>wheel</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name><name>wheel</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>timer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>now</name> <operator>&lt;</operator> <name><name>timer</name><operator>-&gt;</operator><name>expireAt</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>timer</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// remove from the wheel</comment>
        <if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>wheel</name><operator>-&gt;</operator><name>slots</name><index>[<expr><name><name>wheel</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>wheel</name></name> <operator>=</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add to temporary expire list</comment>
        <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>expired</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>expired</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>expired</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>expired</name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>timer</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name><name>wheel</name><operator>-&gt;</operator><name>nextScanAt</name></name> <operator>+=</operator> <name><name>wheel</name><operator>-&gt;</operator><name>resolution</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wheel</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>addToExpired</name><argument_list>(<argument><expr><name>expired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>doStopTimer</name><parameter_list>(<parameter><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>TIMER_STATE_WAITING</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>reusable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>removeFromWheel</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>removeTimer</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// only safe to reuse the timer when timer is removed from the wheel.</comment>
      <comment type="line">// we cannot guarantee the thread safety of the timr in all other cases.</comment>
      <expr_stmt><expr><name>reusable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name> <init>= <expr><literal type="string">"%s timer[id=%"</literal> <name>PRIuPTR</name> <literal type="string">", fp=%p, param=%p] is cancelled."</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>reusable</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>TIMER_STATE_EXPIRED</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// timer already stopped or cancelled, has nothing to do in this case</comment>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>executedBy</name></name> <operator>==</operator> <call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// taosTmrReset is called in the timer callback, should do nothing in this</comment>
    <comment type="line">// case to avoid dead lock. note taosTmrReset must be the last statement</comment>
    <comment type="line">// of the callback funtion, will be a bug otherwise.</comment>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// timer callback is executing in another thread, we SHOULD wait it to stop,</comment>
  <comment type="line">// BUT this may result in dead lock if current thread are holding a lock which</comment>
  <comment type="line">// the timer callback need to acquire. so, we HAVE TO return directly.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name> <init>= <expr><literal type="string">"%s timer[id=%"</literal> <name>PRIuPTR</name> <literal type="string">", fp=%p, param=%p] is executing and cannot be stopped."</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosTmrStop</name><parameter_list>(<parameter><decl><type><name>tmr_h</name></type> <name>timerId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uintptr_t</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>timerId</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><call><name>findTimer</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><literal type="string">"timer[id=%"</literal> <name>PRIuPTR</name> <literal type="string">"] does not exist"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>state</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>TIMER_STATE_WAITING</name></expr></argument>, <argument><expr><name>TIMER_STATE_CANCELED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>doStopTimer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>timerDecRef</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>state</name> <operator>==</operator> <name>TIMER_STATE_WAITING</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosTmrStopA</name><parameter_list>(<parameter><decl><type><name>tmr_h</name><modifier>*</modifier></type> <name>timerId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>taosTmrStop</name><argument_list>(<argument><expr><operator>*</operator><name>timerId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>timerId</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosTmrReset</name><parameter_list>(<parameter><decl><type><name>TAOS_TMR_CALLBACK</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>mseconds</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>tmr_h</name><modifier>*</modifier></type> <name>pTmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmr_ctrl_t</name><modifier>*</modifier></type> <name>ctrl</name> <init>= <expr><operator>(</operator><name>tmr_ctrl_t</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctrl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uintptr_t</name></type>  <name>id</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>*</operator><name>pTmrId</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>       <name>stopped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><call><name>findTimer</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><literal type="string">"%s timer[id=%"</literal> <name>PRIuPTR</name> <literal type="string">"] does not exist"</literal></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>state</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>TIMER_STATE_WAITING</name></expr></argument>, <argument><expr><name>TIMER_STATE_CANCELED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doStopTimer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>timerDecRef</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>timer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>stopped</name> <operator>=</operator> <name>state</name> <operator>==</operator> <name>TIMER_STATE_WAITING</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pTmrId</name> <operator>=</operator> <call><name>taosTmrStart</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>mseconds</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>stopped</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><literal type="string">"%s timer[id=%"</literal> <name>PRIuPTR</name> <literal type="string">"] is reused"</literal></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// wait until there's no other reference to this timer,</comment>
  <comment type="line">// so that we can reuse this timer safely.</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>refCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>timer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pTmrId</name> <operator>=</operator> <operator>(</operator><name>tmr_h</name><operator>)</operator><call><name>doStartTimer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>mseconds</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>stopped</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosTmrModuleInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>tmrCtrls</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmr_ctrl_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>tsMaxTmrCtrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmrCtrls</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmrError</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory for timer controllers."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timerMap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timerMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tsMaxTmrCtrl</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>tmr_ctrl_t</name><modifier>*</modifier></type> <name>ctrl</name> <init>= <expr><name>tmrCtrls</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ctrl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ctrl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>(</operator><name>tmrCtrls</name> <operator>+</operator> <name>tsMaxTmrCtrl</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>unusedTmrCtrl</name> <operator>=</operator> <name>tmrCtrls</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmrCtrlMutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>taosGetMonotonicMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>time_wheel_t</name><modifier>*</modifier></type> <name>wheel</name> <init>= <expr><name>wheels</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wheel</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tmrError</name><argument_list>(<argument><expr><literal type="string">"failed to create the mutex for wheel, reason:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>wheel</name><operator>-&gt;</operator><name>nextScanAt</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <name><name>wheel</name><operator>-&gt;</operator><name>resolution</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wheel</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wheel</name><operator>-&gt;</operator><name>slots</name></name> <operator>=</operator> <operator>(</operator><name>tmr_obj_t</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>wheel</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmr_obj_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>wheel</name><operator>-&gt;</operator><name>slots</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tmrError</name><argument_list>(<argument><expr><literal type="string">"failed to allocate wheel slots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>timerMap</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name><name>wheel</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>timerMap</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>timerMap</name><operator>.</operator><name>slots</name></name> <operator>=</operator> <operator>(</operator><name>timer_list_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>timerMap</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timer_list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>timerMap</name><operator>.</operator><name>slots</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmrError</name><argument_list>(<argument><expr><literal type="string">"failed to allocate hash map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>tmrQhandle</name> <operator>=</operator> <call><name>taosInitScheduler</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><name>taosTmrThreads</name></expr></argument>, <argument><expr><literal type="string">"tmr"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosInitTimer</name><argument_list>(<argument><expr><name>taosTimerLoopFunc</name></expr></argument>, <argument><expr><name>MSECONDS_PER_TICK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><literal type="string">"timer module is initialized, number of threads: %d"</literal></expr></argument>, <argument><expr><name>taosTmrThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosTmrInit</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>maxNumOfTmrs</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>resolution</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>longest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name>taosMonotonicInit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><literal type="string">"ttimer monotonic clock source:%s"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmrModuleInit</name></expr></argument>, <argument><expr><name>taosTmrModuleInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmrCtrlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>tmr_ctrl_t</name><modifier>*</modifier></type> <name>ctrl</name> <init>= <expr><name>unusedTmrCtrl</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctrl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>unusedTmrCtrl</name> <operator>=</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfTmrCtrl</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmrCtrlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ctrl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmrError</name><argument_list>(<argument><expr><literal type="string">"%s too many timer controllers, failed to create timer controller."</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><literal type="string">"%s timer controller is initialized, number of timer controllers: %d."</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>numOfTmrCtrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ctrl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosTmrCleanUp</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmr_ctrl_t</name><modifier>*</modifier></type> <name>ctrl</name> <init>= <expr><operator>(</operator><name>tmr_ctrl_t</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctrl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctrl</name><operator>-&gt;</operator><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><literal type="string">"%s timer controller is cleaned up."</literal></expr></argument>, <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctrl</name><operator>-&gt;</operator><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmrCtrlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctrl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>unusedTmrCtrl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>numOfTmrCtrl</name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>unusedTmrCtrl</name> <operator>=</operator> <name>ctrl</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmrCtrlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tmrDebug</name><argument_list>(<argument><expr><literal type="string">"time controller's tmr ctrl size:  %d"</literal></expr></argument>, <argument><expr><name>numOfTmrCtrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfTmrCtrl</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosUninitTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosCleanUpScheduler</name><argument_list>(<argument><expr><name>tmrQhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>tmrQhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>wheels</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>time_wheel_t</name><modifier>*</modifier></type> <name>wheel</name> <init>= <expr><name>wheels</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wheel</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>wheel</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmrCtrlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>timerMap</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>timer_list_t</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><name><name>timerMap</name><operator>.</operator><name>slots</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type>    <name>t</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>timers</name></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>tmr_obj_t</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>mnext</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>timerMap</name><operator>.</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tmrCtrls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tmrCtrls</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>unusedTmrCtrl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>tmrModuleInit</name> <operator>=</operator> <name>PTHREAD_ONCE_INIT</name></expr>;</expr_stmt>  <comment type="line">// to support restart</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
