<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tlosertree.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlosertree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<comment type="line">// Set the initial value of the multiway merge tree.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tMergeTreeInit</name><parameter_list>(<parameter><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pTree</name><operator>-&gt;</operator><name>totalSources</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pTree</name><operator>-&gt;</operator><name>numOfSources</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pTree</name><operator>-&gt;</operator><name>totalSources</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTree</name><operator>-&gt;</operator><name>totalSources</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfSources</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfSources</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tMergeTreeCreate</name><parameter_list>(<parameter><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTree</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>numOfSources</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>,
                         <parameter><decl><type><name>__merge_compare_fn_t</name></type> <name>compareFn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalEntries</name> <init>= <expr><name>numOfSources</name> <operator>&lt;&lt;</operator> <literal type="number">1u</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTreeInfo</name> <init>=
      <expr><operator>(</operator><name>SMultiwayMergeTreeInfo</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMultiwayMergeTreeInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STreeNode</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>totalEntries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTreeInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"allocate memory for loser-tree failed. reason:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTreeInfo</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <operator>(</operator><name>STreeNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pTreeInfo</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMultiwayMergeTreeInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTreeInfo</name><operator>-&gt;</operator><name>numOfSources</name></name> <operator>=</operator> <name>numOfSources</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTreeInfo</name><operator>-&gt;</operator><name>totalSources</name></name> <operator>=</operator> <name>totalEntries</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTreeInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTreeInfo</name><operator>-&gt;</operator><name>comparFn</name></name> <operator>=</operator> <name>compareFn</name></expr>;</expr_stmt>

  <comment type="line">// set initial value for loser tree</comment>
  <expr_stmt><expr><call><name>tMergeTreeInit</name><argument_list>(<argument><expr><name>pTreeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG_VIEW</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"the initial value of loser tree:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tLoserTreeDisplaypTreeInfo</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>totalEntries</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>numOfSources</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tMergeTreeAdjust</name><argument_list>(<argument><expr><name>pTreeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_VIEW</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"after adjust:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tLoserTreeDisplaypTreeInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"initialize local reducer completed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><operator>*</operator><name>pTree</name> <operator>=</operator> <name>pTreeInfo</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tMergeTreeDestroy</name><parameter_list>(<parameter><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTree</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tMergeTreeAdjust</name><parameter_list>(<parameter><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>totalSources</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfSources</name></name> <operator>&amp;&amp;</operator> <name><name>pTree</name><operator>-&gt;</operator><name>totalSources</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTree</name><operator>-&gt;</operator><name>totalSources</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>parentId</name> <init>= <expr><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STreeNode</name></type> <name>kLeaf</name> <init>= <expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>parentId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STreeNode</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><operator>&amp;</operator><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>parentId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCur</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>parentId</name></expr>]</index></name> <operator>=</operator> <name>kLeaf</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name><name>pTree</name><operator>-&gt;</operator><name>comparFn</name></name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLeaf</name></expr></argument>, <argument><expr><name><name>pTree</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STreeNode</name></type> <name>t</name> <init>= <expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>parentId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>parentId</name></expr>]</index></name> <operator>=</operator> <name>kLeaf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>kLeaf</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>parentId</name> <operator>=</operator> <name>parentId</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kLeaf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kLeaf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// winner cannot be identical to the loser, which is pTreeNode[1]</comment>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>kLeaf</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tMergeTreeRebuild</name><parameter_list>(<parameter><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pTree</name><operator>-&gt;</operator><name>totalSources</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tMergeTreeInit</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pTree</name><operator>-&gt;</operator><name>totalSources</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfSources</name></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tMergeTreeAdjust</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * display whole loser tree on screen for debug purpose only.
 */</comment>
<function><type><name>void</name></type> <name>tMergeTreePrint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"the value of loser tree:\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTree</name><operator>-&gt;</operator><name>totalSources</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\t"</literal></expr></argument>, <argument><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
