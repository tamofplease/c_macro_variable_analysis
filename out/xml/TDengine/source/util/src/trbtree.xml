<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/trbtree.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trbtree.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tRBTreeRotateLeft</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>x</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tRBTreeRotateRight</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>x</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tRBTreePutFix</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// z.parent is the left child</comment>

      <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>  <comment type="line">// uncle of z</comment>

      <if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition> <block>{<block_content>  <comment type="line">// case 1</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>                        <comment type="line">// case2 or case3</comment>
        <if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// case2</comment>
          <expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>              <comment type="line">// marked z.parent as new z</comment>
          <expr_stmt><expr><call><name>tRBTreeRotateLeft</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// case3</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>        <comment type="line">// made parent black</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>  <comment type="line">// made parent red</comment>
        <expr_stmt><expr><call><name>tRBTreeRotateRight</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>                                     <comment type="line">// z.parent is the right child</comment>
      <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>  <comment type="line">// uncle of z</comment>

      <if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>  <comment type="line">// marked z.parent as new z</comment>
          <expr_stmt><expr><call><name>tRBTreeRotateRight</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>        <comment type="line">// made parent black</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>  <comment type="line">// made parent red</comment>
        <expr_stmt><expr><call><name>tRBTreeRotateLeft</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tRBTreeTransplant</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>u</name> <operator>==</operator> <name><name>u</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>tRBTreeSuccessor</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name> <operator>||</operator> <name>pNode</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>tRBTreePredecessor</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name> <operator>||</operator> <name>pNode</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tRBTreeCreate</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><name>tRBTreeCmprFn</name></type> <name>cmprFn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>cmprFn</name></name> <operator>=</operator> <name>cmprFn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pTree</name><operator>-&gt;</operator><name>NILNODE</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>NIL</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>NIL</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>NIL</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>NIL</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>tRBTreePut</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr></init></decl>;</decl_stmt>  <comment type="line">// variable for the parent of the added node</comment>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name><name>pTree</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>temp</name> <operator>!=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name><name>pTree</name><operator>-&gt;</operator><name>cmprFn</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>pTree</name><operator>-&gt;</operator><name>cmprFn</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tRBTreePutFix</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update min/max node</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTree</name><operator>-&gt;</operator><name>min</name></name> <operator>==</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name> <operator>||</operator> <call><name><name>pTree</name><operator>-&gt;</operator><name>cmprFn</name></name><argument_list>(<argument><expr><name><name>pTree</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTree</name><operator>-&gt;</operator><name>max</name></name> <operator>==</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name> <operator>||</operator> <call><name><name>pTree</name><operator>-&gt;</operator><name>cmprFn</name></name><argument_list>(<argument><expr><name><name>pTree</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBTREE_NULL</name></cpp:macro>         <cpp:value>rbtree-&gt;NIL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtree_t</name></cpp:macro>            <cpp:value>SRBTree</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbnode_t</name></cpp:macro>            <cpp:value>SRBTreeNode</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtree_rotate_left</name></cpp:macro>  <cpp:value>tRBTreeRotateLeft</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtree_rotate_right</name></cpp:macro> <cpp:value>tRBTreeRotateRight</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rbtree_delete_fixup</name><parameter_list>(<parameter><decl><type><name>rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>child_parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>sibling</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>go_up</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* determine sibling to the node that is one-black short */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <while>while <condition>(<expr><name>go_up</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>child_parent</name> <operator>==</operator> <name>RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* removed parent==black from root, every path, so ok */</comment>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition> <block>{<block_content> <comment type="block">/* rotate to get a black sibling */</comment>
      <expr_stmt><expr><name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>rbtree_rotate_right</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>rbtree_rotate_left</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <comment type="block">/* new sibling after rotation */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name> <operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name> <operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name> <operator>&amp;&amp;</operator>
        <name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name></expr>)</condition> <block>{<block_content> <comment type="block">/* fixup local with recolor of sibling */</comment>
      <if_stmt><if>if <condition>(<expr><name>sibling</name> <operator>!=</operator> <name>RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>child</name> <operator>=</operator> <name>child_parent</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>child_parent</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
      <comment type="block">/* prepare to go up, new sibling */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>go_up</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name> <operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name> <operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name> <operator>&amp;&amp;</operator>
      <name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* move red to sibling to rebalance */</comment>
    <if_stmt><if>if <condition>(<expr><name>sibling</name> <operator>!=</operator> <name>RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sibling</name> <operator>!=</operator> <name>RBTREE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* get a new sibling, by rotating at sibling. See which child
     of sibling is red */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name> <operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name> <operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name> <operator>&amp;&amp;</operator>
      <name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbtree_rotate_left</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>sibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* new sibling after rotation */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>child</name> <operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name> <operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name> <operator>&amp;&amp;</operator>
             <name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbtree_rotate_right</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>sibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* new sibling after rotation */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* now we have a black sibling with a red child. rotate and exchange colors. */</comment>
  <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbtree_rotate_right</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbtree_rotate_left</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** helpers for delete: swap node colours */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>swap_int8</name><parameter_list>(<parameter><decl><type><name>ECOLOR</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>ECOLOR</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ECOLOR</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>x</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>*</operator><name>y</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** helpers for delete: swap node pointers */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>swap_np</name><parameter_list>(<parameter><decl><type><name>rbnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>rbnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>*</operator><name>x</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>*</operator><name>y</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Update parent pointers of child trees of 'parent' */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>change_parent_ptr</name><parameter_list>(<parameter><decl><type><name>rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>old</name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>old</name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>new</name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/** Update parent pointer of a node 'child' */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>change_child_ptr</name><parameter_list>(<parameter><decl><type><name>rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <name>RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>old</name> <operator>||</operator> <name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>rbnode_t</name> <modifier>*</modifier></type><name>rbtree_delete</name><parameter_list>(<parameter><decl><type><name>rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>to_delete</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

  <comment type="block">/* make sure we have at most one non-leaf child */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>RBTREE_NULL</name> <operator>&amp;&amp;</operator> <name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* swap with smallest from right subtree (or largest from left) */</comment>
    <decl_stmt><decl><type><name>rbnode_t</name> <modifier>*</modifier></type><name>smright</name> <init>= <expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>smright</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>smright</name> <operator>=</operator> <name><name>smright</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></while>
    <comment type="block">/* swap the smright and to_delete elements in the tree,
     * but the rbnode_t is first part of user data struct
     * so cannot just swap the keys and data pointers. Instead
     * readjust the pointers left,right,parent */</comment>

    <comment type="block">/* swap colors - colors are tied to the position in the tree */</comment>
    <expr_stmt><expr><call><name>swap_int8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_delete</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smright</name><operator>-&gt;</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* swap child pointers in parents of smright/to_delete */</comment>
    <expr_stmt><expr><call><name>change_parent_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>, <argument><expr><name>smright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>smright</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>change_parent_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>smright</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>smright</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* swap parent pointers in children of smright/to_delete */</comment>
    <expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>smright</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>smright</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>smright</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>smright</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>smright</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>smright</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>smright</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>smright</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>, <argument><expr><name>smright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>smright</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>, <argument><expr><name>smright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>smright</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* set up so after swap they work */</comment>
      <expr_stmt><expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>to_delete</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>smright</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>smright</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* swap pointers in to_delete/smright nodes */</comment>
    <expr_stmt><expr><call><name>swap_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smright</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>swap_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smright</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>swap_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smright</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* now delete to_delete (which is at the location where the smright previously was) */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>RBTREE_NULL</name> <operator>||</operator> <name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>RBTREE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <comment type="block">/* unlink to_delete from the tree, replace to_delete with child */</comment>
  <expr_stmt><expr><call><name>change_parent_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>, <argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* if node is red then the child (black) can be swapped in */</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* change child to BLACK, removing a RED node is no problem */</comment>
    <if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <name>RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>rbtree_delete_fixup</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <comment type="block">/* unlink completely */</comment>
  <expr_stmt><expr><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>RBTREE_NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>RBTREE_NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>RBTREE_NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>to_delete</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
  <return>return <expr><name>to_delete</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tRBTreeDrop</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// update min/max node</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTree</name><operator>-&gt;</operator><name>min</name></name> <operator>==</operator> <name>z</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <call><name>tRBTreeSuccessor</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name><name>pTree</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTree</name><operator>-&gt;</operator><name>max</name></name> <operator>==</operator> <name>z</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <call><name>tRBTreePredecessor</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name><name>pTree</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>rbtree_delete</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>n</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>tRBTreeDropByKey</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><call><name>tRBTreeGet</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tRBTreeDrop</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>tRBTreeGet</name><parameter_list>(<parameter><decl><type><name>SRBTree</name> <modifier>*</modifier></type><name>pTree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>pKeyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pTree</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pNode</name> <operator>!=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name><name>pTree</name><operator>-&gt;</operator><name>cmprFn</name></name><argument_list>(<argument><expr><name>pKeyNode</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name>pNode</name> <operator>==</operator> <name><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pNode</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SRBTreeIter ================================================</comment>
<function><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>tRBTreeIterNext</name><parameter_list>(<parameter><decl><type><name>SRBTreeIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>!=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>asc</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// ascend</comment>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <call><name>tRBTreeSuccessor</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTree</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// descend</comment>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <call><name>tRBTreePredecessor</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTree</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>pNode</name> <operator>==</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pTree</name><operator>-&gt;</operator><name>NIL</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pNode</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
