<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tlockfree.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlockfree.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TD_RWLATCH_WRITE_FLAG</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>taosInitRWLatch</name><parameter_list>(<parameter><decl><type><name>SRWLatch</name> <modifier>*</modifier></type><name>pLatch</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>pLatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>taosWLockLatch</name><parameter_list>(<parameter><decl><type><name>SRWLatch</name> <modifier>*</modifier></type><name>pLatch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRWLatch</name></type> <name>oLatch</name></decl>, <decl><type ref="prev"/><name>nLatch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>nLoops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Set write flag</comment>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>oLatch</name> <operator>=</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><name>pLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>oLatch</name> <operator>&amp;</operator> <name>TD_RWLATCH_WRITE_FLAG</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>nLoops</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>nLatch</name> <operator>=</operator> <name>oLatch</name> <operator>|</operator> <name>TD_RWLATCH_WRITE_FLAG</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><name>pLatch</name></expr></argument>, <argument><expr><name>oLatch</name></expr></argument>, <argument><expr><name>nLatch</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>oLatch</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="line">// wait for all reads end</comment>
  <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>oLatch</name> <operator>=</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><name>pLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>oLatch</name> <operator>==</operator> <name>TD_RWLATCH_WRITE_FLAG</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nLoops</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="line">// no reentrant</comment>
<function><type><name>int32_t</name></type> <name>taosWTryLockLatch</name><parameter_list>(<parameter><decl><type><name>SRWLatch</name> <modifier>*</modifier></type><name>pLatch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRWLatch</name></type> <name>oLatch</name></decl>, <decl><type ref="prev"/><name>nLatch</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>oLatch</name> <operator>=</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><name>pLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>oLatch</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>nLatch</name> <operator>=</operator> <name>oLatch</name> <operator>|</operator> <name>TD_RWLATCH_WRITE_FLAG</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><name>pLatch</name></expr></argument>, <argument><expr><name>oLatch</name></expr></argument>, <argument><expr><name>nLatch</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>oLatch</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosWUnLockLatch</name><parameter_list>(<parameter><decl><type><name>SRWLatch</name> <modifier>*</modifier></type><name>pLatch</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><name>pLatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>taosRLockLatch</name><parameter_list>(<parameter><decl><type><name>SRWLatch</name> <modifier>*</modifier></type><name>pLatch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRWLatch</name></type> <name>oLatch</name></decl>, <decl><type ref="prev"/><name>nLatch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>nLoops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>oLatch</name> <operator>=</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><name>pLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>oLatch</name> <operator>&amp;</operator> <name>TD_RWLATCH_WRITE_FLAG</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>nLoops</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>nLatch</name> <operator>=</operator> <name>oLatch</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><name>pLatch</name></expr></argument>, <argument><expr><name>oLatch</name></expr></argument>, <argument><expr><name>nLatch</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>oLatch</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosRUnLockLatch</name><parameter_list>(<parameter><decl><type><name>SRWLatch</name> <modifier>*</modifier></type><name>pLatch</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_fetch_sub_32</name><argument_list>(<argument><expr><name>pLatch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
</unit>
