<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/talgo.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"talgo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>doswap</name><parameter_list>(<parameter><type><name>__left</name></type></parameter>, <parameter><type><name>__right</name></type></parameter>, <parameter><type><name>__size</name></type></parameter>, <parameter><type><name>__buf</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                         \
    memcpy((__buf), (__left), (__size));       \
    memcpy((__left), (__right), (__size));     \
    memcpy((__right), (__buf), (__size));      \
  } while (0);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>median</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>comparFn</name></decl></parameter>,
                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>mid</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1u</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>comparFn</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>comparFn</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>comparFn</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>comparFn</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
         <call><name>comparFn</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG_VIEW</name></cpp:ifdef>
<comment type="line">//  tTagsPrints(src[s], pOrderDesc-&gt;pColumnModel, &amp;pOrderDesc-&gt;orderIdx);</comment>
<comment type="line">//  tTagsPrints(src[mid], pOrderDesc-&gt;pColumnModel, &amp;pOrderDesc-&gt;orderIdx);</comment>
<comment type="line">//  tTagsPrints(src[e], pOrderDesc-&gt;pColumnModel, &amp;pOrderDesc-&gt;orderIdx);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tInsertSort</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>comparFn</name></decl></parameter>,
                        <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>e</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <name>s</name></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>comparFn</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tqsortImpl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
                       <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>comparFn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// short array sort, incur another sort procedure instead of quick sort process</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>THRESHOLD_SIZE</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>THRESHOLD_SIZE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tInsertSort</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>comparFn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>median</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>comparFn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>s</name> <init>= <expr><name>start</name></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>endRightS</name> <init>= <expr><name>end</name></expr></init></decl>, <decl><type ref="prev"/><name>startLeftS</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>e</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name>e</name> <operator>&gt;</operator> <name>s</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>comparFn</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// move the data that equals to pivotal value to the right end of the list</comment>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>e</name> <operator>!=</operator> <name>endRightS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>endRightS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>endRightS</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>e</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>s</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>e</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>comparFn</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>!=</operator> <name>startLeftS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>startLeftS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>startLeftS</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>s</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rightPartStart</name> <init>= <expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>endRightS</name> <operator>!=</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>e</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>left</name> <init>= <expr><name>rightPartStart</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>right</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>right</name> <operator>&gt;</operator> <name>endRightS</name> <operator>&amp;&amp;</operator> <name>left</name> <operator>&lt;=</operator> <name>endRightS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>right</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>rightPartStart</name> <operator>+=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>endRightS</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>leftPartEnd</name> <init>= <expr><name>e</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>startLeftS</name> <operator>!=</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>left</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>right</name> <init>= <expr><name>leftPartEnd</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>left</name> <operator>&lt;</operator> <name>startLeftS</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>&gt;=</operator> <name>startLeftS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>right</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>leftPartEnd</name> <operator>-=</operator> <operator>(</operator><name>startLeftS</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>leftPartEnd</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqsortImpl</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>leftPartEnd</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>comparFn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rightPartStart</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqsortImpl</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>rightPartStart</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>comparFn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosqsort</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>numOfElem</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>comparFn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// prepare the swap buffer</comment>
  <expr_stmt><expr><call><name>tqsortImpl</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>numOfElem</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>comparFn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosbsearch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>compar</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>lidx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>ridx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>midx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>c</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>nmemb</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>lidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>nmemb</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>lidx</name> <operator>&lt;=</operator> <name>ridx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>midx</name> <operator>=</operator> <operator>(</operator><name>lidx</name> <operator>+</operator> <name>ridx</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>base</name> <operator>+</operator> <name>size</name> <operator>*</operator> <name>midx</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>compar</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>TD_GT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>midx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>==</operator> <name>TD_LT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>midx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>midx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>midx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>TD_EQ</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>==</operator> <name>TD_GE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>midx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>nmemb</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>==</operator> <name>TD_LE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>midx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>p</name> <operator>-</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>==</operator> <name>TD_GT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>midx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>nmemb</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>==</operator> <name>TD_LT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>midx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>p</name> <operator>-</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosheapadjust</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>parcompar</name></decl></parameter>,
                    <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>compar</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>maxroot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>parent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>child</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>base</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>compar</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>child</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>parent</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>maxroot</name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><name>child</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>child</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>end</name> <operator>&amp;&amp;</operator>
            <call>(<modifier>*</modifier><name>compar</name>)<argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>child</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>parcompar</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>child</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>compar</name>)<argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>parcompar</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>parent</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <while>while <condition>(<expr><name>child</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>child</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>end</name> <operator>&amp;&amp;</operator>
            <call>(<modifier>*</modifier><name>compar</name>)<argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>child</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>parcompar</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>child</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>compar</name>)<argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>parcompar</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>doswap</name><argument_list>(<argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>elePtrAt</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>parent</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosheapsort</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>parcompar</name></decl></parameter>, <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>compar</name></decl></parameter>,
                  <parameter><decl><type><name>bool</name></type> <name>maxroot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>base</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosheapadjust</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>parcompar</name></expr></argument>, <argument><expr><name>compar</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>maxroot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*
    char *buf = taosMemoryCalloc(1, size);

    for (i = len - 1; i &gt; 0; i--) {
      doswap(elePtrAt(base, size, 0), elePtrAt(base, size, i));
      taosheapadjust(base, size, 0, i - 1, parcompar, compar, parswap, swap, maxroot);
    }

    taosMemoryFreeClear(buf);
  */</comment>
</block_content>}</block></function>
</unit>
