<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tdes.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCRYPTION_MODE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECRYPTION_MODE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>key_set</name>;</typedef>

<function_decl><type><name>void</name></type> <name>generate_key</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>generate_sub_keys</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>main_key</name></decl></parameter>, <parameter><decl><type><name>key_set</name><modifier>*</modifier></type> <name>key_sets</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>process_message</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>message_piece</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>processed_piece</name></decl></parameter>, <parameter><decl><type><name>key_set</name><modifier>*</modifier></type> <name>key_sets</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int64_t taosDesGenKey() {
  uint32_t iseed = (uint32_t)taosGetTimestampSec();
  taosSeedRand(iseed);

  uint8_t key[8] = {0};
  generate_key(key);

  return *((int64_t*)key);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name><modifier>*</modifier></type> <name>taosDesImp</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>process_mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>number_of_blocks</name> <init>= <expr><name>len</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name><name>data_block</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name><name>processed_block</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>key_set</name></type>  <name><name>key_sets</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>key_sets</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key_sets</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>generate_sub_keys</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_sets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>block_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>block_count</name> <operator>&lt;</operator> <name>number_of_blocks</name></expr>;</condition> <incr><expr><name>block_count</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>processed_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data_block</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>block_count</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>process_message</name><argument_list>(<argument><expr><name>data_block</name></expr></argument>, <argument><expr><name>processed_block</name></expr></argument>, <argument><expr><name>key_sets</name></expr></argument>, <argument><expr><name>process_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>block_count</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>processed_block</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>taosDesEncode</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>keyStr</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>key</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>taosDesImp</name><argument_list>(<argument><expr><name>keyStr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ENCRYPTION_MODE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>taosDesDecode</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>keyStr</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>key</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>temp</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>decode</name> <init>= <expr><call><name>taosDesImp</name><argument_list>(<argument><expr><name>keyStr</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>DECRYPTION_MODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>decode</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>initial_key_permutaion</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">58</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">59</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">43</literal></expr>,
                                    <expr><literal type="number">35</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">62</literal></expr>, <expr><literal type="number">54</literal></expr>,
                                    <expr><literal type="number">46</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">61</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>initial_message_permutation</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">58</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,
                                         <expr><literal type="number">62</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>,
                                         <expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>,
                                         <expr><literal type="number">61</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>key_shift_sizes</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>sub_key_permutation</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">28</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">21</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,
                                 <expr><literal type="number">26</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">16</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">27</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">41</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">40</literal></expr>,
                                 <expr><literal type="number">51</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">32</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>message_expansion</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">32</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>,
                               <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>,
                               <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>S1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>,
                <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">7</literal></expr>,
                <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">13</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>S2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">2</literal></expr>,
                <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>,
                <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>S3</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,
                <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>,
                <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">12</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>S4</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>,
                <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>,
                <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">14</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>S5</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">7</literal></expr>,
                <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>,
                <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>S6</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>,
                <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>,
                <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>S7</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>,
                <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>,
                <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">12</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>S8</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>,
                <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>,
                <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">11</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>right_sub_message_permutation</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">16</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">18</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">10</literal></expr>,
                                           <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">8</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">19</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">22</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">25</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>final_message_permutation</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">40</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">31</literal></expr>,
                                       <expr><literal type="number">38</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">29</literal></expr>,
                                       <expr><literal type="number">36</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">27</literal></expr>,
                                       <expr><literal type="number">34</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">49</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">25</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>print_char_as_binary</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>shift_byte</name> <init>= <expr><literal type="number">0x01</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>shift_byte</name> <operator>&amp;</operator> <name>input</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>generate_key</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">255</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_key_set</name><parameter_list>(<parameter><decl><type><name>key_set</name></type> <name>_key_set</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"K: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02X : "</literal></expr></argument>, <argument><expr><name><name>_key_set</name><operator>.</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_char_as_binary</name><argument_list>(<argument><expr><name><name>_key_set</name><operator>.</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nC: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02X : "</literal></expr></argument>, <argument><expr><name><name>_key_set</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_char_as_binary</name><argument_list>(<argument><expr><name><name>_key_set</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nD: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02X : "</literal></expr></argument>, <argument><expr><name><name>_key_set</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_char_as_binary</name><argument_list>(<argument><expr><name><name>_key_set</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>generate_sub_keys</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>main_key</name></decl></parameter>, <parameter><decl><type><name>key_set</name><modifier>*</modifier></type> <name>key_sets</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>shift_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>shift_byte</name></decl>, <decl><type ref="prev"/><name>first_shift_bits</name></decl>, <decl><type ref="prev"/><name>second_shift_bits</name></decl>, <decl><type ref="prev"/><name>third_shift_bits</name></decl>, <decl><type ref="prev"/><name>fourth_shift_bits</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">56</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>shift_size</name> <operator>=</operator> <name><name>initial_key_permutaion</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>shift_byte</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>shift_byte</name> <operator>&amp;=</operator> <name><name>main_key</name><index>[<expr><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>shift_byte</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>k</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>shift_byte</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>k</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>k</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>key_sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>key_sets</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>key_sets</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>shift_size</name> <operator>=</operator> <name><name>key_shift_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>shift_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>shift_byte</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>shift_byte</name> <operator>=</operator> <literal type="number">0xC0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Process C</comment>
    <expr_stmt><expr><name>first_shift_bits</name> <operator>=</operator> <name>shift_byte</name> <operator>&amp;</operator> <name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>second_shift_bits</name> <operator>=</operator> <name>shift_byte</name> <operator>&amp;</operator> <name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>third_shift_bits</name> <operator>=</operator> <name>shift_byte</name> <operator>&amp;</operator> <name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fourth_shift_bits</name> <operator>=</operator> <name>shift_byte</name> <operator>&amp;</operator> <name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>second_shift_bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>shift_size</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>third_shift_bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>shift_size</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>fourth_shift_bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>shift_size</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>first_shift_bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>shift_size</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="line">// Process D</comment>
    <expr_stmt><expr><name>first_shift_bits</name> <operator>=</operator> <name>shift_byte</name> <operator>&amp;</operator> <name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>second_shift_bits</name> <operator>=</operator> <name>shift_byte</name> <operator>&amp;</operator> <name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>third_shift_bits</name> <operator>=</operator> <name>shift_byte</name> <operator>&amp;</operator> <name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fourth_shift_bits</name> <operator>=</operator> <name>shift_byte</name> <operator>&amp;</operator> <name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>second_shift_bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>shift_size</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>third_shift_bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>shift_size</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>fourth_shift_bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>shift_size</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>first_shift_bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>shift_size</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>shift_size</name> <operator>=</operator> <name><name>sub_key_permutation</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>shift_size</name> <operator>&lt;=</operator> <literal type="number">28</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>shift_byte</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>shift_byte</name> <operator>&amp;=</operator> <name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>c</name><index>[<expr><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>shift_byte</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>shift_byte</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">29</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>shift_byte</name> <operator>&amp;=</operator> <name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">29</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>shift_byte</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">29</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>key_sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>k</name><index>[<expr><name>j</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>shift_byte</name> <operator>&gt;&gt;</operator> <name>j</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_message</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>message_piece</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>processed_piece</name></decl></parameter>, <parameter><decl><type><name>key_set</name><modifier>*</modifier></type> <name>key_sets</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>shift_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>shift_byte</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>initial_permutation</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>initial_permutation</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>processed_piece</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>shift_size</name> <operator>=</operator> <name><name>initial_message_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>shift_byte</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>shift_byte</name> <operator>&amp;=</operator> <name><name>message_piece</name><index>[<expr><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>shift_byte</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>initial_permutation</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>shift_byte</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>l</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>initial_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>initial_permutation</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ln</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>rn</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>er</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ser</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>key_index</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ln</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>er</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>shift_size</name> <operator>=</operator> <name><name>message_expansion</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>shift_byte</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>shift_byte</name> <operator>&amp;=</operator> <name><name>r</name><index>[<expr><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>shift_byte</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>er</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>shift_byte</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DECRYPTION_MODE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>key_index</name> <operator>=</operator> <literal type="number">17</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>key_index</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>er</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>key_sets</name><index>[<expr><name>key_index</name></expr>]</index></name><operator>.</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>ser</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// 0000 0000 0000 0000 0000 0000</comment>
    <comment type="line">// rccc crrc cccr rccc crrc cccr</comment>

    <comment type="line">// Byte 1</comment>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x78</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ser</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>S1</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>column</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><name><name>er</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ser</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>S2</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>column</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">// Byte 2</comment>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ser</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>S3</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>column</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><name><name>er</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1E</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ser</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>S4</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>column</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">// Byte 3</comment>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x78</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ser</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>S5</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>column</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><name><name>er</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ser</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>S6</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>column</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">// Byte 4</comment>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ser</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>S7</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>column</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>|=</operator> <operator>(</operator><name><name>er</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>er</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1E</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ser</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>S8</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>column</name></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>shift_size</name> <operator>=</operator> <name><name>right_sub_message_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>shift_byte</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>shift_byte</name> <operator>&amp;=</operator> <name><name>ser</name><index>[<expr><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>shift_byte</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rn</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>shift_byte</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>l</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ln</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pre_end_permutation</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pre_end_permutation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pre_end_permutation</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>l</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>shift_size</name> <operator>=</operator> <name><name>final_message_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>shift_byte</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>shift_byte</name> <operator>&amp;=</operator> <name><name>pre_end_permutation</name><index>[<expr><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>shift_byte</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>(</operator><name>shift_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>processed_piece</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>shift_byte</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
