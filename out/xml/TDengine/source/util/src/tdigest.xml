<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tdigest.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<comment type="block">/*
 * src/tdigest.c
 *
 * Implementation of the t-digest data structure used to compute accurate percentiles.
 *
 * It is based on the MergingDigest implementation found at:
 *   https://github.com/tdunning/t-digest/blob/master/src/main/java/com/tdunning/math/stats/MergingDigest.java
 *
 * Copyright (c) 2016, Usman Masood &lt;usmanm at fastmail dot fm&gt;
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdigest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osMath.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPOLATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>x0</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) - (x0)) / ((x1) - (x0)))</cpp:value></cpp:define>
<comment type="line">//#define INTEGRATED_LOCATION(compression, q)   ((compression) * (asin(2 * (q) - 1) + M_PI / 2) / M_PI)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTEGRATED_LOCATION</name><parameter_list>(<parameter><type><name>compression</name></type></parameter>, <parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((compression) * (asin(2 * (double)(q)-1) / M_PI + (double)1 / 2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_EQ</name><parameter_list>(<parameter><type><name>f1</name></type></parameter>, <parameter><type><name>f2</name></type></parameter>)</parameter_list></cpp:macro>                    <cpp:value>(fabs((f1) - (f2)) &lt;= FLT_EPSILON)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SMergeArgs</name> <block>{
  <decl_stmt><decl><type><name>TDigest</name>   <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>centroids</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>     <name>weight_so_far</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>     <name>k1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>     <name>min</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>     <name>max</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMergeArgs</name>;</typedef>

<function><type><name>void</name></type> <name>tdigestAutoFill</name><parameter_list>(<parameter><decl><type><name>TDigest</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>compression</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>centroids</name></name> <operator>=</operator> <operator>(</operator><name>SCentroid</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>t</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TDigest</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>buffered_pts</name></name> <operator>=</operator> <operator>(</operator><name>SPt</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>t</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TDigest</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCentroid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>GET_CENTROID</name><argument_list>(<argument><expr><name>compression</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TDigest</name> <modifier>*</modifier></type><name>tdigestNewFrom</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>compression</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>TDIGEST_SIZE</name><argument_list>(<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TDigest</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>TDigest</name> <operator>*</operator><operator>)</operator><name>pBuf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdigestAutoFill</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name>compression</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>GET_CENTROID</name><argument_list>(<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>threshold</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>GET_THRESHOLD</name><argument_list>(<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>DOUBLE_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <operator>-</operator><name>DOUBLE_MAX</name></expr>;</expr_stmt>

  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cmpCentroid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>c1</name> <init>= <expr><operator>(</operator><name>SCentroid</name> <operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>c2</name> <init>= <expr><operator>(</operator><name>SCentroid</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>c1</name><operator>-&gt;</operator><name>mean</name></name> <operator>&lt;</operator> <name><name>c2</name><operator>-&gt;</operator><name>mean</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>c1</name><operator>-&gt;</operator><name>mean</name></name> <operator>&gt;</operator> <name><name>c2</name><operator>-&gt;</operator><name>mean</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mergeCentroid</name><parameter_list>(<parameter><decl><type><name>SMergeArgs</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>merge</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type>     <name>k2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>args</name><operator>-&gt;</operator><name>centroids</name><index>[<expr><name><name>args</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>weight_so_far</name></name> <operator>+=</operator> <name><name>merge</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>INTEGRATED_LOCATION</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>t</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>weight_so_far</name></name> <operator>/</operator> <name><name>args</name><operator>-&gt;</operator><name>t</name><operator>-&gt;</operator><name>total_weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// idx++</comment>
  <if_stmt><if>if <condition>(<expr><name>k2</name> <operator>-</operator> <name><name>args</name><operator>-&gt;</operator><name>k1</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>weight</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>merge</name><operator>-&gt;</operator><name>mean</name></name> <operator>!=</operator> <name><name>args</name><operator>-&gt;</operator><name>centroids</name><index>[<expr><name><name>args</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name><operator>.</operator><name>mean</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>k1</name></name> <operator>=</operator> <name>k2</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><name><name>args</name><operator>-&gt;</operator><name>centroids</name><index>[<expr><name><name>args</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>mean</name></name> <operator>==</operator> <name><name>merge</name><operator>-&gt;</operator><name>mean</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight</name></name> <operator>+=</operator> <name><name>merge</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight</name></name> <operator>+=</operator> <name><name>merge</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mean</name></name> <operator>+=</operator> <operator>(</operator><name><name>merge</name><operator>-&gt;</operator><name>mean</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>mean</name></name><operator>)</operator> <operator>*</operator> <name><name>merge</name><operator>-&gt;</operator><name>weight</name></name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>merge</name><operator>-&gt;</operator><name>weight</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>merge</name><operator>-&gt;</operator><name>mean</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>merge</name><operator>-&gt;</operator><name>mean</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdigestCompress</name><parameter_list>(<parameter><decl><type><name>TDigest</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>unmerged_centroids</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>unmerged_weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>num_unmerged</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>num_buffered_pts</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMergeArgs</name></type> <name>args</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>num_buffered_pts</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>unmerged_centroids</name> <operator>=</operator> <operator>(</operator><name>SCentroid</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCentroid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>t</name><operator>-&gt;</operator><name>num_buffered_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_unmerged</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SPt</name>       <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>buffered_pts</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>unmerged_centroids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mean</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>unmerged_weight</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>num_buffered_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>total_weight</name></name> <operator>+=</operator> <name>unmerged_weight</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name>unmerged_centroids</name></expr></argument>, <argument><expr><name>num_unmerged</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCentroid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpCentroid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMergeArgs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>centroids</name></name> <operator>=</operator> <operator>(</operator><name>SCentroid</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCentroid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>centroids</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SCentroid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>min</name></name> <operator>=</operator> <name>DOUBLE_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>max</name></name> <operator>=</operator> <operator>-</operator><name>DOUBLE_MAX</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>num_unmerged</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>num_centroids</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>unmerged_centroids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>centroids</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>mean</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>mean</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mergeCentroid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>idx</name></name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mergeCentroid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>idx</name></name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>num_unmerged</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mergeCentroid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>unmerged_centroids</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>idx</name></name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>unmerged_centroids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>num_centroids</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mergeCentroid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>centroids</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>idx</name></name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>total_weight</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>centroids</name><index>[<expr><name><name>args</name><operator>.</operator><name>idx</name></name></expr>]</index></name><operator>.</operator><name>weight</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>args</name><operator>.</operator><name>idx</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>num_centroids</name></name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>centroids</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>centroids</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCentroid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>t</name><operator>-&gt;</operator><name>num_centroids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>args</name><operator>.</operator><name>centroids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdigestAdd</name><parameter_list>(<parameter><decl><type><name>TDigest</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>num_buffered_pts</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>buffered_pts</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>==</operator> <name>x</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>buffered_pts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weight</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>buffered_pts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>buffered_pts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weight</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>num_buffered_pts</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>num_buffered_pts</name></name> <operator>&gt;=</operator> <name><name>t</name><operator>-&gt;</operator><name>threshold</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdigestCompress</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
double tdigestCDF(TDigest *t, double x) {
  if (t == NULL) return 0;

  int32_t    i;
  double     left, right;
  int64_t    weight_so_far;
  SCentroid *a, *b, tmp;

  tdigestCompress(t);
  if (t-&gt;num_centroids == 0) return NAN;
  if (x &lt; t-&gt;min) return 0;
  if (x &gt; t-&gt;max) return 1;
  if (t-&gt;num_centroids == 1) {
    if (FLOAT_EQ(t-&gt;max, t-&gt;min)) return 0.5;

    return INTERPOLATE(x, t-&gt;min, t-&gt;max);
  }

  weight_so_far = 0;
  a = b = &amp;tmp;
  b-&gt;mean = t-&gt;min;
  b-&gt;weight = 0;
  right = 0;

  for (i = 0; i &lt; t-&gt;num_centroids; i++) {
    SCentroid *c = &amp;t-&gt;centroids[i];

    left = b-&gt;mean - (a-&gt;mean + right);
    a = b;
    b = c;
    right = (b-&gt;mean - a-&gt;mean) * a-&gt;weight / (a-&gt;weight + b-&gt;weight);

    if (x &lt; a-&gt;mean + right) {
      double cdf = (weight_so_far + a-&gt;weight * INTERPOLATE(x, a-&gt;mean - left, a-&gt;mean + right)) / t-&gt;total_weight;
      return TMAX(cdf, 0.0);
    }

    weight_so_far += a-&gt;weight;
  }

  left = b-&gt;mean - (a-&gt;mean + right);
  a = b;
  right = t-&gt;max - a-&gt;mean;

  if (x &lt; a-&gt;mean + right) {
    return (weight_so_far + a-&gt;weight * INTERPOLATE(x, a-&gt;mean - left, a-&gt;mean + right)) / t-&gt;total_weight;
  }

  return 1;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>double</name></type> <name>tdigestQuantile</name><parameter_list>(<parameter><decl><type><name>TDigest</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>     <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>weight_so_far</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdigestCompress</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>num_centroids</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NAN</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>num_centroids</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>t</name><operator>-&gt;</operator><name>centroids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mean</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>FLOAT_EQ</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>t</name><operator>-&gt;</operator><name>min</name></name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>FLOAT_EQ</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>t</name><operator>-&gt;</operator><name>max</name></name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>q</name> <operator>*</operator> <name><name>t</name><operator>-&gt;</operator><name>total_weight</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>weight_so_far</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name>tmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mean</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>right</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>num_centroids</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCentroid</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>centroids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>left</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>right</name> <operator>=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>weight</name></name> <operator>*</operator> <name><name>a</name><operator>-&gt;</operator><name>mean</name></name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>weight</name></name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>mean</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>weight</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>weight</name></name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>weight_so_far</name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>weight</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>idx</name> <operator>-</operator> <name>weight_so_far</name><operator>)</operator> <operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>weight</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>a</name><operator>-&gt;</operator><name>weight</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>left</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>p</name><operator>)</operator> <operator>+</operator> <name>right</name> <operator>*</operator> <name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>weight_so_far</name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>left</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>right</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>weight_so_far</name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>weight</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>weight</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>idx</name> <operator>-</operator> <name>weight_so_far</name><operator>)</operator> <operator>/</operator> <name><name>a</name><operator>-&gt;</operator><name>weight</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>left</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>p</name><operator>)</operator> <operator>+</operator> <name>right</name> <operator>*</operator> <name>p</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>t</name><operator>-&gt;</operator><name>max</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdigestMerge</name><parameter_list>(<parameter><decl><type><name>TDigest</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>TDigest</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// SPoints</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num_pts</name> <init>= <expr><name><name>t2</name><operator>-&gt;</operator><name>num_buffered_pts</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>num_pts</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SPt</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>t2</name><operator>-&gt;</operator><name>buffered_pts</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdigestAdd</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t2</name><operator>-&gt;</operator><name>num_buffered_pts</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <comment type="line">// centroids</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>t2</name><operator>-&gt;</operator><name>num_centroids</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tdigestAdd</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>t2</name><operator>-&gt;</operator><name>centroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mean</name></expr></argument>, <argument><expr><name><name>t2</name><operator>-&gt;</operator><name>centroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
