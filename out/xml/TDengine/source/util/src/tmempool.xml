<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tmempool.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmempool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>numOfFree</name></decl>;</decl_stmt>  <comment type="block">/* number of free slots */</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>first</name></decl>;</decl_stmt>      <comment type="block">/* the first free slot  */</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>numOfBlock</name></decl>;</decl_stmt> <comment type="block">/* the number of blocks */</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>blockSize</name></decl>;</decl_stmt>  <comment type="block">/* block size in bytes  */</comment>
  <decl_stmt><decl><type><name>int32_t</name>      <modifier>*</modifier></type><name>freeList</name></decl>;</decl_stmt>   <comment type="block">/* the index list       */</comment>
  <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>       <comment type="block">/* the actual mem block */</comment>
  <decl_stmt><decl><type><name>TdThreadMutex</name></type> <name>mutex</name></decl>;</decl_stmt>
}</block></struct></type> <name>pool_t</name>;</typedef>

<function><type><name>mpool_h</name></type> <name>taosMemPoolInit</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>numOfBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>blockSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pool_t</name> <modifier>*</modifier></type><name>pool_p</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfBlock</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name>blockSize</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"invalid parameter in memPoolInit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pool_p</name> <operator>=</operator> <operator>(</operator><name>pool_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pool_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pool_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"mempool malloc failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pool_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pool_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>blockSize</name></name> <operator>=</operator> <name>blockSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>numOfBlock</name></name> <operator>=</operator> <name>numOfBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>blockSize</name> <operator>*</operator> <name>numOfBlock</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>freeList</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>numOfBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pool_p</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>freeList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pool_p</name><operator>-&gt;</operator><name>freeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pool_p</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pool_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool_p</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pool_p</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>blockSize</name> <operator>*</operator> <name>numOfBlock</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>numOfBlock</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>freeList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>numOfFree</name></name> <operator>=</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>numOfBlock</name></name></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>mpool_h</name><operator>)</operator><name>pool_p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>taosMemPoolMalloc</name><parameter_list>(<parameter><decl><type><name>mpool_h</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pool_t</name> <modifier>*</modifier></type><name>pool_p</name> <init>= <expr><operator>(</operator><name>pool_t</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool_p</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pool_p</name><operator>-&gt;</operator><name>numOfFree</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>pool</name></name> <operator>+</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>blockSize</name></name> <operator>*</operator> <operator>(</operator><name><name>pool_p</name><operator>-&gt;</operator><name>freeList</name><index>[<expr><name><name>pool_p</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>first</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>first</name></name> <operator>%</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>numOfBlock</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>numOfFree</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool_p</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"mempool: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosMemPoolFree</name><parameter_list>(<parameter><decl><type><name>mpool_h</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pMem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pool_t</name> <modifier>*</modifier></type><name>pool_p</name> <init>= <expr><operator>(</operator><name>pool_t</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>pMem</name> <operator>-</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>pool</name></name><operator>)</operator> <operator>%</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>blockSize</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"invalid free address:%p\n"</literal></expr></argument>, <argument><expr><name>pMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pMem</name> <operator>-</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>pool</name></name><operator>)</operator> <operator>/</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>blockSize</name></name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>numOfBlock</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"mempool: error, invalid address:%p"</literal></expr></argument>, <argument><expr><name>pMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pMem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pool_p</name><operator>-&gt;</operator><name>blockSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool_p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>freeList</name><index>[<expr><operator>(</operator><name><name>pool_p</name><operator>-&gt;</operator><name>first</name></name> <operator>+</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>numOfFree</name></name><operator>)</operator> <operator>%</operator> <name><name>pool_p</name><operator>-&gt;</operator><name>numOfBlock</name></name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool_p</name><operator>-&gt;</operator><name>numOfFree</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool_p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosMemPoolCleanUp</name><parameter_list>(<parameter><decl><type><name>mpool_h</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>pool_t</name> <modifier>*</modifier></type><name>pool_p</name> <init>= <expr><operator>(</operator><name>pool_t</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool_p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pool_p</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pool_p</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pool_p</name><operator>-&gt;</operator><name>freeList</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pool_p</name><operator>-&gt;</operator><name>freeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pool_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pool_p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pool_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
