<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/theap.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"theap.h"</cpp:file></cpp:include>

<function><type><name>size_t</name></type> <name>heapSize</name><parameter_list>(<parameter><decl><type><name>Heap</name><modifier>*</modifier></type> <name>heap</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>heap</name><operator>-&gt;</operator><name>nelts</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>Heap</name><modifier>*</modifier></type> <name>heapCreate</name><parameter_list>(<parameter><decl><type><name>HeapCompareFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Heap</name><modifier>*</modifier></type> <name>heap</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Heap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>heap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>nelts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>compFn</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
  <return>return <expr><name>heap</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>heapDestroy</name><parameter_list>(<parameter><decl><type><name>Heap</name><modifier>*</modifier></type> <name>heap</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>HeapNode</name><modifier>*</modifier></type> <name>heapMin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Heap</name><modifier>*</modifier></type> <name>heap</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>heap</name><operator>-&gt;</operator><name>min</name></name></expr>;</return> </block_content>}</block></function>

<comment type="block">/* Swap parent with child. Child moves closer to the root, parent moves away. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>heapNodeSwap</name><parameter_list>(<parameter><decl><type><name>Heap</name><modifier>*</modifier></type> <name>heap</name></decl></parameter>, <parameter><decl><type><name>HeapNode</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>HeapNode</name><modifier>*</modifier></type> <name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>HeapNode</name><modifier>*</modifier></type> <name>sibling</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HeapNode</name></type>  <name>t</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>parent</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>parent</name> <operator>=</operator> <operator>*</operator><name>child</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>child</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>child</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>sibling</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>parent</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>heapInsert</name><parameter_list>(<parameter><decl><type><name>Heap</name><modifier>*</modifier></type> <name>heap</name></decl></parameter>, <parameter><decl><type><name>HeapNode</name><modifier>*</modifier></type> <name>newnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>HeapNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>parent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HeapNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>   <name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>   <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>   <name>k</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Calculate the path from the root to the insertion point.  This is a min
   * heap so we always insert at the left-most free node of the bottom row.
   */</comment>
  <expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>heap</name><operator>-&gt;</operator><name>nelts</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>n</name> <operator>/=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>path</name> <operator>=</operator> <operator>(</operator><name>path</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

  <comment type="block">/* Now traverse the heap using the path we calculated in the previous step. */</comment>
  <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>child</name> <operator>=</operator> <operator>&amp;</operator><name><name>heap</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>child</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>child</name><operator>)</operator><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>child</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>child</name><operator>)</operator><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>path</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Insert the new node. */</comment>
  <expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <operator>*</operator><name>parent</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>child</name> <operator>=</operator> <name>newnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>nelts</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="block">/* Walk up the tree and check at each node if the heap property holds.
   * It's a min heap so parent &lt; child must be true.
   */</comment>
  <while>while <condition>(<expr><name><name>newnode</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>heap</name><operator>-&gt;</operator><name>compFn</name></name><operator>)</operator><operator>(</operator><name>newnode</name><operator>,</operator> <name><name>newnode</name><operator>-&gt;</operator><name>parent</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>heapNodeSwap</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name><name>newnode</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>heapRemove</name><parameter_list>(<parameter><decl><type><name>Heap</name><modifier>*</modifier></type> <name>heap</name></decl></parameter>, <parameter><decl><type><name>HeapNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>HeapNode</name><modifier>*</modifier></type>  <name>smallest</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HeapNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>max</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HeapNode</name><modifier>*</modifier></type>  <name>child</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>   <name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>   <name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>   <name>n</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>nelts</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Calculate the path from the min (the root) to the max, the left-most node
   * of the bottom row.
   */</comment>
  <expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>nelts</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>n</name> <operator>/=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>path</name> <operator>=</operator> <operator>(</operator><name>path</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

  <comment type="block">/* Now traverse the heap using the path we calculated in the previous step. */</comment>
  <expr_stmt><expr><name>max</name> <operator>=</operator> <operator>&amp;</operator><name><name>heap</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>max</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>max</name><operator>)</operator><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>max</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>max</name><operator>)</operator><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>path</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>nelts</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="block">/* Unlink the max node. */</comment>
  <expr_stmt><expr><name>child</name> <operator>=</operator> <operator>*</operator><name>max</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>max</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <name>node</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* We're removing either the max or the last node in the tree. */</comment>
    <if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <name><name>heap</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Replace the to be deleted node with the max node. */</comment>
  <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>node</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Walk down the subtree and check at each node if the heap property holds.
   * It's a min heap so parent &lt; child must be true.  If the parent is bigger,
   * swap it with the smallest child.
   */</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><name>smallest</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>heap</name><operator>-&gt;</operator><name>compFn</name></name><operator>)</operator><operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>left</name></name><operator>,</operator> <name>smallest</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>smallest</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>heap</name><operator>-&gt;</operator><name>compFn</name></name><operator>)</operator><operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>right</name></name><operator>,</operator> <name>smallest</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>smallest</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>smallest</name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>heapNodeSwap</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>smallest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Walk up the subtree and check that each parent is less than the node
   * this is required, because `max` node is not guaranteed to be the
   * actual maximum in tree
   */</comment>
  <while>while <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>heap</name><operator>-&gt;</operator><name>compFn</name></name><operator>)</operator><operator>(</operator><name>child</name><operator>,</operator> <name><name>child</name><operator>-&gt;</operator><name>parent</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>heapNodeSwap</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>heapDequeue</name><parameter_list>(<parameter><decl><type><name>Heap</name><modifier>*</modifier></type> <name>heap</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>heapRemove</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
</unit>
