<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tbuffer.c"><comment type="block">/*
 * Copyright (c) 2020 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tbuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"texception.h"</cpp:file></cpp:include>

<typedef>typedef <type><union>union <name>Un4B</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ui</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type>    <name>f</name></decl>;</decl_stmt>
}</block></union></type> <name>Un4B</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112LL</literal></expr></cpp:if>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Un4B</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sizeof(Un4B) must equal to sizeof(uint32_t)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Un4B</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sizeof(Un4B) must equal to sizeof(float)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><union>union <name>Un8B</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ull</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>   <name>d</name></decl>;</decl_stmt>
}</block></union></type> <name>Un8B</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112LL</literal></expr></cpp:if>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Un8B</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sizeof(Un8B) must equal to sizeof(uint64_t)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Un8B</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sizeof(Un8B) must equal to sizeof(double)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// reader functions</comment>

<function><type><name>size_t</name></type> <name>tbufSkip</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>old</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbufRead</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufSkip</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufReadToBuffer</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// always using memcpy, leave optimization to compiler</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>tbufRead</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>tbufReadLength</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// maximum length is 65535, if larger length is required</comment>
  <comment type="line">// this function and the corresponding write function need to be</comment>
  <comment type="line">// revised.</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>l</name> <init>= <expr><call><name>tbufReadUint16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbufReadString</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>l</name> <init>= <expr><call><name>tbufReadLength</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufSkip</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ret</name><index>[<expr><name>l</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>tbufReadToString</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>tbufReadString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbufReadBinary</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>l</name> <init>= <expr><call><name>tbufReadLength</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufSkip</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>tbufReadToBinary</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>tbufReadBinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tbufReadBool</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name></type> <name>tbufReadChar</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>tbufReadInt8</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>tbufReadUint8</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>tbufReadInt16</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator><call><name>ntohs</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>tbufReadUint16</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>ntohs</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tbufReadInt32</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>tbufReadUint32</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>ntohl</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>tbufReadInt64</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>htobe64</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">// TODO: ntohll</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>tbufReadUint64</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>htobe64</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">// TODO: ntohll</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>tbufReadFloat</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Un4B</name></type> <name>_un</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_un</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>_un</name><operator>.</operator><name>ui</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>_un</name><operator>.</operator><name>ui</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>_un</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>tbufReadDouble</name><parameter_list>(<parameter><decl><type><name>SBufferReader</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Un8B</name></type> <name>_un</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tbufReadToBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_un</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>_un</name><operator>.</operator><name>ull</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>_un</name><operator>.</operator><name>ull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>_un</name><operator>.</operator><name>d</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// writer functions</comment>

<function><type><name>void</name></type> <name>tbufCloseWriter</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  (*buf-&gt;allocator)( buf-&gt;data, 0 );  // potential memory leak.</comment>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufEnsureCapacity</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nsize</name> <init>= <expr><name>size</name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>data</name> <init>= <expr><call>(<modifier>*</modifier><name><name>buf</name><operator>-&gt;</operator><name>allocator</name></name>)<argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// TODO: the exception should be thrown by the allocator function</comment>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>nsize</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>tbufReserve</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tbufEnsureCapacity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>old</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>tbufGetData</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>takeOver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>takeOver</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWrite</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tbufEnsureCapacity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteAt</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// this function can only be called to fill the gap on previous writes,</comment>
  <comment type="line">// so 'pos + size &lt;= buf-&gt;pos' must be true</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <name>size</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tbufWriteLength</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// maximum length is 65535, if larger length is required</comment>
  <comment type="line">// this function and the corresponding read function need to be</comment>
  <comment type="line">// revised.</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tbufWriteUint16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteStringLen</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tbufWriteLength</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tbufWriteChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteString</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tbufWriteStringLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteBinary</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tbufWriteLength</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteBool</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteBoolAt</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteChar</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteCharAt</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteInt8</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteInt8At</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteUint8</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteUint8At</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteInt16</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>htons</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteInt16At</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>htons</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteUint16</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteUint16At</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteInt32</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteInt32At</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteUint32</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteUint32At</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteInt64</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>htobe64</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteInt64At</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>htobe64</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteUint64</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteUint64At</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteFloat</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Un4B</name></type> <name>_un</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>_un</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>_un</name><operator>.</operator><name>ui</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>_un</name><operator>.</operator><name>ui</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_un</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteFloatAt</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Un4B</name></type> <name>_un</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>_un</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>_un</name><operator>.</operator><name>ui</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>_un</name><operator>.</operator><name>ui</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_un</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteDouble</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Un8B</name></type> <name>_un</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>_un</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>_un</name><operator>.</operator><name>ull</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>_un</name><operator>.</operator><name>ull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_un</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tbufWriteDoubleAt</name><parameter_list>(<parameter><decl><type><name>SBufferWriter</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Un8B</name></type> <name>_un</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>_un</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>_un</name><operator>.</operator><name>ull</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>_un</name><operator>.</operator><name>ull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tbufWriteAt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_un</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
