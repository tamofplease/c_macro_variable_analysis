<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tskiplist.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tskiplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>            <name>initForwardBackwardPtr</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSkipListNode</name>     <modifier>*</modifier></type><name>getPriorNode</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCur</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>tSkipListRemoveNodeImpl</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>tSkipListCorrectLevel</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSkipListIterator</name> <modifier>*</modifier></type><name>doCreateSkipListIterator</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tSkipListDoInsert</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>direction</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isForward</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>tSkipListGetPosToPut</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>backward</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSkipListNode</name> <modifier>*</modifier></type><name>tSkipListNewNode</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tSkipListFreeNode</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>taosMemoryFreeClear((n))</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>SSkipListNode</name> <modifier>*</modifier></type><name>tSkipListPutImpl</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>direction</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isForward</name></decl></parameter>,
                                       <parameter><decl><type><name>bool</name></type> <name>hasDup</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tSkipListWLock</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tSkipListRLock</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tSkipListUnlock</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>getSkipListRandLevel</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>SSkipList</name> <modifier>*</modifier></type><name>tSkipListCreate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>maxLevel</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>comparFn</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>,
                           <parameter><decl><type><name>__sl_key_fn_t</name></type> <name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name> <init>= <expr><operator>(</operator><name>SSkipList</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSkipList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSkipList</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>maxLevel</name> <operator>&gt;</operator> <name>MAX_SKIP_LIST_LEVEL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>maxLevel</name> <operator>=</operator> <name>MAX_SKIP_LIST_LEVEL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name> <operator>=</operator> <name>maxLevel</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>keyType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>keyLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>keyFn</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>taosRand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
  <comment type="line">// the function getkeycomparfunc is defined in common</comment>
  if (comparFn == NULL) {
    pSkipList-&gt;comparFn = getKeyComparFunc(keyType, TSDB_ORDER_ASC);
  } else {
    pSkipList-&gt;comparFn = comparFn;
  }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name> <operator>=</operator> <name>comparFn</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><call><name>initForwardBackwardPtr</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tSkipListDestroy</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SL_IS_THREAD_SAFE</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <operator>(</operator><name>TdThreadRwlock</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdThreadRwlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tSkipListDestroy</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosThreadRwlockInit</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tSkipListDestroy</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosSeedRand</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SKIP_LIST_RECORD_PERFORMANCE</name></expr></cpp:if>
  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>nTotalMemSize</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSkipList</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>pSkipList</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tSkipListDestroy</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSkipList</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tSkipListWLock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pNode</name> <operator>!=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pTemp</name> <init>= <expr><name>pNode</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tSkipListFreeNode</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadRwlockDestroy</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSkipListFreeNode</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSkipListFreeNode</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>tSkipListPut</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSkipList</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name><name>backward</name><index>[<expr><name>MAX_SKIP_LIST_LEVEL</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tSkipListWLock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>hasDup</name> <init>= <expr><call><name>tSkipListGetPosToPut</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>tSkipListPutImpl</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>hasDup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tSkipListPutBatchByIter</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>iter_next_fn_t</name></type> <name>iterate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name><name>backward</name><index>[<expr><name>MAX_SKIP_LIST_LEVEL</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name><name>forward</name><index>[<expr><name>MAX_SKIP_LIST_LEVEL</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>hasDup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>          <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>          <modifier>*</modifier></type><name>pDataKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>compare</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tSkipListWLock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><call><name>iterate</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// backward to put the first data</comment>
  <expr_stmt><expr><name>hasDup</name> <operator>=</operator> <call><name>tSkipListGetPosToPut</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tSkipListPutImpl</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>hasDup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>forward</name><index>[<expr><name>level</name></expr>]</index></name> <operator>=</operator> <call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name><name>backward</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// forward to put the rest of data</comment>
  <while>while <condition>(<expr><operator>(</operator><name>pData</name> <operator>=</operator> <call><name>iterate</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pDataKey</name> <operator>=</operator> <call><name><name>pSkipList</name><operator>-&gt;</operator><name>keyFn</name></name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hasDup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="line">// Compare max key</comment>
    <expr_stmt><expr><name>pKey</name> <operator>=</operator> <call><name>SL_GET_MAX_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name><argument_list>(<argument><expr><name>pDataKey</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>compare</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>px</name> <init>= <expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
          <comment type="line">// set new px</comment>
          <if_stmt><if>if <condition>(<expr><name><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>px</name> <operator>==</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name> <operator>||</operator>
                <call><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name><argument_list>(<argument><expr><call><name>SL_GET_NODE_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name><name>forward</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SL_GET_NODE_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>px</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>px</name> <operator>=</operator> <name><name>forward</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>

          <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>pKey</name> <operator>=</operator> <call><name>SL_GET_NODE_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>pDataKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>compare</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <break>break;</break>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name>compare</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasDup</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hasDup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
              <expr_stmt><expr><name>px</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>forward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>px</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>tSkipListPutImpl</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>forward</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>hasDup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>tSkipListRemove</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>SSkipListKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tSkipListWLock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><call><name>getPriorNode</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>SL_GET_NODE_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tSkipListRemoveNodeImpl</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tSkipListCorrectLevel</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name> <modifier>*</modifier></type><name>tSkipListGet</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>SSkipListKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tSkipListRLock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><call><name>getPriorNode</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>SL_GET_NODE_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>sa</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tSkipListRemoveNode</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tSkipListWLock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSkipListRemoveNodeImpl</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSkipListCorrectLevel</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SSkipListIterator</name> <modifier>*</modifier></type><name>tSkipListCreateIter</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSkipList</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>doCreateSkipListIterator</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSkipListIterator</name> <modifier>*</modifier></type><name>tSkipListCreateIterFromVal</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name> <operator>||</operator> <name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSkipList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSkipListIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>doCreateSkipListIterator</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>iter</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSkipListRLock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>getPriorNode</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tSkipListIterNext</name><parameter_list>(<parameter><decl><type><name>SSkipListIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>pSkipList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>pSkipList</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tSkipListRLock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// no data in the skip list</comment>
    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name> <operator>||</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// a new node is inserted into between iter-&gt;cur and iter-&gt;next, ignore it</comment>
    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>step</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// a new node is inserted into between iter-&gt;cur and iter-&gt;next, ignore it</comment>
    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>step</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tSkipListUnlock</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>tSkipListIterGet</name><parameter_list>(<parameter><decl><type><name>SSkipListIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name> <operator>||</operator> <name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tSkipListDestroyIter</name><parameter_list>(<parameter><decl><type><name>SSkipListIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tSkipListPrint</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>nlevel</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSkipList</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <name>nlevel</name> <operator>||</operator> <name>nlevel</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><name>nlevel</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>SL_GET_NODE_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%d: %d\n"</literal></expr></argument>, <argument><expr><name>id</name><operator>++</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%d: %"</literal> <name>PRId64</name> <literal type="string">" \n"</literal></expr></argument>, <argument><expr><name>id</name><operator>++</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%d: %s \n"</literal></expr></argument>, <argument><expr><name>id</name><operator>++</operator></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%d: %lf \n"</literal></expr></argument>, <argument><expr><name>id</name><operator>++</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>SL_GET_NODE_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nlevel</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tSkipListDoInsert</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>direction</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isForward</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>direction</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>isForward</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSkipListIterator</name> <modifier>*</modifier></type><name>doCreateSkipListIterator</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSkipListIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSkipListIterator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>pSkipList</name></name> <operator>=</operator> <name>pSkipList</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tSkipListWLock</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tSkipListRLock</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tSkipListUnlock</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tSkipListGetPosToPut</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>backward</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>compare</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>hasDupKey</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pDataKey</name> <init>= <expr><call><name><name>pSkipList</name><operator>-&gt;</operator><name>keyFn</name></name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>backward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Compare max key</comment>
    <expr_stmt><expr><name>pKey</name> <operator>=</operator> <call><name>SL_GET_MAX_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name><argument_list>(<argument><expr><name>pDataKey</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>compare</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>backward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <return>return <expr><operator>(</operator><name>compare</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Compare min key</comment>
    <expr_stmt><expr><name>pKey</name> <operator>=</operator> <call><name>SL_GET_MIN_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name><argument_list>(<argument><expr><name>pDataKey</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>compare</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>backward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <return>return <expr><operator>(</operator><name>compare</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>px</name> <init>= <expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pKey</name> <operator>=</operator> <call><name>SL_GET_NODE_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>pDataKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>compare</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>compare</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasDupKey</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hasDupKey</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>px</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>backward</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>px</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>hasDupKey</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tSkipListRemoveNodeImpl</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>dupMode</name> <init>= <expr><call><name>SL_DUP_MODE</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dupMode</name> <operator>!=</operator> <name>SL_DISCARD_DUP_KEY</name> <operator>&amp;&amp;</operator> <name>dupMode</name> <operator>!=</operator> <name>SL_UPDATE_DUP_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tSkipListFreeNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Function must be called after calling tSkipListRemoveNodeImpl() function</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tSkipListCorrectLevel</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
         <call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>UNUSED_FUNC</name> <specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>recordNodeEachLevel</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>,
                                                         <parameter><decl><type><name>int32_t</name></type>    <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// record link count in each level</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SKIP_LIST_RECORD_PERFORMANCE</name></expr></cpp:if>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>level</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>nLevelNodeCnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>UNUSED_FUNC</name> <specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>removeNodeEachLevel</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SKIP_LIST_RECORD_PERFORMANCE</name></expr></cpp:if>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>level</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>nLevelNodeCnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>getSkipListNodeRandomHeight</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>factor</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <while>while <condition>(<expr><operator>(</operator><call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>factor</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <while>while <condition>(<expr><operator>(</operator><call><name>taosRandR</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pSkipList</name><operator>-&gt;</operator><name>seed</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>%</operator> <name>factor</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></while>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>getSkipListRandLevel</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>getSkipListNodeRandomHeight</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>level</name> <operator>&lt;=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>level</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// when order is TSDB_ORDER_ASC, return the last node with key less than val</comment>
<comment type="line">// when order is TSDB_ORDER_DESC, return the first node with key large than val</comment>
<function><type><specifier>static</specifier> <name>SSkipListNode</name> <modifier>*</modifier></type><name>getPriorNode</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>__compar_fn_t</name></type>  <name>comparFn</name> <init>= <expr><name><name>pSkipList</name><operator>-&gt;</operator><name>comparFn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pCur</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>SL_GET_NODE_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>comparFn</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>pCur</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pSkipList</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>SL_GET_NODE_KEY</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>comparFn</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>pCur</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initForwardBackwardPtr</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>maxLevel</name> <init>= <expr><name><name>pSkipList</name><operator>-&gt;</operator><name>maxLevel</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// head info</comment>
  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name> <operator>=</operator> <call><name>tSkipListNewNode</name><argument_list>(<argument><expr><name>maxLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// tail info</comment>
  <expr_stmt><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name> <operator>=</operator> <call><name>tSkipListNewNode</name><argument_list>(<argument><expr><name>maxLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tSkipListFreeNode</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxLevel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name><name>pSkipList</name><operator>-&gt;</operator><name>pTail</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>pSkipList</name><operator>-&gt;</operator><name>pHead</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSkipListNode</name> <modifier>*</modifier></type><name>tSkipListNewNode</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSkipListNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSkipListNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>level</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><operator>(</operator><name>SSkipListNode</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSkipListNode</name> <modifier>*</modifier></type><name>tSkipListPutImpl</name><parameter_list>(<parameter><decl><type><name>SSkipList</name> <modifier>*</modifier></type><name>pSkipList</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>SSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>direction</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isForward</name></decl></parameter>,
                                       <parameter><decl><type><name>bool</name></type> <name>hasDup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type>        <name>dupMode</name> <init>= <expr><call><name>SL_DUP_MODE</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSkipListNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>hasDup</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>dupMode</name> <operator>!=</operator> <name>SL_ALLOW_DUP_KEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>dupMode</name> <operator>==</operator> <name>SL_UPDATE_DUP_KEY</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>isForward</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>SL_NODE_GET_FORWARD_POINTER</name><argument_list>(<argument><expr><name><name>direction</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>SL_NODE_GET_BACKWARD_POINTER</name><argument_list>(<argument><expr><name><name>direction</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>pData</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>tSkipListNewNode</name><argument_list>(<argument><expr><call><name>getSkipListRandLevel</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tSkipListDoInsert</name><argument_list>(<argument><expr><name>pSkipList</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>isForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
