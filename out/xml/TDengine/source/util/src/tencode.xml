<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tencode.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tencode.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112LL</literal></expr></cpp:if>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sizeof(float) must equal to sizeof(uint32_t)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sizeof(double) must equal to sizeof(uint64_t)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>SEncoderNode</name> <block>{
  <decl_stmt><decl><type><name>SEncoderNode</name><modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type>      <name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>pos</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>SDecoderNode</name> <block>{
  <decl_stmt><decl><type><name>SDecoderNode</name><modifier>*</modifier></type> <name>pNext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type>      <name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>pos</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>tEncoderInit</name><parameter_list>(<parameter><decl><type><name>SEncoder</name><modifier>*</modifier></type> <name>pEncoder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>mList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEncoder</name><operator>-&gt;</operator><name>eStack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tEncoderClear</name><parameter_list>(<parameter><decl><type><name>SEncoder</name><modifier>*</modifier></type> <name>pCoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>SCoderMem</name><modifier>*</modifier></type> <name>pMem</name> <init>= <expr><name><name>pCoder</name><operator>-&gt;</operator><name>mList</name></name></expr></init></decl>;</init> <condition><expr><name>pMem</name></expr>;</condition> <incr><expr><name>pMem</name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>mList</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>mList</name></name> <operator>=</operator> <name><name>pMem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCoder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tDecoderInit</name><parameter_list>(<parameter><decl><type><name>SDecoder</name><modifier>*</modifier></type> <name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>mList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>dStack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tDecoderClear</name><parameter_list>(<parameter><decl><type><name>SDecoder</name><modifier>*</modifier></type> <name>pCoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>SCoderMem</name><modifier>*</modifier></type> <name>pMem</name> <init>= <expr><name><name>pCoder</name><operator>-&gt;</operator><name>mList</name></name></expr></init></decl>;</init> <condition><expr><name>pMem</name></expr>;</condition> <incr><expr><name>pMem</name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>mList</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>mList</name></name> <operator>=</operator> <name><name>pMem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCoder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tStartEncode</name><parameter_list>(<parameter><decl><type><name>SEncoder</name><modifier>*</modifier></type> <name>pCoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEncoderNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCoder</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCoder</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>tEncoderMalloc</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>eStack</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>eStack</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tEndEncode</name><parameter_list>(<parameter><decl><type><name>SEncoder</name><modifier>*</modifier></type> <name>pCoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEncoderNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>len</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCoder</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>eStack</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>eStack</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TD_CODER_MOVE_POS</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tStartDecode</name><parameter_list>(<parameter><decl><type><name>SDecoder</name><modifier>*</modifier></type> <name>pCoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDecoderNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>len</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>tDecoderMalloc</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>dStack</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>dStack</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tEndDecode</name><parameter_list>(<parameter><decl><type><name>SDecoder</name><modifier>*</modifier></type> <name>pCoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDecoderNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>dStack</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>dStack</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>pCoder</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCoder</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
