<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tidpool.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tidpool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosInitIdPool</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>maxId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>id_pool_t</name> <modifier>*</modifier></type><name>pIdPool</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id_pool_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pIdPool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>maxId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pIdPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name> <operator>=</operator> <name>maxId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>numOfFree</name></name> <operator>=</operator> <name>maxId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeSlot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"pool:%p is setup, maxId:%d"</literal></expr></argument>, <argument><expr><name>pIdPool</name></expr></argument>, <argument><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pIdPool</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosAllocateId</name><parameter_list>(<parameter><decl><type><name>id_pool_t</name> <modifier>*</modifier></type><name>pIdPool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pIdPool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>slot</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pIdPool</name><operator>-&gt;</operator><name>numOfFree</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>slot</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name><name>pIdPool</name><operator>-&gt;</operator><name>freeSlot</name></name><operator>)</operator> <operator>%</operator> <name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name><index>[<expr><name>slot</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeSlot</name></name> <operator>=</operator> <name>slot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>numOfFree</name></name><operator>--</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>slot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosFreeId</name><parameter_list>(<parameter><decl><type><name>id_pool_t</name> <modifier>*</modifier></type><name>pIdPool</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pIdPool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>slot</name> <init>= <expr><operator>(</operator><name>id</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name><index>[<expr><name>slot</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>numOfFree</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosIdPoolCleanUp</name><parameter_list>(<parameter><decl><type><name>id_pool_t</name> <modifier>*</modifier></type><name>pIdPool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pIdPool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"pool:%p is cleaned"</literal></expr></argument>, <argument><expr><name>pIdPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pIdPool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id_pool_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pIdPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosIdPoolNumOfUsed</name><parameter_list>(<parameter><decl><type><name>id_pool_t</name> <modifier>*</modifier></type><name>pIdPool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name> <operator>-</operator> <name><name>pIdPool</name><operator>-&gt;</operator><name>numOfFree</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosIdPoolMarkStatus</name><parameter_list>(<parameter><decl><type><name>id_pool_t</name> <modifier>*</modifier></type><name>pIdPool</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>slot</name> <init>= <expr><operator>(</operator><name>id</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name><index>[<expr><name>slot</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>numOfFree</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosUpdateIdPool</name><parameter_list>(<parameter><decl><type><name>id_pool_t</name> <modifier>*</modifier></type><name>pIdPool</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>maxId</name> <operator>&lt;=</operator> <name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>idList</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>maxId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>idList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>idList</name></expr></argument>, <argument><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>numOfFree</name></name> <operator>+=</operator> <operator>(</operator><name>maxId</name> <operator>-</operator> <name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name> <operator>=</operator> <name>maxId</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>oldIdList</name> <init>= <expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pIdPool</name><operator>-&gt;</operator><name>freeList</name></name> <operator>=</operator> <name>idList</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>oldIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosIdPoolMaxSize</name><parameter_list>(<parameter><decl><type><name>id_pool_t</name> <modifier>*</modifier></type><name>pIdPool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><name><name>pIdPool</name><operator>-&gt;</operator><name>maxId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdPool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function></unit>
