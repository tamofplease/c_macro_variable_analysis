<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/thash.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<comment type="line">// the add ref count operation may trigger the warning if the reference count is greater than the MAX_WARNING_REF_COUNT</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_WARNING_REF_COUNT</name></cpp:macro>    <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_MAX_CAPACITY</name></cpp:macro>        <cpp:value>(1024 * 1024 * 1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_DEFAULT_LOAD_FACTOR</name></cpp:macro> <cpp:value>(0.75)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_INDEX</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>((v) &amp; ((c)-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_NEED_RESIZE</name><parameter_list>(<parameter><type><name>_h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_h)-&gt;size &gt;= (_h)-&gt;capacity * HASH_DEFAULT_LOAD_FACTOR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_HASH_NODE_KEY</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((char *)(_n) + sizeof(SHashNode) + (_n)-&gt;dataLen)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_HASH_NODE_DATA</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char *)(_n) + sizeof(SHashNode))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_HASH_PNODE</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>((SHashNode *)((char *)(_n) - sizeof(SHashNode)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_HASH_NODE</name><parameter_list>(<parameter><type><name>_fp</name></type></parameter>, <parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro>      \
  <cpp:value>do {                               \
    if (_fp != NULL) {               \
      (_fp)(GET_HASH_NODE_DATA(_n)); \
    }                                \
    taosMemoryFreeClear(_n);         \
  } while (0);</cpp:value></cpp:define>

<struct>struct <name>SHashNode</name> <block>{
  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>   <name>hashVal</name></decl>;</decl_stmt>   <comment type="line">// the hash value of key</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type>   <name>dataLen</name></decl>;</decl_stmt>   <comment type="line">// length of data</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type>   <name>keyLen</name></decl>;</decl_stmt>    <comment type="line">// length of the key</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type>   <name>refCount</name></decl>;</decl_stmt>  <comment type="line">// reference count</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>     <name>removed</name></decl>;</decl_stmt>   <comment type="line">// flag to indicate removed</comment>
  <decl_stmt><decl><type><name>char</name></type>       <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>SHashEntry</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name></decl>;</decl_stmt>    <comment type="line">// number of elements in current entry</comment>
  <decl_stmt><decl><type><name>SRWLatch</name></type>   <name>latch</name></decl>;</decl_stmt>  <comment type="line">// entry latch</comment>
  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>SHashEntry</name>;</typedef>

<struct>struct <name>SHashObj</name> <block>{
  <decl_stmt><decl><type><name>SHashEntry</name>      <modifier>*</modifier><modifier>*</modifier></type><name>hashList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>            <name>capacity</name></decl>;</decl_stmt>      <comment type="line">// number of slots</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>           <name>size</name></decl>;</decl_stmt>          <comment type="line">// number of elements in hash table</comment>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type>        <name>hashFp</name></decl>;</decl_stmt>        <comment type="line">// hash function</comment>
  <decl_stmt><decl><type><name>_equal_fn_t</name></type>       <name>equalFp</name></decl>;</decl_stmt>       <comment type="line">// equal function</comment>
  <decl_stmt><decl><type><name>_hash_free_fn_t</name></type>   <name>freeFp</name></decl>;</decl_stmt>        <comment type="line">// hash node free callback function</comment>
  <decl_stmt><decl><type><name>SRWLatch</name></type>          <name>lock</name></decl>;</decl_stmt>          <comment type="line">// read-write spin lock</comment>
  <decl_stmt><decl><type><name>SHashLockTypeE</name></type>    <name>type</name></decl>;</decl_stmt>          <comment type="line">// lock type</comment>
  <decl_stmt><decl><type><name>bool</name></type>              <name>enableUpdate</name></decl>;</decl_stmt>  <comment type="line">// enable update</comment>
  <decl_stmt><decl><type><name>SArray</name>           <modifier>*</modifier></type><name>pMemBlock</name></decl>;</decl_stmt>     <comment type="line">// memory block allocated for SHashEntry</comment>
  <decl_stmt><decl><type><name>_hash_before_fn_t</name></type> <name>callbackFp</name></decl>;</decl_stmt>    <comment type="line">// function invoked before return the value to caller</comment>
<comment type="line">//  int64_t           compTimes;</comment>
}</block>;</struct>

<comment type="block">/*
 * Function definition
 */</comment>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>taosHashWLock</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HASH_NO_LOCK</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>taosHashWUnlock</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HASH_NO_LOCK</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>taosHashRLock</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HASH_NO_LOCK</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>taosHashRUnlock</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HASH_NO_LOCK</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>taosHashEntryWLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HASH_NO_LOCK</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>taosHashEntryWUnlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HASH_NO_LOCK</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>taosHashEntryRLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HASH_NO_LOCK</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>taosHashEntryRUnlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HASH_NO_LOCK</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>taosHashCapacity</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>length</name> <operator>&lt;</operator> <name>HASH_MAX_CAPACITY</name></expr> ?</condition><then> <expr><name>length</name></expr> </then><else>: <expr><name>HASH_MAX_CAPACITY</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1u</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>SHashNode</name> <modifier>*</modifier></type><name>doSearchInEntryList</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint32_t</name></type> <name>hashVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//atomic_add_fetch_64(&amp;pHashObj-&gt;compTimes, 1);</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>==</operator> <name>keyLen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>equalFp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><call><name>GET_HASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call><operator>,</operator> <name>key</name><operator>,</operator> <name>keyLen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
        <name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>hashVal</name></name> <operator>==</operator> <name>hashVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * resize the hash list if the threshold is reached
 *
 * @param pHashObj
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>taosHashTableResize</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * allocate and initialize a hash node
 *
 * @param key      key of object for hash, usually a null-terminated string
 * @param keyLen   length of key
 * @param pData    data to be stored in hash node
 * @param dsize    size of data
 * @return         SHashNode
 */</comment>
<function_decl><type><specifier>static</specifier> <name>SHashNode</name> <modifier>*</modifier></type><name>doCreateHashNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dsize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hashVal</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * update the hash node
 *
 * @param pHashObj   hash table object
 * @param pe         hash table entry to operate on
 * @param prev       previous node
 * @param pNode      the old node with requested key
 * @param pNewNode   the new node with requested key
 */</comment>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>doUpdateHashNode</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>,
                                          <parameter><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNewNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>==</operator> <name><name>pNewNode</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_sub_fetch_16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNewNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNewNode</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>refCount</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>pNewNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FREE_HASH_NODE</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>freeFp</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * insert the hash node at the front of the linked list
 *
 * @param pHashObj   hash table object
 * @param pNode      the old node with requested key
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pushfrontNodeInEntryList</name><parameter_list>(<parameter><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>, <parameter><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Check whether the hash table is empty or not.
 *
 * @param pHashObj the hash table object
 * @return if the hash table is empty or not
 */</comment>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>taosHashTableEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 *
 * @param pHashObj
 * @return
 */</comment>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>taosHashTableEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>SHashObj</name> <modifier>*</modifier></type><name>taosHashInit</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>_hash_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>, <parameter><decl><type><name>SHashLockTypeE</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>capacity</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>capacity</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name> <init>= <expr><operator>(</operator><name>SHashObj</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHashObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// the max slots is not defined by user</comment>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <call><name>taosHashCapacity</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>equalFp</name></name> <operator>=</operator> <name>memcmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFp</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>enableUpdate</name></name> <operator>=</operator> <name>update</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>freeFp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>callbackFp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name> <operator>=</operator> <operator>(</operator><name>SHashEntry</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pMemBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pMemBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHashEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pMemBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHashEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>latch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pMemBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pHashObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosHashSetEqualFp</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>_equal_fn_t</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>equalFp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosHashSetFreeFp</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>_hash_free_fn_t</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>freeFp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosHashGetSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosHashPut</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>keyLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PTR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashVal</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFp</name></name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// need the resize process, write lock applied</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HASH_NEED_RESIZE</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashWLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashTableResize</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashWUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// disable resize</comment>
  <expr_stmt><expr><call><name>taosHashRLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type>    <name>slot</name> <init>= <expr><call><name>HASH_INDEX</name><argument_list>(<argument><expr><name>hashVal</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosHashEntryWLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (pe-&gt;num &gt; 0) {
    assert(pNode != NULL);
  } else {
    assert(pNode == NULL);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>==</operator> <name>keyLen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>equalFp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><call><name>GET_HASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call><operator>,</operator> <name>key</name><operator>,</operator> <name>keyLen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>hashVal</name></name> <operator>==</operator> <name>hashVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// no data in hash table with the specified key, add it into hash table</comment>
    <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNewNode</name> <init>= <expr><call><name>doCreateHashNode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>hashVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pNewNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pushfrontNodeInEntryList</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>pNewNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosHashEntryWUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// enable resize</comment>
    <expr_stmt><expr><call><name>taosHashRUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// not support the update operation, return error</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>enableUpdate</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNewNode</name> <init>= <expr><call><name>doCreateHashNode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>hashVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pNewNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>doUpdateHashNode</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pNewNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_DUP_KEY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>taosHashEntryWUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// enable resize</comment>
    <expr_stmt><expr><call><name>taosHashRUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>enableUpdate</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">2</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>taosHashGetImpl</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>addRef</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosHashGet</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>taosHashGetImpl</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosHashGetDup</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>destBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <comment type="block">/*char* p = */</comment> <expr_stmt><expr><call><name>taosHashGetImpl</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>destBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>terrno</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosHashGetDup_m</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>destBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/*char* p = */</comment> <expr_stmt><expr><call><name>taosHashGetImpl</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>destBuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>terrno</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosHashGetImpl</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>addRef</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taosHashTableEmpty</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>keyLen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashVal</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFp</name></name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// only add the read lock to disable the resize process</comment>
  <expr_stmt><expr><call><name>taosHashRLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>slot</name> <init>= <expr><call><name>HASH_INDEX</name><argument_list>(<argument><expr><name>hashVal</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// no data, return directly</comment>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashRUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosHashEntryRLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (pe-&gt;num &gt; 0) {
    assert(pe-&gt;next != NULL);
  } else {
    assert(pe-&gt;next == NULL);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><call><name>doSearchInEntryList</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>hashVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>callbackFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pHashObj</name><operator>-&gt;</operator><name>callbackFp</name></name><argument_list>(<argument><expr><call><name>GET_HASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>size</name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>addRef</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_add_fetch_16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>, <argument><expr><call><name>GET_HASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>GET_HASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashEntryRUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashRUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosHashRemove</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taosHashTableEmpty</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>keyLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashVal</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFp</name></name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// disable the resize process</comment>
  <expr_stmt><expr><call><name>taosHashRLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>slot</name> <init>= <expr><call><name>HASH_INDEX</name><argument_list>(<argument><expr><name>hashVal</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosHashEntryWLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// double check after locked</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosHashEntryWUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type>        <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>prevNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>==</operator> <name>keyLen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>equalFp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><call><name>GET_HASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call><operator>,</operator> <name>key</name><operator>,</operator> <name>keyLen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
        <name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// it is found</comment>

      <expr_stmt><expr><call><name>atomic_sub_fetch_16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>refCount</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>prevNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>prevNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>prevNode</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>prevNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>num</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FREE_HASH_NODE</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>freeFp</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>prevNode</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashEntryWUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashRUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosHashClear</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNode</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosHashWLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pEntry</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FREE_HASH_NODE</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>freeFp</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashWUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// the input paras should be SHashObj **, so the origin input will be set by taosMemoryFreeClear(*pHashObj)</comment>
<function><type><name>void</name></type> <name>taosHashCleanup</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// destroy mem block</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>memBlock</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pMemBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>memBlock</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pMemBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pMemBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// for profile only</comment>
<function><type><name>int32_t</name></type> <name>taosHashGetMaxOverflowLinkLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taosHashTableEmpty</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosHashRLock</name><argument_list>(<argument><expr><operator>(</operator><name>SHashObj</name> <operator>*</operator><operator>)</operator><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pEntry</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// fine grain per entry lock is not held since this is used</comment>
    <comment type="line">// for profiling only and doesn't need an accurate count.</comment>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosHashRUnlock</name><argument_list>(<argument><expr><operator>(</operator><name>SHashObj</name> <operator>*</operator><operator>)</operator><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosHashTableResize</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASH_NEED_RESIZE</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>newCapacity</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1u</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>newCapacity</name> <operator>&gt;</operator> <name>HASH_MAX_CAPACITY</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    uDebug("current capacity:%zu, maximum capacity:%d, no resize applied due to limitation is reached",</comment>
    <comment type="line">//           pHashObj-&gt;capacity, HASH_MAX_CAPACITY);</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNewEntryList</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHashEntry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>newCapacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNewEntryList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    uDebug("cache resize failed due to out of memory, capacity remain:%zu", pHashObj-&gt;capacity);</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name> <operator>=</operator> <name>pNewEntryList</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>inc</name> <init>= <expr><name>newCapacity</name> <operator>-</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>  <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>inc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHashEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>inc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHashEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pMemBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>newCapacity</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHashNode</name>  <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHashNode</name>  <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHashNode</name>  <modifier>*</modifier></type><name>pPrev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>newIdx</name> <init>= <expr><call><name>HASH_INDEX</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>hashVal</name></name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>newIdx</name> <operator>!=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>num</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pPrev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pPrev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pNewEntry</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>newIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pushfrontNodeInEntryList</name><argument_list>(<argument><expr><name>pNewEntry</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pPrev</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>et</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">//  uDebug("hash table resize completed, new capacity:%d, load factor:%f, elapsed time:%fms",</comment>
  <comment type="line">//  (int32_t)pHashObj-&gt;capacity,</comment>
  <comment type="line">//         ((double)pHashObj-&gt;size) / pHashObj-&gt;capacity, (et - st) / 1000.0);</comment>
</block_content>}</block></function>

<function><type><name>SHashNode</name> <modifier>*</modifier></type><name>doCreateHashNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dsize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hashVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNewNode</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHashNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>keyLen</name> <operator>+</operator> <name>dsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNewNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>keyLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>hashVal</name></name> <operator>=</operator> <name>hashVal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>dsize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>refCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>removed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pData</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GET_HASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNewNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GET_HASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNewNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pNewNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pushfrontNodeInEntryList</name><parameter_list>(<parameter><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>, <parameter><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pNode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>taosHashGetMemSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SHashEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHashNode</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call> <operator>+</operator>
         <sizeof>sizeof<argument_list>(<argument><expr><name>SHashObj</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosHashGetKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>GET_HASH_PNODE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>keyLen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>keyLen</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>keyLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>GET_HASH_NODE_KEY</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// release the pNode, return next pNode, and lock the current entry</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>taosHashReleaseNode</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pOld</name> <init>= <expr><operator>(</operator><name>SHashNode</name> <operator>*</operator><operator>)</operator><call><name>GET_HASH_PNODE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>prevNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>slot</name> <operator>=</operator> <call><name>HASH_INDEX</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>hashVal</name></name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><operator>*</operator><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosHashEntryWLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>pOld</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>prevNode</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>atomic_sub_fetch_16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>refCount</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>prevNode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>prevNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pOld</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>prevNode</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>prevNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pOld</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>num</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FREE_HASH_NODE</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>freeFp</name></name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">//    uError("pNode:%p data:%p is not there!!!", pNode, p);</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosHashIterate</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type>   <name>slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// only add the read lock to disable the resize process</comment>
  <expr_stmt><expr><call><name>taosHashRLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHashNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>taosHashReleaseNode</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashEntryWUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>slot</name> <operator>=</operator> <name>slot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>slot</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>taosHashEntryWLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>taosHashEntryWUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*uint16_t prevRef = atomic_load_16(&amp;pNode-&gt;refCount);*/</comment>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>afterRef</name> <init>= <expr><call><name>atomic_add_fetch_16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    ASSERT(prevRef &lt; afterRef);

    <comment type="line">// the reference count value is overflow, which will cause the delete node operation immediately.</comment>
    if (prevRef &gt; afterRef) {
      uError("hash entry ref count overflow, prev ref:%d, current ref:%d", prevRef, afterRef);
      <comment type="line">// restore the value</comment>
      atomic_sub_fetch_16(&amp;pNode-&gt;refCount, 1);
      data = NULL;
    } else {
      data = GET_HASH_NODE_DATA(pNode);
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>GET_HASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>afterRef</name> <operator>&gt;=</operator> <name>MAX_WARNING_REF_COUNT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uWarn</name><argument_list>(<argument><expr><literal type="string">"hash entry ref count is abnormally high: %d"</literal></expr></argument>, <argument><expr><name>afterRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosHashEntryWUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashRUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosHashCancelIterate</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// only add the read lock to disable the resize process</comment>
  <expr_stmt><expr><call><name>taosHashRLock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>slot</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosHashReleaseNode</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHashEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosHashEntryWUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashRUnlock</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// TODO remove it</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>taosHashAcquire</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>taosHashGetImpl</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosHashRelease</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosHashGetCompTimes</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr> <comment type="block">/*atomic_load_64(&amp;pHashObj-&gt;compTimes)*/</comment>;</return> </block_content>}</block></function>
</unit>
