<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tlrucache.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlrucache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>SLRUEntry</name></name></type>      <name>SLRUEntry</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>SLRUEntryTable</name></name></type> <name>SLRUEntryTable</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>SLRUCacheShard</name></name></type> <name>SLRUCacheShard</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>SShardedCache</name></name></type>  <name>SShardedCache</name>;</typedef>

<enum>enum <block>{
  <decl><name>TAOS_LRU_IN_CACHE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,  <comment type="line">// Whether this entry is referenced by the hash table.</comment>

  <decl><name>TAOS_LRU_IS_HIGH_PRI</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,  <comment type="line">// Whether this entry is high priority entry.</comment>

  <decl><name>TAOS_LRU_IN_HIGH_PRI_POOL</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,  <comment type="line">// Whether this entry is in high-pri pool.</comment>

  <decl><name>TAOS_LRU_HAS_HIT</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,  <comment type="line">// Whether this entry has had any lookups (hits).</comment>
}</block>;</enum>

<struct>struct <name>SLRUEntry</name> <block>{
  <decl_stmt><decl><type><name>void</name>               <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>_taos_lru_deleter_t</name></type> <name>deleter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUEntry</name>          <modifier>*</modifier></type><name>nextHash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUEntry</name>          <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUEntry</name>          <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>              <name>totalCharge</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>              <name>keyLength</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>            <name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>            <name>refs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>             <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>                <name><name>keyData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_ENTRY_IN_CACHE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>((h)-&gt;flags &amp; TAOS_LRU_IN_CACHE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_ENTRY_IN_HIGH_POOL</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;flags &amp; TAOS_LRU_IN_HIGH_PRI_POOL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_ENTRY_IS_HIGH_PRI</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((h)-&gt;flags &amp; TAOS_LRU_IS_HIGH_PRI)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_ENTRY_HAS_HIT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>((h)-&gt;flags &amp; TAOS_LRU_HAS_HIT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_ENTRY_SET_IN_CACHE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>inCache</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                          \
    if (inCache) {                              \
      (h)-&gt;flags |= TAOS_LRU_IN_CACHE;          \
    } else {                                    \
      (h)-&gt;flags &amp;= ~TAOS_LRU_IN_CACHE;         \
    }                                           \
  } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_ENTRY_SET_IN_HIGH_POOL</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>inHigh</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                             \
    if (inHigh) {                                  \
      (h)-&gt;flags |= TAOS_LRU_IN_HIGH_PRI_POOL;     \
    } else {                                       \
      (h)-&gt;flags &amp;= ~TAOS_LRU_IN_HIGH_PRI_POOL;    \
    }                                              \
  } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_ENTRY_SET_PRIORITY</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>priority</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                           \
    if (priority == TAOS_LRU_PRIORITY_HIGH) {    \
      (h)-&gt;flags |= TAOS_LRU_IS_HIGH_PRI;        \
    } else {                                     \
      (h)-&gt;flags &amp;= ~TAOS_LRU_IS_HIGH_PRI;       \
    }                                            \
  } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_ENTRY_SET_HIT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;flags |= TAOS_LRU_HAS_HIT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_ENTRY_HAS_REFS</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;refs &gt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_ENTRY_REF</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(++(h)-&gt;refs)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>taosLRUEntryUnref</name><parameter_list>(<parameter><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>refs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>entry</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>refs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUEntryFree</name><parameter_list>(<parameter><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>refs</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>deleter</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>entry</name><operator>-&gt;</operator><name>deleter</name></name>)<argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>keyData</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>keyLength</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>_taos_lru_table_func_t</name>)<parameter_list>(<parameter><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>SLRUEntryTable</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>         <name>lengthBits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>    <name>elems</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>maxLengthBits</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>taosLRUEntryTableInit</name><parameter_list>(<parameter><decl><type><name>SLRUEntryTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxUpperHashBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>lengthBits</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>lengthBits</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLRUEntry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>table</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>maxLengthBits</name></name> <operator>=</operator> <name>maxUpperHashBits</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUEntryTableApply</name><parameter_list>(<parameter><decl><type><name>SLRUEntryTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>_taos_lru_table_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name>begin</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>nextHash</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>TAOS_LRU_ENTRY_IN_CACHE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>h</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUEntryTableFree</name><parameter_list>(<parameter><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TAOS_LRU_ENTRY_HAS_REFS</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUEntryFree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUEntryTableCleanup</name><parameter_list>(<parameter><decl><type><name>SLRUEntryTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosLRUEntryTableApply</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>taosLRUEntryTableFree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>lengthBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLRUEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>taosLRUEntryTableFindPtr</name><parameter_list>(<parameter><decl><type><name>SLRUEntryTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>hash</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>table</name><operator>-&gt;</operator><name>lengthBits</name></name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>entry</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>entry</name><operator>)</operator><operator>-&gt;</operator><name>hash</name></name> <operator>!=</operator> <name>hash</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>entry</name><operator>)</operator><operator>-&gt;</operator><name>keyData</name></name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>entry</name><operator>)</operator><operator>-&gt;</operator><name>nextHash</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUEntryTableResize</name><parameter_list>(<parameter><decl><type><name>SLRUEntryTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>lengthBits</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>lengthBits</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lengthBits</name> <operator>&gt;=</operator> <name><name>table</name><operator>-&gt;</operator><name>maxLengthBits</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>lengthBits</name> <operator>&gt;=</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type>    <name>oldLength</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>lengthBits</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>newLengthBits</name> <init>= <expr><name>lengthBits</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>newList</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>newLengthBits</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLRUEntry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>newList</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>oldLength</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SLRUEntry</name>  <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>nextHash</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type>    <name>hash</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>hash</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>&amp;</operator><name><name>newList</name><index>[<expr><name>hash</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>newLengthBits</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>nextHash</name></name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>entry</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>elems</name></name> <operator>==</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>newList</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>lengthBits</name></name> <operator>=</operator> <name>newLengthBits</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLRUEntry</name> <modifier>*</modifier></type><name>taosLRUEntryTableLookup</name><parameter_list>(<parameter><decl><type><name>SLRUEntryTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>*</operator><call><name>taosLRUEntryTableFindPtr</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLRUEntry</name> <modifier>*</modifier></type><name>taosLRUEntryTableInsert</name><parameter_list>(<parameter><decl><type><name>SLRUEntryTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>taosLRUEntryTableFindPtr</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>keyData</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>keyLength</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUEntry</name>  <modifier>*</modifier></type><name>old</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>nextHash</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>old</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>old</name><operator>-&gt;</operator><name>nextHash</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name><name>table</name><operator>-&gt;</operator><name>elems</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>elems</name></name> <operator>&gt;&gt;</operator> <name><name>table</name><operator>-&gt;</operator><name>lengthBits</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUEntryTableResize</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLRUEntry</name> <modifier>*</modifier></type><name>taosLRUEntryTableRemove</name><parameter_list>(<parameter><decl><type><name>SLRUEntryTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>taosLRUEntryTableFindPtr</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUEntry</name>  <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>*</operator><name>entry</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>nextHash</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name><name>table</name><operator>-&gt;</operator><name>elems</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>SLRUCacheShard</name> <block>{
  <decl_stmt><decl><type><name>size_t</name></type>         <name>capacity</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>         <name>highPriPoolUsage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>strictCapacity</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>         <name>highPriPoolRatio</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>         <name>highPriPoolCapacity</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUEntry</name></type>      <name>lru</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUEntry</name>     <modifier>*</modifier></type><name>lruLowPri</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUEntryTable</name></type> <name>table</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>         <name>usage</name></decl>;</decl_stmt>     <comment type="line">// Memory size for entries residing in the cache.</comment>
  <decl_stmt><decl><type><name>size_t</name></type>         <name>lruUsage</name></decl>;</decl_stmt>  <comment type="line">// Memory size for entries residing only in the LRU list.</comment>
  <decl_stmt><decl><type><name>TdThreadMutex</name></type>  <name>mutex</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_LRU_CACHE_SHARD_HASH32</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(MurmurHash3_32((key), (len)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUCacheShardMaintainPoolSize</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolUsage</name></name> <operator>&gt;</operator> <name><name>shard</name><operator>-&gt;</operator><name>highPriPoolCapacity</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name></name> <operator>=</operator> <name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_IN_HIGH_POOL</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolUsage</name></name> <operator>&gt;=</operator> <name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name><operator>-&gt;</operator><name>totalCharge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolUsage</name></name> <operator>-=</operator> <name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUCacheShardLRUInsert</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolRatio</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>TAOS_LRU_ENTRY_IS_HIGH_PRI</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TAOS_LRU_ENTRY_HAS_HIT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>lru</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>shard</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_IN_HIGH_POOL</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolUsage</name></name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosLRUCacheShardMaintainPoolSize</name><argument_list>(<argument><expr><name>shard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_IN_HIGH_POOL</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>lruUsage</name></name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUCacheShardLRURemove</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name></name> <operator>==</operator> <name>e</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>lruUsage</name></name> <operator>&gt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>lruUsage</name></name> <operator>-=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>TAOS_LRU_ENTRY_IN_HIGH_POOL</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolUsage</name></name> <operator>&gt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolUsage</name></name> <operator>-=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUCacheShardEvictLRU</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>charge</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>deleted</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>+</operator> <name>charge</name> <operator>&gt;</operator> <name><name>shard</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&amp;&amp;</operator> <name><name>shard</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>lru</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>shard</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>TAOS_LRU_ENTRY_IN_CACHE</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TAOS_LRU_ENTRY_HAS_REFS</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosLRUCacheShardLRURemove</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosLRUEntryTableRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>keyData</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>keyLength</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_IN_CACHE</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>&gt;=</operator> <name><name>old</name><operator>-&gt;</operator><name>totalCharge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>-=</operator> <name><name>old</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>deleted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUCacheShardSetCapacity</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>lastReferenceList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolCapacity</name></name> <operator>=</operator> <name>capacity</name> <operator>*</operator> <name><name>shard</name><operator>-&gt;</operator><name>highPriPoolRatio</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosLRUCacheShardEvictLRU</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lastReferenceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosLRUEntryFree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>taosLRUCacheShardInit</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>highPriPoolRatio</name></decl></parameter>,
                                 <parameter><decl><type><name>int</name></type> <name>maxUpperHashBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosLRUEntryTableInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>maxUpperHashBits</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolUsage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>strictCapacity</name></name> <operator>=</operator> <name>strict</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolRatio</name></name> <operator>=</operator> <name>highPriPoolRatio</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>highPriPoolCapacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>lruUsage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>lru</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>lru</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>lruLowPri</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>lru</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosLRUCacheShardSetCapacity</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUCacheShardCleanup</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosLRUEntryTableCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRUStatus</name></type> <name>taosLRUCacheShardInsertEntry</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>,
                                              <parameter><decl><type><name>bool</name></type> <name>freeOnFail</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LRUStatus</name></type> <name>status</name> <init>= <expr><name>TAOS_LRU_STATUS_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>   <modifier>*</modifier></type><name>lastReferenceList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosLRUCacheShardEvictLRU</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr></argument>, <argument><expr><name>lastReferenceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name> <operator>&gt;</operator> <name><name>shard</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>shard</name><operator>-&gt;</operator><name>strictCapacity</name></name> <operator>||</operator> <name>handle</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_IN_CACHE</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>freeOnFail</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TAOS_LRU_STATUS_INCOMPLETE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><call><name>taosLRUEntryTableInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>TAOS_LRU_STATUS_OK_OVERWRITTEN</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>TAOS_LRU_ENTRY_IN_CACHE</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_IN_CACHE</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TAOS_LRU_ENTRY_HAS_REFS</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosLRUCacheShardLRURemove</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>&gt;=</operator> <name><name>old</name><operator>-&gt;</operator><name>totalCharge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>-=</operator> <name><name>old</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheShardLRUInsert</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TAOS_LRU_ENTRY_HAS_REFS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_REF</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <operator>(</operator><name>LRUHandle</name> <operator>*</operator><operator>)</operator><name>e</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>taosLRUEntryFree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRUStatus</name></type> <name>taosLRUCacheShardInsert</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>,
                                         <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>charge</name></decl></parameter>, <parameter><decl><type><name>_taos_lru_deleter_t</name></type> <name>deleter</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>,
                                         <parameter><decl><type><name>LRUPriority</name></type> <name>priority</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLRUEntry</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TAOS_LRU_STATUS_FAIL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>deleter</name></name> <operator>=</operator> <name>deleter</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>keyLength</name></name> <operator>=</operator> <name>keyLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_IN_CACHE</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_PRIORITY</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>keyData</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO: e-&gt;CalcTotalCharge(charge, metadataChargePolicy);</comment>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name> <operator>=</operator> <name>charge</name></expr>;</expr_stmt>

  <return>return <expr><call><name>taosLRUCacheShardInsertEntry</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRUHandle</name> <modifier>*</modifier></type><name>taosLRUCacheShardLookup</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>taosLRUEntryTableLookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>TAOS_LRU_ENTRY_IN_CACHE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TAOS_LRU_ENTRY_HAS_REFS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheShardLRURemove</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_REF</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_HIT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>LRUHandle</name> <operator>*</operator><operator>)</operator><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUCacheShardErase</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>lastReference</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>taosLRUEntryTableRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>TAOS_LRU_ENTRY_IN_CACHE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_IN_CACHE</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TAOS_LRU_ENTRY_HAS_REFS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheShardLRURemove</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>&gt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>-=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastReference</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>lastReference</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUEntryFree</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUCacheShardEraseUnrefEntries</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>lastReferenceList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name><name>shard</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>lru</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>shard</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>TAOS_LRU_ENTRY_IN_CACHE</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TAOS_LRU_ENTRY_HAS_REFS</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosLRUCacheShardLRURemove</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosLRUEntryTableRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>keyData</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>keyLength</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_IN_CACHE</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>&gt;=</operator> <name><name>old</name><operator>-&gt;</operator><name>totalCharge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>-=</operator> <name><name>old</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>taosLRUEntryFree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>lastReferenceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>taosLRUCacheShardRef</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>SLRUEntry</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>TAOS_LRU_ENTRY_HAS_REFS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_REF</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>taosLRUCacheShardRelease</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eraseIfLastRef</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SLRUEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>SLRUEntry</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>       <name>lastReference</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>lastReference</name> <operator>=</operator> <call><name>taosLRUEntryUnref</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lastReference</name> <operator>&amp;&amp;</operator> <call><name>TAOS_LRU_ENTRY_IN_CACHE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>&gt;</operator> <name><name>shard</name><operator>-&gt;</operator><name>capacity</name></name> <operator>||</operator> <name>eraseIfLastRef</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>next</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>lru</name></name> <operator>||</operator> <name>eraseIfLastRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosLRUEntryTableRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>keyData</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>keyLength</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TAOS_LRU_ENTRY_SET_IN_CACHE</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheShardLRUInsert</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>lastReference</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>lastReference</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>&gt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>-=</operator> <name><name>e</name><operator>-&gt;</operator><name>totalCharge</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>lastReference</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUEntryFree</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>lastReference</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>taosLRUCacheShardGetUsage</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>usage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>usage</name> <operator>=</operator> <name><name>shard</name><operator>-&gt;</operator><name>usage</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>usage</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>taosLRUCacheShardGetPinnedUsage</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>usage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>&gt;=</operator> <name><name>shard</name><operator>-&gt;</operator><name>lruUsage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>usage</name> <operator>=</operator> <name><name>shard</name><operator>-&gt;</operator><name>usage</name></name> <operator>-</operator> <name><name>shard</name><operator>-&gt;</operator><name>lruUsage</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>usage</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLRUCacheShardSetStrictCapacity</name><parameter_list>(<parameter><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shard</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>shard</name><operator>-&gt;</operator><name>strictCapacity</name></name> <operator>=</operator> <name>strict</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shard</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>SShardedCache</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>shardMask</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThreadMutex</name></type> <name>capacityMutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>        <name>capacity</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>strictCapacity</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>      <name>lastId</name></decl>;</decl_stmt>  <comment type="line">// atomic var for last id</comment>
}</block>;</struct>

<struct>struct <name>SLRUCache</name> <block>{
  <decl_stmt><decl><type><name>SShardedCache</name></type>   <name>shardedCache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUCacheShard</name> <modifier>*</modifier></type><name>shards</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>numShards</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getDefaultCacheShardBits</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>    <name>numShardBits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>minShardSize</name> <init>= <expr><literal type="number">512</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numShards</name> <init>= <expr><name>capacity</name> <operator>/</operator> <name>minShardSize</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>numShards</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>numShardBits</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>numShardBits</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>numShardBits</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLRUCache</name> <modifier>*</modifier></type><name>taosLRUCacheInit</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numShardBits</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>highPriPoolRatio</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>numShardBits</name> <operator>&gt;=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>highPriPoolRatio</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0.0</literal> <operator>||</operator> <name>highPriPoolRatio</name></expr></argument> &gt;</argument_list></name> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLRUCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>numShardBits</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numShardBits</name> <operator>=</operator> <call><name>getDefaultCacheShardBits</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>numShards</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>numShardBits</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>shards</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numShards</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLRUCacheShard</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>   <name>strictCapacity</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>perShard</name> <init>= <expr><operator>(</operator><name>capacity</name> <operator>+</operator> <operator>(</operator><name>numShards</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>numShards</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numShards</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUCacheShardInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>perShard</name></expr></argument>, <argument><expr><name>strictCapacity</name></expr></argument>, <argument><expr><name>highPriPoolRatio</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <name>numShardBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>numShards</name></name> <operator>=</operator> <name>numShards</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>shardMask</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>numShardBits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>strictCapacity</name></name> <operator>=</operator> <name>strictCapacity</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>lastId</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacityMutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>cache</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosLRUCacheCleanup</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>shards</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>numShards</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>numShards</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>numShards</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numShards</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>taosLRUCacheShardCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>shards</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>shards</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacityMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>LRUStatus</name></type> <name>taosLRUCacheInsert</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>charge</name></decl></parameter>,
                             <parameter><decl><type><name>_taos_lru_deleter_t</name></type> <name>deleter</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>LRUPriority</name></type> <name>priority</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><call><name>TAOS_LRU_CACHE_SHARD_HASH32</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>shardIndex</name> <init>= <expr><name>hash</name> <operator>&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>shardMask</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>taosLRUCacheShardInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>shardIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>charge</name></expr></argument>, <argument><expr><name>deleter</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>,
                                 <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>LRUHandle</name> <modifier>*</modifier></type><name>taosLRUCacheLookup</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><call><name>TAOS_LRU_CACHE_SHARD_HASH32</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>shardIndex</name> <init>= <expr><name>hash</name> <operator>&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>shardMask</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>taosLRUCacheShardLookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>shardIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosLRUCacheErase</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><call><name>TAOS_LRU_CACHE_SHARD_HASH32</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>shardIndex</name> <init>= <expr><name>hash</name> <operator>&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>shardMask</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>taosLRUCacheShardErase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>shardIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosLRUCacheEraseUnrefEntries</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>numShards</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>numShards</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numShards</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUCacheShardEraseUnrefEntries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosLRUCacheRef</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SLRUEntry</name> <operator>*</operator><operator>)</operator><name>handle</name><operator>)</operator><operator>-&gt;</operator><name>hash</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>shardIndex</name> <init>= <expr><name>hash</name> <operator>&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>shardMask</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>taosLRUCacheShardRef</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>shardIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosLRUCacheRelease</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eraseIfLastRef</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SLRUEntry</name> <operator>*</operator><operator>)</operator><name>handle</name><operator>)</operator><operator>-&gt;</operator><name>hash</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>shardIndex</name> <init>= <expr><name>hash</name> <operator>&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>shardMask</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>taosLRUCacheShardRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>shardIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>eraseIfLastRef</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosLRUCacheValue</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>SLRUEntry</name> <operator>*</operator><operator>)</operator><name>handle</name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</return> </block_content>}</block></function>

<function><type><name>size_t</name></type> <name>taosLRUCacheGetUsage</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>usage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>numShards</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>usage</name> <operator>+=</operator> <call><name>taosLRUCacheShardGetUsage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>usage</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>taosLRUCacheGetPinnedUsage</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>usage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>numShards</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>usage</name> <operator>+=</operator> <call><name>taosLRUCacheShardGetPinnedUsage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>usage</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosLRUCacheSetCapacity</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>numShards</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>numShards</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>   <name>perShard</name> <init>= <expr><operator>(</operator><name>capacity</name> <operator>+</operator> <operator>(</operator><name>numShards</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>numShards</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacityMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numShards</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUCacheShardSetCapacity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>perShard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacityMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>taosLRUCacheGetCapacity</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>capacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacityMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>capacity</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacity</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacityMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>capacity</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosLRUCacheSetStrictCapacity</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>numShards</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>numShards</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacityMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numShards</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUCacheShardSetStrictCapacity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shards</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>strict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>strictCapacity</name></name> <operator>=</operator> <name>strict</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacityMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosLRUCacheIsStrictCapacity</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>strict</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacityMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>strict</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>strictCapacity</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>shardedCache</name><operator>.</operator><name>capacityMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>strict</name></expr>;</return>
</block_content>}</block></function>
</unit>
