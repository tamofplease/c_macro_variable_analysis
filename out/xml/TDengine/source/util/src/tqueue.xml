<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tqueue.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int64_t</name></type> <name>tsRpcQueueMemoryAllowed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tsRpcQueueMemoryUsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>STaosQueue</name> <modifier>*</modifier></type><name>taosOpenQueue</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaosQueue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"queue:%p is opened"</literal></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>queue</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosSetQueueFp</name><parameter_list>(<parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>FItem</name></type> <name>itemFp</name></decl></parameter>, <parameter><decl><type><name>FItems</name></type> <name>itemsFp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>itemFp</name></name> <operator>=</operator> <name>itemFp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>itemsFp</name></name> <operator>=</operator> <name>itemsFp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCloseQueue</name><parameter_list>(<parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>STaosQnode</name> <modifier>*</modifier></type><name>pTemp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STaosQset</name>  <modifier>*</modifier></type><name>qset</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STaosQnode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>qset</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>qset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>qset</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosRemoveFromQset</name><argument_list>(<argument><expr><name>qset</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pTemp</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"queue:%p is closed"</literal></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosQueueEmpty</name><parameter_list>(<parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>empty</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>empty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>empty</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosUpdateItemSize</name><parameter_list>(<parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>items</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name> <operator>-=</operator> <name>items</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosQueueItemSize</name><parameter_list>(<parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfItems</name> <init>= <expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"queue:%p, numOfItems:%d memOfItems:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>numOfItems</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosQueueMemorySize</name><parameter_list>(<parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>memOfItems</name> <init>= <expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>memOfItems</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosAllocateQitem</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>EQItype</name></type> <name>itype</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dataSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQnode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaosQnode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>itype</name></name> <operator>=</operator> <name>itype</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>itype</name> <operator>==</operator> <name>RPC_QITEM</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>alloced</name> <init>= <expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRpcQueueMemoryUsed</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>dataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>alloced</name> <operator>&gt;</operator> <name>tsRpcQueueMemoryAllowed</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to alloc qitem, size:%"</literal> <name>PRId64</name> <literal type="string">" alloc:%"</literal> <name>PRId64</name> <literal type="string">" allowed:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>dataSize</name></expr></argument>, <argument><expr><name>alloced</name></expr></argument>,
             <argument><expr><name>tsRpcQueueMemoryUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRpcQueueMemoryUsed</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_RPC_MEMORY_QUEUE</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"item:%p, node:%p is allocated, alloc:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>alloced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"item:%p, node:%p is allocated"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name><name>pNode</name><operator>-&gt;</operator><name>item</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosFreeQitem</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>STaosQnode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><operator>(</operator><name>STaosQnode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pItem</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STaosQnode</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>itype</name></name> <operator>==</operator> <name>RPC_QITEM</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>alloced</name> <init>= <expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRpcQueueMemoryUsed</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>pNode</name><operator>-&gt;</operator><name>dataSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"item:%p, node:%p is freed, alloc:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>alloced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"item:%p, node:%p is freed"</literal></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosWriteQitem</name><parameter_list>(<parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQnode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><operator>(</operator><name>STaosQnode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pItem</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STaosQnode</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name> <operator>+=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>qset</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>qset</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"item:%p is put into queue:%p, items:%d mem:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>qset</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>qset</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosReadQitem</name><parameter_list>(<parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQnode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppItem</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name> <operator>-=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>qset</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>qset</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"item:%p is read out from queue:%p, items:%d mem:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><name>ppItem</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>,
           <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STaosQall</name> <modifier>*</modifier></type><name>taosAllocateQall</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaosQall</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>qall</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>qall</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosFreeQall</name><parameter_list>(<parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>qall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosReadAllQitems</name><parameter_list>(<parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfItems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>empty</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>empty</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaosQall</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>numOfItems</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfItems</name> <operator>=</operator> <name><name>qall</name><operator>-&gt;</operator><name>numOfItems</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"read %d items from queue:%p, items:%d mem:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>numOfItems</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>,
           <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>qset</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>qset</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>, <argument><expr><name><name>qall</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// if source queue is empty, we set destination qall to empty too.</comment>
  <if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>numOfItems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>numOfItems</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetQitem</name><parameter_list>(<parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQnode</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>qall</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppItem</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"item:%p is fetched"</literal></expr></argument>, <argument><expr><operator>*</operator><name>ppItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppItem</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STaosQset</name> <modifier>*</modifier></type><name>taosOpenQset</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQset</name> <modifier>*</modifier></type><name>qset</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaosQset</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>qset</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"qset:%p is opened"</literal></expr></argument>, <argument><expr><name>qset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>qset</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCloseQset</name><parameter_list>(<parameter><decl><type><name>STaosQset</name> <modifier>*</modifier></type><name>qset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>qset</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// remove all the queues from qset</comment>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>qset</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name><name>qset</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>qset</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>qset</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>qset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>qset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"qset:%p is closed"</literal></expr></argument>, <argument><expr><name>qset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// tsem_post 'qset-&gt;sem', so that reader threads waiting for it</comment>
<comment type="line">// resumes execution and return, should only be used to signal the</comment>
<comment type="line">// thread to exit.</comment>
<function><type><name>void</name></type> <name>taosQsetThreadResume</name><parameter_list>(<parameter><decl><type><name>STaosQset</name> <modifier>*</modifier></type><name>qset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"qset:%p, it will exit"</literal></expr></argument>, <argument><expr><name>qset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosAddIntoQset</name><parameter_list>(<parameter><decl><type><name>STaosQset</name> <modifier>*</modifier></type><name>qset</name></decl></parameter>, <parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ahandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>qset</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>qset</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>=</operator> <name>ahandle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qset</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>queue</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qset</name><operator>-&gt;</operator><name>numOfQueues</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>qset</name></name> <operator>=</operator> <name>qset</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"queue:%p is added into qset:%p"</literal></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name>qset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosRemoveFromQset</name><parameter_list>(<parameter><decl><type><name>STaosQset</name> <modifier>*</modifier></type><name>qset</name></decl></parameter>, <parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>tqueue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>qset</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>qset</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>queue</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>qset</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>qset</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tqueue</name> <operator>=</operator> <name>queue</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>qset</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>tqueue</name> <operator>=</operator> <name><name>qset</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>tqueue</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tqueue</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tqueue</name> <operator>==</operator> <name>queue</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>tqueue</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>tqueue</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>tqueue</name> <operator>=</operator> <name><name>tqueue</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>tqueue</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>qset</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>queue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>qset</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>tqueue</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>qset</name><operator>-&gt;</operator><name>numOfQueues</name></name><operator>--</operator></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>qset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"queue:%p is removed from qset:%p"</literal></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name>qset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosReadQitemFromQset</name><parameter_list>(<parameter><decl><type><name>STaosQset</name> <modifier>*</modifier></type><name>qset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppItem</name></decl></parameter>, <parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>qinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQnode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>qset</name><operator>-&gt;</operator><name>numOfQueues</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>qset</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>qset</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>qset</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name><name>qset</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>queue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>qset</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>ppItem</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qinfo</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>ahandle</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qinfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>itemFp</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qinfo</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>queue</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qinfo</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <comment type="line">// queue-&gt;numOfItems--;</comment>
      <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name> <operator>-=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"item:%p is read out from queue:%p, items:%d mem:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><name>ppItem</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
             <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosReadAllQitemsFromQset</name><parameter_list>(<parameter><decl><type><name>STaosQset</name> <modifier>*</modifier></type><name>qset</name></decl></parameter>, <parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>, <parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>qinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>qset</name><operator>-&gt;</operator><name>numOfQueues</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>qset</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>qset</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>qset</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>queue</name> <operator>=</operator> <name><name>qset</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>queue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>qset</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>numOfItems</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>numOfItems</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>qall</name><operator>-&gt;</operator><name>numOfItems</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qinfo</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>ahandle</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qinfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>itemsFp</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qinfo</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>queue</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <comment type="line">// queue-&gt;numOfItems = 0;</comment>
      <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"read %d items from queue:%p, items:0 mem:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>memOfItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>, <argument><expr><name><name>qall</name><operator>-&gt;</operator><name>numOfItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>qall</name><operator>-&gt;</operator><name>numOfItems</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosQallItemSize</name><parameter_list>(<parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>qall</name><operator>-&gt;</operator><name>numOfItems</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type>    <name>taosResetQitems</name><parameter_list>(<parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>qall</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>qall</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>taosGetQueueNumber</name><parameter_list>(<parameter><decl><type><name>STaosQset</name> <modifier>*</modifier></type><name>qset</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>qset</name><operator>-&gt;</operator><name>numOfQueues</name></name></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

void taosResetQsetThread(STaosQset *qset, void *pItem) {
  if (pItem == NULL) return;
  STaosQnode *pNode = (STaosQnode *)((char *)pItem - sizeof(STaosQnode));

  taosThreadMutexLock(&amp;qset-&gt;mutex);
  for (int32_t i = 0; i &lt; pNode-&gt;queue-&gt;numOfItems; ++i) {
    tsem_post(&amp;qset-&gt;sem);
  }
  taosThreadMutexUnlock(&amp;qset-&gt;mutex);
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
