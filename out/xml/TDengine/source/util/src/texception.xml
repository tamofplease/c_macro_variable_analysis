<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/texception.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"texception.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>threadlocal</name> <name>SExceptionNode</name><modifier>*</modifier></type> <name>expList</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>exceptionPushNode</name><parameter_list>(<parameter><decl><type><name>SExceptionNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>expList</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>expList</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>exceptionPopNode</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExceptionNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><name>expList</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>expList</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>node</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>exceptionThrow</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>expList</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>expList</name><operator>-&gt;</operator><name>jb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupWrapper_void_ptr_ptr</name><parameter_list>(<parameter><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name></expr></init>;</function_decl>
  <expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>Ptr</name></name></expr></argument>, <argument><expr><name><name>ca</name><operator>-&gt;</operator><name>arg2</name><operator>.</operator><name>Ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupWrapper_void_ptr_bool</name><parameter_list>(<parameter><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name></expr></init>;</function_decl>
  <expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>Ptr</name></name></expr></argument>, <argument><expr><name><name>ca</name><operator>-&gt;</operator><name>arg2</name><operator>.</operator><name>Bool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupWrapper_void_ptr</name><parameter_list>(<parameter><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name></expr></init>;</function_decl>
  <expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>Ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupWrapper_int_int</name><parameter_list>(<parameter><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>int32_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name></expr></init>;</function_decl>
  <expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>Int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupWrapper_void</name><parameter_list>(<parameter><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>()</parameter_list> <init>= <expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name></expr></init>;</function_decl>
  <expr_stmt><expr><call><name>func</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupWrapper_int_ptr</name><parameter_list>(<parameter><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name></expr></init>;</function_decl>
  <expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>Ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>wrapper</name>)<parameter_list>(<parameter><decl><type><name>SCleanupAction</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>wrapper</name></type> <name><name>wrappers</name><index>[]</index></name> <init>= <expr><block>{
    <expr><name>cleanupWrapper_void_ptr_ptr</name></expr>, <expr><name>cleanupWrapper_void_ptr_bool</name></expr>, <expr><name>cleanupWrapper_void_ptr</name></expr>,
    <expr><name>cleanupWrapper_int_int</name></expr>,      <expr><name>cleanupWrapper_void</name></expr>,          <expr><name>cleanupWrapper_int_ptr</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>cleanupPush_void_ptr_ptr</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>failOnly</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name> <operator>&lt;</operator> <name><name>expList</name><operator>-&gt;</operator><name>maxCleanupAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name> <init>= <expr><name><name>expList</name><operator>-&gt;</operator><name>cleanupActions</name></name> <operator>+</operator> <name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>wrapper</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>failOnly</name></name> <operator>=</operator> <name>failOnly</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>Ptr</name></name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>arg2</name><operator>.</operator><name>Ptr</name></name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanupPush_void_ptr_bool</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>failOnly</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name> <operator>&lt;</operator> <name><name>expList</name><operator>-&gt;</operator><name>maxCleanupAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name> <init>= <expr><name><name>expList</name><operator>-&gt;</operator><name>cleanupActions</name></name> <operator>+</operator> <name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>wrapper</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>failOnly</name></name> <operator>=</operator> <name>failOnly</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>Ptr</name></name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>arg2</name><operator>.</operator><name>Bool</name></name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanupPush_void_ptr</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>failOnly</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name> <operator>&lt;</operator> <name><name>expList</name><operator>-&gt;</operator><name>maxCleanupAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name> <init>= <expr><name><name>expList</name><operator>-&gt;</operator><name>cleanupActions</name></name> <operator>+</operator> <name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>wrapper</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>failOnly</name></name> <operator>=</operator> <name>failOnly</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>Ptr</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanupPush_int_int</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>failOnly</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name> <operator>&lt;</operator> <name><name>expList</name><operator>-&gt;</operator><name>maxCleanupAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name> <init>= <expr><name><name>expList</name><operator>-&gt;</operator><name>cleanupActions</name></name> <operator>+</operator> <name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>wrapper</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>failOnly</name></name> <operator>=</operator> <name>failOnly</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>Int</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanupPush_void</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>failOnly</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>func</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name> <operator>&lt;</operator> <name><name>expList</name><operator>-&gt;</operator><name>maxCleanupAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name> <init>= <expr><name><name>expList</name><operator>-&gt;</operator><name>cleanupActions</name></name> <operator>+</operator> <name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>wrapper</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>failOnly</name></name> <operator>=</operator> <name>failOnly</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanupPush_int_ptr</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>failOnly</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name> <operator>&lt;</operator> <name><name>expList</name><operator>-&gt;</operator><name>maxCleanupAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name> <init>= <expr><name><name>expList</name><operator>-&gt;</operator><name>cleanupActions</name></name> <operator>+</operator> <name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>wrapper</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>failOnly</name></name> <operator>=</operator> <name>failOnly</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>arg1</name><operator>.</operator><name>Ptr</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cleanupGetActionCount</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doExecuteCleanup</name><parameter_list>(<parameter><decl><type><name>SExceptionNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>anchor</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>failed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>numCleanupAction</name></name> <operator>&gt;</operator> <name>anchor</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>--</operator><name><name>node</name><operator>-&gt;</operator><name>numCleanupAction</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SCleanupAction</name><modifier>*</modifier></type> <name>ca</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>cleanupActions</name></name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>numCleanupAction</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>failed</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>ca</name><operator>-&gt;</operator><name>failOnly</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>wrappers</name><index>[<expr><name><name>ca</name><operator>-&gt;</operator><name>wrapper</name></name></expr>]</index></name><operator>(</operator><name>ca</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanupExecuteTo</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>anchor</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>failed</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>doExecuteCleanup</name><argument_list>(<argument><expr><name>expList</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanupExecute</name><parameter_list>(<parameter><decl><type><name>SExceptionNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>failed</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>doExecuteCleanup</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>cleanupExceedLimit</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>expList</name><operator>-&gt;</operator><name>numCleanupAction</name></name> <operator>&gt;=</operator> <name><name>expList</name><operator>-&gt;</operator><name>maxCleanupAction</name></name></expr>;</return> </block_content>}</block></function>
</unit>
