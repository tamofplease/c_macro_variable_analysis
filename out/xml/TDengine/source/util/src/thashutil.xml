<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/thashutil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt;&lt; (r) | (x) &gt;&gt; (32u - (r)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT</name></cpp:macro>  <cpp:value>(FLT_COMPAR_TOL_FACTOR * FLT_EPSILON)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMIX32</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro>      \
  <cpp:value>do {                 \
    (h) ^= (h) &gt;&gt; 16;  \
    (h) *= 0x85ebca6b; \
    (h) ^= (h) &gt;&gt; 13;  \
    (h) *= 0xc2b2ae35; \
    (h) ^= (h) &gt;&gt; 16;  \
  } while (0)</cpp:value></cpp:define>

<function><type><name>uint32_t</name></type> <name>taosFastHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><literal type="number">0x55555555</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>^=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ROTL32</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>taosDJB2Hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>hash</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* hash * 33 + c */</comment>
  </block_content>}</block></for>
  <return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>MurmurHash3_32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type>  <name>nblocks</name> <init>= <expr><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">2u</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>h1</name> <init>= <expr><literal type="number">0x12345678</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c1</name> <init>= <expr><literal type="number">0xcc9e2d51</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c2</name> <init>= <expr><literal type="number">0x1b873593</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>blocks</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <name>nblocks</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>nblocks</name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>k1</name> <init>= <expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>ROTL32</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">15u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>ROTL32</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><literal type="number">13u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h1</name> <operator>=</operator> <name>h1</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">0xe6546b64</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><operator>(</operator><name>data</name> <operator>+</operator> <name>nblocks</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">3u</literal></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>ROTL32</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">15u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
  </block_content>}</block></switch><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>len</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FMIX32</name><argument_list>(<argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>h1</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>MurmurHash3_64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>m</name> <init>= <expr><literal type="number">0x87c37b91114253d5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type>      <name>r</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>       <name>seed</name> <init>= <expr><literal type="number">0x12345678</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>       <name>h</name> <init>= <expr><name>seed</name> <operator>^</operator> <operator>(</operator><name>len</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>-</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>data</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>k</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>^=</operator> <name>k</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <switch>switch <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">7</literal></expr>:</case>
      <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">6</literal></expr>:</case>
      <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">5</literal></expr>:</case>
      <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
      <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>h</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
  </block_content>}</block></switch><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>h</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
  <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>taosIntHash_32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>uint32_t</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr>;</return> </block_content>}</block></function>
<function><type><name>uint32_t</name></type> <name>taosIntHash_16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>uint32_t</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr>;</return> </block_content>}</block></function>
<function><type><name>uint32_t</name></type> <name>taosIntHash_8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>uint32_t</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr>;</return> </block_content>}</block></function>
<function><type><name>uint32_t</name></type> <name>taosFloatHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>uint32_t</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0x7fc00000</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FLT_EQUAL</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>FLT_MAX</name> <operator>/</operator> <name>BASE</name> <operator>-</operator> <name>DLT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name>BASE</name> <operator>*</operator> <operator>(</operator><name>f</name> <operator>+</operator> <name>DLT</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>t</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0x7fc00000</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>uint32_t</name></type> <name>taosDoubleHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>uint32_t</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0x7fc00000</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FLT_EQUAL</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>DBL_MAX</name> <operator>/</operator> <name>BASE</name> <operator>-</operator> <name>DLT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><call><name>round</name><argument_list>(<argument><expr><name>BASE</name> <operator>*</operator> <operator>(</operator><name>f</name> <operator>+</operator> <name>DLT</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>t</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0x7fc00000</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>uint32_t</name></type> <name>taosIntHash_64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>uint32_t</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash</name> <init>= <expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16U</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>hash</name> <operator>+=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>_hash_fn_t</name></type> <name>taosGetDefaultHashFunction</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>taosIntHash_64</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>MurmurHash3_32</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>MurmurHash3_32</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>taosIntHash_32</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>taosIntHash_16</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>taosIntHash_8</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>taosFloatHash</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>taosDoubleHash</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>taosIntHash_32</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>fn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosFloatEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><function_decl><type><name>size_t</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>sz</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><call><name>getComparFunc</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_FLOAT</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosDoubleEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><function_decl><type><name>size_t</name></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>sz</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><call><name>getComparFunc</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>_equal_fn_t</name></type> <name>taosGetDefaultEqualFunction</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>_equal_fn_t</name></type> <name>fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>taosFloatEqual</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>taosDoubleEqual</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>memcmp</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>fn</name></expr>;</return>
</block_content>}</block></function>
</unit>
