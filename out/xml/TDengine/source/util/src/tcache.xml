<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tcache.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osThread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_MAX_CAPACITY</name></cpp:macro>     <cpp:value>1024 * 1024 * 16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DEFAULT_CAPACITY</name></cpp:macro> <cpp:value>1024 * 4</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>TdThread</name></type>      <name>cacheRefreshWorker</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type>  <name>cacheThreadInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadMutex</name></type> <name>guard</name> <init>= <expr><name>TD_PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SArray</name>       <modifier>*</modifier></type><name>pCacheArrayList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>          <name>stopRefreshWorker</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>          <name>refreshWorkerNormalStopped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>          <name>refreshWorkerUnexpectedStopped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>SCacheNode</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>addedTime</name></decl>;</decl_stmt>   <comment type="line">// the added time when this element is added or updated into cache</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>lifespan</name></decl>;</decl_stmt>    <comment type="line">// life duration when this element should be remove from cache</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>            <name>expireTime</name></decl>;</decl_stmt>  <comment type="line">// expire time</comment>
  <decl_stmt><decl><type><name>void</name>              <modifier>*</modifier></type><name>signature</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>STrashElem</name></name> <modifier>*</modifier></type><name>pTNodeHeader</name></decl>;</decl_stmt>    <comment type="line">// point to trash node head</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type>           <name>keyLen</name> <range>: <expr><literal type="number">15</literal></expr></range></decl>;</decl_stmt>     <comment type="line">// max key size: 32kb</comment>
  <decl_stmt><decl><type><name>bool</name></type>               <name>inTrashcan</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>  <comment type="line">// denote if it is in trash or not</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type>           <name>size</name></decl>;</decl_stmt>            <comment type="line">// allocated size for current SCacheNode</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type>           <name>dataLen</name></decl>;</decl_stmt>
  <macro><name>T_REF_DECLARE</name><argument_list>()</argument_list></macro>
  <decl_stmt><decl><type><name><name>struct</name> <name>SCacheNode</name></name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>SCacheNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SCacheEntry</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>num</name></decl>;</decl_stmt>    <comment type="line">// number of elements in current entry</comment>
  <decl_stmt><decl><type><name>SRWLatch</name></type>    <name>latch</name></decl>;</decl_stmt>  <comment type="line">// entry latch</comment>
  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>SCacheEntry</name>;</typedef>

<struct>struct <name>STrashElem</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>STrashElem</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>STrashElem</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCacheNode</name>        <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>SCacheIter</name> <block>{
  <decl_stmt><decl><type><name>SCacheObj</name>   <modifier>*</modifier></type><name>pCacheObj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCurrent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>entryIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfObj</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
 * to accommodate the old data which has the same key value of new one in hashList
 * when an new node is put into cache, if an existed one with the same key:
 * 1. if the old one does not be referenced, update it.
 * 2. otherwise, move the old one to pTrash, addedTime the new one.
 *
 * when the node in pTrash does not be referenced, it will be release at the expired expiredTime
 */</comment>
<struct>struct <name>SCacheObj</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type>      <name>sizeInBytes</name></decl>;</decl_stmt>  <comment type="line">// total allocated buffer in this hash table, SCacheObj is not included.</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>      <name>refreshTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCacheStatis</name></type> <name>statistics</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCacheEntry</name>      <modifier>*</modifier></type><name>pEntryList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>            <name>capacity</name></decl>;</decl_stmt>    <comment type="line">// number of slots</comment>
  <decl_stmt><decl><type><name>size_t</name></type>            <name>numOfElems</name></decl>;</decl_stmt>  <comment type="line">// number of elements in cache</comment>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type>        <name>hashFp</name></decl>;</decl_stmt>      <comment type="line">// hash function</comment>
  <decl_stmt><decl><type><name>__cache_free_fn_t</name></type> <name>freeFp</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type>    <name>numOfElemsInTrash</name></decl>;</decl_stmt>  <comment type="line">// number of element in trash</comment>
  <decl_stmt><decl><type><name>STrashElem</name> <modifier>*</modifier></type><name>pTrash</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>deleting</name></decl>;</decl_stmt>  <comment type="line">// set the deleting flag to stop refreshing ASAP.</comment>
  <decl_stmt><decl><type><name>TdThread</name></type> <name>refreshWorker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>extendLifespan</name></decl>;</decl_stmt>  <comment type="line">// auto extend life span when one item is accessed.</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>checkTick</name></decl>;</decl_stmt>       <comment type="line">// tick used to record the check times of the refresh threads</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>TdThreadRwlock</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>TdThreadMutex</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>SCacheObjTravSup</name> <block>{
  <decl_stmt><decl><type><name>SCacheObj</name>        <modifier>*</modifier></type><name>pCacheObj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>           <name>time</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__cache_trav_fn_t</name></type> <name>fp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>             <modifier>*</modifier></type><name>param1</name></decl>;</decl_stmt>
}</block></struct></type> <name>SCacheObjTravSup</name>;</typedef>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>__trashcan_wr_lock</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>__trashcan_unlock</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>__trashcan_lock_init</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <return>return <expr><call><name>taosThreadRwlockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>__trashcan_lock_destroy</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * do cleanup the taos cache
 * @param pCacheObj
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>doCleanupDataCache</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * refresh cache to remove data in both hash list and trash, if any nodes' refcount == 0, every pCacheObj-&gt;refreshTime
 * @param handle   Cache object handle
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>taosCacheTimedRefresh</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doInitRefreshThread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>pCacheArrayList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thattr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cacheRefreshWorker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>, <argument><expr><name>taosCacheTimedRefresh</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TdThread</name></type> <name>doRegisterCacheObj</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cacheThreadInit</name></expr></argument>, <argument><expr><name>doInitRefreshThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pCacheArrayList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>cacheRefreshWorker</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @param key      key of object for hash, usually a null-terminated string
 * @param keyLen   length of key
 * @param pData    actually data. required a consecutive memory block, no pointer is allowed
 *                 in pData. Pointer copy causes memory access error.
 * @param size     size of block
 * @param lifespan total survial expiredTime from now
 * @return         SCacheNode
 */</comment>
<function_decl><type><specifier>static</specifier> <name>SCacheNode</name> <modifier>*</modifier></type><name>taosCreateCacheNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
                                       <parameter><decl><type><name>uint64_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * addedTime object node into trash, and this object is closed for referencing if it is addedTime to trash
 * It will be removed until the pNode-&gt;refCount == 0
 * @param pCacheObj    Cache object
 * @param pNode   Cache slot object
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>taosAddToTrashcan</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * remove nodes in trash with refCount == 0 in cache
 * @param pNode
 * @param pCacheObj
 * @param force   force model, if true, remove data in trash without check refcount.
 *                may cause corruption. So, forece model only applys before cache is closed
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>taosTrashcanEmpty</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * release node
 * @param pCacheObj      cache object
 * @param pNode          data node
 */</comment>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>taosCacheReleaseNode</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>signature</name></name> <operator>!=</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"key:%s, %p data is invalid, or has been released"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>sizeInBytes</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p is destroyed from cache, size:%dbytes, total num:%d size:%"</literal> <name>PRId64</name> <literal type="string">"bytes"</literal></expr></argument>,
         <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>sizeInBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>freeFp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pCacheObj</name><operator>-&gt;</operator><name>freeFp</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>STrashElem</name> <modifier>*</modifier></type><name>doRemoveElemInTrashcan</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>STrashElem</name> <modifier>*</modifier></type><name>pElem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pElem</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>signature</name></name> <operator>!=</operator> <name><name>pElem</name><operator>-&gt;</operator><name>pData</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uWarn</name><argument_list>(<argument><expr><literal type="string">"key:sig:0x%"</literal> <name>PRIx64</name> <literal type="string">" %p data has been released, ignore"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pElem</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>, <argument><expr><name><name>pElem</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STrashElem</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>pElem</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElemsInTrash</name></name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pElem</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pElem</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pElem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// pnode is the header, update header</comment>
    <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pTrash</name></name> <operator>=</operator> <name><name>pElem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>pElem</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElemsInTrash</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pTrash</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>next</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>doDestroyTrashcanElem</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>STrashElem</name> <modifier>*</modifier></type><name>pElem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>freeFp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pCacheObj</name><operator>-&gt;</operator><name>freeFp</name></name><argument_list>(<argument><expr><name><name>pElem</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pElem</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pushfrontNodeInEntryList</name><parameter_list>(<parameter><decl><type><name>SCacheEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>, <parameter><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pNode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>removeNodeInEntryList</name><parameter_list>(<parameter><decl><type><name>SCacheEntry</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>num</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>pe</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>SCacheEntry</name> <modifier>*</modifier></type><name>doFindEntry</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashVal</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pCacheObj</name><operator>-&gt;</operator><name>hashFp</name></name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>slot</name> <init>= <expr><name>hashVal</name> <operator>%</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>pEntryList</name><index>[<expr><name>slot</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>SCacheNode</name> <modifier>*</modifier></type><name>doSearchInEntryList</name><parameter_list>(<parameter><decl><type><name>SCacheEntry</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>,
                                                    <parameter><decl><type><name>SCacheNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pe</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>==</operator> <name>keyLen</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>doRemoveExpiredFn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCacheObjTravSup</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>(</operator><name>SCacheObjTravSup</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCacheObj</name>        <modifier>*</modifier></type><name>pCacheObj</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>pCacheObj</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>expireTime</name></name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>time</name></name> <operator>&amp;&amp;</operator> <call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCacheReleaseNode</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// this node should be remove from hash table</comment>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name><name>ps</name><operator>-&gt;</operator><name>fp</name></name><operator>)</operator><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name><operator>,</operator> <name><name>ps</name><operator>-&gt;</operator><name>param1</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// do not remove element in hash table</comment>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>doRemoveNodeFn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCacheObjTravSup</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>(</operator><name>SCacheObjTravSup</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCacheObj</name>        <modifier>*</modifier></type><name>pCacheObj</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>pCacheObj</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCacheReleaseNode</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// do add to trashcan</comment>
    <expr_stmt><expr><call><name>taosAddToTrashcan</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// this node should be remove from hash table</comment>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>getCacheCapacity</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <name>CACHE_DEFAULT_CAPACITY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>CACHE_DEFAULT_CAPACITY</name></expr>;</expr_stmt>
    <return>return <expr><name>len</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>CACHE_MAX_CAPACITY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>CACHE_MAX_CAPACITY</name></expr>;</expr_stmt>
    <return>return <expr><name>len</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <name>CACHE_DEFAULT_CAPACITY</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>length</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <name>CACHE_MAX_CAPACITY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">1u</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><ternary><condition><expr><name>len</name> <operator>&gt;</operator> <name>CACHE_MAX_CAPACITY</name></expr> ?</condition><then> <expr><name>CACHE_MAX_CAPACITY</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SCacheObj</name> <modifier>*</modifier></type><name>taosCacheInit</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>refreshTimeInMs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>extendLifespan</name></decl></parameter>, <parameter><decl><type><name>__cache_free_fn_t</name></type> <name>fn</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cacheName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>SLEEP_DURATION</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// 500 ms</comment>

  <if_stmt><if>if <condition>(<expr><name>refreshTimeInMs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name> <init>= <expr><operator>(</operator><name>SCacheObj</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCacheObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCacheObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory, reason:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// TODO add the auto extend procedure</comment>
  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pEntryList</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCacheEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pEntryList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory, reason:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set free cache node callback function</comment>
  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>hashFp</name></name> <operator>=</operator> <call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>keyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>freeFp</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>refreshTime</name></name> <operator>=</operator> <name>refreshTimeInMs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>checkTick</name></name> <operator>=</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>refreshTime</name></name> <operator>/</operator> <name>SLEEP_DURATION</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>extendLifespan</name></name> <operator>=</operator> <name>extendLifespan</name></expr>;</expr_stmt>  <comment type="line">// the TTL after the last access</comment>

  <if_stmt><if>if <condition>(<expr><call><name>__trashcan_lock_init</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pEntryList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to init lock, reason:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>cacheName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doRegisterCacheObj</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pCacheObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosCachePut</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>,
                   <parameter><decl><type><name>int32_t</name></type> <name>durationMS</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCacheObj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>pEntryList</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>deleting</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode1</name> <init>= <expr><call><name>taosCreateCacheNode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>durationMS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, failed to added into cache, out of memory"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>T_REF_INC</name><argument_list>(<argument><expr><name>pNode1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCacheEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><call><name>doFindEntry</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><call><name>doSearchInEntryList</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pushfrontNodeInEntryList</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>pNode1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_add_fetch_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_add_fetch_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>sizeInBytes</name></name></expr></argument>, <argument><expr><name><name>pNode1</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p added into cache, added:%"</literal> <name>PRIu64</name> <literal type="string">", expire:%"</literal> <name>PRIu64</name>
           <literal type="string">", totalNum:%d sizeInBytes:%"</literal> <name>PRId64</name> <literal type="string">"bytes size:%"</literal> <name>PRId64</name> <literal type="string">"bytes"</literal></expr></argument>,
           <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pNode1</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pNode1</name><operator>-&gt;</operator><name>addedTime</name></name></expr></argument>, <argument><expr><name><name>pNode1</name><operator>-&gt;</operator><name>expireTime</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>,
           <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>sizeInBytes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// duplicated key exists</comment>
    <comment type="line">// move current node to trashcan</comment>
    <expr_stmt><expr><call><name>removeNodeInEntryList</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>freeFp</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>pCacheObj</name><operator>-&gt;</operator><name>freeFp</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>sizeInBytes</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosAddToTrashcan</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p exist in cache, updated old:%p"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pNode1</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>pushfrontNodeInEntryList</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>pNode1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>sizeInBytes</name></name></expr></argument>, <argument><expr><name><name>pNode1</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p added into cache, added:%"</literal> <name>PRIu64</name> <literal type="string">", expire:%"</literal> <name>PRIu64</name>
           <literal type="string">", totalNum:%d sizeInBytes:%"</literal> <name>PRId64</name> <literal type="string">"bytes size:%"</literal> <name>PRId64</name> <literal type="string">"bytes"</literal></expr></argument>,
           <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pNode1</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pNode1</name><operator>-&gt;</operator><name>addedTime</name></name></expr></argument>, <argument><expr><name><name>pNode1</name><operator>-&gt;</operator><name>expireTime</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>,
           <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>sizeInBytes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pNode1</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosCacheAcquireByKey</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCacheObj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>deleting</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>statistics</name><operator>.</operator><name>missCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCacheNode</name>  <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCacheEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><call><name>doFindEntry</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><call><name>doSearchInEntryList</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_INC</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ref</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>pNode</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>statistics</name><operator>.</operator><name>hitCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p is retrieved from cache, refcnt:%d"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>,
           <argument><expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>statistics</name><operator>.</operator><name>missCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, not in cache, retrieved failed"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>statistics</name><operator>.</operator><name>totalAccess</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pData</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosCacheAcquireByData</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCacheObj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>ptNode</name> <init>= <expr><operator>(</operator><name>SCacheNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCacheNode</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ptNode</name><operator>-&gt;</operator><name>signature</name></name> <operator>!=</operator> <name>ptNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key: %p the data from cache is invalid"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ptNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_INC</name><argument_list>(<argument><expr><name>ptNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, data: %p acquired by data in cache, refcnt:%d"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ptNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// the data if referenced by at least one object, so the reference count must be greater than the value of 2.</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosCacheTransferData</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCacheObj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>ptNode</name> <init>= <expr><operator>(</operator><name>SCacheNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCacheNode</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ptNode</name><operator>-&gt;</operator><name>signature</name></name> <operator>!=</operator> <name>ptNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key: %p the data from cache is invalid"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ptNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>ptNode</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// clear its reference to old area</comment>
  <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCacheRelease</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>_remove</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCacheObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cache:%s, NULL data to release"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// The operation of removal from hash table and addition to trashcan is not an atomic operation,</comment>
  <comment type="line">// therefore the check for the empty of both the hash table and the trashcan has a race condition.</comment>
  <comment type="line">// It happens when there is only one object in the cache, and two threads which has referenced this object</comment>
  <comment type="line">// start to free the it simultaneously [TD-1569].</comment>
  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><operator>(</operator><name>SCacheNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCacheNode</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>signature</name></name> <operator>!=</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cache:%s, %p, release invalid cache data"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// note: extend lifespan before dec ref count</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>inTrashcan</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>inTrashcan</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>extendLifespan</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>inTrashcan</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>_remove</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>expireTime</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>lifespan</name></name> <operator>+</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, data:%p extend expire time: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>expireTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>_remove</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// NOTE: once refcount is decrease, pNode may be freed by other thread immediately.</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p is released, refcnt:%d, in trashcan:%d"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>ref</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inTrashcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If it is not referenced by other users, remove it immediately. Otherwise move this node to trashcan wait for all
     * users releasing this resources.
     *
     * NOTE: previous ref is 0, and current ref is still 0, remove it. If previous is not 0, there is another thread
     * that tries to do the same thing.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>inTrashcan</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// If it is the last ref, remove it from trashcan linked-list first, and then destroy it.Otherwise, it may be</comment>
        <comment type="line">// destroyed by refresh worker if decrease ref count before removing it from linked-list.</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTNodeHeader</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>__trashcan_wr_lock</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doRemoveElemInTrashcan</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTNodeHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__trashcan_unlock</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>T_REF_DEC</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>doDestroyTrashcanElem</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTNodeHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>T_REF_DEC</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// NOTE: remove it from hash in the first place, otherwise, the pNode may have been released by other thread</comment>
      <comment type="line">// when reaches here.</comment>
      <decl_stmt><decl><type><name>SCacheNode</name>  <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SCacheEntry</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><call><name>doFindEntry</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>T_REF_DEC</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>doSearchInEntryList</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// successfully remove from hash table, if failed, this node must have been move to trash already, do nothing.</comment>
        <comment type="line">// note that the remove operation can be executed only once.</comment>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>uDebug</name><argument_list>(
              <argument><expr><literal type="string">"cache:%s, key:%p, a new entry:%p found, refcnt:%d, prev entry:%p, refcnt:%d has been removed by "</literal>
              <literal type="string">"others already, prev must in trashcan"</literal></expr></argument>,
              <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTNodeHeader</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pTNodeHeader</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>removeNodeInEntryList</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p successfully removed from hash table, refcnt:%d"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
                 <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTNodeHeader</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosAddToTrashcan</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// ref == 0</comment>
            <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>sizeInBytes</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p is destroyed from cache, size:%dbytes, totalNum:%d size:%"</literal> <name>PRId64</name> <literal type="string">"bytes"</literal></expr></argument>,
                   <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>sizeInBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>freeFp</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>pCacheObj</name><operator>-&gt;</operator><name>freeFp</name></name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p has been removed from hash table by others already, refcnt:%d"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
               <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// NOTE: once refcount is decrease, pNode may be freed by other thread immediately.</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_DEC</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p released, refcnt:%d, data in trashcan:%d"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>inTrashcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doTraverseElems</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>fp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SCacheObjTravSup</name> <modifier>*</modifier></type><name>pSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfEntries</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfEntries</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCacheEntry</name> <modifier>*</modifier></type><name>pEntry</name> <init>= <expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>pEntryList</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pPre</name> <init>= <expr><operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCacheNode</name>  <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>fp</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pPre</name> <operator>=</operator> <operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pPre</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>atomic_sub_fetch_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCacheEmpty</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCacheObjTravSup</name></type> <name>sup</name> <init>= <expr><block>{<expr><operator>.</operator><name>pCacheObj</name> <operator>=</operator> <name>pCacheObj</name></expr>, <expr><operator>.</operator><name>fp</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>time</name> <operator>=</operator> <macro><name>taosGetTimestampMs</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>doTraverseElems</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>doRemoveNodeFn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosTrashcanEmpty</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCacheCleanup</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCacheObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>deleting</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// wait for the refresh thread quit before destroying the cache object.</comment>
  <comment type="line">// But in the dll, the child thread will be killed before atexit takes effect.</comment>
  <while>while <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>deleting</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>refreshWorkerNormalStopped</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>refreshWorkerUnexpectedStopped</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"cache:%s will be cleaned up"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doCleanupDataCache</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SCacheNode</name> <modifier>*</modifier></type><name>taosCreateCacheNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sizeInBytes</name> <init>= <expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCacheNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>keyLen</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNewNode</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sizeInBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNewNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory, reason:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pNewNode</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCacheNode</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pNewNode</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCacheNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>keyLen</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>addedTime</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>lifespan</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>expireTime</name></name> <operator>=</operator> <name><name>pNewNode</name><operator>-&gt;</operator><name>addedTime</name></name> <operator>+</operator> <name><name>pNewNode</name><operator>-&gt;</operator><name>lifespan</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <name>pNewNode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>sizeInBytes</name></expr>;</expr_stmt>

  <return>return <expr><name>pNewNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosAddToTrashcan</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>inTrashcan</name></name></expr>)</condition> <block>{<block_content> <comment type="block">/* node is already in trash */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTNodeHeader</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pTNodeHeader</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>__trashcan_wr_lock</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STrashElem</name> <modifier>*</modifier></type><name>pElem</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STrashElem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pElem</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pElem</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pElem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>inTrashcan</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTNodeHeader</name></name> <operator>=</operator> <name>pElem</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pElem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>pTrash</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pTrash</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pTrash</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>pElem</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pTrash</name></name> <operator>=</operator> <name>pElem</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElemsInTrash</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__trashcan_unlock</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s key:%p, %p move to trashcan, pTrashElem:%p, numOfElem in trashcan:%d"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
         <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pElem</name></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElemsInTrash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosTrashcanEmpty</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>__trashcan_wr_lock</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElemsInTrash</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pTrash</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pTrash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:inconsistency data in cache, numOfElem in trashcan:%d"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
             <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElemsInTrash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>__trashcan_unlock</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>stat</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"false"</literal></expr>, <expr><literal type="string">"true"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s start to cleanup trashcan, numOfElem in trashcan:%d, free:%s"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
         <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElemsInTrash</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>force</name></expr> ?</condition><then> <expr><name><name>stat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>stat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrashElem</name> <modifier>*</modifier></type><name>pElem</name> <init>= <expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pTrash</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pElem</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_REF_VAL_CHECK</name><argument_list>(<argument><expr><name><name>pElem</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pElem</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>pElem</name> <operator>&amp;&amp;</operator> <name><name>pElem</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>pElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <operator>(</operator><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name><name>pElem</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache:%s, key:%p, %p removed from trashcan. numOfElem in trashcan:%d"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pElem</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
             <argument><expr><name><name>pElem</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElemsInTrash</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>doRemoveElemInTrashcan</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>pElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doDestroyTrashcanElem</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>pElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pElem</name> <operator>=</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>pTrash</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pElem</name> <operator>=</operator> <name><name>pElem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>__trashcan_unlock</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doCleanupDataCache</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCacheObjTravSup</name></type> <name>sup</name> <init>= <expr><block>{<expr><operator>.</operator><name>pCacheObj</name> <operator>=</operator> <name>pCacheObj</name></expr>, <expr><operator>.</operator><name>fp</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>time</name> <operator>=</operator> <macro><name>taosGetTimestampMs</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>doTraverseElems</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>doRemoveNodeFn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// todo memory leak if there are object with refcount greater than 0 in hash table?</comment>
  <expr_stmt><expr><call><name>taosTrashcanEmpty</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__trashcan_lock_destroy</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>pEntryList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doCacheRefresh</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>__cache_trav_fn_t</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param1</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pCacheObj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCacheObjTravSup</name></type> <name>sup</name> <init>= <expr><block>{<expr><operator>.</operator><name>pCacheObj</name> <operator>=</operator> <name>pCacheObj</name></expr>, <expr><operator>.</operator><name>fp</name> <operator>=</operator> <name>fp</name></expr>, <expr><operator>.</operator><name>time</name> <operator>=</operator> <name>time</name></expr>, <expr><operator>.</operator><name>param1</name> <operator>=</operator> <name>param1</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>doTraverseElems</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>doRemoveExpiredFn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCacheRefreshWorkerUnexpectedStopped</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>refreshWorkerNormalStopped</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>refreshWorkerUnexpectedStopped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosCacheTimedRefresh</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pCacheArrayList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache refresh thread starts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"cacheRefresh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>SLEEP_DURATION</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// 500 ms</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>       <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>taosCheckCurrentInDll</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>taosCacheRefreshWorkerUnexpectedStopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><name>SLEEP_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>stopRefreshWorker</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pCacheArrayList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pCacheArrayList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>pCacheObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"object is destroyed. ignore and try next"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// check if current cache object will be deleted every 500ms.</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>deleting</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name>pCacheArrayList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pCacheArrayList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"%s is destroying, remove it from refresh list, remain cache obj:%"</literal> <name>PRIzu</name></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>deleting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// reset the deleting flag to enable pCacheObj to continue releasing resources.</comment>

        <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>count</name> <operator>%</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>checkTick</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>size_t</name></type> <name>elemInHash</name> <init>= <expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>elemInHash</name> <operator>+</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElemsInTrash</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"%s refresh thread scan"</literal></expr></argument>, <argument><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>statistics</name><operator>.</operator><name>refreshCount</name></name><operator>++</operator></expr>;</expr_stmt>

      <comment type="line">// refresh data in hash table</comment>
      <if_stmt><if>if <condition>(<expr><name>elemInHash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doCacheRefresh</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosTrashcanEmpty</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>

<label><name>_end</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pCacheArrayList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pCacheArrayList</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>refreshWorkerNormalStopped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"cache refresh thread quits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCacheRefresh</name><parameter_list>(<parameter><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>, <parameter><decl><type><name>__cache_trav_fn_t</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param1</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCacheObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>doCacheRefresh</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>param1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosStopCacheRefreshWorker</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>stopRefreshWorker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TdThreadOnce</name></type> <name>tmp</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cacheRefreshWorker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdThreadOnce</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name>cacheRefreshWorker</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pCacheArrayList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>taosCacheGetNumOfObj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>+</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>numOfElemsInTrash</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>SCacheIter</name> <modifier>*</modifier></type><name>taosCacheCreateIter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pCacheObj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCacheIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCacheIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pCacheObj</name></name> <operator>=</operator> <operator>(</operator><name>SCacheObj</name> <operator>*</operator><operator>)</operator><name>pCacheObj</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>entryIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>pIter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosCacheIterNext</name><parameter_list>(<parameter><decl><type><name>SCacheIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCacheObj</name> <modifier>*</modifier></type><name>pCacheObj</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pCacheObj</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>numOfObj</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// release the reference for all objects in the snapshot</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>numOfObj</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pCurrent</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosCacheRelease</name><argument_list>(<argument><expr><name>pCacheObj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pCurrent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>entryIndex</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>entryIndex</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>entryIndex</name></name> <operator>&gt;=</operator> <name><name>pCacheObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SCacheEntry</name> <modifier>*</modifier></type><name>pEntry</name> <init>= <expr><operator>&amp;</operator><name><name>pCacheObj</name><operator>-&gt;</operator><name>pEntryList</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>entryIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>numOfObj</name></name> <operator>&lt;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pCurrent</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pCurrent</name></name> <operator>=</operator> <operator>(</operator><name>SCacheNode</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pCurrent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_INC</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pCurrent</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>numOfObj</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosCacheIterGetData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SCacheIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pCurrent</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosCacheIterGetKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SCacheIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCacheNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pCurrent</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCacheDestroyIter</name><parameter_list>(<parameter><decl><type><name>SCacheIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pCurrent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
