<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tlist.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlist.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>tdListInit</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eleSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>TD_DLIST_INIT</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>listEleSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>eleSize</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SList</name> <modifier>*</modifier></type><name>tdListNew</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>eleSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>(</operator><name>SList</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tdListInit</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>eleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdListEmpty</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>TD_DLIST_HEAD</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TD_DLIST_POP</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tdListFree</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdListEmpty</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdListPrependNode</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>TD_DLIST_PREPEND</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tdListAppendNode</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>TD_DLIST_APPEND</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdListPrepend</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SListNode</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SListNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>eleSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>eleSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TD_DLIST_PREPEND</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdListAppend</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SListNode</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SListNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>eleSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>eleSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TD_DLIST_APPEND</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SListNode</name> <modifier>*</modifier></type><name>tdListPopHead</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>TD_DLIST_HEAD</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TD_DLIST_POP</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SListNode</name> <modifier>*</modifier></type><name>tdListPopTail</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>TD_DLIST_TAIL</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TD_DLIST_POP</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SListNode</name> <modifier>*</modifier></type><name>tdListGetHead</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>TD_DLIST_HEAD</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>SListNode</name> <modifier>*</modifier></type><name>tdListGetTail</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>TD_DLIST_TAIL</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>SListNode</name> <modifier>*</modifier></type><name>tdListPopNode</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>TD_DLIST_POP</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Move all node elements from src to dst, the dst is assumed as an empty list</comment>
<function><type><name>void</name></type> <name>tdListMove</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// assert(dst-&gt;eleSize == src-&gt;eleSize);</comment>
  <decl_stmt><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>tdListPopHead</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdListAppendNode</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdListDiscard</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>listHead</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>listTail</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>listNEles</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdListNodeGetData</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>listEleSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tdListInitIter</name><parameter_list>(<parameter><decl><type><name>SList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>SListIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>TD_LIST_DIRECTION_T</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>direction</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>TD_LIST_FORWARD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>listHead</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>listTail</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SListNode</name> <modifier>*</modifier></type><name>tdListNext</name><parameter_list>(<parameter><decl><type><name>SListIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SListNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <name>TD_LIST_FORWARD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>TD_DLIST_NODE_NEXT</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>TD_DLIST_NODE_PREV</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function></unit>
