<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tsched.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsched.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttimer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP_SCHEDULER_TIME_WINDOW</name></cpp:macro> <cpp:value>30000</cpp:value></cpp:define>  <comment type="line">// every 30sec, take a snap shot of task queue.</comment>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>taosProcessSchedQueue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>taosDumpSchedulerStatus</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qhandle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosInitScheduler</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>queueSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfThreads</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>SSchedQueue</name> <modifier>*</modifier></type><name>pSched</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>schedMalloced</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSched</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pSched</name> <operator>=</operator> <operator>(</operator><name>SSchedQueue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchedQueue</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pSched</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"%s: no enough memory for pSched"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>schedMalloced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSched</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <operator>(</operator><name>SSchedMsg</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchedMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>queueSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSched</name><operator>-&gt;</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"%s: no enough memory for queue"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCleanUpScheduler</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>schedMalloced</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSched</name><operator>-&gt;</operator><name>qthread</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdThread</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>numOfThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSched</name><operator>-&gt;</operator><name>qthread</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"%s: no enough memory for qthread"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCleanUpScheduler</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>schedMalloced</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSched</name><operator>-&gt;</operator><name>queueSize</name></name> <operator>=</operator> <name>queueSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// fix buffer overflow</comment>

  <expr_stmt><expr><name><name>pSched</name><operator>-&gt;</operator><name>fullSlot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSched</name><operator>-&gt;</operator><name>emptySlot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"init %s:queueMutex failed(%s)"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCleanUpScheduler</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>schedMalloced</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>emptySem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>pSched</name><operator>-&gt;</operator><name>queueSize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"init %s:empty semaphore failed(%s)"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCleanUpScheduler</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>schedMalloced</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>fullSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"init %s:full semaphore failed(%s)"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCleanUpScheduler</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>schedMalloced</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfThreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>attr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>qthread</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>taosProcessSchedQueue</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pSched</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"%s: failed to create rpc thread(%s)"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosCleanUpScheduler</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>schedMalloced</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>pSched</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"%s scheduler is initialized, numOfThreads:%d"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pSched</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosInitSchedulerWithInfo</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>queueSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfThreads</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrCtrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchedQueue</name> <modifier>*</modifier></type><name>pSched</name> <init>= <expr><call><name>taosInitScheduler</name><argument_list>(<argument><expr><name>queueSize</name></expr></argument>, <argument><expr><name>numOfThreads</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>tmrCtrl</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pSched</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSched</name><operator>-&gt;</operator><name>pTmrCtrl</name></name> <operator>=</operator> <name>tmrCtrl</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>taosDumpSchedulerStatus</name></expr></argument>, <argument><expr><name>DUMP_SCHEDULER_TIME_WINDOW</name></expr></argument>, <argument><expr><name>pSched</name></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>pTmrCtrl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>pTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pSched</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosProcessSchedQueue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>scheduler</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchedMsg</name></type>    <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchedQueue</name> <modifier>*</modifier></type><name>pSched</name> <init>= <expr><operator>(</operator><name>SSchedQueue</name> <operator>*</operator><operator>)</operator><name>scheduler</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s-taskQ"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>fullSem</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uFatal</name><argument_list>(<argument><expr><literal type="string">"wait %s fullSem failed(%s)"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uFatal</name><argument_list>(<argument><expr><literal type="string">"lock %s queueMutex failed(%s)"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>pSched</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>pSched</name><operator>-&gt;</operator><name>fullSlot</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>queue</name></name> <operator>+</operator> <name><name>pSched</name><operator>-&gt;</operator><name>fullSlot</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchedMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSched</name><operator>-&gt;</operator><name>fullSlot</name></name> <operator>=</operator> <operator>(</operator><name><name>pSched</name><operator>-&gt;</operator><name>fullSlot</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pSched</name><operator>-&gt;</operator><name>queueSize</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uFatal</name><argument_list>(<argument><expr><literal type="string">"unlock %s queueMutex failed(%s)"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>emptySem</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uFatal</name><argument_list>(<argument><expr><literal type="string">"post %s emptySem failed(%s)"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>msg</name><operator>.</operator><name>fp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>msg</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>.</operator><name>tfp</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>msg</name><operator>.</operator><name>tfp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name><name>msg</name><operator>.</operator><name>ahandle</name></name><operator>,</operator> <name><name>msg</name><operator>.</operator><name>thandle</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taosScheduleTask</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>queueScheduler</name></decl></parameter>, <parameter><decl><type><name>SSchedMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchedQueue</name> <modifier>*</modifier></type><name>pSched</name> <init>= <expr><operator>(</operator><name>SSchedQueue</name> <operator>*</operator><operator>)</operator><name>queueScheduler</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pSched</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"sched is not ready, msg:%p is dropped"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"sched is already stopped, msg:%p is dropped"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>emptySem</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uFatal</name><argument_list>(<argument><expr><literal type="string">"wait %s emptySem failed(%s)"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uFatal</name><argument_list>(<argument><expr><literal type="string">"lock %s queueMutex failed(%s)"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSched</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>pSched</name><operator>-&gt;</operator><name>emptySlot</name></name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>pMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSched</name><operator>-&gt;</operator><name>emptySlot</name></name> <operator>=</operator> <operator>(</operator><name><name>pSched</name><operator>-&gt;</operator><name>emptySlot</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pSched</name><operator>-&gt;</operator><name>queueSize</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uFatal</name><argument_list>(<argument><expr><literal type="string">"unlock %s queueMutex failed(%s)"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>fullSem</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uFatal</name><argument_list>(<argument><expr><literal type="string">"post %s fullSem failed(%s)"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCleanUpScheduler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchedQueue</name> <modifier>*</modifier></type><name>pSched</name> <init>= <expr><operator>(</operator><name>SSchedQueue</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSched</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"start to cleanup %s schedQsueue"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSched</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>qthread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>fullSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSched</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>qthread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>qthread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>qthread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>emptySem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>fullSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSched</name><operator>-&gt;</operator><name>pTimer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosTmrStop</name><argument_list>(<argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>pTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSched</name><operator>-&gt;</operator><name>pTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSched</name><operator>-&gt;</operator><name>queue</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSched</name><operator>-&gt;</operator><name>qthread</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>qthread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <comment type="line">// taosMemoryFree(pSched);</comment>
</block_content>}</block></function>

<comment type="line">// for debug purpose, dump the scheduler status every 1min.</comment>
<function><type><name>void</name></type> <name>taosDumpSchedulerStatus</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qhandle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchedQueue</name> <modifier>*</modifier></type><name>pSched</name> <init>= <expr><operator>(</operator><name>SSchedQueue</name> <operator>*</operator><operator>)</operator><name>qhandle</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSched</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pSched</name><operator>-&gt;</operator><name>pTimer</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pSched</name><operator>-&gt;</operator><name>pTimer</name></name> <operator>!=</operator> <name>tmrId</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>pSched</name><operator>-&gt;</operator><name>emptySlot</name></name> <operator>-</operator> <name><name>pSched</name><operator>-&gt;</operator><name>fullSlot</name></name><operator>)</operator> <operator>+</operator> <name><name>pSched</name><operator>-&gt;</operator><name>queueSize</name></name><operator>)</operator> <operator>%</operator> <name><name>pSched</name><operator>-&gt;</operator><name>queueSize</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"scheduler:%s, current tasks in queue:%d, task thread:%d"</literal></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>taosDumpSchedulerStatus</name></expr></argument>, <argument><expr><name>DUMP_SCHEDULER_TIME_WINDOW</name></expr></argument>, <argument><expr><name>pSched</name></expr></argument>, <argument><expr><name><name>pSched</name><operator>-&gt;</operator><name>pTmrCtrl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSched</name><operator>-&gt;</operator><name>pTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
