<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tbloomfilter.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tbloomfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIT_NUM_BITS</name></cpp:macro>      <cpp:value>64ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIT_ADDR_NUM_BITS</name></cpp:macro> <cpp:value>6ULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>setBit</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>unitIndex</name> <init>= <expr><name>index</name> <operator>&gt;&gt;</operator> <name>UNIT_ADDR_NUM_BITS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>index</name> <operator>%</operator> <name>UNIT_NUM_BITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>old</name> <init>= <expr><name><name>buf</name><index>[<expr><name>unitIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><name>unitIndex</name></expr>]</index></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
  <return>return <expr><name><name>buf</name><index>[<expr><name>unitIndex</name></expr>]</index></name> <operator>!=</operator> <name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>getBit</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>unitIndex</name> <init>= <expr><name>index</name> <operator>&gt;&gt;</operator> <name>UNIT_ADDR_NUM_BITS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>index</name> <operator>%</operator> <name>UNIT_NUM_BITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>buf</name><index>[<expr><name>unitIndex</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SBloomFilter</name> <modifier>*</modifier></type><name>tBloomFilterInit</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>expectedEntries</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>errorRate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>expectedEntries</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>errorRate</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>errorRate</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SBloomFilter</name> <modifier>*</modifier></type><name>pBF</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBloomFilter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBF</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>expectedEntries</name></name> <operator>=</operator> <name>expectedEntries</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>errorRate</name></name> <operator>=</operator> <name>errorRate</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>lnRate</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><name>errorRate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// ln(2)^2 = 0.480453013918201</comment>
  <comment type="line">// m = - n * ln(P) / ( ln(2) )^2</comment>
  <comment type="line">// m is the size of bloom filter, n is expected entries, P is false positive probability</comment>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>numUnits</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name>expectedEntries</name> <operator>*</operator> <name>lnRate</name> <operator>/</operator> <literal type="number">0.480453013918201</literal> <operator>/</operator> <name>UNIT_NUM_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>numBits</name></name> <operator>=</operator> <name><name>pBF</name><operator>-&gt;</operator><name>numUnits</name></name> <operator>*</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// ln(2) = 0.693147180559945</comment>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>hashFunctions</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name>lnRate</name> <operator>/</operator> <literal type="number">0.693147180559945</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*pBF-&gt;hashFn1 = taosGetDefaultHashFunction(TSDB_DATA_TYPE_TIMESTAMP);*/</comment>
  <comment type="block">/*pBF-&gt;hashFn2 = taosGetDefaultHashFunction(TSDB_DATA_TYPE_NCHAR);*/</comment>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>hashFn1</name></name> <operator>=</operator> <name>taosFastHash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>hashFn2</name></name> <operator>=</operator> <name>taosDJB2Hash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>numUnits</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBF</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tBloomFilterDestroy</name><argument_list>(<argument><expr><name>pBF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pBF</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBloomFilterPut</name><parameter_list>(<parameter><decl><type><name>SBloomFilter</name> <modifier>*</modifier></type><name>pBF</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>keyBuf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>tBloomFilterIsFull</name><argument_list>(<argument><expr><name>pBF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>                <name>h1</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name><name>pBF</name><operator>-&gt;</operator><name>hashFn1</name></name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>                <name>h2</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name><name>pBF</name><operator>-&gt;</operator><name>hashFn2</name></name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                    <name>hasChange</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <specifier>register</specifier> <name>uint64_t</name></type> <name>size</name> <init>= <expr><name><name>pBF</name><operator>-&gt;</operator><name>numBits</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>                <name>cbHash</name> <init>= <expr><name>h1</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBF</name><operator>-&gt;</operator><name>hashFunctions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>hasChange</name> <operator>|=</operator> <call><name>setBit</name><argument_list>(<argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>cbHash</name> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cbHash</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>hasChange</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBloomFilterNoContain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBloomFilter</name> <modifier>*</modifier></type><name>pBF</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>keyBuf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type>                <name>h1</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name><name>pBF</name><operator>-&gt;</operator><name>hashFn1</name></name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>                <name>h2</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name><name>pBF</name><operator>-&gt;</operator><name>hashFn2</name></name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <specifier>register</specifier> <name>uint64_t</name></type> <name>size</name> <init>= <expr><name><name>pBF</name><operator>-&gt;</operator><name>numBits</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>                <name>cbHash</name> <init>= <expr><name>h1</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBF</name><operator>-&gt;</operator><name>hashFunctions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getBit</name><argument_list>(<argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>cbHash</name> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cbHash</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tBloomFilterDestroy</name><parameter_list>(<parameter><decl><type><name>SBloomFilter</name> <modifier>*</modifier></type><name>pBF</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBF</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pBF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBloomFilterEncode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBloomFilter</name> <modifier>*</modifier></type><name>pBF</name></decl></parameter>, <parameter><decl><type><name>SEncoder</name> <modifier>*</modifier></type><name>pEncoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>hashFunctions</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>expectedEntries</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>numUnits</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>numBits</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBF</name><operator>-&gt;</operator><name>numUnits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pUnits</name> <init>= <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>pBF</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pUnits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeDouble</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>errorRate</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SBloomFilter</name> <modifier>*</modifier></type><name>tBloomFilterDecode</name><parameter_list>(<parameter><decl><type><name>SDecoder</name> <modifier>*</modifier></type><name>pDecoder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBloomFilter</name> <modifier>*</modifier></type><name>pBF</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBloomFilter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBF</name><operator>-&gt;</operator><name>hashFunctions</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_error</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBF</name><operator>-&gt;</operator><name>expectedEntries</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_error</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBF</name><operator>-&gt;</operator><name>numUnits</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_error</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBF</name><operator>-&gt;</operator><name>numBits</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_error</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBF</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_error</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pBF</name><operator>-&gt;</operator><name>numUnits</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBF</name><operator>-&gt;</operator><name>numUnits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pUnits</name> <init>= <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>pBF</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pUnits</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_error</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeDouble</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBF</name><operator>-&gt;</operator><name>errorRate</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_error</name>;</goto></block_content></block></if></if_stmt>
  <comment type="block">/*pBF-&gt;hashFn1 = taosGetDefaultHashFunction(TSDB_DATA_TYPE_TIMESTAMP);*/</comment>
  <comment type="block">/*pBF-&gt;hashFn2 = taosGetDefaultHashFunction(TSDB_DATA_TYPE_NCHAR);*/</comment>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>hashFn1</name></name> <operator>=</operator> <name>taosFastHash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBF</name><operator>-&gt;</operator><name>hashFn2</name></name> <operator>=</operator> <name>taosDJB2Hash</name></expr>;</expr_stmt>
  <return>return <expr><name>pBF</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>tBloomFilterDestroy</name><argument_list>(<argument><expr><name>pBF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tBloomFilterIsFull</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBloomFilter</name> <modifier>*</modifier></type><name>pBF</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pBF</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>pBF</name><operator>-&gt;</operator><name>expectedEntries</name></name></expr>;</return> </block_content>}</block></function>
</unit>
