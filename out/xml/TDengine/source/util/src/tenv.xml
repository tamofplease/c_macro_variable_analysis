<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tenv.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tenv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tconfig.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>char</name></type> <name>toLowChar</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><ternary><condition><expr><name>c</name> <operator>&gt;</operator> <literal type="char">'Z'</literal> <operator>||</operator> <name>c</name> <operator>&lt;</operator> <literal type="char">'A'</literal></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="char">'a'</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosEnvNameToCfgName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envNameStr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cfgNameStr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>cfgNameMaxLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>envNameStr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cfgNameStr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>cfgNameStr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>envNameStr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'T'</literal> <operator>||</operator> <name><name>envNameStr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'A'</literal> <operator>||</operator> <name><name>envNameStr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'O'</literal> <operator>||</operator> <name><name>envNameStr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'S'</literal> <operator>||</operator>
      <name><name>envNameStr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// if(p != envNameStr) strncpy(p, envNameStr, cfgNameMaxLen - 1);</comment>
    <comment type="line">// p[cfgNameMaxLen - 1] = '\0';</comment>
    <comment type="line">// return strlen(cfgNameStr);</comment>
    <expr_stmt><expr><name><name>cfgNameStr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>envNameStr</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>envNameStr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>toLowChar</name><argument_list>(<argument><expr><operator>*</operator><name>envNameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>envNameStr</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cfgNameMaxLen</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>envNameStr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>envNameStr</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>envNameStr</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>envNameStr</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>envNameStr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>toLowChar</name><argument_list>(<argument><expr><operator>*</operator><name>envNameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>envNameStr</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cfgNameStr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosEnvToCfg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envStr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cfgStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>envStr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cfgStr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>cfgStr</name> <operator>!=</operator> <name>envStr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cfgStr</name></expr></argument>, <argument><expr><name>envStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>cfgStr</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>CFG_NAME_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pEnd</name> <init>= <expr><operator>&amp;</operator><name><name>cfgStr</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cfgStr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pEnd</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pEnd</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>cfgNameLen</name> <init>= <expr><call><name>taosEnvNameToCfgName</name><argument_list>(<argument><expr><name>cfgStr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>CFG_NAME_MAX_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cfgNameLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cfgStr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cfgNameLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfgStr</name><index>[<expr><name>cfgNameLen</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>cfgStr</name> <operator>-</operator> <name>cfgNameLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>cfgStr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cfgStr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></unit>
