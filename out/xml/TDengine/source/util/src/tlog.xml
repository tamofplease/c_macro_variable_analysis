<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tlog.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tconfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_MAX_LINE_SIZE</name></cpp:macro>             <cpp:value>(1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_MAX_LINE_BUFFER_SIZE</name></cpp:macro>      <cpp:value>(LOG_MAX_LINE_SIZE + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_MAX_LINE_DUMP_SIZE</name></cpp:macro>        <cpp:value>(1024 * 1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_MAX_LINE_DUMP_BUFFER_SIZE</name></cpp:macro> <cpp:value>(LOG_MAX_LINE_DUMP_SIZE + 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_FILE_NAME_LEN</name></cpp:macro>    <cpp:value>300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_DEFAULT_BUF_SIZE</name></cpp:macro> <cpp:value>(20 * 1024 * 1024)</cpp:value></cpp:define>  <comment type="line">// 20MB</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_DEFAULT_INTERVAL</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_INTERVAL_STEP</name></cpp:macro>    <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_MIN_INTERVAL</name></cpp:macro>     <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_MAX_INTERVAL</name></cpp:macro>     <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_MAX_WAIT_MSEC</name></cpp:macro>    <cpp:value>1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_BUF_BUFFER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;buffer)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_BUF_START</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((x)-&gt;buffStart)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_BUF_END</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>((x)-&gt;buffEnd)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_BUF_SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((x)-&gt;buffSize)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_BUF_MUTEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((x)-&gt;buffMutex)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>buffStart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>buffEnd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>buffSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>minBuffSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type>     <name>pFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>stop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThread</name></type>      <name>asyncThread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThreadMutex</name></type> <name>buffMutex</name></decl>;</decl_stmt>
}</block></struct></type> <name>SLogBuff</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>fileNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>maxLines</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>lines</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>flag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>openInProgress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pid_t</name></type>         <name>pid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>logName</name><index>[<expr><name>LOG_FILE_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLogBuff</name>     <modifier>*</modifier></type><name>logHandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThreadMutex</name></type> <name>logMutex</name></decl>;</decl_stmt>
}</block></struct></type> <name>SLogObj</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SConfig</name> <modifier>*</modifier></type><name>tsCfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int8_t</name></type>   <name>tsLogInited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SLogObj</name></type>  <name>tsLogObj</name> <init>= <expr><block>{<expr><operator>.</operator><name>fileNum</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type>  <name>tsAsyncLogLostLines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>tsWriteInterval</name> <init>= <expr><name>LOG_DEFAULT_INTERVAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>tsDaylightActive</name></decl>;</decl_stmt> <comment type="block">/* Currently in daylight saving time. */</comment>

<decl_stmt><decl><type><name>bool</name></type>    <name>tsLogEmbedded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>    <name>tsAsyncLog</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>    <name>tsAssert</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfLogLines</name> <init>= <expr><literal type="number">10000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsLogKeepDays</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LogFp</name></type>   <name>tsLogFp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tsNumOfErrorLogs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tsNumOfInfoLogs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tsNumOfDebugLogs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tsNumOfTraceLogs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// log</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>vDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>mDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>jniDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tmrDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>uDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rpcDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>qDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>wDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsdbDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tdbDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tqDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>fsDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>metaDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>udfDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>smaDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>idxDebugFlag</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dbgEmptyW</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dbgWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dbgSmallWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dbgBigWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dbgWSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name>     <modifier>*</modifier></type><name>taosAsyncOutputLog</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>taosPushLogBuffer</name><parameter_list>(<parameter><decl><type><name>SLogBuff</name> <modifier>*</modifier></type><name>pLogBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SLogBuff</name> <modifier>*</modifier></type><name>taosLogBuffNew</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>bufSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>      <name>taosCloseLogByFd</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>taosOpenLogFile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxLines</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxFileNum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>taosCompressFile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>srcFileName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destFileName</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>taosUpdateDaylight</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>      <name>Tm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeSecs</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosGetTimeOfDay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeSecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>curTime</name> <init>= <expr><name><name>timeSecs</name><operator>.</operator><name>tv_sec</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ptm</name> <operator>=</operator> <call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsDaylightActive</name> <operator>=</operator> <name><name>ptm</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>taosGetDaylight</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>tsDaylightActive</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosStartLog</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>threadAttr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>threadAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>asyncThread</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>threadAttr</name></expr></argument>, <argument><expr><name>taosAsyncOutputLog</name></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>threadAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosInitLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxFiles</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsLogInited</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>osUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>fullName</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal> <name>TD_DIRSEP</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><name>logName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>logName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosUpdateDaylight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name> <operator>=</operator> <call><name>taosLogBuffNew</name><argument_list>(<argument><expr><name>LOG_DEFAULT_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosOpenLogFile</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><name>tsNumOfLogLines</name></expr></argument>, <argument><expr><name>maxFiles</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosStartLog</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosStopLog</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCloseLog</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosStopLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>asyncThread</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>asyncThread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>asyncThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>tsLogInited</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>buffMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsLogObj</name><operator>.</operator><name>logMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>taosLockLogFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tsLogObj</name><operator>.</operator><name>fileNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosLockFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosUnLockLogFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tsLogObj</name><operator>.</operator><name>fileNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosUnLockFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosKeepOldLog</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>oldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tsLogKeepDays</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>fileSec</name> <init>= <expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fileName</name><index>[<expr><name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%s.%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logName</name></name></expr></argument>, <argument><expr><name>fileSec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRenameFile</name><argument_list>(<argument><expr><name>oldName</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsLogKeepDays</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>compressFileName</name><index>[<expr><name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>compressFileName</name></expr></argument>, <argument><expr><name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%s.%"</literal> <name>PRId64</name> <literal type="string">".gz"</literal></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logName</name></name></expr></argument>, <argument><expr><name>fileSec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosCompressFile</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>compressFileName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosRemoveOldFiles</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><call><name>TABS</name><argument_list>(<argument><expr><name>tsLogKeepDays</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>taosThreadToOpenNewFile</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>keepName</name><index>[<expr><name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>keepName</name></expr></argument>, <argument><expr><literal type="string">"%s.%d"</literal></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logName</name></name></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>flag</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"%s.%d"</literal></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logName</name></name></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosUmaskFile</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>openInProgress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <name><name>tsLogObj</name><operator>.</operator><name>maxLines</name></name> <operator>-</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"open new log file fail! reason:%s, reuse lastlog"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosLockLogFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pOldFile</name> <init>= <expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <name>pFile</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>openInProgress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSsleep</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseLogByFd</name><argument_list>(<argument><expr><name>pOldFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"   new log file:%d is opened"</literal></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"=================================="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosKeepOldLog</name><argument_list>(<argument><expr><name>keepName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosOpenNewLogFile</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsLogObj</name><operator>.</operator><name>logMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tsLogObj</name><operator>.</operator><name>lines</name></name> <operator>&gt;</operator> <name><name>tsLogObj</name><operator>.</operator><name>maxLines</name></name> <operator>&amp;&amp;</operator> <name><name>tsLogObj</name><operator>.</operator><name>openInProgress</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>openInProgress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"open new log file ......"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TdThread</name></type>     <name>thread</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>attr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>taosThreadToOpenNewFile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsLogObj</name><operator>.</operator><name>logMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosResetLog</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>lastName</name><index>[<expr><name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>lastName</name></expr></argument>, <argument><expr><literal type="string">"%s.%d"</literal></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logName</name></name></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// force create a new log file</comment>
  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <name><name>tsLogObj</name><operator>.</operator><name>maxLines</name></name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosOpenNewLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>lastName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"=================================="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"   reset log file "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>taosCheckFileIsOpen</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>logFileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>logFileName</name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nfailed to open log file:%s, reason:%s\n"</literal></expr></argument>, <argument><expr><name>logFileName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosLockLogFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosUnLockLogFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosGetLogFileName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>tsLogObj</name><operator>.</operator><name>fileNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tsLogObj</name><operator>.</operator><name>fileNum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>fileName</name><index>[<expr><name>LOG_FILE_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>LOG_FILE_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%d.0"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>file1open</name> <init>= <expr><call><name>taosCheckFileIsOpen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>LOG_FILE_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%d.1"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>file2open</name> <init>= <expr><call><name>taosCheckFileIsOpen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file1open</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>file2open</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logName</name></name></expr></argument>, <argument><expr><name>LOG_FILE_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>LOG_FILE_NAME_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logName</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosOpenLogFile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxLines</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxFileNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <comment type="block">/*
   * always set maxFileNum to 1
   * means client log filename is unique in windows
   */</comment>
  <expr_stmt><expr><name>maxFileNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>name</name><index>[<expr><name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>logstat0_mtime</name></decl>, <decl><type ref="prev"/><name>logstat1_mtime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>maxLines</name></name> <operator>=</operator> <name>maxLines</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>fileNum</name></name> <operator>=</operator> <name>maxFileNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetLogFileName</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">50</literal> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>log0Exist</name> <init>= <expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>logstat0_mtime</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">50</literal> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>log1Exist</name> <init>= <expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>logstat1_mtime</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// if none of the log files exist, open 0, if both exists, open the old one</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>log0Exist</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>log1Exist</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>log1Exist</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>log0Exist</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>logstat0_mtime</name> <operator>&gt;</operator> <name>logstat1_mtime</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>fileName</name><index>[<expr><name>LOG_FILE_NAME_LEN</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"%s.%d"</literal></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logName</name></name></expr></argument>, <argument><expr><name><name>tsLogObj</name><operator>.</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsLogObj</name><operator>.</operator><name>logMutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosUmaskFile</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nfailed to open log file:%s, reason:%s\n"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosLockLogFile</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// only an estimate for number of lines</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>filesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosFStatFile</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filesize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nfailed to fstat log file:%s, reason:%s\n"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>filesize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsLogObj</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <name>size</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"==================================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"                new log file                      \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"==================================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosUpdateLogNums</name><parameter_list>(<parameter><decl><type><name>ELogLevel</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>DEBUG_ERROR</name></expr>:</case>
      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsNumOfErrorLogs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DEBUG_INFO</name></expr>:</case>
      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsNumOfInfoLogs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DEBUG_DEBUG</name></expr>:</case>
      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsNumOfDebugLogs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DEBUG_DUMP</name></expr>:</case>
    <case>case <expr><name>DEBUG_TRACE</name></expr>:</case>
      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsNumOfTraceLogs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>taosBuildLogHead</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>      <name>Tm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeSecs</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosGetTimeOfDay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeSecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>curTime</name> <init>= <expr><name><name>timeSecs</name><operator>.</operator><name>tv_sec</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ptm</name> <operator>=</operator> <call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%02d/%02d %02d:%02d:%02d.%06d %08"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>ptm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ptm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>ptm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>,
                 <argument><expr><name><name>ptm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>ptm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>timeSecs</name><operator>.</operator><name>tv_usec</name></name></expr></argument>, <argument><expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>taosPrintLogImp</name><parameter_list>(<parameter><decl><type><name>ELogLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dflag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dflag</name> <operator>&amp;</operator> <name>DEBUG_FILE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name> <operator>&amp;&amp;</operator> <name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>osLogSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosUpdateLogNums</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tsAsyncLog</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>!=</operator> <name>DEBUG_FATAL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosPushLogBuffer</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>DEBUG_FATAL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tsLogObj</name><operator>.</operator><name>maxLines</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tsLogObj</name><operator>.</operator><name>lines</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tsLogObj</name><operator>.</operator><name>lines</name></name> <operator>&gt;</operator> <name><name>tsLogObj</name><operator>.</operator><name>maxLines</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tsLogObj</name><operator>.</operator><name>openInProgress</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosOpenNewLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dflag</name> <operator>&amp;</operator> <name>DEBUG_SCREEN</name></expr>)</condition> <block>{<block_content>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wunused-result"</cpp:literal></cpp:pragma>
    <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosPrintLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>ELogLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dflag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dflag</name> <operator>&amp;</operator> <name>DEBUG_FILE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dflag</name> <operator>&amp;</operator> <name>DEBUG_SCREEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>buffer</name><index>[<expr><name>LOG_MAX_LINE_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>taosBuildLogHead</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>argpointer</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>writeLen</name> <init>= <expr><name>len</name> <operator>+</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>LOG_MAX_LINE_BUFFER_SIZE</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>writeLen</name> <operator>&gt;</operator> <name>LOG_MAX_LINE_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>writeLen</name> <operator>=</operator> <name>LOG_MAX_LINE_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>writeLen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>writeLen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosPrintLogImp</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>dflag</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>writeLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsLogFp</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&lt;=</operator> <name>DEBUG_INFO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>writeLen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call>(<modifier>*</modifier><name>tsLogFp</name>)<argument_list>(<argument><expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosPrintLongString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>ELogLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dflag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osLogSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dflag</name> <operator>&amp;</operator> <name>DEBUG_FILE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dflag</name> <operator>&amp;</operator> <name>DEBUG_SCREEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>LOG_MAX_LINE_DUMP_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>taosBuildLogHead</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>argpointer</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>LOG_MAX_LINE_DUMP_BUFFER_SIZE</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>LOG_MAX_LINE_DUMP_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>LOG_MAX_LINE_DUMP_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosPrintLogImp</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>dflag</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosDumpData</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osLogSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosUpdateLogNums</name><argument_list>(<argument><expr><name>DEBUG_DUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>temp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>temp</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>temp</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>tsLogObj</name><operator>.</operator><name>logHandle</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosCloseLogByFd</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosUnLockLogFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLogBuff</name> <modifier>*</modifier></type><name>taosLogBuffNew</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>bufSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogBuff</name> <modifier>*</modifier></type><name>pLogBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pLogBuf</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLogBuff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>LOG_BUF_BUFFER</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LOG_BUF_BUFFER</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>LOG_BUF_START</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>LOG_BUF_END</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>bufSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogBuf</name><operator>-&gt;</operator><name>minBuffSize</name></name> <operator>=</operator> <name>bufSize</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogBuf</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LOG_BUF_MUTEX</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <comment type="line">// tsem_init(&amp;(pLogBuf-&gt;buffNotEmpty), 0, 0);</comment>

  <return>return <expr><name>pLogBuf</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><call><name>LOG_BUF_BUFFER</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosCopyLogBuffer</name><parameter_list>(<parameter><decl><type><name>SLogBuff</name> <modifier>*</modifier></type><name>pLogBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>LOG_BUF_BUFFER</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>end</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>end</name> <operator>&lt;</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>LOG_BUF_BUFFER</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>end</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>LOG_BUF_BUFFER</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name> <operator>+</operator> <call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>end</name></expr></argument>, <argument><expr><name>msgLen</name> <operator>-</operator> <call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>LOG_BUF_BUFFER</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>end</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>LOG_BUF_END</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><call><name>LOG_BUF_END</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>msgLen</name><operator>)</operator> <operator>%</operator> <call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosPushLogBuffer</name><parameter_list>(<parameter><decl><type><name>SLogBuff</name> <modifier>*</modifier></type><name>pLogBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>remainSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>lostLine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>           <name><name>tmpBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>tmpBufLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pLogBuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pLogBuf</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LOG_BUF_MUTEX</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>LOG_BUF_START</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>LOG_BUF_END</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>remainSize</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>start</name> <operator>&gt;</operator> <name>end</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>start</name> <operator>-</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>start</name> <operator>+</operator> <call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>lostLine</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpBuf</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>tmpBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"...Lost %"</literal> <name>PRId64</name> <literal type="string">" lines here...\n"</literal></expr></argument>, <argument><expr><name>lostLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpBufLen</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>tmpBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>remainSize</name> <operator>&lt;=</operator> <name>msgLen</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>lostLine</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>remainSize</name> <operator>&lt;=</operator> <operator>(</operator><name>msgLen</name> <operator>+</operator> <name>tmpBufLen</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lostLine</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsAsyncLogLostLines</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LOG_BUF_MUTEX</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>lostLine</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCopyLogBuffer</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>tmpBuf</name></expr></argument>, <argument><expr><name>tmpBufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lostLine</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosCopyLogBuffer</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>, <argument><expr><call><name>LOG_BUF_START</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LOG_BUF_END</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// int32_t w = atomic_sub_fetch_32(&amp;waitLock, 1);</comment>
  <comment type="block">/*
  if (w &lt;= 0 || ((remainSize - msgLen - tmpBufLen) &lt; (LOG_BUF_SIZE(pLogBuf) * 4 /5))) {
    tsem_post(&amp;(pLogBuf-&gt;buffNotEmpty));
    dbgPostN++;
  } else {
    dbgNoPostN++;
  }
  */</comment>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>LOG_BUF_MUTEX</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosGetLogRemainSize</name><parameter_list>(<parameter><decl><type><name>SLogBuff</name> <modifier>*</modifier></type><name>pLogBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rSize</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><ternary><condition><expr><name>rSize</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>rSize</name></expr> </then><else>: <expr><call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>rSize</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosWriteLog</name><parameter_list>(<parameter><decl><type><name>SLogBuff</name> <modifier>*</modifier></type><name>pLogBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>lastDuration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>remainChecked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>pollSize</name></decl>;</decl_stmt>

  <do>do <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>remainChecked</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>LOG_BUF_START</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>LOG_BUF_END</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>dbgEmptyW</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>tsWriteInterval</name> <operator>=</operator> <name>LOG_MAX_INTERVAL</name></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>pollSize</name> <operator>=</operator> <call><name>taosGetLogRemainSize</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pollSize</name> <operator>&lt;</operator> <name><name>pLogBuf</name><operator>-&gt;</operator><name>minBuffSize</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastDuration</name> <operator>+=</operator> <name>tsWriteInterval</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastDuration</name> <operator>&lt;</operator> <name>LOG_MAX_WAIT_MSEC</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>lastDuration</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pLogBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><call><name>LOG_BUF_BUFFER</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>pollSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>tsize</name> <init>= <expr><call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pLogBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><call><name>LOG_BUF_BUFFER</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pLogBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><call><name>LOG_BUF_BUFFER</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>dbgWN</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>dbgWSize</name> <operator>+=</operator> <name>pollSize</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pollSize</name> <operator>&lt;</operator> <name><name>pLogBuf</name><operator>-&gt;</operator><name>minBuffSize</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dbgSmallWN</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>tsWriteInterval</name> <operator>&lt;</operator> <name>LOG_MAX_INTERVAL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsWriteInterval</name> <operator>+=</operator> <name>LOG_INTERVAL_STEP</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pollSize</name> <operator>&gt;</operator> <call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dbgBigWN</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tsWriteInterval</name> <operator>=</operator> <name>LOG_MIN_INTERVAL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pollSize</name> <operator>&gt;</operator> <call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>tsWriteInterval</name> <operator>&gt;</operator> <name>LOG_MIN_INTERVAL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsWriteInterval</name> <operator>-=</operator> <name>LOG_INTERVAL_STEP</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>LOG_BUF_START</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><call><name>LOG_BUF_START</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pollSize</name><operator>)</operator> <operator>%</operator> <call><name>LOG_BUF_SIZE</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>LOG_BUF_START</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>LOG_BUF_END</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pollSize</name> <operator>=</operator> <call><name>taosGetLogRemainSize</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pollSize</name> <operator>&lt;</operator> <name><name>pLogBuf</name><operator>-&gt;</operator><name>minBuffSize</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>tsWriteInterval</name> <operator>=</operator> <name>LOG_MIN_INTERVAL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>remainChecked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>taosAsyncOutputLog</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogBuff</name> <modifier>*</modifier></type><name>pLogBuf</name> <init>= <expr><operator>(</operator><name>SLogBuff</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>updateCron</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>count</name> <operator>+=</operator> <name>tsWriteInterval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>updateCron</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><name>tsWriteInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>osUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Polling the buffer</comment>
    <expr_stmt><expr><call><name>taosWriteLog</name><argument_list>(<argument><expr><name>pLogBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>updateCron</name> <operator>&gt;=</operator> <literal type="number">3600</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">40</literal> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosUpdateDaylight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>updateCron</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pLogBuf</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosCompressFile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>srcFileName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destFileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>compressSize</name> <init>= <expr><literal type="number">163840</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>compressSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">//  gzFile  dstFp = NULL;</comment>

  <comment type="line">// srcFp = fopen(srcFileName, "r");</comment>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pSrcFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>srcFileName</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSrcFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>cmp_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>destFileName</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <goto>goto <name>cmp_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  dstFp = gzdopen(fd, "wb6f");</comment>
  <comment type="line">//  if (dstFp == NULL) {</comment>
  <comment type="line">//    ret = -3;</comment>
  <comment type="line">//    close(fd);</comment>
  <comment type="line">//    goto cmp_end;</comment>
  <comment type="line">//  }</comment>
  <comment type="line">//</comment>
  <comment type="line">//  while (!feof(srcFp)) {</comment>
  <comment type="line">//    len = (int32_t)fread(data, 1, compressSize, srcFp);</comment>
  <comment type="line">//    (void)gzwrite(dstFp, data, len);</comment>
  <comment type="line">//  }</comment>

<label><name>cmp_end</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pSrcFile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pSrcFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">//  if (dstFp) {</comment>
  <comment type="line">//    gzclose(dstFp);</comment>
  <comment type="line">//  }</comment>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosAssert</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>condition</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><literal type="string">"UTL FATAL "</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ELogLevel</name></type>   <name>level</name> <init>= <expr><name>DEBUG_FATAL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>dflag</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// tsLogEmbedded ? 255 : uDebugFlag</comment>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>buffer</name><index>[<expr><name>LOG_MAX_LINE_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>len</name> <init>= <expr><call><name>taosBuildLogHead</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>argpointer</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>+</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>LOG_MAX_LINE_BUFFER_SIZE</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argpointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosPrintLogImp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosPrintLog</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>dflag</name></expr></argument>, <argument><expr><literal type="string">"tAssert at file %s:%d exit:%d"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>tsAssert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosPrintTrace</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsAssert</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// taosCloseLog();</comment>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NDEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function></unit>
