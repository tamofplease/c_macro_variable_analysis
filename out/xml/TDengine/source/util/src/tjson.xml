<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tjson.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tjson.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>

<function><type><name>SJson</name><modifier>*</modifier></type> <name>tjsonCreateObject</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pJson</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SJson</name><modifier>*</modifier></type> <name>tjsonCreateArray</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pJson</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tjsonDelete</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonAddIntegerToObject</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonAddDoubleToObject</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>cJSON_AddNumberToObject</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonAddBoolToObject</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>boolean</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>cJSON_AddBoolToObject</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>boolean</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonAddStringToObject</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>cJSON_AddStringToObject</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SJson</name><modifier>*</modifier></type> <name>tjsonAddArrayToObject</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><operator>(</operator><name>SJson</name><operator>*</operator><operator>)</operator><call><name>cJSON_AddArrayToObject</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonAddItemToObject</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonAddItemToArray</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonAddObject</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>FToJson</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObj</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJobj</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJobj</name> <operator>||</operator> <name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>func</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tjsonAddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pJobj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonAddItem</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>FToJson</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJobj</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJobj</name> <operator>||</operator> <name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>func</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pJobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pJobj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonAddArray</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>FToJson</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>itemSize</name></decl></parameter>,
                      <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJsonArray</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJsonArray</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddItem</name><argument_list>(<argument><expr><name>pJsonArray</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pArray</name> <operator>+</operator> <name>itemSize</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonAddTArray</name><parameter_list>(<parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>FToJson</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJsonArray</name> <init>= <expr><call><name>tjsonAddArrayToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJsonArray</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonAddItem</name><argument_list>(<argument><expr><name>pJsonArray</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>tjsonToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>cJSON_Print</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>tjsonToUnformattedString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>cJSON_PrintUnformatted</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>SJson</name><modifier>*</modifier></type> <name>tjsonGetObjectItem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetObjectName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pName</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name><operator>)</operator><operator>-&gt;</operator><name>string</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pName</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetObjectValueString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pValueString</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pValueString</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name><operator>)</operator><operator>-&gt;</operator><name>valuestring</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pValueString</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetStringValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonDupStringValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetBigIntValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <call><name>taosStr2Int64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetIntValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetSmallIntValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetTinyIntValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tjsonGetBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetUBigIntValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>cJSON_GetStringValue</name><argument_list>(<argument><expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><operator>(</operator><name>cJSON</name><operator>*</operator><operator>)</operator><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <call><name>taosStr2UInt64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetUIntValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetUTinyIntValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><call><name>tjsonGetUBigIntValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetBoolValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pObject</name> <init>= <expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObject</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsBool</name><argument_list>(<argument><expr><name>pObject</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <ternary><condition><expr><call><name>cJSON_IsTrue</name><argument_list>(<argument><expr><name>pObject</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetDoubleValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pObject</name> <init>= <expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObject</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>pObject</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <call><name>cJSON_GetNumberValue</name><argument_list>(<argument><expr><name>pObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonGetArraySize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>SJson</name><modifier>*</modifier></type> <name>tjsonGetArrayItem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>cJSON_GetArrayItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonToObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJsonObj</name> <init>= <expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJsonObj</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>func</name><argument_list>(<argument><expr><name>pJsonObj</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonMakeObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pObj</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>objSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>objSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJsonObj</name> <init>= <expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJsonObj</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pObj</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pObj</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>func</name><argument_list>(<argument><expr><name>pJsonObj</name></expr></argument>, <argument><expr><operator>*</operator><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonToArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>itemSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>cJSON</name><modifier>*</modifier></type> <name>jArray</name> <init>= <expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>size</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>==</operator> <name>jArray</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>tjsonGetArraySize</name><argument_list>(<argument><expr><name>jArray</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><call><name>tjsonGetArrayItem</name><argument_list>(<argument><expr><name>jArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pArray</name> <operator>+</operator> <name>itemSize</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tjsonToTArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>FToObject</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>itemSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>cJSON</name><modifier>*</modifier></type> <name>jArray</name> <init>= <expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>size</name> <init>= <expr><call><name>tjsonGetArraySize</name><argument_list>(<argument><expr><name>jArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pArray</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>itemSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pArray</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><operator>*</operator><name>pArray</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><call><name>tjsonGetArrayItem</name><argument_list>(<argument><expr><name>jArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><operator>*</operator><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SJson</name><modifier>*</modifier></type> <name>tjsonParse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>tjsonValidateJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jIn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jIn</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set json real data</comment>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>root</name> <init>= <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>jIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsObject</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>cJSON_GetArrayItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>jsonKey</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jsonKey</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>jsonKey</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><name><name>jsonKey</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_Object</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cJSON_Array</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tjsonGetError</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>cJSON_GetErrorPtr</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function></unit>
