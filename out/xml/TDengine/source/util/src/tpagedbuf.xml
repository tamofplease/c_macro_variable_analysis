<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tpagedbuf.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tpagedbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DATA_PAYLOAD</name><parameter_list>(<parameter><type><name>_p</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>((char*)(_p)-&gt;pData + POINTER_BYTES)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_IN_MEM_AVAILABLE_PAGES</name><parameter_list>(<parameter><type><name>_b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(listNEles((_b)-&gt;lruList) &gt;= (_b)-&gt;inMemPages)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SPageDiskInfo</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPageDiskInfo</name><operator>,</operator> <name>SFreeListItem</name>;</typedef>

<struct>struct <name>SPageInfo</name> <block>{
  <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pn</name></decl>;</decl_stmt>  <comment type="line">// point to list node struct</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>      <name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>pageId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>length</name> <range>: <expr><literal type="number">29</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>       <name>used</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>   <comment type="line">// set current page is in used</comment>
  <decl_stmt><decl><type><name>bool</name></type>       <name>dirty</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>  <comment type="line">// set current buffer page is dirty or not</comment>
}</block>;</struct>

<struct>struct <name>SDiskbasedBuf</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfPages</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>totalBufSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>fileSize</name></decl>;</decl_stmt>  <comment type="line">// disk file size</comment>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>allocateId</name></decl>;</decl_stmt>  <comment type="line">// allocated page id</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>     <name>path</name></decl>;</decl_stmt>        <comment type="line">// file path</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>     <name>prefix</name></decl>;</decl_stmt>      <comment type="line">// file name prefix</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>pageSize</name></decl>;</decl_stmt>    <comment type="line">// current used page size</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>inMemPages</name></decl>;</decl_stmt>  <comment type="line">// numOfPages that are allocated in memory</comment>
  <decl_stmt><decl><type><name>SList</name><modifier>*</modifier></type>    <name>freePgList</name></decl>;</decl_stmt>  <comment type="line">// free page list</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>pIdList</name></decl>;</decl_stmt>     <comment type="line">// page id list</comment>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>all</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SList</name><modifier>*</modifier></type>    <name>lruList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>     <name>emptyDummyIdList</name></decl>;</decl_stmt>  <comment type="line">// dummy id list</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>     <name>assistBuf</name></decl>;</decl_stmt>         <comment type="line">// assistant buffer for compress/decompress data</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>pFree</name></decl>;</decl_stmt>             <comment type="line">// free area in file</comment>
  <decl_stmt><decl><type><name>bool</name></type>      <name>comp</name></decl>;</decl_stmt>              <comment type="line">// compressed before flushed to disk</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>nextPos</name></decl>;</decl_stmt>           <comment type="line">// next page flush position</comment>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>               <name>id</name></decl>;</decl_stmt>           <comment type="line">// for debug purpose</comment>
  <decl_stmt><decl><type><name>bool</name></type>                <name>printStatis</name></decl>;</decl_stmt>  <comment type="line">// Print statistics info when closing this buffer.</comment>
  <decl_stmt><decl><type><name>SDiskbasedBufStatis</name></type> <name>statis</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createDiskFile</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <comment type="line">// prepare the file name when needed it</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosGetTmpfilePath</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><literal type="string">"paged-buf"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>taosMemoryStrDup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator>
      <call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_TRUNC</name> <operator>|</operator> <name>TD_FILE_AUTO_DEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>doCompressData</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>srcSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// do nothing</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>comp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>srcSize</name></expr>;</expr_stmt>
    <return>return <expr><name>data</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <call><name>tsCompressString</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assistBuf</name></name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>ONE_STAGE_COMP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assistBuf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>doDecompressData</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>srcSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// do nothing</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>comp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>srcSize</name></expr>;</expr_stmt>
    <return>return <expr><name>data</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <call><name>tsDecompressString</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assistBuf</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><name>ONE_STAGE_COMP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dst</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assistBuf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>allocatePositionInFile</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFree</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pBuf</name><operator>-&gt;</operator><name>nextPos</name></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFreeListItem</name><modifier>*</modifier></type> <name>pi</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFree</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pi</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>pi</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>length</name></name> <operator>-=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt>

        <return>return <expr><name>offset</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// no available recycle space, allocate new area in file</comment>
    <return>return <expr><name><name>pBuf</name><operator>-&gt;</operator><name>nextPos</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setPageNotInBuf</name><parameter_list>(<parameter><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pPageInfo</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pPageInfo</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>size_t</name></type> <name>getAllocPageSize</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>pageSize</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>pageSize</name> <operator>+</operator> <name>POINTER_BYTES</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *   +--------------------------+-------------------+--------------+
 *   | PTR to SPageInfo (8bytes)| Payload (PageSize)| 2 Extra Bytes|
 *   +--------------------------+-------------------+--------------+
 * @param pBuf
 * @param pg
 * @return
 */</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>doFlushPageToDisk</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>pg</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <name><name>pg</name><operator>-&gt;</operator><name>pData</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pg</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pg</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>payload</name> <init>= <expr><call><name>GET_DATA_PAYLOAD</name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>doCompressData</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// this page is flushed to disk for the first time</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pg</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pg</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pg</name><operator>-&gt;</operator><name>dirty</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pg</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>allocatePositionInFile</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>nextPos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pg</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>&lt;</operator> <name><name>pg</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>=</operator> <name><name>pg</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>flushBytes</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>flushPages</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// length becomes greater, current space is not enough, allocate new place, otherwise, do nothing</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pg</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// 1. add current space to free list</comment>
        <decl_stmt><decl><type><name>SPageDiskInfo</name></type> <name>dinfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>length</name> <operator>=</operator> <name><name>pg</name><operator>-&gt;</operator><name>length</name></name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pg</name><operator>-&gt;</operator><name>offset</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 2. allocate new position, and update the info</comment>
        <expr_stmt><expr><name><name>pg</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>allocatePositionInFile</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>nextPos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// 3. write to disk.</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pg</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>&lt;</operator> <name><name>pg</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>=</operator> <name><name>pg</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>flushBytes</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>flushPages</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// NOTE: the size may be -1, the this recycle page has not been flushed to disk yet.</comment>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>pg</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pg</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pg</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pDataBuf</name> <init>= <expr><name><name>pg</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getAllocPageSize</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUF_PAGE_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"page_flush %p, pageId:%d, offset:%d"</literal></expr></argument>, <argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name><name>pg</name><operator>-&gt;</operator><name>pageId</name></name></expr></argument>, <argument><expr><name><name>pg</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>pg</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>  <comment type="line">// on disk size</comment>
  <return>return <expr><name>pDataBuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>flushPageToDisk</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pBuf</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>*</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name><operator>)</operator> <operator>==</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>totalBufSize</name></name> <operator>&amp;&amp;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>&gt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>inMemPages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>createDiskFile</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>doFlushPageToDisk</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setPageNotInBuf</name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pg</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// load file block data in disk</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>loadPageFromDisk</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pg</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pPage</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GET_DATA_PAYLOAD</name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pg</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name><name>pg</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>loadBytes</name></name> <operator>+=</operator> <name><name>pg</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>loadPages</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>fullSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>doDecompressData</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pg</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fullSize</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SPageInfo</name><modifier>*</modifier></type> <name>registerPage</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pageId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>ppi</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPageInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>pageId</name></name> <operator>=</operator> <name>pageId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>pn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <return>return <expr><operator>*</operator><operator>(</operator><name>SPageInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pIdList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppi</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SListNode</name><modifier>*</modifier></type> <name>getEldestUnrefedPage</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SListIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdListInitIter</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>TD_LIST_BACKWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pn</name> <operator>=</operator> <call><name>tdListNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pageInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SPageInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>pn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pageInfo</name><operator>-&gt;</operator><name>pageId</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pageInfo</name><operator>-&gt;</operator><name>pn</name></name> <operator>==</operator> <name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pageInfo</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">//      printf("%d is chosen\n", pageInfo-&gt;pageId);</comment>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">//      printf("page %d is used, dirty:%d\n", pageInfo-&gt;pageId, pageInfo-&gt;dirty);</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>pn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>evacOneDataPage</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>      <name>bufPage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pn</name> <init>= <expr><call><name>getEldestUnrefedPage</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// all pages are referenced by user, try to allocate new space</comment>
  <if_stmt><if>if <condition>(<expr><name>pn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>prev</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>inMemPages</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// increase by 50% of previous mem pages</comment>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>inMemPages</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pBuf</name><operator>-&gt;</operator><name>inMemPages</name></name> <operator>*</operator> <literal type="number">1.5f</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="line">//    qWarn("%p in memory buf page not sufficient, expand from %d to %d, page size:%d", pBuf, prev,</comment>
    <comment type="line">//          pBuf-&gt;inMemPages, pBuf-&gt;pageSize);</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tdListPopNode</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>, <argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>d</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SPageInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>pn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>pn</name></name> <operator>==</operator> <name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>bufPage</name> <operator>=</operator> <call><name>flushPageToDisk</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>bufPage</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lruListPushFront</name><parameter_list>(<parameter><decl><type><name>SList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pi</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdListPrepend</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>front</name> <init>= <expr><call><name>tdListGetHead</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>pn</name></name> <operator>=</operator> <name>front</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lruListMoveToFront</name><parameter_list>(<parameter><decl><type><name>SList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pi</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdListPopNode</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name><name>pi</name><operator>-&gt;</operator><name>pn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdListPrependNode</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name><name>pi</name><operator>-&gt;</operator><name>pn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SPageInfo</name><modifier>*</modifier></type> <name>getPageInfoFromPayload</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>page</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>page</name> <operator>-</operator> <name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>ppi</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SPageInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>ppi</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>createDiskbasedBuf</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pagesize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>inMemBufSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>id</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pBuf</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDiskbasedBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pPBuf</name> <init>= <expr><operator>*</operator><name>pBuf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pPBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>=</operator> <name>pagesize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// all pages are in buffer in the first place</comment>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>totalBufSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>inMemPages</name></name> <operator>=</operator> <name>inMemBufSize</name> <operator>/</operator> <name>pagesize</name></expr>;</expr_stmt>  <comment type="line">// maximum allowed pages, it is a soft limit.</comment>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>allocateId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>pFree</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFreeListItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>freePgList</name></name> <operator>=</operator> <call><name>tdListNew</name><argument_list>(<argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// at least more than 2 pages must be in memory</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>inMemBufSize</name> <operator>&gt;=</operator> <name>pagesize</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>lruList</name></name> <operator>=</operator> <call><name>tdListNew</name><argument_list>(<argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// init id hash table</comment>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>fn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>pIdList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>assistBuf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// EXTRA BYTES</comment>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>all</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>dir</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pPBuf</name><operator>-&gt;</operator><name>emptyDummyIdList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//  qDebug("QInfo:0x%"PRIx64" create resBuf for output, page size:%d, inmem buf pages:%d, file:%s", qId,</comment>
  <comment type="line">//  pPBuf-&gt;pageSize,</comment>
  <comment type="line">//         pPBuf-&gt;inMemPages, pPBuf-&gt;path);</comment>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>getNewBufPage</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pageId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>getPages</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>availablePage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>NO_IN_MEM_AVAILABLE_PAGES</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>availablePage</name> <operator>=</operator> <call><name>evacOneDataPage</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>listNEles</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>freePgList</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pItem</name> <init>= <expr><call><name>tdListPopHead</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>freePgList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pi</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SPageInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>pItem</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pageId</name> <operator>=</operator> <name><name>pi</name><operator>-&gt;</operator><name>pageId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// create a new pageinfo</comment>
    <comment type="line">// register new id in this group</comment>
    <expr_stmt><expr><operator>*</operator><name>pageId</name> <operator>=</operator> <operator>(</operator><operator>++</operator><name><name>pBuf</name><operator>-&gt;</operator><name>allocateId</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="line">// register page id info</comment>
    <expr_stmt><expr><name>pi</name> <operator>=</operator> <call><name>registerPage</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>*</operator><name>pageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// add to hash map</comment>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>all</name></name></expr></argument>, <argument><expr><name>pageId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>totalBufSize</name></name> <operator>+=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// add to LRU list</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>listNEles</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>inMemPages</name></name> <operator>&amp;&amp;</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>inMemPages</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lruListPushFront</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>, <argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// allocate buf</comment>
  <if_stmt><if>if <condition>(<expr><name>availablePage</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator>
        <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>getAllocPageSize</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// add extract bytes in case of zipped buffer increased.</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>availablePage</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>pi</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>pi</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUF_PAGE_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"page_getNewBufPage , pi-&gt;pData:%p, pageId:%d, offset:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pi</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pi</name><operator>-&gt;</operator><name>pageId</name></name></expr></argument>, <argument><expr><name><name>pi</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><call><name>GET_DATA_PAYLOAD</name><argument_list>(<argument><expr><name>pi</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>getBufPage</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pBuf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>getPages</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pi</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>all</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pi</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>pData</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// it is in memory</comment>
    <comment type="line">// no need to update the LRU list if only one page exists</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><call><name>GET_DATA_PAYLOAD</name><argument_list>(<argument><expr><operator>*</operator><name>pi</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SPageInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name><name>pn</name><operator>-&gt;</operator><name>data</name></name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>pInfo</name> <operator>==</operator> <operator>*</operator><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lruListMoveToFront</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUF_PAGE_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"page_getBufPage1 pageId:%d, offset:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>pageId</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><call><name>GET_DATA_PAYLOAD</name><argument_list>(<argument><expr><operator>*</operator><name>pi</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// not in memory</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>pn</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>availablePage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>NO_IN_MEM_AVAILABLE_PAGES</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>availablePage</name> <operator>=</operator> <call><name>evacOneDataPage</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>availablePage</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>availablePage</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>getAllocPageSize</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>availablePage</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// set the ptr to the new SPageInfo</comment>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lruListPushFront</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <comment type="line">// some data has been flushed to disk, and needs to be loaded into buffer again.</comment>
    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>loadPageFromDisk</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>*</operator><name>pi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUF_PAGE_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"page_getBufPage2 pageId:%d, offset:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>pageId</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><call><name>GET_DATA_PAYLOAD</name><argument_list>(<argument><expr><operator>*</operator><name>pi</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>releaseBufPage</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>page</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pBuf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>page</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>ppi</name> <init>= <expr><call><name>getPageInfoFromPayload</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>releaseBufPageInfo</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>ppi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>releaseBufPageInfo</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUF_PAGE_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"page_releaseBufPageInfo pageId:%d, used:%d, offset:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pi</name><operator>-&gt;</operator><name>pageId</name></name></expr></argument>, <argument><expr><name><name>pi</name><operator>-&gt;</operator><name>used</name></name></expr></argument>, <argument><expr><name><name>pi</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// assert(pi-&gt;pData != NULL &amp;&amp; pi-&gt;used == true);</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pi</name><operator>-&gt;</operator><name>pData</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>releasePages</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>getTotalBufSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pBuf</name><operator>-&gt;</operator><name>totalBufSize</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>getDataBufPagesIdList</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBuf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pBuf</name><operator>-&gt;</operator><name>pIdList</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyDiskbasedBuf</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dBufPrintStatis</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>needRemoveFile</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>needRemoveFile</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(
        <argument><expr><literal type="string">"Paged buffer closed, total:%.2f Kb (%d Pages), inmem size:%.2f Kb (%d Pages), file size:%.2f Kb, page "</literal>
        <literal type="string">"size:%.2f Kb, %s\n"</literal></expr></argument>,
        <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>totalBufSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>numOfPages</name></name></expr></argument>, <argument><expr><call><name>listNEles</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>,
        <argument><expr><call><name>listNEles</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>/</operator> <literal type="number">1024.0f</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"Paged buffer closed, total:%.2f Kb, no file created, %s"</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>totalBufSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// print the statistics information</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>SDiskbasedBufStatis</name><modifier>*</modifier></type> <name>ps</name> <init>= <expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>loadPages</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"Get/Release pages:%d/%d, flushToDisk:%.2f Kb (%d Pages), loadFromDisk:%.2f Kb (%d Pages)"</literal></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>getPages</name></name></expr></argument>,
             <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>releasePages</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>flushBytes</name></name> <operator>/</operator> <literal type="number">1024.0f</literal></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>flushPages</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>loadBytes</name></name> <operator>/</operator> <literal type="number">1024.0f</literal></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>loadPages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>uDebug</name><argument_list>(
          <argument><expr><literal type="string">"Get/Release pages:%d/%d, flushToDisk:%.2f Kb (%d Pages), loadFromDisk:%.2f Kb (%d Pages), avgPageSize:%.2f "</literal>
          <literal type="string">"Kb"</literal></expr></argument>,
          <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>getPages</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>releasePages</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>flushBytes</name></name> <operator>/</operator> <literal type="number">1024.0f</literal></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>flushPages</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>loadBytes</name></name> <operator>/</operator> <literal type="number">1024.0f</literal></expr></argument>,
          <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>loadPages</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>loadBytes</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024.0</literal> <operator>*</operator> <name><name>ps</name><operator>-&gt;</operator><name>loadPages</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>needRemoveFile</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// print the error and discard this error info</comment>
      <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"WARNING tPage remove file failed. path=%s, code:%s"</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pIdList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pi</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pIdList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pi</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pIdList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdListFree</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdListFree</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>freePgList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>emptyDummyIdList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>all</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assistBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SPageInfo</name><modifier>*</modifier></type> <name>getLastPageInfo</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>     <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pPgInfo</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>pPgInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getPageId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPageInfo</name><modifier>*</modifier></type> <name>pPgInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pPgInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pPgInfo</name><operator>-&gt;</operator><name>pageId</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getBufPageSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getNumOfInMemBufPages</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pBuf</name><operator>-&gt;</operator><name>inMemPages</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>isAllDataInMemBuf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>setBufPageDirty</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pPage</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dirty</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>ppi</name> <init>= <expr><call><name>getPageInfoFromPayload</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>dirty</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setBufPageCompressOnDisk</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>comp</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>dBufSetBufPageRecycled</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>ppi</name> <init>= <expr><call><name>getPageInfoFromPayload</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <comment type="line">// add this pageinfo into the free page info list</comment>
  <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><call><name>tdListPopNode</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>, <argument><expr><name><name>ppi</name><operator>-&gt;</operator><name>pn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>ppi</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ppi</name><operator>-&gt;</operator><name>pn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdListAppend</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>freePgList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dBufSetPrintInfo</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>printStatis</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>SDiskbasedBufStatis</name></type> <name>getDBufStatis</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>dBufPrintStatis</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>printStatis</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>SDiskbasedBufStatis</name><modifier>*</modifier></type> <name>ps</name> <init>= <expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>statis</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(
      <argument><expr><literal type="string">"Paged buffer closed, total:%.2f Kb (%d Pages), inmem size:%.2f Kb (%d Pages), file size:%.2f Kb, page size:%.2f "</literal>
      <literal type="string">"Kb, %s\n"</literal></expr></argument>,
      <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>totalBufSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>numOfPages</name></name></expr></argument>, <argument><expr><call><name>listNEles</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>,
      <argument><expr><call><name>listNEles</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>/</operator> <literal type="number">1024.0f</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>loadPages</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(
        <argument><expr><literal type="string">"Get/Release pages:%d/%d, flushToDisk:%.2f Kb (%d Pages), loadFromDisk:%.2f Kb (%d Pages), avgPageSize:%.2f "</literal>
        <literal type="string">"Kb\n"</literal></expr></argument>,
        <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>getPages</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>releasePages</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>flushBytes</name></name> <operator>/</operator> <literal type="number">1024.0f</literal></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>flushPages</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>loadBytes</name></name> <operator>/</operator> <literal type="number">1024.0f</literal></expr></argument>,
        <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>loadPages</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>loadBytes</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024.0</literal> <operator>*</operator> <name><name>ps</name><operator>-&gt;</operator><name>loadPages</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"no page loaded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clearDiskbasedBuf</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pIdList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SPageInfo</name><modifier>*</modifier></type> <name>pi</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pIdList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pi</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pIdList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdListEmpty</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>lruList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdListEmpty</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>freePgList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>emptyDummyIdList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pFree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>all</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// all pages are in buffer in the first place</comment>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>totalBufSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>allocateId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
