<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tworker.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>ThreadFp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>int32_t</name></type> <name>tQWorkerInit</name><parameter_list>(<parameter><decl><type><name>SQWorkerPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>qset</name></name> <operator>=</operator> <call><name>taosOpenQset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"worker:%s is initialized, min:%d max:%d"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tQWorkerCleanup</name><parameter_list>(<parameter><decl><type><name>SQWorkerPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosQsetThreadResume</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseQset</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"worker:%s is closed"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tQWorkerThreadFp</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>worker</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWorkerPool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>worker</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueueInfo</name></type>    <name>qinfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosBlockSIGPIPE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"worker:%s:%d is running, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosReadQitemFromQset</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qinfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"worker:%s:%d qset:%p, got no message and exiting, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>,
            <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>qinfo</name><operator>.</operator><name>fp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>qinfo</name><operator>.</operator><name>workerId</name></name> <operator>=</operator> <name><name>worker</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qinfo</name><operator>.</operator><name>threadNum</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>FItem</name><operator>)</operator><name><name>qinfo</name><operator>.</operator><name>fp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>qinfo</name><operator>,</operator> <name>msg</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosUpdateItemSize</name><argument_list>(<argument><expr><name><name>qinfo</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STaosQueue</name> <modifier>*</modifier></type><name>tQWorkerAllocQueue</name><parameter_list>(<parameter><decl><type><name>SQWorkerPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ahandle</name></decl></parameter>, <parameter><decl><type><name>FItem</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><call><name>taosOpenQueue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetQueueFp</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosAddIntoQset</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name>ahandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// spawn a thread to process queue</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>num</name></name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>
    <do>do <block>{<block_content>
      <decl_stmt><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thAttr</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><operator>(</operator><name>ThreadFp</name><operator>)</operator><name>tQWorkerThreadFp</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>queue</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"worker:%s:%d is launched, total:%d"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>num</name></name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition>;</do>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"worker:%s, queue:%p is allocated, ahandle:%p"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name>ahandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>queue</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tQWorkerFreeQueue</name><parameter_list>(<parameter><decl><type><name>SQWorkerPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"worker:%s, queue:%p is freed"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tWWorkerInit</name><parameter_list>(<parameter><decl><type><name>SWWorkerPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>nextId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>qall</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"worker:%s is initialized, max:%d"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tWWorkerCleanup</name><parameter_list>(<parameter><decl><type><name>SWWorkerPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosQsetThreadResume</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosCloseQset</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"worker:%s is closed"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tWWorkerThreadFp</name><parameter_list>(<parameter><decl><type><name>SWWorker</name> <modifier>*</modifier></type><name>worker</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWWorkerPool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>worker</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueueInfo</name></type>    <name>qinfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>numOfMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosBlockSIGPIPE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"worker:%s:%d is running, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfMsgs</name> <operator>=</operator> <call><name>taosReadAllQitemsFromQset</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfMsgs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"worker:%s:%d qset:%p, got no message and exiting, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>,
            <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>qinfo</name><operator>.</operator><name>fp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>qinfo</name><operator>.</operator><name>workerId</name></name> <operator>=</operator> <name><name>worker</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qinfo</name><operator>.</operator><name>threadNum</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>FItems</name><operator>)</operator><name><name>qinfo</name><operator>.</operator><name>fp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>qinfo</name><operator>,</operator> <name><name>worker</name><operator>-&gt;</operator><name>qall</name></name><operator>,</operator> <name>numOfMsgs</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosUpdateItemSize</name><argument_list>(<argument><expr><name><name>qinfo</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name>numOfMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STaosQueue</name> <modifier>*</modifier></type><name>tWWorkerAllocQueue</name><parameter_list>(<parameter><decl><type><name>SWWorkerPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ahandle</name></decl></parameter>, <parameter><decl><type><name>FItems</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>workers</name></name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>nextId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><call><name>taosOpenQueue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosSetQueueFp</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name> <operator>=</operator> <call><name>taosOpenQset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>taosAddIntoQset</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name>ahandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>qall</name></name> <operator>=</operator> <call><name>taosAllocateQall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>qall</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thAttr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><operator>(</operator><name>ThreadFp</name><operator>)</operator><name>tWWorkerThreadFp</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"worker:%s:%d is launched, max:%d"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>nextId</name></name> <operator>=</operator> <operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>nextId</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosAddIntoQset</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name>ahandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>nextId</name></name> <operator>=</operator> <operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>nextId</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>queue</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseQset</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>qset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>qall</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <while>while <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>pid</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>threadId</name></name> <operator>=</operator> <name><name>worker</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"worker:%s, queue:%p is allocated, ahandle:%p thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name>ahandle</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>queue</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tWWorkerFreeQueue</name><parameter_list>(<parameter><decl><type><name>SWWorkerPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"worker:%s, queue:%p is freed"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tSingleWorkerInit</name><parameter_list>(<parameter><decl><type><name>SSingleWorker</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSingleWorkerCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWorkerPool</name> <modifier>*</modifier></type><name>pPool</name> <init>= <expr><operator>&amp;</operator><name><name>pWorker</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tQWorkerInit</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <call><name>tQWorkerAllocQueue</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pWorker</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tSingleWorkerCleanup</name><parameter_list>(<parameter><decl><type><name>SSingleWorker</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><operator>!</operator><call><name>taosQueueEmpty</name><argument_list>(<argument><expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tQWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWorker</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tQWorkerFreeQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWorker</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tMultiWorkerInit</name><parameter_list>(<parameter><decl><type><name>SMultiWorker</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMultiWorkerCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWWorkerPool</name> <modifier>*</modifier></type><name>pPool</name> <init>= <expr><operator>&amp;</operator><name><name>pWorker</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tWWorkerInit</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <call><name>tWWorkerAllocQueue</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pWorker</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tMultiWorkerCleanup</name><parameter_list>(<parameter><decl><type><name>SMultiWorker</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><operator>!</operator><call><name>taosQueueEmpty</name><argument_list>(<argument><expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tWWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWorker</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tWWorkerFreeQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWorker</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
