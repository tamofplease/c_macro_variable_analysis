<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tconfig.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tconfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tenv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tgrant.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tjson.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_NAME_PRINT_LEN</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_SRC_PRINT_LEN</name></cpp:macro>  <cpp:value>12</cpp:value></cpp:define>

<function_decl><type><name>int32_t</name></type> <name>cfgLoadFromCfgFile</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>cfgLoadFromEnvFile</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>cfgLoadFromEnvVar</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>cfgLoadFromEnvCmd</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envCmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>cfgLoadFromApollUrl</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>cfgSetItem</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>

<function><type><name>SConfig</name> <modifier>*</modifier></type><name>cfgInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SConfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCfg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SConfigItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pCfg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgLoad</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>cfgType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sourceStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>cfgType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CFG_STYPE_CFG_FILE</name></expr>:</case>
      <return>return <expr><call><name>cfgLoadFromCfgFile</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>sourceStr</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_STYPE_ENV_FILE</name></expr>:</case>
      <return>return <expr><call><name>cfgLoadFromEnvFile</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>sourceStr</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_STYPE_ENV_VAR</name></expr>:</case>
      <return>return <expr><call><name>cfgLoadFromEnvVar</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_STYPE_APOLLO_URL</name></expr>:</case>
      <return>return <expr><call><name>cfgLoadFromApollUrl</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>sourceStr</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_STYPE_ENV_CMD</name></expr>:</case>
      <return>return <expr><call><name>cfgLoadFromEnvCmd</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>sourceStr</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgLoadFromArray</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArgs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SConfigPair</name> <modifier>*</modifier></type><name>pPair</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArgs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name><name>pPair</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pPair</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>CFG_STYPE_ARG_LIST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cfgFreeItem</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name> <operator>==</operator> <name>CFG_DTYPE_STRING</name> <operator>||</operator> <name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name> <operator>==</operator> <name>CFG_DTYPE_DIR</name> <operator>||</operator> <name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name> <operator>==</operator> <name>CFG_DTYPE_LOCALE</name> <operator>||</operator>
      <name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name> <operator>==</operator> <name>CFG_DTYPE_CHARSET</name> <operator>||</operator> <name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name> <operator>==</operator> <name>CFG_DTYPE_TIMEZONE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cfgCleanup</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCfg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cfgFreeItem</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgGetSize</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgCheckAndSetTimezone</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timezone</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>cfgFreeItem</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>timezone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgCheckAndSetCharset</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>cfgFreeItem</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgCheckAndSetLocale</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>cfgFreeItem</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgCheckAndSetDir</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inputDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullDir</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name>inputDir</name></expr></argument>, <argument><expr><name>fullDir</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to expand dir:%s since %s"</literal></expr></argument>, <argument><expr><name>inputDir</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>fullDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgSetBool</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>tmp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>bval</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgSetInt32</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ival</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ival</name> <argument_list type="generic">&lt; <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>imin</name></name> <operator>||</operator> <name>ival</name></expr></argument> &gt;</argument_list></name> <name><name>pItem</name><operator>-&gt;</operator><name>imax</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cfg:%s, type:%s src:%s value:%d out of range[%"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">"]"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
           <argument><expr><call><name>cfgDtypeStr</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgStypeStr</name><argument_list>(<argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ival</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>imin</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>imax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_RANGE</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>ival</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgSetInt64</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ival</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ival</name> <argument_list type="generic">&lt; <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>imin</name></name> <operator>||</operator> <name>ival</name></expr></argument> &gt;</argument_list></name> <name><name>pItem</name><operator>-&gt;</operator><name>imax</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cfg:%s, type:%s src:%s value:%"</literal> <name>PRId64</name> <literal type="string">" out of range[%"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">"]"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
           <argument><expr><call><name>cfgDtypeStr</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgStypeStr</name><argument_list>(<argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ival</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>imin</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>imax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_RANGE</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i64</name></name> <operator>=</operator> <name>ival</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgSetFloat</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>float</name></type> <name>fval</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>atof</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fval</name> <argument_list type="generic">&lt; <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>fmin</name></name> <operator>||</operator> <name>fval</name></expr></argument> &gt;</argument_list></name> <name><name>pItem</name><operator>-&gt;</operator><name>fmax</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cfg:%s, type:%s src:%s value:%f out of range[%f, %f]"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>cfgDtypeStr</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>cfgStypeStr</name><argument_list>(<argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fval</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>fmin</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>fmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_RANGE</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>fval</name></name> <operator>=</operator> <name>fval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgSetString</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cfg:%s, type:%s src:%s value:%s failed to dup since %s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>cfgDtypeStr</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>cfgStypeStr</name><argument_list>(<argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgSetDir</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>cfgCheckAndSetDir</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cfg:%s, type:%s src:%s value:%s failed to dup since %s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>cfgDtypeStr</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>cfgStypeStr</name><argument_list>(<argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgSetLocale</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>cfgCheckAndSetLocale</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cfg:%s, type:%s src:%s value:%s failed to dup since %s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>cfgDtypeStr</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>cfgStypeStr</name><argument_list>(<argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgSetCharset</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>cfgCheckAndSetCharset</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cfg:%s, type:%s src:%s value:%s failed to dup since %s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>cfgDtypeStr</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>cfgStypeStr</name><argument_list>(<argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgSetTimezone</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>cfgCheckAndSetTimezone</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"cfg:%s, type:%s src:%s value:%s failed to dup since %s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>cfgDtypeStr</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>cfgStypeStr</name><argument_list>(<argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>

  <comment type="line">// apply new timezone</comment>
  <expr_stmt><expr><call><name>osSetTimezone</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgSetTfsItem</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>primary</name></decl></parameter>,
                             <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDiskCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDiskCfg</name></type> <name>cfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>cfg</name><operator>.</operator><name>dir</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cfg</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>level</name></name> <operator>=</operator> <ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>primary</name></name> <operator>=</operator> <ternary><condition><expr><name>primary</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgSetItem</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ECfgSrcType</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>GRANT_CFG_SET</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CFG_DTYPE_BOOL</name></expr>:</case>
      <return>return <expr><call><name>cfgSetBool</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_INT32</name></expr>:</case>
      <return>return <expr><call><name>cfgSetInt32</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_INT64</name></expr>:</case>
      <return>return <expr><call><name>cfgSetInt64</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_FLOAT</name></expr>:</case>
      <return>return <expr><call><name>cfgSetFloat</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_STRING</name></expr>:</case>
      <return>return <expr><call><name>cfgSetString</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_DIR</name></expr>:</case>
      <return>return <expr><call><name>cfgSetDir</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_TIMEZONE</name></expr>:</case>
      <return>return <expr><call><name>cfgSetTimezone</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_CHARSET</name></expr>:</case>
      <return>return <expr><call><name>cfgSetCharset</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_LOCALE</name></expr>:</case>
      <return>return <expr><call><name>cfgSetLocale</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_NONE</name></expr>:</case>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_CFG</name></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SConfigItem</name> <modifier>*</modifier></type><name>cfgGetItem</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCfg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>pItem</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// uError("name:%s, cfg not found", name);</comment>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cfgAddItem</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>CFG_STYPE_DEFAULT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>lowcaseName</name><index>[<expr><name>CFG_NAME_MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strntolower</name><argument_list>(<argument><expr><name>lowcaseName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>CFG_NAME_MAX_LEN</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name> <operator>==</operator> <name>CFG_DTYPE_STRING</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgAddBool</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>defaultVal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tsc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name></type> <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>dtype</name> <operator>=</operator> <name>CFG_DTYPE_BOOL</name></expr>, <expr><operator>.</operator><name>bval</name> <operator>=</operator> <name>defaultVal</name></expr>, <expr><operator>.</operator><name>tsc</name> <operator>=</operator> <name>tsc</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>cfgAddItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgAddInt32</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>defaultVal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>maxval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tsc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>defaultVal</name> <argument_list type="generic">&lt; <argument><expr><name>minval</name> <operator>||</operator> <name>defaultVal</name></expr></argument> &gt;</argument_list></name> <name>maxval</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_RANGE</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SConfigItem</name></type> <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>dtype</name> <operator>=</operator> <name>CFG_DTYPE_INT32</name></expr>, <expr><operator>.</operator><name>i32</name> <operator>=</operator> <name>defaultVal</name></expr>, <expr><operator>.</operator><name>imin</name> <operator>=</operator> <name>minval</name></expr>, <expr><operator>.</operator><name>imax</name> <operator>=</operator> <name>maxval</name></expr>, <expr><operator>.</operator><name>tsc</name> <operator>=</operator> <name>tsc</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>cfgAddItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgAddInt64</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>defaultVal</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>maxval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tsc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>defaultVal</name> <argument_list type="generic">&lt; <argument><expr><name>minval</name> <operator>||</operator> <name>defaultVal</name></expr></argument> &gt;</argument_list></name> <name>maxval</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_RANGE</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SConfigItem</name></type> <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>dtype</name> <operator>=</operator> <name>CFG_DTYPE_INT64</name></expr>, <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>defaultVal</name></expr>, <expr><operator>.</operator><name>imin</name> <operator>=</operator> <name>minval</name></expr>, <expr><operator>.</operator><name>imax</name> <operator>=</operator> <name>maxval</name></expr>, <expr><operator>.</operator><name>tsc</name> <operator>=</operator> <name>tsc</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>cfgAddItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgAddFloat</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>defaultVal</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>maxval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tsc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>defaultVal</name> <argument_list type="generic">&lt; <argument><expr><name>minval</name> <operator>||</operator> <name>defaultVal</name></expr></argument> &gt;</argument_list></name> <name>maxval</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_RANGE</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SConfigItem</name></type> <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>dtype</name> <operator>=</operator> <name>CFG_DTYPE_FLOAT</name></expr>, <expr><operator>.</operator><name>fval</name> <operator>=</operator> <name>defaultVal</name></expr>, <expr><operator>.</operator><name>fmin</name> <operator>=</operator> <name>minval</name></expr>, <expr><operator>.</operator><name>fmax</name> <operator>=</operator> <name>maxval</name></expr>, <expr><operator>.</operator><name>tsc</name> <operator>=</operator> <name>tsc</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>cfgAddItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgAddString</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defaultVal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tsc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name></type> <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>dtype</name> <operator>=</operator> <name>CFG_DTYPE_STRING</name></expr>, <expr><operator>.</operator><name>tsc</name> <operator>=</operator> <name>tsc</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>item</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>defaultVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>str</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>cfgAddItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgAddDir</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defaultVal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tsc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name></type> <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>dtype</name> <operator>=</operator> <name>CFG_DTYPE_DIR</name></expr>, <expr><operator>.</operator><name>tsc</name> <operator>=</operator> <name>tsc</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgCheckAndSetDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>defaultVal</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>cfgAddItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgAddLocale</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defaultVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name></type> <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>dtype</name> <operator>=</operator> <name>CFG_DTYPE_LOCALE</name></expr>, <expr><operator>.</operator><name>tsc</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgCheckAndSetLocale</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>defaultVal</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>cfgAddItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgAddCharset</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defaultVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name></type> <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>dtype</name> <operator>=</operator> <name>CFG_DTYPE_CHARSET</name></expr>, <expr><operator>.</operator><name>tsc</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgCheckAndSetCharset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>defaultVal</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>cfgAddItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgAddTimezone</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defaultVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name></type> <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>dtype</name> <operator>=</operator> <name>CFG_DTYPE_TIMEZONE</name></expr>, <expr><operator>.</operator><name>tsc</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgCheckAndSetTimezone</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>defaultVal</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>cfgAddItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cfgStypeStr</name><parameter_list>(<parameter><decl><type><name>ECfgSrcType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CFG_STYPE_DEFAULT</name></expr>:</case>
      <return>return <expr><literal type="string">"default"</literal></expr>;</return>
    <case>case <expr><name>CFG_STYPE_CFG_FILE</name></expr>:</case>
      <return>return <expr><literal type="string">"cfg_file"</literal></expr>;</return>
    <case>case <expr><name>CFG_STYPE_ENV_FILE</name></expr>:</case>
      <return>return <expr><literal type="string">"env_file"</literal></expr>;</return>
    <case>case <expr><name>CFG_STYPE_ENV_VAR</name></expr>:</case>
      <return>return <expr><literal type="string">"env_var"</literal></expr>;</return>
    <case>case <expr><name>CFG_STYPE_APOLLO_URL</name></expr>:</case>
      <return>return <expr><literal type="string">"apollo_url"</literal></expr>;</return>
    <case>case <expr><name>CFG_STYPE_ARG_LIST</name></expr>:</case>
      <return>return <expr><literal type="string">"arg_list"</literal></expr>;</return>
    <case>case <expr><name>CFG_STYPE_TAOS_OPTIONS</name></expr>:</case>
      <return>return <expr><literal type="string">"taos_options"</literal></expr>;</return>
    <case>case <expr><name>CFG_STYPE_ENV_CMD</name></expr>:</case>
      <return>return <expr><literal type="string">"env_cmd"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"invalid"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cfgDtypeStr</name><parameter_list>(<parameter><decl><type><name>ECfgDataType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CFG_DTYPE_NONE</name></expr>:</case>
      <return>return <expr><literal type="string">"none"</literal></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_BOOL</name></expr>:</case>
      <return>return <expr><literal type="string">"bool"</literal></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_INT32</name></expr>:</case>
      <return>return <expr><literal type="string">"int32"</literal></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_INT64</name></expr>:</case>
      <return>return <expr><literal type="string">"int64"</literal></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_FLOAT</name></expr>:</case>
      <return>return <expr><literal type="string">"float"</literal></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_STRING</name></expr>:</case>
      <return>return <expr><literal type="string">"string"</literal></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_DIR</name></expr>:</case>
      <return>return <expr><literal type="string">"dir"</literal></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_LOCALE</name></expr>:</case>
      <return>return <expr><literal type="string">"locale"</literal></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_CHARSET</name></expr>:</case>
      <return>return <expr><literal type="string">"charset"</literal></expr>;</return>
    <case>case <expr><name>CFG_DTYPE_TIMEZONE</name></expr>:</case>
      <return>return <expr><literal type="string">"timezone"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"invalid"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cfgDumpItemValue</name><parameter_list>(<parameter><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CFG_DTYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>bval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CFG_DTYPE_INT32</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CFG_DTYPE_INT64</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CFG_DTYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>fval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CFG_DTYPE_STRING</name></expr>:</case>
    <case>case <expr><name>CFG_DTYPE_DIR</name></expr>:</case>
    <case>case <expr><name>CFG_DTYPE_LOCALE</name></expr>:</case>
    <case>case <expr><name>CFG_DTYPE_CHARSET</name></expr>:</case>
    <case>case <expr><name>CFG_DTYPE_TIMEZONE</name></expr>:</case>
    <case>case <expr><name>CFG_DTYPE_NONE</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>bufSize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>bufSize</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cfgDumpCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tsc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dump</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                     global config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"================================================================="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"                     global config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"================================================================="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>src</name><index>[<expr><name>CFG_SRC_PRINT_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>CFG_NAME_PRINT_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tsc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pItem</name><operator>-&gt;</operator><name>tsc</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dump</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"scriptDir"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dump</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"simDebugFlag"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>cfgStypeStr</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CFG_SRC_PRINT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CFG_SRC_PRINT_LEN</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CFG_NAME_PRINT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CFG_NAME_PRINT_LEN</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <switch>switch <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>dtype</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>CFG_DTYPE_BOOL</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s %u"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>bval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"%s %s %u"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>bval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <break>break;</break>
      <case>case <expr><name>CFG_DTYPE_INT32</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s %d"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"%s %s %d"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      <case>case <expr><name>CFG_DTYPE_INT64</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"%s %s %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      <case>case <expr><name>CFG_DTYPE_FLOAT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s %.2f"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>fval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"%s %s %.2f"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>fval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      <case>case <expr><name>CFG_DTYPE_STRING</name></expr>:</case>
      <case>case <expr><name>CFG_DTYPE_DIR</name></expr>:</case>
      <case>case <expr><name>CFG_DTYPE_LOCALE</name></expr>:</case>
      <case>case <expr><name>CFG_DTYPE_CHARSET</name></expr>:</case>
      <case>case <expr><name>CFG_DTYPE_TIMEZONE</name></expr>:</case>
      <case>case <expr><name>CFG_DTYPE_NONE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"================================================================="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"================================================================="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgLoadFromEnvVar</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>olen</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>, <decl><type ref="prev"/><name>vlen2</name></decl>, <decl><type ref="prev"/><name>vlen3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier><modifier>*</modifier></type><name>pEnv</name> <init>= <expr><name>environ</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">1023</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>pEnv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <name>value</name> <operator>=</operator> <name>value2</name> <operator>=</operator> <name>value3</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>olen</name> <operator>=</operator> <name>vlen</name> <operator>=</operator> <name>vlen2</name> <operator>=</operator> <name>vlen3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>*</operator><name>pEnv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEnv</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosEnvToCfg</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>olen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>name</name><index>[<expr><name>olen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>olen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>value</name><index>[<expr><name>vlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vlen2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>value2</name><index>[<expr><name>vlen2</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>value2</name> <operator>+</operator> <name>vlen2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>vlen3</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>value3</name><index>[<expr><name>vlen3</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>CFG_STYPE_ENV_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"dataDir"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cfgSetTfsItem</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr><name>value3</name></expr></argument>, <argument><expr><name>CFG_STYPE_ENV_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"load from env variables cfg success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgLoadFromEnvCmd</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envCmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>olen</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>, <decl><type ref="prev"/><name>vlen2</name></decl>, <decl><type ref="prev"/><name>vlen3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>envCmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name><name>envCmd</name><index>[<expr><name>index</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>envCmd</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosEnvToCfg</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>name</name> <operator>=</operator> <name>value</name> <operator>=</operator> <name>value2</name> <operator>=</operator> <name>value3</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>olen</name> <operator>=</operator> <name>vlen</name> <operator>=</operator> <name>vlen2</name> <operator>=</operator> <name>vlen3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>olen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>name</name><index>[<expr><name>olen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>olen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>value</name><index>[<expr><name>vlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vlen2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>value2</name><index>[<expr><name>vlen2</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>value2</name> <operator>+</operator> <name>vlen2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>vlen3</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>value3</name><index>[<expr><name>vlen3</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>CFG_STYPE_ENV_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"dataDir"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cfgSetTfsItem</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr><name>value3</name></expr></argument>, <argument><expr><name>CFG_STYPE_ENV_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"load from env cmd cfg success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgLoadFromEnvFile</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>olen</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>, <decl><type ref="prev"/><name>vlen2</name></decl>, <decl><type ref="prev"/><name>vlen3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><literal type="string">".env"</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>envFile</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>envFile</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>envFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load env file:%s"</literal></expr></argument>, <argument><expr><name>envFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>filepath</name> <operator>=</operator> <name>envFile</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"env file:%s not load"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>!</operator><call><name>taosEOFFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <name>value</name> <operator>=</operator> <name>value2</name> <operator>=</operator> <name>value3</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>olen</name> <operator>=</operator> <name>vlen</name> <operator>=</operator> <name>vlen2</name> <operator>=</operator> <name>vlen3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>_bytes</name> <operator>=</operator> <call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>_bytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>_bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line</name><index>[<expr><name>_bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosEnvToCfg</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>olen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>name</name><index>[<expr><name>olen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>olen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>value</name><index>[<expr><name>vlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vlen2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>value2</name><index>[<expr><name>vlen2</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>value2</name> <operator>+</operator> <name>vlen2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>vlen3</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>value3</name><index>[<expr><name>vlen3</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>CFG_STYPE_ENV_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"dataDir"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cfgSetTfsItem</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr><name>value3</name></expr></argument>, <argument><expr><name>CFG_STYPE_ENV_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"load from env cfg file %s success"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgLoadFromCfgFile</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>olen</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>, <decl><type ref="prev"/><name>vlen2</name></decl>, <decl><type ref="prev"/><name>vlen3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// success when the file does not exist</comment>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"failed to load from cfg file %s since %s, use default parameters"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load from cfg file %s since %s"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>!</operator><call><name>taosEOFFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <name>value</name> <operator>=</operator> <name>value2</name> <operator>=</operator> <name>value3</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>olen</name> <operator>=</operator> <name>vlen</name> <operator>=</operator> <name>vlen2</name> <operator>=</operator> <name>vlen3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>_bytes</name> <operator>=</operator> <call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>_bytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>_bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line</name><index>[<expr><name>_bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>olen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>name</name><index>[<expr><name>olen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>olen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>value</name><index>[<expr><name>vlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vlen2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>value2</name><index>[<expr><name>vlen2</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>value2</name> <operator>+</operator> <name>vlen2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>vlen3</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>value3</name><index>[<expr><name>vlen3</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>CFG_STYPE_CFG_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"dataDir"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cfgSetTfsItem</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr><name>value3</name></expr></argument>, <argument><expr><name>CFG_STYPE_CFG_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>==</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"load from cfg file %s success"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load from cfg file %s since %s"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// int32_t cfgLoadFromCfgText(SConfig *pConfig, const char *configText) {</comment>
<comment type="line">//   char   *line = NULL, *name, *value, *value2, *value3;</comment>
<comment type="line">//   int32_t olen, vlen, vlen2, vlen3;</comment>
<comment type="line">//   ssize_t _bytes = 0;</comment>
<comment type="line">//   int32_t code = 0;</comment>

<comment type="line">//   TdFilePtr pFile = taosOpenFile(filepath, TD_FILE_READ | TD_FILE_STREAM);</comment>
<comment type="line">//   if (pFile == NULL) {</comment>
<comment type="line">//     // success when the file does not exist</comment>
<comment type="line">//     if (errno == ENOENT) {</comment>
<comment type="line">//       terrno = TAOS_SYSTEM_ERROR(errno);</comment>
<comment type="line">//       uInfo("failed to load from cfg file %s since %s, use default parameters", filepath, terrstr());</comment>
<comment type="line">//       return 0;</comment>
<comment type="line">//     } else {</comment>
<comment type="line">//       uError("failed to load from cfg file %s since %s", filepath, terrstr());</comment>
<comment type="line">//       return -1;</comment>
<comment type="line">//     }</comment>
<comment type="line">//   }</comment>

<comment type="line">//   while (!taosEOFFile(pFile)) {</comment>
<comment type="line">//     name = value = value2 = value3 = NULL;</comment>
<comment type="line">//     olen = vlen = vlen2 = vlen3 = 0;</comment>

<comment type="line">//     _bytes = taosGetLineFile(pFile, &amp;line);</comment>
<comment type="line">//     if (_bytes &lt;= 0) {</comment>
<comment type="line">//       break;</comment>
<comment type="line">//     }</comment>

<comment type="line">//     if(line[_bytes - 1] == '\n') line[_bytes - 1] = 0;</comment>

<comment type="line">//     paGetToken(line, &amp;name, &amp;olen);</comment>
<comment type="line">//     if (olen == 0) continue;</comment>
<comment type="line">//     name[olen] = 0;</comment>

<comment type="line">//     paGetToken(name + olen + 1, &amp;value, &amp;vlen);</comment>
<comment type="line">//     if (vlen == 0) continue;</comment>
<comment type="line">//     value[vlen] = 0;</comment>

<comment type="line">//     paGetToken(value + vlen + 1, &amp;value2, &amp;vlen2);</comment>
<comment type="line">//     if (vlen2 != 0) {</comment>
<comment type="line">//       value2[vlen2] = 0;</comment>
<comment type="line">//       paGetToken(value2 + vlen2 + 1, &amp;value3, &amp;vlen3);</comment>
<comment type="line">//       if (vlen3 != 0) value3[vlen3] = 0;</comment>
<comment type="line">//     }</comment>

<comment type="line">//     code = cfgSetItem(pConfig, name, value, CFG_STYPE_CFG_FILE);</comment>
<comment type="line">//     if (code != 0 &amp;&amp; terrno != TSDB_CODE_CFG_NOT_FOUND) break;</comment>
<comment type="line">//     if (strcasecmp(name, "dataDir") == 0) {</comment>
<comment type="line">//       code = cfgSetTfsItem(pConfig, name, value, value2, value3, CFG_STYPE_CFG_FILE);</comment>
<comment type="line">//       if (code != 0 &amp;&amp; terrno != TSDB_CODE_CFG_NOT_FOUND) break;</comment>
<comment type="line">//     }</comment>
<comment type="line">//   }</comment>

<comment type="line">//   taosCloseFile(&amp;pFile);</comment>
<comment type="line">//   if (line != NULL) taosMemoryFreeClear(line);</comment>

<comment type="line">//   if (code == 0 || (code != 0 &amp;&amp; terrno == TSDB_CODE_CFG_NOT_FOUND)) {</comment>
<comment type="line">//     uInfo("load from cfg file %s success", filepath);</comment>
<comment type="line">//     return 0;</comment>
<comment type="line">//   } else {</comment>
<comment type="line">//     uError("failed to load from cfg file %s since %s", filepath, terrstr());</comment>
<comment type="line">//     return -1;</comment>
<comment type="line">//   }</comment>
<comment type="line">// }</comment>

<function><type><name>int32_t</name></type> <name>cfgLoadFromApollUrl</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cfgLineBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>olen</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>, <decl><type ref="prev"/><name>vlen2</name></decl>, <decl><type ref="prev"/><name>vlen3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>url</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"apoll url not load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"fail to load apoll url: %s, unknown format"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"jsonFile"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load json file:%s"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>fileSize</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"load json file error: %s"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><call><name>tjsonParse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJson</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>jsonParseError</name> <init>= <expr><call><name>tjsonGetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>jsonParseError</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"load json file parse error: %s"</literal></expr></argument>, <argument><expr><name>jsonParseError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>jsonArraySize</name> <init>= <expr><call><name>tjsonGetArraySize</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>jsonArraySize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>tjsonGetArrayItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>itemName</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>itemValueString</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tjsonGetObjectName</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tjsonGetObjectName</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tjsonGetObjectValueString</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemValueString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>itemValueString</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>itemName</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>itemNameLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>itemName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>itemValueStringLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>itemValueString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cfgLineBuf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>itemNameLen</name> <operator>+</operator> <name>itemValueStringLen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cfgLineBuf</name></expr></argument>, <argument><expr><name>itemName</name></expr></argument>, <argument><expr><name>itemNameLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cfgLineBuf</name><index>[<expr><name>itemNameLen</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfgLineBuf</name><index>[<expr><name>itemNameLen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>itemValueString</name></expr></argument>, <argument><expr><name>itemValueStringLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cfgLineBuf</name><index>[<expr><name>itemNameLen</name> <operator>+</operator> <name>itemValueStringLen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>cfgLineBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>olen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>name</name><index>[<expr><name>olen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>olen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>value</name><index>[<expr><name>vlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>vlen2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>value2</name><index>[<expr><name>vlen2</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>value2</name> <operator>+</operator> <name>vlen2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>vlen3</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>value3</name><index>[<expr><name>vlen3</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>CFG_STYPE_APOLLO_URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"dataDir"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cfgSetTfsItem</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr><name>value3</name></expr></argument>, <argument><expr><name>CFG_STYPE_APOLLO_URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// } else if (strncmp(url, "jsonUrl", 7) == 0) {</comment>
    <comment type="line">// } else if (strncmp(url, "etcdUrl", 7) == 0) {</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"Unsupported url: %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"load from apoll url not implemented yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cfgGetApollUrl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envCmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envFile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>apolloUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>envCmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name><name>envCmd</name><index>[<expr><name>index</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>envCmd</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"TAOS_APOLLO_URL"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>envCmd</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>apolloUrl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"get apollo url from env cmd success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>char</name></type>   <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnv</name> <init>= <expr><name>environ</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">1023</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>pEnv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>*</operator><name>pEnv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEnv</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"TAOS_APOLLO_URL"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>apolloUrl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"get apollo url from env variables success, apolloUrl=%s"</literal></expr></argument>, <argument><expr><name>apolloUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><literal type="string">".env"</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>envFile</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>envFile</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>envFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load env file:%s"</literal></expr></argument>, <argument><expr><name>envFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>filepath</name> <operator>=</operator> <name>envFile</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"env file:%s not load"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>_bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><operator>!</operator><call><name>taosEOFFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>_bytes</name> <operator>=</operator> <call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>_bytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>_bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line</name><index>[<expr><name>_bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"TAOS_APOLLO_URL"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>apolloUrl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"get apollo url from env file success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"fail get apollo url from cmd env file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
