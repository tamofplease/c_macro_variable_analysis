<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tref.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDB_REF_OBJECTS</name></cpp:macro>       <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDB_REF_STATE_EMPTY</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDB_REF_STATE_ACTIVE</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDB_REF_STATE_DELETED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SRefNode</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>SRefNode</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>     <comment type="line">// previous node</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>SRefNode</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>     <comment type="line">// next node</comment>
  <decl_stmt><decl><type><name>void</name>            <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>        <comment type="line">// pointer to resource protected,</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>          <name>rid</name></decl>;</decl_stmt>      <comment type="line">// reference ID</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>count</name></decl>;</decl_stmt>    <comment type="line">// number of references</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>removed</name></decl>;</decl_stmt>  <comment type="line">// 1: removed</comment>
}</block></struct></type> <name>SRefNode</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SRefNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl>;</decl_stmt>  <comment type="line">// array of SRefNode linked list</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>state</name></decl>;</decl_stmt>     <comment type="line">// 0: empty, 1: active;  2: deleted</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>rsetId</name></decl>;</decl_stmt>    <comment type="line">// refSet ID, global unique</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>rid</name></decl>;</decl_stmt>       <comment type="line">// increase by one for each new reference</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>max</name></decl>;</decl_stmt>       <comment type="line">// mod</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>count</name></decl>;</decl_stmt>     <comment type="line">// total number of SRefNodes in this set</comment>
  <decl_stmt><decl><type><name>int64_t</name>   <modifier>*</modifier></type><name>lockedBy</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>SRefSet</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>SRefSet</name></type>       <name><name>tsRefSetList</name><index>[<expr><name>TSDB_REF_OBJECTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type>  <name>tsRefModuleInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadMutex</name></type> <name>tsRefMutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type>       <name>tsRefSetNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type>       <name>tsNextId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>taosInitRefModule</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>taosLockList</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lockedBy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>taosUnlockList</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lockedBy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>taosIncRsetCount</name><parameter_list>(<parameter><decl><type><name>SRefSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>taosDecRsetCount</name><parameter_list>(<parameter><decl><type><name>SRefSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosDecRefCount</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rsetId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>remove</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>taosOpenRef</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>RefFp</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRefNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRefSet</name>   <modifier>*</modifier></type><name>pSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name>   <modifier>*</modifier></type><name>lockedBy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>i</name></decl>, <decl><type ref="prev"/><name>rsetId</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRefModuleInit</name></expr></argument>, <argument><expr><name>taosInitRefModule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nodeList</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRefNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nodeList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>lockedBy</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lockedBy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRefMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_REF_OBJECTS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>tsNextId</name> <operator>=</operator> <operator>(</operator><name>tsNextId</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>TSDB_REF_OBJECTS</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tsNextId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tsNextId</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="line">// dont use 0 as rsetId</comment>
    <if_stmt><if>if <condition>(<expr><name><name>tsRefSetList</name><index>[<expr><name>tsNextId</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>TSDB_REF_STATE_EMPTY</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>TSDB_REF_OBJECTS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rsetId</name> <operator>=</operator> <name>tsNextId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSet</name> <operator>=</operator> <name>tsRefSetList</name> <operator>+</operator> <name>rsetId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name></name> <operator>=</operator> <name>nodeList</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>=</operator> <name>lockedBy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>rid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>rsetId</name></name> <operator>=</operator> <name>rsetId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TSDB_REF_STATE_ACTIVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosIncRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tsRefSetNum</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d is opened, max:%d, fp:%p refSetNum:%d"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tsRefSetNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rsetId</name> <operator>=</operator> <name>TSDB_CODE_REF_FULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lockedBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"run out of Ref ID, maximum:%d refSetNum:%d"</literal></expr></argument>, <argument><expr><name>TSDB_REF_OBJECTS</name></expr></argument>, <argument><expr><name>tsRefSetNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRefMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rsetId</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosCloseRef</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rsetId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRefSet</name> <modifier>*</modifier></type><name>pSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>deleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rsetId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>rsetId</name> <operator>&gt;=</operator> <name>TSDB_REF_OBJECTS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d is invalid, out of range"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_INVALID_ID</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pSet</name> <operator>=</operator> <name>tsRefSetList</name> <operator>+</operator> <name>rsetId</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRefMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TSDB_REF_STATE_ACTIVE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TSDB_REF_STATE_DELETED</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>deleted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d is closed, count:%d"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d is already closed, count:%d"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRefMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>deleted</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosDecRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosAddRef</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rsetId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRefNode</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRefSet</name>  <modifier>*</modifier></type><name>pSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>rid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rsetId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>rsetId</name> <operator>&gt;=</operator> <name>TSDB_REF_OBJECTS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d p:%p failed to add, rsetId not valid"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_INVALID_ID</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pSet</name> <operator>=</operator> <name>tsRefSetList</name> <operator>+</operator> <name>rsetId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosIncRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TSDB_REF_STATE_ACTIVE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosDecRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d p:%p failed to add, not active"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_ID_REMOVED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRefNode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rid</name> <operator>=</operator> <call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>rid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>hash</name> <operator>=</operator> <name>rid</name> <operator>%</operator> <name><name>pSet</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosLockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name> <operator>=</operator> <name>rid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name><index>[<expr><name>hash</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name><index>[<expr><name>hash</name></expr>]</index></name><operator>-&gt;</operator><name>prev</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name><index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d p:%p rid:%"</literal> <name>PRId64</name> <literal type="string">" is added, count:%d"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosUnlockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosRemoveRef</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rsetId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosDecRefCount</name><argument_list>(<argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="line">// if rid is 0, return the first p in hash list, otherwise, return the next after current rid</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>taosAcquireRef</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rsetId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRefNode</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRefSet</name>  <modifier>*</modifier></type><name>pSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rsetId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>rsetId</name> <operator>&gt;=</operator> <name>TSDB_REF_OBJECTS</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// uTrace("rsetId:%d rid:%" PRId64 " failed to acquire, rsetId not valid", rsetId, rid);</comment>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_INVALID_ID</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" failed to acquire, rid not valid"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pSet</name> <operator>=</operator> <name>tsRefSetList</name> <operator>+</operator> <name>rsetId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosIncRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TSDB_REF_STATE_ACTIVE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" failed to acquire, not active"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosDecRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_ID_REMOVED</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>hash</name> <operator>=</operator> <name>rid</name> <operator>%</operator> <name><name>pSet</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosLockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name> <operator>==</operator> <name>rid</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d p:%p rid:%"</literal> <name>PRId64</name> <literal type="string">" is acquired"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_NOT_EXIST</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d p:%p rid:%"</literal> <name>PRId64</name> <literal type="string">" is already removed, failed to acquire"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_NOT_EXIST</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" is not there, failed to acquire"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosUnlockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosDecRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosReleaseRef</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rsetId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosDecRefCount</name><argument_list>(<argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="line">// if rid is 0, return the first p in hash list, otherwise, return the next after current rid</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>taosIterateRef</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rsetId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRefNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRefSet</name>  <modifier>*</modifier></type><name>pSet</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rsetId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>rsetId</name> <operator>&gt;=</operator> <name>TSDB_REF_OBJECTS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" failed to iterate, rsetId not valid"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_INVALID_ID</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" failed to iterate, rid not valid"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pSet</name> <operator>=</operator> <name>tsRefSetList</name> <operator>+</operator> <name>rsetId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosIncRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TSDB_REF_STATE_ACTIVE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" failed to iterate, rset not active"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_ID_REMOVED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosDecRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>newP</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>hash</name> <operator>=</operator> <name>rid</name> <operator>%</operator> <name><name>pSet</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosLockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name> <operator>==</operator> <name>rid</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" not there, quit"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_NOT_EXIST</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosUnlockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosDecRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// rid is there</comment>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <comment type="line">// check first place</comment>
      <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosUnlockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>max</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>taosLockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// check first place</comment>
          <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
          </block_content>}</block></while>
          <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>taosUnlockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="line">// acquire it</comment>
      <expr_stmt><expr><name>newP</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosUnlockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d p:%p rid:%"</literal> <name>PRId64</name> <literal type="string">" is returned"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>newP</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d the list is over"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>rid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="line">// release the current one</comment>
    <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rid</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>newP</name> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name></expr>)</condition>;</do>

  <expr_stmt><expr><call><name>taosDecRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>newP</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosListRef</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRefSet</name>  <modifier>*</modifier></type><name>pSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRefNode</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRefMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_REF_OBJECTS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pSet</name> <operator>=</operator> <name>tsRefSetList</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TSDB_REF_STATE_EMPTY</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d state:%d count:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>max</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d p:%p rid:%"</literal> <name>PRId64</name> <literal type="string">"count:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRefMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosDecRefCount</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rsetId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRefSet</name>  <modifier>*</modifier></type><name>pSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRefNode</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>released</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rsetId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>rsetId</name> <operator>&gt;=</operator> <name>TSDB_REF_OBJECTS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" failed to remove, rsetId not valid"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_INVALID_ID</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" failed to remove, rid not valid"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pSet</name> <operator>=</operator> <name>tsRefSetList</name> <operator>+</operator> <name>rsetId</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TSDB_REF_STATE_EMPTY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" failed to remove, cleaned"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_ID_REMOVED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>hash</name> <operator>=</operator> <name>rid</name> <operator>%</operator> <name><name>pSet</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosLockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>rid</name></name> <operator>==</operator> <name>rid</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>remove</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>removed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name><index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>released</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d p:%p rid:%"</literal> <name>PRId64</name> <literal type="string">" is released, remain count %d"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d rid:%"</literal> <name>PRId64</name> <literal type="string">" is not there, failed to release/remove"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REF_NOT_EXIST</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosUnlockList</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name> <operator>+</operator> <name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>released</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d p:%p rid:%"</literal> <name>PRId64</name> <literal type="string">" is removed, count:%d, free mem: %p"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>count</name></name></expr></argument>,
           <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pSet</name><operator>-&gt;</operator><name>fp</name></name>)<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosDecRsetCount</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosLockList</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lockedBy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tid</name> <init>= <expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>atomic_val_compare_exchange_64</name><argument_list>(<argument><expr><name>lockedBy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>%</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosUnlockList</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lockedBy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tid</name> <init>= <expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_64</name><argument_list>(<argument><expr><name>lockedBy</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>tid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosInitRefModule</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRefMutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosIncRsetCount</name><parameter_list>(<parameter><decl><type><name>SRefSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// uTrace("rsetId:%d inc count:%d", pSet-&gt;rsetId, count);</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosDecRsetCount</name><parameter_list>(<parameter><decl><type><name>SRefSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// uTrace("rsetId:%d dec count:%d", pSet-&gt;rsetId, count);</comment>

  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRefMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>TSDB_REF_STATE_EMPTY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TSDB_REF_STATE_EMPTY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>nodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>lockedBy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tsRefSetNum</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uTrace</name><argument_list>(<argument><expr><literal type="string">"rsetId:%d is cleaned, refSetNum:%d count:%d"</literal></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name>tsRefSetNum</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsRefMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
