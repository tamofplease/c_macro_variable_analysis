<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tmd5.c"><comment type="block">/*
 ***********************************************************************
 **  Message-digest routines:                                         **
 **  To form the message digest for a message M                       **
 **    (1) Initialize a context buffer mdContext using MD5Init        **
 **    (2) Call MD5Update on mdContext and M                          **
 **    (3) Call MD5Final on mdContext                                 **
 **  The message digest is now in mdContext-&gt;digest[0...15]           **
 ***********************************************************************
 */</comment>

<comment type="block">/*
 ***********************************************************************
 ** Copyright (C) 1990, RSA Data Security, Inc. All rights reserved.  **
 **                                                                   **
 ** License to copy and use this software is granted provided that    **
 ** it is identified as the "RSA Data Security, Inc. MD5 Message-     **
 ** Digest Algorithm" in all material mentioning or referencing this  **
 ** software or this function.                                        **
 **                                                                   **
 ** License is also granted to make and use derivative works          **
 ** provided that such works are identified as "derived from the RSA  **
 ** Data Security, Inc. MD5 Message-Digest Algorithm" in all          **
 ** material mentioning or referencing the derived work.              **
 **                                                                   **
 ** RSA Data Security, Inc. makes no representations concerning       **
 ** either the merchantability of this software or the suitability    **
 ** of this software for any particular purpose.  It is provided "as  **
 ** is" without express or implied warranty of any kind.              **
 **                                                                   **
 ** These notices must be retained in any copies of any part of this  **
 ** documentation and/or software.                                    **
 ***********************************************************************
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmd5.h"</cpp:file></cpp:include>

<comment type="block">/* forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>PADDING</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
                              <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
                              <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
                              <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
                              <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* F, G, H and I are basic MD5 functions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (y)) | ((~x) &amp; (z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (z)) | ((y) &amp; (~z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) ^ (y) ^ (z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y) ^ ((x) | (~z)))</cpp:value></cpp:define>

<comment type="block">/* ROTATE_LEFT rotates x left n bits */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_LEFT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32 - (n))))</cpp:value></cpp:define>

<comment type="block">/* FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4 */</comment>
<comment type="block">/* Rotation is separate from addition to prevent recomputation */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>ac</name></type></parameter>)</parameter_list></cpp:macro>                    \
  <cpp:value>{                                                 \
    (a) += F((b), (c), (d)) + (x) + (uint32_t)(ac); \
    (a) = ROTATE_LEFT((a), (s));                    \
    (a) += (b);                                     \
  }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>ac</name></type></parameter>)</parameter_list></cpp:macro>                    \
  <cpp:value>{                                                 \
    (a) += G((b), (c), (d)) + (x) + (uint32_t)(ac); \
    (a) = ROTATE_LEFT((a), (s));                    \
    (a) += (b);                                     \
  }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HH</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>ac</name></type></parameter>)</parameter_list></cpp:macro>                    \
  <cpp:value>{                                                 \
    (a) += H((b), (c), (d)) + (x) + (uint32_t)(ac); \
    (a) = ROTATE_LEFT((a), (s));                    \
    (a) += (b);                                     \
  }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>II</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>ac</name></type></parameter>)</parameter_list></cpp:macro>                    \
  <cpp:value>{                                                 \
    (a) += I((b), (c), (d)) + (x) + (uint32_t)(ac); \
    (a) = ROTATE_LEFT((a), (s));                    \
    (a) += (b);                                     \
  }</cpp:value></cpp:define>

<comment type="block">/* The routine MD5Init initializes the message-digest context
   mdContext. All fields are set to zero.
 */</comment>
<function><type><name>void</name></type> <name>tMD5Init</name><parameter_list>(<parameter><decl><type><name>T_MD5_CTX</name> <modifier>*</modifier></type><name>mdContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mdContext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T_MD5_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Load magic initialization constants. */</comment>
  <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x67452301</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xefcdab89</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x98badcfe</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x10325476</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* The routine MD5Update updates the message-digest context to
account for the presence of each of the characters inBuf[0..inLen-1]
in the message whose digest is being computed.
*/</comment>
<function><type><name>void</name></type> <name>tMD5Update</name><parameter_list>(<parameter><decl><type><name>T_MD5_CTX</name> <modifier>*</modifier></type><name>mdContext</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inBuf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>inLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>in</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>mdi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ii</name></decl>;</decl_stmt>

  <comment type="block">/* compute number of bytes mod 64 */</comment>
  <expr_stmt><expr><name>mdi</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>mdContext</name><operator>-&gt;</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* update number of bits */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mdContext</name><operator>-&gt;</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>inLen</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name><name>mdContext</name><operator>-&gt;</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>inLen</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>inLen</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>inLen</name><operator>--</operator></expr>)</condition> <block>{<block_content>
    <comment type="block">/* add new character to buffer, increment mdi */</comment>
    <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>mdi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>inBuf</name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* transform if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name>mdi</name> <operator>==</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ii</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>mdContext</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>mdContext</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
                <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>mdContext</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>mdContext</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
      <expr_stmt><expr><call><name>Transform</name><argument_list>(<argument><expr><name><name>mdContext</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mdi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* The routine MD5Final terminates the message-digest computation and
ends with the desired message digest in mdContext-&gt;digest[0...15].
*/</comment>
<function><type><name>void</name></type> <name>tMD5Final</name><parameter_list>(<parameter><decl><type><name>T_MD5_CTX</name> <modifier>*</modifier></type><name>mdContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>in</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>mdi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ii</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>padLen</name></decl>;</decl_stmt>

  <comment type="block">/* save number of bits */</comment>
  <expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>mdContext</name><operator>-&gt;</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>mdContext</name><operator>-&gt;</operator><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* compute number of bytes mod 64 */</comment>
  <expr_stmt><expr><name>mdi</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>mdContext</name><operator>-&gt;</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* pad out to 56 mod 64 */</comment>
  <expr_stmt><expr><name>padLen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>mdi</name> <operator>&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">56</literal> <operator>-</operator> <name>mdi</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">120</literal> <operator>-</operator> <name>mdi</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMD5Update</name><argument_list>(<argument><expr><name>mdContext</name></expr></argument>, <argument><expr><name>PADDING</name></expr></argument>, <argument><expr><name>padLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* append length in bits and transform */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ii</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>mdContext</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>mdContext</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>mdContext</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>mdContext</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>Transform</name><argument_list>(<argument><expr><name><name>mdContext</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* store buffer in digest */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ii</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>digest</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>mdContext</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>digest</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>mdContext</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>digest</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>mdContext</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mdContext</name><operator>-&gt;</operator><name>digest</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>mdContext</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Basic MD5 step. Transforms buf based on in.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Round 1 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S11</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S12</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S13</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S14</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S11</name></expr></argument>, <argument><expr><literal type="number">3614090360U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 1 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S12</name></expr></argument>, <argument><expr><literal type="number">3905402710U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 2 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S13</name></expr></argument>, <argument><expr><literal type="number">606105819U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* 3 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S14</name></expr></argument>, <argument><expr><literal type="number">3250441966U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 4 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S11</name></expr></argument>, <argument><expr><literal type="number">4118548399U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 5 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S12</name></expr></argument>, <argument><expr><literal type="number">1200080426U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 6 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S13</name></expr></argument>, <argument><expr><literal type="number">2821735955U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 7 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S14</name></expr></argument>, <argument><expr><literal type="number">4249261313U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 8 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S11</name></expr></argument>, <argument><expr><literal type="number">1770035416U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 9 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S12</name></expr></argument>, <argument><expr><literal type="number">2336552879U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 10 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S13</name></expr></argument>, <argument><expr><literal type="number">4294925233U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 11 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S14</name></expr></argument>, <argument><expr><literal type="number">2304563134U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 12 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S11</name></expr></argument>, <argument><expr><literal type="number">1804603682U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 13 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S12</name></expr></argument>, <argument><expr><literal type="number">4254626195U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 14 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S13</name></expr></argument>, <argument><expr><literal type="number">2792965006U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 15 */</comment>
  <expr_stmt><expr><call><name>FF</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S14</name></expr></argument>, <argument><expr><literal type="number">1236535329U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 16 */</comment>

<comment type="block">/* Round 2 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S21</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S22</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S23</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S24</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S21</name></expr></argument>, <argument><expr><literal type="number">4129170786U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 17 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S22</name></expr></argument>, <argument><expr><literal type="number">3225465664U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 18 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S23</name></expr></argument>, <argument><expr><literal type="number">643717713U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 19 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S24</name></expr></argument>, <argument><expr><literal type="number">3921069994U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 20 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S21</name></expr></argument>, <argument><expr><literal type="number">3593408605U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 21 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S22</name></expr></argument>, <argument><expr><literal type="number">38016083U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* 22 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S23</name></expr></argument>, <argument><expr><literal type="number">3634488961U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 23 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S24</name></expr></argument>, <argument><expr><literal type="number">3889429448U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 24 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S21</name></expr></argument>, <argument><expr><literal type="number">568446438U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* 25 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S22</name></expr></argument>, <argument><expr><literal type="number">3275163606U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 26 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S23</name></expr></argument>, <argument><expr><literal type="number">4107603335U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 27 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S24</name></expr></argument>, <argument><expr><literal type="number">1163531501U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 28 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S21</name></expr></argument>, <argument><expr><literal type="number">2850285829U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 29 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S22</name></expr></argument>, <argument><expr><literal type="number">4243563512U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 30 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S23</name></expr></argument>, <argument><expr><literal type="number">1735328473U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 31 */</comment>
  <expr_stmt><expr><call><name>GG</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S24</name></expr></argument>, <argument><expr><literal type="number">2368359562U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 32 */</comment>

<comment type="block">/* Round 3 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S31</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S32</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S33</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S34</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S31</name></expr></argument>, <argument><expr><literal type="number">4294588738U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 33 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S32</name></expr></argument>, <argument><expr><literal type="number">2272392833U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 34 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S33</name></expr></argument>, <argument><expr><literal type="number">1839030562U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 35 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S34</name></expr></argument>, <argument><expr><literal type="number">4259657740U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 36 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S31</name></expr></argument>, <argument><expr><literal type="number">2763975236U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 37 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S32</name></expr></argument>, <argument><expr><literal type="number">1272893353U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 38 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S33</name></expr></argument>, <argument><expr><literal type="number">4139469664U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 39 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S34</name></expr></argument>, <argument><expr><literal type="number">3200236656U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 40 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S31</name></expr></argument>, <argument><expr><literal type="number">681279174U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 41 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S32</name></expr></argument>, <argument><expr><literal type="number">3936430074U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 42 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S33</name></expr></argument>, <argument><expr><literal type="number">3572445317U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 43 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S34</name></expr></argument>, <argument><expr><literal type="number">76029189U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* 44 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S31</name></expr></argument>, <argument><expr><literal type="number">3654602809U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 45 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S32</name></expr></argument>, <argument><expr><literal type="number">3873151461U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 46 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S33</name></expr></argument>, <argument><expr><literal type="number">530742520U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 47 */</comment>
  <expr_stmt><expr><call><name>HH</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S34</name></expr></argument>, <argument><expr><literal type="number">3299628645U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 48 */</comment>

<comment type="block">/* Round 4 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S41</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S42</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S43</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S44</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S41</name></expr></argument>, <argument><expr><literal type="number">4096336452U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 49 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S42</name></expr></argument>, <argument><expr><literal type="number">1126891415U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 50 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S43</name></expr></argument>, <argument><expr><literal type="number">2878612391U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 51 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S44</name></expr></argument>, <argument><expr><literal type="number">4237533241U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 52 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S41</name></expr></argument>, <argument><expr><literal type="number">1700485571U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 53 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S42</name></expr></argument>, <argument><expr><literal type="number">2399980690U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 54 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S43</name></expr></argument>, <argument><expr><literal type="number">4293915773U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 55 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S44</name></expr></argument>, <argument><expr><literal type="number">2240044497U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 56 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S41</name></expr></argument>, <argument><expr><literal type="number">1873313359U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 57 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S42</name></expr></argument>, <argument><expr><literal type="number">4264355552U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 58 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S43</name></expr></argument>, <argument><expr><literal type="number">2734768916U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 59 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S44</name></expr></argument>, <argument><expr><literal type="number">1309151649U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 60 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S41</name></expr></argument>, <argument><expr><literal type="number">4149444226U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 61 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S42</name></expr></argument>, <argument><expr><literal type="number">3174756917U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 62 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S43</name></expr></argument>, <argument><expr><literal type="number">718787259U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* 63 */</comment>
  <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S44</name></expr></argument>, <argument><expr><literal type="number">3951481745U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 64 */</comment>

  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
