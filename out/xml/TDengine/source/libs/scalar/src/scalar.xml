<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/scalar/src/scalar.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sclInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sclvector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tudf.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>scalarGetOperatorParamNum</name><parameter_list>(<parameter><decl><type><name>EOperatorType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>OP_TYPE_IS_NULL</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>OP_TYPE_IS_NOT_NULL</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>OP_TYPE_IS_TRUE</name> <operator>==</operator> <name>type</name> <operator>||</operator>
      <name>OP_TYPE_IS_NOT_TRUE</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>OP_TYPE_IS_FALSE</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>OP_TYPE_IS_NOT_FALSE</name> <operator>==</operator> <name>type</name> <operator>||</operator>
      <name>OP_TYPE_IS_UNKNOWN</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>OP_TYPE_IS_NOT_UNKNOWN</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>OP_TYPE_MINUS</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclConvertToTsValueNode</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>timeStr</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>convertStringToTimestamp</name><argument_list>(<argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>timeStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclCreateColumnInfoData</name><parameter_list>(<parameter><decl><type><name>SDataType</name> <modifier>*</modifier></type><name>pType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColumnData</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pColumnData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pColumnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>colInfoDataEnsureCapacity</name><argument_list>(<argument><expr><name>pColumnData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pColumnData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>columnData</name></name> <operator>=</operator> <name>pColumnData</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>colAlloced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclConvertValueToSclParam</name><parameter_list>(<parameter><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>pValueNode</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScalarParam</name></type> <name>in</name> <init>= <expr><block>{<expr><operator>.</operator><name>numOfRows</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>sclCreateColumnInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pValueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>columnData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>pValueNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>colInfoDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vectorConvertSingleColImpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>overflow</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclExtendResRows</name><parameter_list>(<parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pDst</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pBlockList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name>  <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pLeft</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SScalarParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pLeft</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SScalarParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pLeft</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>pb</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&lt;</operator> <name><name>pb</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>colInfoDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>_bin_scalar_fn_t</name></type> <name>OperatorFn</name> <init>= <expr><call><name>getBinScalarOperatorFn</name><argument_list>(<argument><expr><name>OP_TYPE_ASSIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>OperatorFn</name><argument_list>(<argument><expr><name>pLeft</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>scalarGenerateSetFromList</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit failed, size:%d"</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashSetEqualFp</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><call><name>taosGetDefaultEqualFunction</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>nodeList</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SListCell</name>     <modifier>*</modifier></type><name>cell</name> <init>= <expr><name><name>nodeList</name><operator>-&gt;</operator><name>pNodeList</name><operator>-&gt;</operator><name>pHead</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name></type>   <name>out</name> <init>= <expr><block>{<expr><operator>.</operator><name>columnData</name> <operator>=</operator> <macro><name>taosMemoryCalloc</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>sizeof(SColumnInfoData)</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodeList</name><operator>-&gt;</operator><name>pNodeList</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>overflow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sclConvertValueToSclParam</name><argument_list>(<argument><expr><name>valueNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <comment type="line">//        sclError("convert data from %d to %d failed", in.type, out.type);</comment>
        <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>colDataGetVarData</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>columnData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>valueNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut to set failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>colInfoDataCleanup</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>columnData</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>pObj</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sclFreeRes</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>SScalarParam</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sclFreeParam</name><parameter_list>(<parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name> <operator>||</operator> <operator>!</operator><name><name>param</name><operator>-&gt;</operator><name>colAlloced</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>columnData</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>pHashFilter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>pHashFilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pHashFilter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclCopyValueNodeValue</name><parameter_list>(<parameter><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NULL</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>res</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"malloc %d failed"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>, <argument><expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sclFreeParamList</name><parameter_list>(<parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>paramNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>paramNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>param</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sclDowngradeValueType</name><parameter_list>(<parameter><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int8_t</name></type> <name>i8</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>i8</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name>i8</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int16_t</name></type> <name>i16</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>i16</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name>i16</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>i32</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>i32</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name>i32</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>u8</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>u8</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>i8</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>i8</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name>i8</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name>u8</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>uint16_t</name></type> <name>u16</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>u16</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int16_t</name></type> <name>i16</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>i16</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name>i16</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_USMALLINT</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name>u16</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>u32</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>u32</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>i32</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>i32</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name>i32</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_UINT</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name>u32</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FLT_EQUAL</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclInitParam</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rowNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_LEFT_VALUE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>pb</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>columnData</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>sclCreateColumnInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NULL</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>||</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>valueNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_NODE_LIST</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>nodeList</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>nodeList</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"invalid length in nodeList, length:%d"</literal></expr></argument>, <argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>nodeList</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><call><name>vectorGetConvertType</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>selfType</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>peerType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>nodeList</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><call><name>scalarGenerateSetFromList</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>pHashFilter</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>hashValueType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>colAlloced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>pHashFilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pHashFilter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut nodeList failed, size:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>colAlloced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"invalid node type for constant calculating, type:%d, src:%p"</literal></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>blockId</name></name> <operator>==</operator> <name><name>ref</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"column tupleId is too big, tupleId:%d, dataBlockNum:%d"</literal></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>,
                 <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSDataBlock</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>block</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>slotId</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"column slotId is too big, slodId:%d, dataBlockSize:%d"</literal></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>,
                 <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>columnData</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAG_FILTER_DEBUG</name></expr></cpp:if>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter column info, slotId:%d, colId:%d, type:%d"</literal></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>, <argument><expr><name><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name></expr></argument>,
             <argument><expr><name><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>columnData</name></name> <operator>=</operator> <name>columnData</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_CASE_WHEN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>SScalarParam</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"no result for node, type:%d, node:%p"</literal></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>param</name> <operator>=</operator> <operator>*</operator><name>res</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>colAlloced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <operator>*</operator><name>rowNum</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>!=</operator> <name><name>param</name><operator>-&gt;</operator><name>numOfRows</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;</operator> <operator>*</operator><name>rowNum</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"different row nums, rowNum:%d, newRowNum:%d"</literal></expr></argument>, <argument><expr><operator>*</operator><name>rowNum</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>rowNum</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>param</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclInitParamList</name><parameter_list>(<parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier><modifier>*</modifier></type><name>pParams</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pParamList</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>paramNum</name></decl></parameter>,
                         <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rowNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pParamList</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>rowNum</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>rowNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>paramNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>paramNum</name> <operator>=</operator> <name><name>pParamList</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>paramList</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>*</operator><name>paramNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SScalarParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>paramList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>paramNum</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SScalarParam</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pParamList</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name>  <modifier>*</modifier></type><name>tnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SCL_IS_CONST_CALC</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <macro><name>WHERE_EACH</name><argument_list>(<argument>tnode</argument>, <argument>pParamList</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCL_IS_CONST_NODE</name><argument_list>(<argument><expr><name>tnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>WHERE_NEXT</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclInitParam</name><argument_list>(<argument><expr><name>tnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paramList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>ERASE_NODE</name><argument_list>(<argument><expr><name>pParamList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      </block_content>}</block>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <macro><name>FOREACH</name><argument_list>(<argument>tnode</argument>, <argument>pParamList</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclInitParam</name><argument_list>(<argument><expr><name>tnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paramList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      </block_content>}</block>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>paramList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>numOfRows</name> <operator>=</operator> <operator>*</operator><name>rowNum</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>*</operator><name>rowNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>paramList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pParams</name> <operator>=</operator> <name>paramList</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>paramList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclGetNodeType</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_NODE_LIST</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>nodeList</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><name><name>nodeList</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>colNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><name><name>colNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>SScalarParam</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"no result for node, type:%d, node:%p"</literal></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sclSetOperatorValueType</name><parameter_list>(<parameter><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>opResType</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>selfType</name></name> <operator>=</operator> <call><name>sclGetNodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>peerType</name></name> <operator>=</operator> <call><name>sclGetNodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclInitOperatorParams</name><parameter_list>(<parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier><modifier>*</modifier></type><name>pParams</name></decl></parameter>, <parameter><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rowNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>paramNum</name> <init>= <expr><call><name>scalarGetOperatorParamNum</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>||</operator> <operator>(</operator><name>paramNum</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"invalid operation node, left:%p, right:%p"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>paramList</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>paramNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SScalarParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>paramList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>paramNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SScalarParam</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sclSetOperatorValueType</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclInitParam</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paramList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>paramNum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>selfType</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>peerType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclInitParam</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paramList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pParams</name> <operator>=</operator> <name>paramList</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>paramList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclGetNodeRes</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>node</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>res</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><call><name>sclInitParam</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>*</operator><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclWalkCaseWhenList</name><parameter_list>(<parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SListCell</name></name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pCase</name></decl></parameter>,
                            <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pElse</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pComp</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIdx</name></decl></parameter>,
                            <parameter><decl><type><name>int32_t</name></type> <name>totalRows</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>complete</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name>         <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWhenThenNode</name> <modifier>*</modifier></type><name>pWhenThen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name>  <modifier>*</modifier></type><name>pWhen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name>  <modifier>*</modifier></type><name>pThen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>SListCell</name> <modifier>*</modifier></type><name>cell</name> <init>= <expr><name>pCell</name></expr></init></decl>;</init> <condition><expr><operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name>cell</name></expr> ?</condition><then> <expr><operator>(</operator><name>node</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name><operator>,</operator> <name>true</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>node</name> <operator>=</operator> <name>NULL</name><operator>,</operator> <name>false</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</condition>
       <incr><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pWhenThen</name> <operator>=</operator> <operator>(</operator><name>SWhenThenNode</name> <operator>*</operator><operator>)</operator><name>node</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><call><name>sclGetNodeRes</name><argument_list>(<argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pWhen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><call><name>sclGetNodeRes</name><argument_list>(<argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pThen</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pThen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>vectorCompareImpl</name><argument_list>(<argument><expr><name>pCase</name></expr></argument>, <argument><expr><name>pWhen</name></expr></argument>, <argument><expr><name>pComp</name></expr></argument>, <argument><expr><name>rowIdx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>OP_TYPE_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>equal</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>rowIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>equal</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type>  <name>isNull</name> <init>= <expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name><name>pThen</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>rowIdx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><ternary><condition><expr><name>isNull</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>pThen</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>rowIdx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>rowIdx</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>rowIdx</name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pCase</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pWhen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <name>totalRows</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclExtendResRows</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>complete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>pElse</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>  <name>isNull</name> <init>= <expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name><name>pElse</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pElse</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>rowIdx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><ternary><condition><expr><name>isNull</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>pElse</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pElse</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>rowIdx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>rowIdx</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>rowIdx</name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pCase</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pElse</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <name>totalRows</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclExtendResRows</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>complete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>rowIdx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>rowIdx</name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pCase</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <name>totalRows</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclExtendResRows</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>complete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclWalkWhenList</name><parameter_list>(<parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SListCell</name></name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pElse</name></decl></parameter>,
                        <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>totalRows</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>complete</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>preSingle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name>         <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWhenThenNode</name> <modifier>*</modifier></type><name>pWhenThen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name>  <modifier>*</modifier></type><name>pWhen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name>  <modifier>*</modifier></type><name>pThen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>SListCell</name> <modifier>*</modifier></type><name>cell</name> <init>= <expr><name>pCell</name></expr></init></decl>;</init> <condition><expr><operator>(</operator><ternary><condition><expr><name>NULL</name> <operator>!=</operator> <name>cell</name></expr> ?</condition><then> <expr><operator>(</operator><name>node</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name><operator>,</operator> <name>true</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>node</name> <operator>=</operator> <name>NULL</name><operator>,</operator> <name>false</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</condition>
       <incr><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pWhenThen</name> <operator>=</operator> <operator>(</operator><name>SWhenThenNode</name> <operator>*</operator><operator>)</operator><name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pWhen</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pThen</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclGetNodeRes</name><argument_list>(<argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pWhen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclGetNodeRes</name><argument_list>(<argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pThen</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pThen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>whenValue</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>pWhen</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pWhen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>rowIdx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>whenValue</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type>  <name>isNull</name> <init>= <expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name><name>pThen</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>rowIdx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><ternary><condition><expr><name>isNull</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>pThen</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>rowIdx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>rowIdx</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>preSingle</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name>rowIdx</name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pWhen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <name>totalRows</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclExtendResRows</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>complete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>pElse</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>  <name>isNull</name> <init>= <expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name><name>pElse</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pElse</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>rowIdx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><ternary><condition><expr><name>isNull</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>pElse</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pElse</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>rowIdx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>rowIdx</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>preSingle</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name>rowIdx</name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pElse</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <name>totalRows</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclExtendResRows</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>complete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>rowIdx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>preSingle</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name>rowIdx</name> <operator>&amp;&amp;</operator> <name>totalRows</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclExtendResRows</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>complete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclExecFunction</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>rowNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>paramNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><call><name>sclInitParamList</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paramNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>callUdfScalarFunc</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>paramNum</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"fmExecFunction error. callUdfScalarFunc. function name: %s, udf code:%d"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SScalarFuncExecFuncs</name></type> <name>ffpSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>fmGetScalarFuncExecFuncs</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ffpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"fmGetFuncExecFuncs failed, funcId:%d, code:%s"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sclCreateColumnInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>ffpSet</name><operator>.</operator><name>process</name></name>)<argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>paramNum</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"scalar function exec failed, funcId:%d, code:%s"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>sclFreeParamList</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>paramNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclExecLogic</name><parameter_list>(<parameter><decl><type><name>SLogicConditionNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>pParameterList</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"invalid logic parameter list, list:%p, paramNum:%d"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>,
             <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>pParameterList</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>pParameterList</name><operator>-&gt;</operator><name>length</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BOOL</name> <operator>!=</operator> <name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"invalid logic resType, type:%d"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>LOGIC_COND_TYPE_NOT</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>condType</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>pParameterList</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"invalid NOT operation parameter number, paramNum:%d"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pParameterList</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>rowNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>paramNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><call><name>sclInitParamList</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paramNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>params</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name>rowNum</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataType</name></type> <name>t</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>, <expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sclCreateColumnInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfQualified</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>complete</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>complete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>paramNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>params</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>columnData</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>complete</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>columnData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name><name>params</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>LOGIC_COND_TYPE_AND</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>condType</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>false</name> <operator>==</operator> <name>value</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>complete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>LOGIC_COND_TYPE_OR</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>condType</name></name> <operator>&amp;&amp;</operator> <name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>complete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>LOGIC_COND_TYPE_NOT</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>condType</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>!</operator><name>value</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>complete</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>numOfQualified</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>SCL_IS_CONST_CALC</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>false</name> <operator>==</operator> <name>complete</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>numOfQualified</name></name> <operator>=</operator> <name>numOfQualified</name></expr>;</expr_stmt>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>sclFreeParamList</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>paramNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclExecOperator</name><parameter_list>(<parameter><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>rowNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// json not support in in operator</comment>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>==</operator> <name>OP_TYPE_IN</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>==</operator> <name>OP_TYPE_NOT_IN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_JSON_IN_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><call><name>sclInitOperatorParams</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sclCreateColumnInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>_bin_scalar_fn_t</name></type> <name>OperatorFn</name> <init>= <expr><call><name>getBinScalarOperatorFn</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>       <name>paramNum</name> <init>= <expr><call><name>scalarGetOperatorParamNum</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pLeft</name> <init>= <expr><operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pRight</name> <init>= <expr><ternary><condition><expr><name>paramNum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>OperatorFn</name><argument_list>(<argument><expr><name>pLeft</name></expr></argument>, <argument><expr><name>pRight</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>sclFreeParamList</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>paramNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclExecCaseWhen</name><parameter_list>(<parameter><decl><type><name>SCaseWhenNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pCase</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pElse</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pWhen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pThen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name></type>  <name>comp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>rowNum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>complete</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>pWhenThenList</name></name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>pWhenThenList</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"invalid whenThen list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_PARA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rowNum</name> <operator>=</operator> <name><name>pb</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>pb</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclCreateColumnInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclGetNodeRes</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pCase</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclGetNodeRes</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pElse</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pElse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataType</name></type> <name>compType</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>compType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>compType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>compType</name><operator>.</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclCreateColumnInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compType</name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SNode</name>         <modifier>*</modifier></type><name>tnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWhenThenNode</name> <modifier>*</modifier></type><name>pWhenThen</name> <init>= <expr><operator>(</operator><name>SWhenThenNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pWhenThenList</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclGetNodeRes</name><argument_list>(<argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pWhen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclGetNodeRes</name><argument_list>(<argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pThen</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pThen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pWhen</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pThen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"invalid when/then in whenThen list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_PARA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCase</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vectorCompare</name><argument_list>(<argument><expr><name>pCase</name></expr></argument>, <argument><expr><name>pWhen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comp</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>OP_TYPE_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>equal</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>comp</name><operator>.</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>comp</name><operator>.</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>equal</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>pThen</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name><name>pThen</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pCase</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pWhen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <name>rowNum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclExtendResRows</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclWalkCaseWhenList</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pWhenThenList</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pWhenThenList</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>pNext</name></name></expr></argument>, <argument><expr><name>pCase</name></expr></argument>, <argument><expr><name>pElse</name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name>comp</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>complete</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>complete</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>whenValue</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>pWhen</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pWhen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>whenValue</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name><name>pThen</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name><name>pThen</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pWhen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <name>rowNum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclExtendResRows</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclWalkWhenList</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pWhenThenList</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pWhenThenList</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>pNext</name></name></expr></argument>, <argument><expr><name>pElse</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                     <argument><expr><name>rowNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>complete</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pWhen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pThen</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>complete</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pElse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pElse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pElse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pElse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pThen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SCL_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclRewriteNullInOptr</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>EOperatorType</name></type> <name>opType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>opType</name> <operator>&lt;=</operator> <name>OP_TYPE_CALC_MAX</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"make value node failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"make value node failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BOOL</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclAggFuncWalker</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFunctionNode</name> <modifier>*</modifier></type><name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>pContext</name> <operator>=</operator> <call><name>fmIsAggFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>pContext</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>DEAL_RES_END</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>sclContainsAggFuncNode</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>aggFunc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesWalkExpr</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>sclAggFuncWalker</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>aggFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>aggFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclRewriteNonConstOperator</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>QUERY_NODE_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SCL_IS_NULL_VALUE_NODE</name><argument_list>(<argument><expr><name>valueNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>!=</operator> <name>OP_TYPE_IS_NULL</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>!=</operator> <name>OP_TYPE_IS_NOT_NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>!</operator><call><name>sclContainsAggFuncNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>sclRewriteNullInOptr</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>pRight</name></name> <operator>&amp;&amp;</operator> <call><name>nodesIsExprNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sclConvertToTsValueNode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><name>valueNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SCL_IS_COMPARISON_OPERATOR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SCL_DOWNGRADE_DATETYPE</name><argument_list>(<argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclDowngradeValueType</name><argument_list>(<argument><expr><name>valueNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>QUERY_NODE_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SCL_IS_NULL_VALUE_NODE</name><argument_list>(<argument><expr><name>valueNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>!=</operator> <name>OP_TYPE_IS_NULL</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>!=</operator> <name>OP_TYPE_IS_NOT_NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>!</operator><call><name>sclContainsAggFuncNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>sclRewriteNullInOptr</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>&amp;&amp;</operator> <call><name>nodesIsExprNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sclConvertToTsValueNode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><name>valueNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SCL_IS_COMPARISON_OPERATOR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SCL_DOWNGRADE_DATETYPE</name><argument_list>(<argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclDowngradeValueType</name><argument_list>(<argument><expr><name>valueNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>QUERY_NODE_NODE_LIST</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>listNode</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNode</name>         <modifier>*</modifier></type><name>tnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>WHERE_EACH</name><argument_list>(<argument>tnode</argument>, <argument>listNode-&gt;pNodeList</argument>)</argument_list></macro> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>SCL_IS_NULL_VALUE_NODE</name><argument_list>(<argument><expr><name>tnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>==</operator> <name>OP_TYPE_IN</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ERASE_NODE</name><argument_list>(<argument><expr><name><name>listNode</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// OP_TYPE_NOT_IN</comment>
          <return>return <expr><call><name>sclRewriteNullInOptr</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>WHERE_NEXT</name></expr>;</expr_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name><name>listNode</name><operator>-&gt;</operator><name>pNodeList</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>sclRewriteNullInOptr</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclRewriteFunction</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name>         <modifier>*</modifier></type><name>tnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>fmIsScalarFunc</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>dual</name></name><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <macro><name>FOREACH</name><argument_list>(<argument>tnode</argument>, <argument>node-&gt;pParameterList</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCL_IS_CONST_NODE</name><argument_list>(<argument><expr><name>tnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>SScalarParam</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>sclExecFunction</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"make value node failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>columnData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// res-&gt;datum.p = taosMemoryCalloc(res-&gt;node.resType.bytes + VARSTR_HEADER_SIZE + 1, 1);</comment>
      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>nodesSetValueNodeValue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclRewriteLogic</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogicConditionNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SScalarParam</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>sclExecLogic</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>output</name><operator>.</operator><name>numOfRows</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"make value node failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesSetValueNodeValue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclRewriteOperator</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>SCL_IS_CONST_NODE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>SCL_IS_CONST_NODE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sclRewriteNonConstOperator</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScalarParam</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>sclExecOperator</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"make value node failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>columnData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// todo refactor</comment>
      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>nodesSetValueNodeValue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclRewriteCaseWhen</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCaseWhenNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SCaseWhenNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>SCL_IS_CONST_NODE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pCase</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>SCL_IS_CONST_NODE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pElse</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>tnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>tnode</argument>, <argument>node-&gt;pWhenThenList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SWhenThenNode</name> <modifier>*</modifier></type><name>pWhenThen</name> <init>= <expr><operator>(</operator><name>SWhenThenNode</name> <operator>*</operator><operator>)</operator><name>tnode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCL_IS_CONST_NODE</name><argument_list>(<argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>SCL_IS_CONST_NODE</name><argument_list>(<argument><expr><name><name>pWhenThen</name><operator>-&gt;</operator><name>pThen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>SScalarParam</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>sclExecCaseWhen</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"make value node failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>columnData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// todo refactor</comment>
      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>nodesSetValueNodeValue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclConstantsRewriter</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SScalarCtx</name> <operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sclRewriteOperator</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sclRewriteFunction</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_LOGIC_CONDITION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sclRewriteLogic</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_CASE_WHEN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sclRewriteCaseWhen</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclWalkFunction</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name></type>   <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>sclExecFunction</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclWalkLogic</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogicConditionNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name></type>         <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>sclExecLogic</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclWalkOperator</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name></type>   <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>sclExecOperator</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclWalkTarget</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STargetNode</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><operator>(</operator><name>STargetNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>dataBlockId</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"target tupleId is too big, tupleId:%d, dataBlockNum:%d"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>,
             <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>blockId</name></name> <operator>==</operator> <name><name>target</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"column tupleId is too big, tupleId:%d, dataBlockNum:%d"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>,
             <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSDataBlock</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>slotId</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"target slot not exist, dataBlockId:%d, slotId:%d, dataBlockNum:%d"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>,
             <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// if block-&gt;pDataBlock is not enough, there are problems if target-&gt;slotId bigger than the size of block-&gt;pDataBlock,</comment>
  <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>SScalarParam</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"no valid res in hash, node:%p, type:%d"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclWalkCaseWhen</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCaseWhenNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SCaseWhenNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name></type>   <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>sclExecCaseWhen</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>sclCalcWalker</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>QUERY_NODE_NODE_LIST</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>QUERY_NODE_LEFT_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name>QUERY_NODE_WHEN_THEN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScalarCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SScalarCtx</name> <operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sclWalkOperator</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sclWalkFunction</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_LOGIC_CONDITION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sclWalkLogic</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_TARGET</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sclWalkTarget</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_CASE_WHEN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sclWalkCaseWhen</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"invalid node type for scalar calculating, type:%d"</literal></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sclCalcConstants</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dual</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>dual</name></name> <operator>=</operator> <name>dual</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>SCL_DEFAULT_OP_NUM</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>.</operator><name>pRes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit failed, num:%d"</literal></expr></argument>, <argument><expr><name>SCL_DEFAULT_OP_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>nodesRewriteExprPostOrder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>, <argument><expr><name>sclConstantsRewriter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>sclFreeRes</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sclGetMinusOperatorResType</name><parameter_list>(<parameter><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>pOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_MATHABLE_TYPE</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sclGetMathOperatorResType</name><parameter_list>(<parameter><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>pOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pOp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataType</name></type> <name>ldt</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataType</name></type> <name>rdt</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>ldt</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>rdt</name><operator>.</operator><name>type</name></name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>ldt</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>rdt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name><name>rdt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>rdt</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>ldt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name><name>ldt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>ldt</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>rdt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>rdt</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>ldt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>ldt</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>==</operator> <name><name>rdt</name><operator>.</operator><name>type</name></name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>rdt</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>==</operator> <name><name>ldt</name><operator>.</operator><name>type</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sclGetCompOperatorResType</name><parameter_list>(<parameter><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>pOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pOp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataType</name></type> <name>ldt</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>OP_TYPE_IN</name> <operator>==</operator> <name><name>pOp</name><operator>-&gt;</operator><name>opType</name></name> <operator>||</operator> <name>OP_TYPE_NOT_IN</name> <operator>==</operator> <name><name>pOp</name><operator>-&gt;</operator><name>opType</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>resType</name> <operator>=</operator> <name>ldt</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>nodesIsRegularOp</name><argument_list>(<argument><expr><name>pOp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SDataType</name></type> <name>rdt</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>ldt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>(</operator><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>rdt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rdt</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_NULL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BOOL</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sclGetJsonOperatorResType</name><parameter_list>(<parameter><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>pOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pOp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataType</name></type> <name>ldt</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataType</name></type> <name>rdt</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_JSON</name> <operator>!=</operator> <name><name>ldt</name><operator>.</operator><name>type</name></name> <operator>||</operator> <operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>rdt</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOp</name><operator>-&gt;</operator><name>opType</name></name> <operator>==</operator> <name>OP_TYPE_JSON_GET_VALUE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOp</name><operator>-&gt;</operator><name>opType</name></name> <operator>==</operator> <name>OP_TYPE_JSON_CONTAINS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sclGetBitwiseOperatorResType</name><parameter_list>(<parameter><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>pOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>scalarCalculateConstants</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>sclCalcConstants</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>scalarCalculateConstantsFromDual</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>sclCalcConstants</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>scalarCalculate</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pBlockList</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pBlockList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarCtx</name></type> <name>ctx</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>pBlockList</name> <operator>=</operator> <name>pBlockList</name></expr>, <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>pDst</name> <operator>?</operator> <name><name>pDst</name><operator>-&gt;</operator><name>param</name></name> <operator>:</operator> <name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// TODO: OPT performance</comment>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>SCL_DEFAULT_OP_NUM</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>.</operator><name>pRes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"taosHashInit failed, num:%d"</literal></expr></argument>, <argument><expr><name>SCL_DEFAULT_OP_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SCL_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>nodesWalkExprPostOrder</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>sclCalcWalker</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pDst</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>SScalarParam</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pNode</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sclError</name><argument_list>(<argument><expr><literal type="string">"no valid res in hash, node:%p, type:%d"</literal></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name><name>res</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SCL_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclExtendResRows</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>pBlockList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>colInfoDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfQualified</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>numOfQualified</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>sclFreeParam</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pNode</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>sclFreeRes</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>scalarGetOperatorResultType</name><parameter_list>(<parameter><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>pOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BLOB</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>||</operator>
      <operator>(</operator><name>NULL</name> <operator>!=</operator> <name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_BLOB</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pRight</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pOp</name><operator>-&gt;</operator><name>opType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OP_TYPE_ADD</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_SUB</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_MULTI</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_DIV</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_REM</name></expr>:</case>
      <return>return <expr><call><name>sclGetMathOperatorResType</name><argument_list>(<argument><expr><name>pOp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>OP_TYPE_MINUS</name></expr>:</case>
      <return>return <expr><call><name>sclGetMinusOperatorResType</name><argument_list>(<argument><expr><name>pOp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>OP_TYPE_ASSIGN</name></expr>:</case>
      <expr_stmt><expr><name><name>pOp</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pOp</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_TYPE_BIT_AND</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_BIT_OR</name></expr>:</case>
      <return>return <expr><call><name>sclGetBitwiseOperatorResType</name><argument_list>(<argument><expr><name>pOp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>OP_TYPE_GREATER_THAN</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_GREATER_EQUAL</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_LOWER_THAN</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_LOWER_EQUAL</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_EQUAL</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_NOT_EQUAL</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_IS_NULL</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_IS_NOT_NULL</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_IS_TRUE</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_IS_FALSE</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_IS_UNKNOWN</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_IS_NOT_TRUE</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_IS_NOT_FALSE</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_IS_NOT_UNKNOWN</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_LIKE</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_NOT_LIKE</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_MATCH</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_NMATCH</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_IN</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_NOT_IN</name></expr>:</case>
      <return>return <expr><call><name>sclGetCompOperatorResType</name><argument_list>(<argument><expr><name>pOp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>OP_TYPE_JSON_GET_VALUE</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_JSON_CONTAINS</name></expr>:</case>
      <return>return <expr><call><name>sclGetJsonOperatorResType</name><argument_list>(<argument><expr><name>pOp</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
