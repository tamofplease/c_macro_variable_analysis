<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/scalar/src/filter.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tlog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<comment type="line">//#include "queryLog.h"</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filterInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sclInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>filterRangeCompGi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxr</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>cfunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>result</name> <init>= <expr><call><name>cfunc</name><argument_list>(<argument><expr><name>maxv</name></expr></argument>, <argument><expr><name>minr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>filterRangeCompGe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxr</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>cfunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>result</name> <init>= <expr><call><name>cfunc</name><argument_list>(<argument><expr><name>maxv</name></expr></argument>, <argument><expr><name>minr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>filterRangeCompLi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxr</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>cfunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>result</name> <init>= <expr><call><name>cfunc</name><argument_list>(<argument><expr><name>minv</name></expr></argument>, <argument><expr><name>maxr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>filterRangeCompLe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxr</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>cfunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>result</name> <init>= <expr><call><name>cfunc</name><argument_list>(<argument><expr><name>minv</name></expr></argument>, <argument><expr><name>maxr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>filterRangeCompii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxr</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>cfunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cfunc</name><argument_list>(<argument><expr><name>maxv</name></expr></argument>, <argument><expr><name>minr</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>cfunc</name><argument_list>(<argument><expr><name>minv</name></expr></argument>, <argument><expr><name>maxr</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>filterRangeCompee</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxr</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>cfunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cfunc</name><argument_list>(<argument><expr><name>maxv</name></expr></argument>, <argument><expr><name>minr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>cfunc</name><argument_list>(<argument><expr><name>minv</name></expr></argument>, <argument><expr><name>maxr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>filterRangeCompei</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxr</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>cfunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cfunc</name><argument_list>(<argument><expr><name>maxv</name></expr></argument>, <argument><expr><name>minr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>cfunc</name><argument_list>(<argument><expr><name>minv</name></expr></argument>, <argument><expr><name>maxr</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>filterRangeCompie</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>minr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>maxr</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>cfunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cfunc</name><argument_list>(<argument><expr><name>maxv</name></expr></argument>, <argument><expr><name>minr</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>cfunc</name><argument_list>(<argument><expr><name>minv</name></expr></argument>, <argument><expr><name>maxr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>rangeCompFunc</name></type> <name>filterGetRangeCompFunc</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>sflag</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>eflag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name>sflag</name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name>eflag</name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>filterRangeCompLe</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>filterRangeCompLi</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name>eflag</name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name>sflag</name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>filterRangeCompGe</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>filterRangeCompGi</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name>sflag</name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name>eflag</name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>filterRangeCompee</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>filterRangeCompei</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name>eflag</name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>filterRangeCompie</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>filterRangeCompii</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>rangeCompFunc</name></type> <name><name>gRangeCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>filterRangeCompee</name></expr>, <expr><name>filterRangeCompei</name></expr>, <expr><name>filterRangeCompie</name></expr>, <expr><name>filterRangeCompii</name></expr>,
                                 <expr><name>filterRangeCompGe</name></expr>, <expr><name>filterRangeCompGi</name></expr>, <expr><name>filterRangeCompLe</name></expr>, <expr><name>filterRangeCompLi</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int8_t</name></type> <name>filterGetRangeCompFuncFromOptrs</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>optr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>optr2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>optr2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>optr2</name> <operator>==</operator> <name>OP_TYPE_LOWER_THAN</name> <operator>||</operator> <name>optr2</name> <operator>==</operator> <name>OP_TYPE_LOWER_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_GREATER_THAN</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>optr2</name> <operator>==</operator> <name>OP_TYPE_LOWER_THAN</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>optr2</name> <operator>==</operator> <name>OP_TYPE_LOWER_THAN</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <switch>switch <condition>(<expr><name>optr</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>OP_TYPE_GREATER_THAN</name></expr>:</case>
        <return>return <expr><literal type="number">4</literal></expr>;</return>
      <case>case <expr><name>OP_TYPE_GREATER_EQUAL</name></expr>:</case>
        <return>return <expr><literal type="number">5</literal></expr>;</return>
      <case>case <expr><name>OP_TYPE_LOWER_THAN</name></expr>:</case>
        <return>return <expr><literal type="number">6</literal></expr>;</return>
      <case>case <expr><name>OP_TYPE_LOWER_EQUAL</name></expr>:</case>
        <return>return <expr><literal type="number">7</literal></expr>;</return>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gDataCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareInt32Val</name></expr>,
                                <expr><name>compareInt8Val</name></expr>,
                                <expr><name>compareInt16Val</name></expr>,
                                <expr><name>compareInt64Val</name></expr>,
                                <expr><name>compareFloatVal</name></expr>,
                                <expr><name>compareDoubleVal</name></expr>,
                                <expr><name>compareLenPrefixedStr</name></expr>,
                                <expr><name>compareStrPatternMatch</name></expr>,
                                <expr><name>compareChkInString</name></expr>,
                                <expr><name>compareWStrPatternMatch</name></expr>,
                                <expr><name>compareLenPrefixedWStr</name></expr>,
                                <expr><name>compareUint8Val</name></expr>,
                                <expr><name>compareUint16Val</name></expr>,
                                <expr><name>compareUint32Val</name></expr>,
                                <expr><name>compareUint64Val</name></expr>,
                                <expr><name>setChkInBytes1</name></expr>,
                                <expr><name>setChkInBytes2</name></expr>,
                                <expr><name>setChkInBytes4</name></expr>,
                                <expr><name>setChkInBytes8</name></expr>,
                                <expr><name>compareStrRegexCompMatch</name></expr>,
                                <expr><name>compareStrRegexCompNMatch</name></expr>,
                                <expr><name>setChkNotInBytes1</name></expr>,
                                <expr><name>setChkNotInBytes2</name></expr>,
                                <expr><name>setChkNotInBytes4</name></expr>,
                                <expr><name>setChkNotInBytes8</name></expr>,
                                <expr><name>compareChkNotInString</name></expr>,
                                <expr><name>compareStrPatternNotMatch</name></expr>,
                                <expr><name>compareWStrPatternNotMatch</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gInt8SignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareInt8Val</name></expr>,   <expr><name>compareInt8Int16</name></expr>, <expr><name>compareInt8Int32</name></expr>,
                                    <expr><name>compareInt8Int64</name></expr>, <expr><name>compareInt8Float</name></expr>, <expr><name>compareInt8Double</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gInt8UsignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareInt8Uint8</name></expr>, <expr><name>compareInt8Uint16</name></expr>, <expr><name>compareInt8Uint32</name></expr>, <expr><name>compareInt8Uint64</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gInt16SignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareInt16Int8</name></expr>,  <expr><name>compareInt16Val</name></expr>,   <expr><name>compareInt16Int32</name></expr>,
                                     <expr><name>compareInt16Int64</name></expr>, <expr><name>compareInt16Float</name></expr>, <expr><name>compareInt16Double</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gInt16UsignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareInt16Uint8</name></expr>, <expr><name>compareInt16Uint16</name></expr>, <expr><name>compareInt16Uint32</name></expr>, <expr><name>compareInt16Uint64</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gInt32SignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareInt32Int8</name></expr>,  <expr><name>compareInt32Int16</name></expr>, <expr><name>compareInt32Val</name></expr>,
                                     <expr><name>compareInt32Int64</name></expr>, <expr><name>compareInt32Float</name></expr>, <expr><name>compareInt32Double</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gInt32UsignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareInt32Uint8</name></expr>, <expr><name>compareInt32Uint16</name></expr>, <expr><name>compareInt32Uint32</name></expr>, <expr><name>compareInt32Uint64</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gInt64SignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareInt64Int8</name></expr>, <expr><name>compareInt64Int16</name></expr>, <expr><name>compareInt64Int32</name></expr>,
                                     <expr><name>compareInt64Val</name></expr>,  <expr><name>compareInt64Float</name></expr>, <expr><name>compareInt64Double</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gInt64UsignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareInt64Uint8</name></expr>, <expr><name>compareInt64Uint16</name></expr>, <expr><name>compareInt64Uint32</name></expr>, <expr><name>compareInt64Uint64</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gFloatSignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareFloatInt8</name></expr>,  <expr><name>compareFloatInt16</name></expr>, <expr><name>compareFloatInt32</name></expr>,
                                     <expr><name>compareFloatInt64</name></expr>, <expr><name>compareFloatVal</name></expr>,   <expr><name>compareFloatDouble</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gFloatUsignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareFloatUint8</name></expr>, <expr><name>compareFloatUint16</name></expr>, <expr><name>compareFloatUint32</name></expr>, <expr><name>compareFloatUint64</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gDoubleSignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareDoubleInt8</name></expr>,  <expr><name>compareDoubleInt16</name></expr>, <expr><name>compareDoubleInt32</name></expr>,
                                      <expr><name>compareDoubleInt64</name></expr>, <expr><name>compareDoubleFloat</name></expr>, <expr><name>compareDoubleVal</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gDoubleUsignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareDoubleUint8</name></expr>, <expr><name>compareDoubleUint16</name></expr>, <expr><name>compareDoubleUint32</name></expr>,
                                       <expr><name>compareDoubleUint64</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gUint8SignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareUint8Int8</name></expr>,  <expr><name>compareUint8Int16</name></expr>, <expr><name>compareUint8Int32</name></expr>,
                                     <expr><name>compareUint8Int64</name></expr>, <expr><name>compareUint8Float</name></expr>, <expr><name>compareUint8Double</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gUint8UsignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareUint8Val</name></expr>, <expr><name>compareUint8Uint16</name></expr>, <expr><name>compareUint8Uint32</name></expr>, <expr><name>compareUint8Uint64</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gUint16SignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareUint16Int8</name></expr>,  <expr><name>compareUint16Int16</name></expr>, <expr><name>compareUint16Int32</name></expr>,
                                      <expr><name>compareUint16Int64</name></expr>, <expr><name>compareUint16Float</name></expr>, <expr><name>compareUint16Double</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gUint16UsignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareUint16Uint8</name></expr>, <expr><name>compareUint16Val</name></expr>, <expr><name>compareUint16Uint32</name></expr>, <expr><name>compareUint16Uint64</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gUint32SignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareUint32Int8</name></expr>,  <expr><name>compareUint32Int16</name></expr>, <expr><name>compareUint32Int32</name></expr>,
                                      <expr><name>compareUint32Int64</name></expr>, <expr><name>compareUint32Float</name></expr>, <expr><name>compareUint32Double</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gUint32UsignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareUint32Uint8</name></expr>, <expr><name>compareUint32Uint16</name></expr>, <expr><name>compareUint32Val</name></expr>, <expr><name>compareUint32Uint64</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gUint64SignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareUint64Int8</name></expr>,  <expr><name>compareUint64Int16</name></expr>, <expr><name>compareUint64Int32</name></expr>,
                                      <expr><name>compareUint64Int64</name></expr>, <expr><name>compareUint64Float</name></expr>, <expr><name>compareUint64Double</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__compar_fn_t</name></type> <name><name>gUint64UsignCompare</name><index>[]</index></name> <init>= <expr><block>{<expr><name>compareUint64Uint8</name></expr>, <expr><name>compareUint64Uint16</name></expr>, <expr><name>compareUint64Uint32</name></expr>, <expr><name>compareUint64Val</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int8_t</name></type> <name>filterGetCompFuncIdx</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>comparFn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_IN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TSDB_DATA_TYPE_NCHAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
        <return>return <expr><literal type="number">15</literal></expr>;</return>
      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
        <return>return <expr><literal type="number">16</literal></expr>;</return>
      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
        <return>return <expr><literal type="number">17</literal></expr>;</return>
      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
        <return>return <expr><literal type="number">18</literal></expr>;</return>
      <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_JSON_IN_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      <default>default:</default>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_NOT_IN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TSDB_DATA_TYPE_NCHAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
        <return>return <expr><literal type="number">21</literal></expr>;</return>
      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
        <return>return <expr><literal type="number">22</literal></expr>;</return>
      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
        <return>return <expr><literal type="number">23</literal></expr>;</return>
      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
        <return>return <expr><literal type="number">24</literal></expr>;</return>
      <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_JSON_IN_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      <default>default:</default>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  if (optr == OP_TYPE_JSON_CONTAINS &amp;&amp; type == TSDB_DATA_TYPE_JSON) {</comment>
  <comment type="line">//    return 28;</comment>
  <comment type="line">//  }</comment>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_MATCH</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">19</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_NMATCH</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_LIKE</name></expr>)</condition> <block>{<block_content> <comment type="block">/* wildcard query using like operator */</comment>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_NOT_LIKE</name></expr>)</condition> <block>{<block_content> <comment type="block">/* wildcard query using like operator */</comment>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_IN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_NOT_IN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/* normal relational comparFn */</comment>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_MATCH</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">19</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_NMATCH</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_LIKE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_NOT_LIKE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_IN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_NOT_IN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><name>comparFn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>comparFn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__compar_fn_t</name></type> <name>filterGetCompFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>gDataCompare</name><index>[<expr><call><name>filterGetCompFuncIdx</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<function><type><name>__compar_fn_t</name></type> <name>filterGetCompFuncEx</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>lType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NULL</name> <operator>==</operator> <name>rType</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <switch>switch <condition>(<expr><name>lType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>gInt8SignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>gInt8UsignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>gInt16SignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>gInt16UsignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>gInt32SignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>gInt32UsignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>gInt64SignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>gInt64UsignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>gFloatSignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>gFloatUsignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>gDoubleSignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>gDoubleUsignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>gUint8SignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>gUint8UsignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>gUint16SignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>gUint16UsignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>gUint32SignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>gUint32UsignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>rType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>gUint64SignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>gUint64UsignCompare</name><index>[<expr><name>rType</name> <operator>-</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>filterCompareGroupCtx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pLeft</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pRight</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>SFilterGroupCtx</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pLeft</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>right</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>SFilterGroupCtx</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pRight</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>colNum</name></name> <operator>&gt;</operator> <name><name>right</name><operator>-&gt;</operator><name>colNum</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>colNum</name></name> <operator>&lt;</operator> <name><name>right</name><operator>-&gt;</operator><name>colNum</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterInitUnitsFields</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>unitSize</name></name> <operator>=</operator> <name>FILTER_DEFAULT_UNIT_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>units</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>unitSize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterUnit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>FILTER_DEFAULT_FIELD_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>fields</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_VALUE</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_VALUE</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>FILTER_DEFAULT_FIELD_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_VALUE</name></expr>]</index></name><operator>.</operator><name>fields</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_VALUE</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>SFilterRangeNode</name> <modifier>*</modifier></type><name>filterNewRange</name><parameter_list>(<parameter><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SFilterRange</name> <modifier>*</modifier></type><name>ra</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rf</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rf</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterRangeNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>FILTER_COPY_RA</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name></name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>filterInitRangeCtx</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <name>TSDB_DATA_TYPE_UBIGINT</name> <operator>||</operator> <name>type</name> <operator>&lt;</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator>
      <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"not supported range type:%d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterRangeCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name> <operator>=</operator> <call><name>getComparFunc</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterResetRangeCtx</name><parameter_list>(<parameter><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rf</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rf</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterReuseRangeCtx</name><parameter_list>(<parameter><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>filterResetRangeCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name> <operator>=</operator> <call><name>getComparFunc</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterConvertRange</name><parameter_list>(<parameter><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>SFilterRange</name> <modifier>*</modifier></type><name>ra</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>notNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>sr</name> <init>= <expr><call><name><name>cur</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><call><name>getDataMin</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>er</name> <init>= <expr><call><name><name>cur</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><call><name>getDataMax</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>notNull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>notNull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddRangeOptr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>raOptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>empty</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>h</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>LOGIC_COND_TYPE_AND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_AND_OPTR</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>raOptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CHK_AND_OPTR</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>raOptr</name> <operator>==</operator> <name>FILTER_DUMMY_EMPTY_OPTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>empty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SET_OR_OPTR</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>raOptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CHK_OR_OPTR</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddRangeImpl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>SFilterRange</name> <modifier>*</modifier></type><name>ra</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>h</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_START</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_ALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>optr</name> <operator>==</operator> <name>LOGIC_COND_TYPE_AND</name><operator>)</operator><operator>)</operator> <operator>||</operator>
        <operator>(</operator><operator>(</operator><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_ALL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>optr</name> <operator>==</operator> <name>LOGIC_COND_TYPE_OR</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>APPEND_RANGE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>rn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>cr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>LOGIC_COND_TYPE_AND</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_GREATER</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FREE_FROM_RANGE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_GREATER</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rn</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FREE_RANGE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <name>rn</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_GREATER</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><ternary><condition><expr><name>cr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name> <operator>|=</operator> <name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name> <operator>=</operator> <name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_GREATER</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><ternary><condition><expr><name>cr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name> <operator>|=</operator> <name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name> <operator>=</operator> <name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// TSDB_RELATION_OR</comment>

  <decl_stmt><decl><type><name>bool</name></type> <name>smerged</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>emerged</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GREATER</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>emerged</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>INSERT_RANGE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>smerged</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_GREATER</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>APPEND_RANGE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_GREATER</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><ternary><condition><expr><name>cr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name> <operator>&amp;=</operator> <name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name> <operator>=</operator> <name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>smerged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>emerged</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_GREATER</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>cr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name> <operator>&amp;=</operator> <name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name> <operator>=</operator> <name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>emerged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GREATER</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rn</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FREE_RANGE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <name>rn</name></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><ternary><condition><expr><name>cr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name> <operator>&amp;=</operator> <name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FREE_RANGE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rs</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>notnull</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>filterConvertRange</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rs</name><operator>-&gt;</operator><name>ra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>notnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>notnull</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>all</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>FREE_FROM_RANGE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddRangeOptr</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>OP_TYPE_IS_NOT_NULL</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>all</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddRange</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>SFilterRange</name> <modifier>*</modifier></type><name>ra</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>h</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><call><name>getDataMin</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// FILTER_CLR_FLAG(ra-&gt;sflag, RA_NULL);</comment>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><call><name>getDataMax</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// FILTER_CLR_FLAG(ra-&gt;eflag, RA_NULL);</comment>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>filterAddRangeImpl</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddRangeCtx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>dctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>optr</name> <operator>==</operator> <name>LOGIC_COND_TYPE_OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>rs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>sctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>filterAddRange</name><argument_list>(<argument><expr><name>dctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name></name></expr></argument>, <argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterCopyRangeCtx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>dctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>isnull</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>notnull</name></name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>notnull</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>isrange</name></name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>isrange</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>sctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>dr</name> <init>= <expr><name><name>dctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>APPEND_RANGE</name><argument_list>(<argument><expr><name>dctx</name></expr></argument>, <argument><expr><name>dr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dr</name> <operator>=</operator> <name><name>dctx</name><operator>-&gt;</operator><name>rs</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>dr</name> <operator>=</operator> <name><name>dr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterFinishRange</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>h</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_FIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>FLT_OPTION_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>rn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>operateVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>OP_TYPE_ADD</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rn</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FREE_RANGE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <name>rn</name></expr>;</expr_stmt>

        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_FIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterGetRangeNum</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>filterFinishRange</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>h</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>num</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterGetRangeRes</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>SFilterRange</name> <modifier>*</modifier></type><name>ra</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>filterFinishRange</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFilterRangeCtx</name>  <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>h</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>          <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>e</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>FILTER_COPY_RA</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>++</operator><name>num</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"no range result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterSourceRangeFromCtx</name><parameter_list>(<parameter><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>empty</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>sctx</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>filterAddRangeOptr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>OP_TYPE_IS_NULL</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>notnull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>filterAddRangeOptr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>OP_TYPE_IS_NOT_NULL</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>isrange</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>filterAddRangeOptr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>optr</name> <operator>==</operator> <name>LOGIC_COND_TYPE_OR</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>filterAddRangeCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>MR_ST_ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterFreeRangeCtx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFilterRangeCtx</name>  <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name>h</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>rn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rn</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>rn</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rf</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rn</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>rn</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterDetachCnfGroup</name><parameter_list>(<parameter><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>gp1</name></decl></parameter>, <parameter><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>gp2</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterGroup</name></type> <name>gp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>gp</name><operator>.</operator><name>unitNum</name></name> <operator>=</operator> <name><name>gp1</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>+</operator> <name><name>gp2</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gp</name><operator>.</operator><name>unitIdxs</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>gp</name><operator>.</operator><name>unitNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>gp</name><operator>.</operator><name>unitIdxs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>gp</name><operator>.</operator><name>unitIdxs</name></name></expr></argument>, <argument><expr><name><name>gp1</name><operator>-&gt;</operator><name>unitIdxs</name></name></expr></argument>, <argument><expr><name><name>gp1</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>gp</name><operator>.</operator><name>unitIdxs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>gp</name><operator>.</operator><name>unitIdxs</name></name> <operator>+</operator> <name><name>gp1</name><operator>-&gt;</operator><name>unitNum</name></name></expr></argument>, <argument><expr><name><name>gp2</name><operator>-&gt;</operator><name>unitIdxs</name></name></expr></argument>, <argument><expr><name><name>gp2</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>gp</name><operator>.</operator><name>unitIdxs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>gp</name><operator>.</operator><name>unitFlags</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterDetachCnfGroups</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>leftSize</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rightSize</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fltDebug</name><argument_list>(<argument><expr><literal type="string">"both groups are empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>gp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>gp</name> <operator>=</operator> <operator>(</operator><name>SFilterGroup</name> <operator>*</operator><operator>)</operator><call><name>taosArrayPop</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>gp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>gp</name> <operator>=</operator> <operator>(</operator><name>SFilterGroup</name> <operator>*</operator><operator>)</operator><call><name>taosArrayPop</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>leftSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>gp1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>rightSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>gp2</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>filterDetachCnfGroup</name><argument_list>(<argument><expr><name>gp1</name></expr></argument>, <argument><expr><name>gp2</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterGetFiledByDesc</name><parameter_list>(<parameter><decl><type><name>SFilterFields</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>nodesEqualNode</name><argument_list>(<argument><expr><name><name>fields</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterGetFiledByData</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>sameBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FLD_TYPE_VALUE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>pctx</name><operator>.</operator><name>valHash</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"value hash is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SFilterDataInfo</name> <modifier>*</modifier></type><name>dInfo</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pctx</name><operator>.</operator><name>valHash</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dInfo</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>sameBuf</name> <operator>=</operator> <operator>(</operator><name><name>dInfo</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>v</name><operator>)</operator></expr>;</expr_stmt>
      <return>return <expr><name><name>dInfo</name><operator>-&gt;</operator><name>idx</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// In the params, we should use void *data instead of void **data, there is no need to use taosMemoryFreeClear(*data) to</comment>
<comment type="line">// set *data = 0 Besides, fields data value is a pointer, so dataLen should be POINTER_BYTES for better.</comment>
<function><type><name>int32_t</name></type> <name>filterAddField</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SFilterFieldId</name> <modifier>*</modifier></type><name>fid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataLen</name></decl></parameter>,
                       <parameter><decl><type><name>bool</name></type> <name>freeIfExists</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>srcFlag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>sameBuf</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>num</name> <operator>=</operator> <operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FLD_TYPE_COLUMN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>filterGetFiledByDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dataLen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>FLT_OPTION_NEED_UNIQE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>filterGetFiledByData</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sameBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>*</operator><name>num</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <name>FILTER_DEFAULT_FIELD_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>fields</name> <operator>=</operator>
          <call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>fields</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilterField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>desc</name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><operator>*</operator><name>data</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FLD_TYPE_COLUMN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flag</name></expr></argument>, <argument><expr><name>FLD_DATA_NO_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>num</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dataLen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>FLT_OPTION_NEED_UNIQE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>pctx</name><operator>.</operator><name>valHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pctx</name><operator>.</operator><name>valHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>FILTER_DEFAULT_GROUP_SIZE</name> <operator>*</operator> <name>FILTER_DEFAULT_VALUE_SIZE</name></expr></argument>,
                                          <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SFilterDataInfo</name></type> <name>dInfo</name> <init>= <expr><block>{<expr><name>idx</name></expr>, <expr><operator>*</operator><name>data</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pctx</name><operator>.</operator><name>valHash</name></name></expr></argument>, <argument><expr><operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>srcFlag</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><operator>*</operator><name>srcFlag</name></expr></argument>, <argument><expr><name>FLD_DATA_NO_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>!=</operator> <name>FLD_TYPE_COLUMN</name> <operator>&amp;&amp;</operator> <name>data</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>freeIfExists</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sameBuf</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><operator>*</operator><name>srcFlag</name></expr></argument>, <argument><expr><name>FLD_DATA_NO_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>fid</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fid</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>filterAddColFieldFromField</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>SFilterFieldId</name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>FILTER_GET_TYPE</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name>FLD_DATA_NO_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddFieldFromNode</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SFilterFieldId</name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"empty node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_COLUMN</name> <operator>&amp;&amp;</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_VALUE</name> <operator>&amp;&amp;</operator>
      <call><name>nodeType</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_NODE_LIST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>FLD_TYPE_COLUMN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>FLD_TYPE_VALUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddUnitImpl</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>optr</name></decl></parameter>, <parameter><decl><type><name>SFilterFieldId</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>SFilterFieldId</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>optr2</name></decl></parameter>,
                          <parameter><decl><type><name>SFilterFieldId</name> <modifier>*</modifier></type><name>right2</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>uidx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>FLT_OPTION_NEED_UNIQE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>pctx</name><operator>.</operator><name>unitHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pctx</name><operator>.</operator><name>unitHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>FILTER_DEFAULT_GROUP_SIZE</name> <operator>*</operator> <name>FILTER_DEFAULT_UNIT_SIZE</name></expr></argument>,
                                         <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>v</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>FLT_PACKAGE_UNIT_HASH_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>optr2</name></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>right</name></expr> ?</condition><then> <expr><name><name>right</name><operator>-&gt;</operator><name>idx</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>right2</name></expr> ?</condition><then> <expr><name><name>right2</name><operator>-&gt;</operator><name>idx</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hu</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pctx</name><operator>.</operator><name>unitHash</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>hu</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>uidx</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>hu</name></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>&gt;=</operator> <name><name>info</name><operator>-&gt;</operator><name>unitSize</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>psize</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>unitSize</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>unitSize</name></name> <operator>+=</operator> <name>FILTER_DEFAULT_UNIT_SIZE</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>units</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>unitSize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilterUnit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>units</name></name> <operator>=</operator> <operator>(</operator><name>SFilterUnit</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>units</name></name> <operator>+</operator> <name>psize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>units</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>FILTER_DEFAULT_UNIT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name> <operator>=</operator> <name>optr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>*</operator><name>left</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <operator>*</operator><name>right</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr2</name></name> <operator>=</operator> <name>optr2</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>right2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>right2</name></name> <operator>=</operator> <operator>*</operator><name>right2</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>FLD_TYPE_VALUE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>FILTER_UNIT_RIGHT_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>paramNum</name> <init>= <expr><call><name>scalarGetOperatorParamNum</name><argument_list>(<argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>paramNum</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"invalid right field in unit, operator:%s, rightType:%d"</literal></expr></argument>, <argument><expr><call><name>operatorTypeStr</name><argument_list>(<argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>FILTER_UNIT_LEFT_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name>FLD_TYPE_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr>]</index></name><operator>.</operator><name><name>compare</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>FILTER_GET_COL_FIELD_TYPE</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr>]</index></name><operator>.</operator><name><name>compare</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <call><name>FILTER_GET_COL_FIELD_PRECISION</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>uidx</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>FLT_OPTION_NEED_UNIQE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>v</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>FLT_PACKAGE_UNIT_HASH_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>optr2</name></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>right</name></expr> ?</condition><then> <expr><name><name>right</name><operator>-&gt;</operator><name>idx</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>right2</name></expr> ?</condition><then> <expr><name><name>right2</name><operator>-&gt;</operator><name>idx</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pctx</name><operator>.</operator><name>unitHash</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>uidx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>uidx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>++</operator><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddUnit</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>optr</name></decl></parameter>, <parameter><decl><type><name>SFilterFieldId</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>SFilterFieldId</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>uidx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>filterAddUnitImpl</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddUnitToGroup</name><parameter_list>(<parameter><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>unitIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>&gt;=</operator> <name><name>group</name><operator>-&gt;</operator><name>unitSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>unitSize</name></name> <operator>+=</operator> <name>FILTER_DEFAULT_UNIT_SIZE</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>unitIdxs</name></name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>unitSize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>group</name><operator>-&gt;</operator><name>unitIdxs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>unitIdxs</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>unitIdxs</name><index>[<expr><name><name>group</name><operator>-&gt;</operator><name>unitNum</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>unitIdx</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fltAddGroupUnitFromNode</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name> <operator>*</operator><operator>)</operator><name>tree</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>ret</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterFieldId</name></type> <name>left</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>right</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>filterAddFieldFromNode</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>type</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD_TYPE</name><argument_list>(<argument><expr><call><name>FILTER_GET_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>uidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>==</operator> <name>OP_TYPE_IN</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>listNode</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SListCell</name>     <modifier>*</modifier></type><name>cell</name> <init>= <expr><name><name>listNode</name><operator>-&gt;</operator><name>pNodeList</name><operator>-&gt;</operator><name>pHead</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SScalarParam</name></type> <name>out</name> <init>= <expr><block>{<expr><operator>.</operator><name>columnData</name> <operator>=</operator> <macro><name>taosMemoryCalloc</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>sizeof(SColumnInfoData)</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>  <comment type="line">// reserved space for simple_copy</comment>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>listNode</name><operator>-&gt;</operator><name>pNodeList</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>overflow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sclConvertValueToSclParam</name><argument_list>(<argument><expr><name>valueNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
          <comment type="line">//        fltError("convert from %d to %d failed", in.type, out.type);</comment>
          <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// reserved space for simple_copy</comment>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>data</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>valueNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>OP_TYPE_EQUAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SFilterGroup</name></type> <name>fgroup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fgroup</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>filterAddFieldFromNode</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SFilterGroup</name></type> <name>fgroup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fgroup</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddUnitFromUnit</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>uidx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterFieldId</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pright</name> <init>= <expr><operator>&amp;</operator><name>right</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>        <name>type</name> <init>= <expr><call><name>FILTER_UNIT_DATA_TYPE</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type>       <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>FILTER_UNIT_COL_DESC</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FLD_TYPE_COLUMN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>FILTER_UNIT_LEFT_FIELD</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>FLD_TYPE_VALUE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>FILTER_UNIT_VAL_DATA</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>rField</name> <init>= <expr><call><name>FILTER_UNIT_RIGHT_FIELD</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_UNIT_OPTR</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_TYPE_IN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>,
                       <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rField</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// POINTER_BYTES should be sizeof(SHashObj), but POINTER_BYTES is also right.</comment>

        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>FILTER_GET_FIELD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name>FLD_DATA_IS_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rField</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rField</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pright</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>FILTER_UNIT_OPTR</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddUnitRight</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>optr</name></decl></parameter>, <parameter><decl><type><name>SFilterFieldId</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uidx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>uidx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr2</name></name> <operator>=</operator> <name>optr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>right2</name></name> <operator>=</operator> <operator>*</operator><name>right</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddGroupUnitFromCtx</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cidx</name></decl></parameter>,
                                  <parameter><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterFieldId</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>right2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>       <name>uidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>cidx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>filterAddColFieldFromField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD_TYPE</name><argument_list>(<argument><expr><call><name>FILTER_GET_FIELD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>LOGIC_COND_TYPE_AND</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>OP_TYPE_IS_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>OP_TYPE_IS_NOT_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rs</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SFilterRange</name> <modifier>*</modifier></type><name>ra</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rs</name><operator>-&gt;</operator><name>ra</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>func</name> <init>= <expr><call><name>getComparFunc</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>OP_TYPE_EQUAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data2</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data2</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right2</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>filterAddUnitImpl</name><argument_list>(
            <argument><expr><name>dst</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OP_TYPE_GREATER_THAN</name></expr> </then><else>: <expr><name>OP_TYPE_GREATER_EQUAL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OP_TYPE_LOWER_THAN</name></expr> </then><else>: <expr><name>OP_TYPE_LOWER_EQUAL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>right2</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OP_TYPE_GREATER_THAN</name></expr> </then><else>: <expr><name>OP_TYPE_GREATER_EQUAL</name></expr></else></ternary></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ra</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OP_TYPE_LOWER_THAN</name></expr> </then><else>: <expr><name>OP_TYPE_LOWER_EQUAL</name></expr></else></ternary></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// OR PROCESS</comment>

  <decl_stmt><decl><type><name>SFilterGroup</name></type> <name>ng</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><name>ng</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>OP_TYPE_IS_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>OP_TYPE_IS_NOT_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>func</name> <init>= <expr><call><name>getComparFunc</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>OP_TYPE_EQUAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data2</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data2</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right2</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>filterAddUnitImpl</name><argument_list>(
            <argument><expr><name>dst</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OP_TYPE_GREATER_THAN</name></expr> </then><else>: <expr><name>OP_TYPE_GREATER_EQUAL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OP_TYPE_LOWER_THAN</name></expr> </then><else>: <expr><name>OP_TYPE_LOWER_EQUAL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>right2</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OP_TYPE_GREATER_THAN</name></expr> </then><else>: <expr><name>OP_TYPE_GREATER_EQUAL</name></expr></else></ternary></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddField</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnit</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OP_TYPE_LOWER_THAN</name></expr> </then><else>: <expr><name>OP_TYPE_LOWER_EQUAL</name></expr></else></ternary></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filterFreeGroup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>SFilterGroup</name> <operator>*</operator><operator>)</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>unitIdxs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>unitFlags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>fltTreeToGroup</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>            <modifier>*</modifier></type><name>preGroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>            <modifier>*</modifier></type><name>newGroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>            <modifier>*</modifier></type><name>resGroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ENodeType</name></type>          <name>nType</name> <init>= <expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFltBuildGroupCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SFltBuildGroupCtx</name> <operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_LOGIC_CONDITION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SLogicConditionNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>LOGIC_COND_TYPE_AND</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>condType</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SListCell</name> <modifier>*</modifier></type><name>cell</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>pParameterList</name><operator>-&gt;</operator><name>pHead</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>pParameterList</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>newGroup</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterGroup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resGroup</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterGroup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SFltBuildGroupCtx</name></type> <name>tctx</name> <init>= <expr><block>{<expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr>, <expr><operator>.</operator><name>group</name> <operator>=</operator> <name>newGroup</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>nodesWalkExpr</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><name>fltTreeToGroup</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><name><name>tctx</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><call><name>filterDetachCnfGroups</name><argument_list>(<argument><expr><name>resGroup</name></expr></argument>, <argument><expr><name>preGroup</name></expr></argument>, <argument><expr><name>newGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>newGroup</name></expr></argument>, <argument><expr><name>filterFreeGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>newGroup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>preGroup</name></expr></argument>, <argument><expr><name>filterFreeGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>preGroup</name> <operator>=</operator> <name>resGroup</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>resGroup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>taosArrayAddAll</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name>preGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>preGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>LOGIC_COND_TYPE_OR</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>condType</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SListCell</name> <modifier>*</modifier></type><name>cell</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>pParameterList</name><operator>-&gt;</operator><name>pHead</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>pParameterList</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>nodesWalkExpr</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><name>fltTreeToGroup</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"invalid condition type, type:%d"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>condType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_OPERATOR</name> <operator>==</operator> <name>nType</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><call><name>fltAddGroupUnitFromNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"invalid node type for filter, type:%d"</literal></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>newGroup</name></expr></argument>, <argument><expr><name>filterFreeGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>preGroup</name></expr></argument>, <argument><expr><name>filterFreeGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>resGroup</name></expr></argument>, <argument><expr><name>filterFreeGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

  <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fltConverToStr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%e"</literal></expr></argument>, <argument><expr><call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%e"</literal></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>bufSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">//        tscError("invalid buf size");</comment>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>bufSize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name>bufSize</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <comment type="line">//      tscError("unsupported type:%d", type);</comment>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></switch>

  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filterDumpInfoToString</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>qDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_DEBUG</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fltDebug</name><argument_list>(<argument><expr><literal type="string">"%s - FilterInfo: EMPTY"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s - FilterInfo:"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"COLUMN Field Num:%u"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SColumnNode</name>  <modifier>*</modifier></type><name>refNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name><name>field</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"COL%d =&gt; [%d][%d]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>refNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name><name>refNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"VALUE Field Num:%u"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_VALUE</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_VALUE</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_VALUE</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"VAL%d =&gt; [type:not value node][val:NIL]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// TODO</comment>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name><name>field</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SDataType</name>  <modifier>*</modifier></type><name>dType</name> <init>= <expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></init></decl>;</decl_stmt>
          <comment type="line">// if (dType-&gt;type == TSDB_DATA_TYPE_VALUE_ARRAY) {</comment>
          <comment type="line">//   qDebug("VAL%d =&gt; [type:TS][val:[%" PRIi64 "] - [%" PRId64 "]]", i, *(int64_t *)field-&gt;data,</comment>
          <comment type="line">//          *(((int64_t *)field-&gt;data) + 1));</comment>
          <comment type="line">// } else {</comment>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"VAL%d =&gt; [type:%d][val:%"</literal> <name>PRIx64</name> <literal type="string">"]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>dType</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// TODO</comment>
          <comment type="line">//}</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"VAL%d =&gt; [type:NIL][val:NIL]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// TODO</comment>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"UNIT  Num:%u"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>      <name>type</name> <init>= <expr><call><name>FILTER_UNIT_DATA_TYPE</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>      <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>      <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>         <name><name>str</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><call><name>FILTER_UNIT_LEFT_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SColumnNode</name>  <modifier>*</modifier></type><name>refNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name><name>left</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name> <operator>&lt;=</operator> <name>OP_TYPE_JSON_CONTAINS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"UNIT[%d] =&gt; [%d][%d]  %s  ["</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>refNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name><name>refNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>,
                        <argument><expr><call><name>operatorTypeStr</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>FLD_TYPE_VALUE</name> <operator>&amp;&amp;</operator> <call><name>FILTER_UNIT_OPTR</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OP_TYPE_IN</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><call><name>FILTER_UNIT_RIGHT_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>right</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tlen</name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fltConverToStr</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><ternary><condition><expr><name>tlen</name> <operator>&gt;</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><name>tlen</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr2</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" &amp;&amp; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr2</name></name> <operator>&lt;=</operator> <name>OP_TYPE_JSON_CONTAINS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[%d][%d]  %s  ["</literal></expr></argument>, <argument><expr><name><name>refNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name><name>refNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>,
                    <argument><expr><call><name>operatorTypeStr</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>right2</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>FLD_TYPE_VALUE</name> <operator>&amp;&amp;</operator> <call><name>FILTER_UNIT_OPTR</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OP_TYPE_IN</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><call><name>FILTER_UNIT_RIGHT2_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>right</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>tlen</name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>fltConverToStr</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><ternary><condition><expr><name>tlen</name> <operator>&gt;</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><name>tlen</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// TODO</comment>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"GROUP Num:%u"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>maxDbgGrpNum</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxDbgGrpNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Group%d : unit num[%u]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>unitNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>u</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"unit id:%u"</literal></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>unitIdxs</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>

      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s - RANGE info:"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"RANGE Num:%u"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Column ID[%d] RANGE: isnull[%d],notnull[%d],range[%d]"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name></expr></argument>,
               <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type>           <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"(NULL)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>fltConverToStr</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>tlen</name> <operator>&gt;</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><name>tlen</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"(NULL)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>fltConverToStr</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>tlen</name> <operator>&gt;</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><name>tlen</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><ternary><condition><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"range: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
          </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s - Block Filter info:"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name></expr></argument>, <argument><expr><name>FI_STATUS_BLK_ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Flag:%s"</literal></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name></expr></argument>, <argument><expr><name>FI_STATUS_BLK_EMPTY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Flag:%s"</literal></expr></argument>, <argument><expr><literal type="string">"EMPTY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name></expr></argument>, <argument><expr><name>FI_STATUS_BLK_ACTIVE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Flag:%s"</literal></expr></argument>, <argument><expr><literal type="string">"ACTIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"GroupNum:%d"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkGroupNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unitIdx</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>blkUnits</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>blkGroupNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Group[%d] UnitNum: %d:"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>*</operator><name>unitIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>unitNum</name> <init>= <expr><operator>*</operator><operator>(</operator><name>unitIdx</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>unitNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"uidx[%d]"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>unitIdx</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filterFreeColInfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterColInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>SFilterColInfo</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>info</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RANGE_TYPE_VAR_HASH</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RANGE_TYPE_MR_CTX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>filterFreeRangeCtx</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RANGE_TYPE_UNIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// NO NEED TO FREE UNIT</comment>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filterFreeColCtx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterColCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SFilterColCtx</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>filterFreeRangeCtx</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filterFreeGroupCtx</name><parameter_list>(<parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier></type><name>gRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>gRes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>gRes</name><operator>-&gt;</operator><name>colIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>gRes</name><operator>-&gt;</operator><name>colNum</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gRes</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>info</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>filterFreeColInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRes</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>gRes</name><operator>-&gt;</operator><name>colInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>gRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filterFreeField</name><parameter_list>(<parameter><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name>FLD_DATA_NO_FREE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name>FLD_DATA_IS_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filterFreePCtx</name><parameter_list>(<parameter><decl><type><name>SFilterPCtx</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>valHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>unitHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filterFreeInfo</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FLD_TYPE_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>f</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>filterFreeField</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>f</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>filterFreeGroup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>unitRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>unitFlags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>filterFreeRangeCtx</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterFreePCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>pctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_CLONED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterHandleValueExtInfo</name><parameter_list>(<parameter><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>extInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>extInfo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>extInfo</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>optr</name> <init>= <expr><call><name>FILTER_UNIT_OPTR</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>optr</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OP_TYPE_GREATER_THAN</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_GREATER_EQUAL</name></expr>:</case>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>extInfo</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FILTER_DUMMY_EMPTY_OPTR</name></expr> </then><else>: <expr><name>OP_TYPE_IS_NOT_NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_TYPE_LOWER_THAN</name></expr>:</case>
    <case>case <expr><name>OP_TYPE_LOWER_EQUAL</name></expr>:</case>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>extInfo</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>OP_TYPE_IS_NOT_NULL</name></expr> </then><else>: <expr><name>FILTER_DUMMY_EMPTY_OPTR</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_TYPE_EQUAL</name></expr>:</case>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name> <operator>=</operator> <name>FILTER_DUMMY_EMPTY_OPTR</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fltInitValFieldData</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>FLD_TYPE_VALUE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name> <operator>==</operator> <name>FILTER_DUMMY_EMPTY_OPTR</name> <operator>||</operator> <call><name>scalarGetOperatorParamNum</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><call><name>FILTER_UNIT_RIGHT_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>right</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name>FLD_TYPE_VALUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type>      <name>type</name> <init>= <expr><call><name>FILTER_UNIT_DATA_TYPE</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>        <name>precision</name> <init>= <expr><call><name>FILTER_UNIT_DATA_PRECISION</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><name>right</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name><name>fi</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_IN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><call><name>scalarGenerateSetFromList</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fi</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"failed to convert in param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name>FLD_DATA_IS_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SDataType</name> <modifier>*</modifier></type><name>dType</name> <init>= <expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>     <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>dType</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name><name>dType</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>dType</name><operator>-&gt;</operator><name>bytes</name></name></expr>
                                                                                                 </then><else>: <expr><name>MAX_NUM_STR_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>dType</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name><name>dType</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>dType</name><operator>-&gt;</operator><name>bytes</name></name></expr>
                                                                                                 </then><else>: <expr><name>MAX_NUM_STR_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>bytes</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>dType</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_VALUE_ARRAY</name></expr>)</condition> <block>{<block_content>  <comment type="line">// TIME RANGE</comment>
        <comment type="block">/*
                fi-&gt;data = taosMemoryCalloc(dType-&gt;bytes, tDataTypes[type].bytes);
                for (int32_t a = 0; a &lt; dType-&gt;bytes; ++a) {
                  int64_t *v = taosArrayGet(var-&gt;arr, a);
                  assignVal((char *)fi-&gt;data + a * tDataTypes[type].bytes, (char *)v, 0, type);
                }
        */</comment>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dType</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assignVal</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dType</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SScalarParam</name></type> <name>out</name> <init>= <expr><block>{<expr><operator>.</operator><name>columnData</name> <operator>=</operator> <macro><name>taosMemoryCalloc</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>sizeof(SColumnInfoData)</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// todo refactor the convert</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>sclConvertValueToSclParam</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"convert value to type[%d] failed"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// match/nmatch for nchar type need convert from ucs4 to mbs</comment>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_MATCH</name> <operator>||</operator> <name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_NMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type>    <name><name>newValData</name><index>[<expr><name>TSDB_REGEX_STRING_DEFAULT_LEN</name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name> <operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>newValData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"filterInitValFieldData taosUcs4ToMbs error 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>newValData</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataCopy</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>newValData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>filterDoCompare</name><parameter_list>(<parameter><decl><type><name>__compar_fn_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>optr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>optr</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OP_TYPE_EQUAL</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_NOT_EQUAL</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_GREATER_EQUAL</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_GREATER_THAN</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_LOWER_EQUAL</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_LOWER_THAN</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_LIKE</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_NOT_LIKE</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_MATCH</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_NMATCH</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_IN</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_NOT_IN</name></expr>:</case> <block>{<block_content>
      <return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block>

    <default>default:</default>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterAddUnitRange</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>type</name> <init>= <expr><call><name>FILTER_UNIT_DATA_TYPE</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>      <name>uoptr</name> <init>= <expr><call><name>FILTER_UNIT_OPTR</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>FILTER_UNIT_VAL_DATA</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRange</name></type> <name>ra</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>      <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>uoptr</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OP_TYPE_GREATER_THAN</name></expr>:</case>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_TYPE_GREATER_EQUAL</name></expr>:</case>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_TYPE_LOWER_THAN</name></expr>:</case>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_TYPE_LOWER_EQUAL</name></expr>:</case>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_TYPE_NOT_EQUAL</name></expr>:</case>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>GET_INT8_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tmp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_TYPE_EQUAL</name></expr>:</case>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>filterAddRange</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ra</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterCompareRangeCtx</name><parameter_list>(<parameter><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx1</name></decl></parameter>, <parameter><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx2</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>equal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name><name>ctx1</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name><name>ctx2</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name><name>ctx1</name><operator>-&gt;</operator><name>isnull</name></name> <operator>!=</operator> <name><name>ctx2</name><operator>-&gt;</operator><name>isnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name><name>ctx1</name><operator>-&gt;</operator><name>notnull</name></name> <operator>!=</operator> <name><name>ctx2</name><operator>-&gt;</operator><name>notnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name><name>ctx1</name><operator>-&gt;</operator><name>isrange</name></name> <operator>!=</operator> <name><name>ctx2</name><operator>-&gt;</operator><name>isrange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><name><name>ctx1</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r2</name> <init>= <expr><name><name>ctx2</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>r1</name> <operator>&amp;&amp;</operator> <name>r2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name><name>r1</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name> <operator>!=</operator> <name><name>r2</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name><name>r1</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name> <operator>!=</operator> <name><name>r2</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name><name>r1</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name> <operator>!=</operator> <name><name>r2</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name><name>r1</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name> <operator>!=</operator> <name><name>r2</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>r1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>r2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name>r1</name> <operator>!=</operator> <name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>equal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>equal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterMergeUnits</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier></type><name>gRes</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>empty</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name>          <modifier>*</modifier></type><name>colArray</name> <init>= <expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><name><name>gRes</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>colIdx</name></expr>]</index></name><operator>.</operator><name>info</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>size</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>colArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>type</name> <init>= <expr><name><name>gRes</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>colIdx</name></expr>]</index></name><operator>.</operator><name>dataType</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>filterInitRangeCtx</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>colArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type>      <name>optr</name> <init>= <expr><call><name>FILTER_UNIT_OPTR</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>filterAddRangeOptr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>LOGIC_COND_TYPE_AND</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><operator>*</operator><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_NO_MERGE_OPTR</name><argument_list>(<argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>filterAddUnitRange</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>LOGIC_COND_TYPE_AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><call><name>MR_EMPTY_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_UNIT_OPTR</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_TYPE_EQUAL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FILTER_NO_MERGE_DATA_TYPE</name><argument_list>(<argument><expr><call><name>FILTER_UNIT_DATA_TYPE</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>gRes</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>colIdx</name></expr>]</index></name><operator>.</operator><name>optr</name> <operator>=</operator> <name>OP_TYPE_EQUAL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SIMPLE_COPY_VALUES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRes</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>colIdx</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><call><name>FILTER_UNIT_VAL_DATA</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>colArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FILTER_PUSH_CTX</name><argument_list>(<argument><expr><name><name>gRes</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>colIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><operator>*</operator><name>empty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterFreeRangeCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterMergeGroupUnits</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>gRes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>gResNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>      <name>empty</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>colIdx</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>colIdxi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>gResIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>groups</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterGroupCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name><operator>-&gt;</operator><name>colInfo</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterColInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>colIdxi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>empty</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>FILTER_GROUP_UNIT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type>     <name>cidx</name> <init>= <expr><call><name>FILTER_UNIT_COL_IDX</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name><operator>-&gt;</operator><name><name>colInfo</name><index>[<expr><name>cidx</name></expr>]</index></name><operator>.</operator><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name><operator>-&gt;</operator><name><name>colInfo</name><index>[<expr><name>cidx</name></expr>]</index></name><operator>.</operator><name>info</name> <operator>=</operator> <operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>colIdx</name><index>[<expr><name>colIdxi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cidx</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name><operator>-&gt;</operator><name>colNum</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_NO_MERGE_DATA_TYPE</name><argument_list>(<argument><expr><call><name>FILTER_UNIT_DATA_TYPE</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_REWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>FILTER_PUSH_UNIT</name><argument_list>(<argument><expr><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name><operator>-&gt;</operator><name><name>colInfo</name><index>[<expr><name>cidx</name></expr>]</index></name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>colIdxi</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name>colIdx</name></expr></argument>, <argument><expr><name>colIdxi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>getComparFunc</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>colIdxi</name></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name><operator>-&gt;</operator><name><name>colInfo</name><index>[<expr><name><name>colIdx</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>dataType</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>FILTER_NO_MERGE_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>filterMergeUnits</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>colIdx</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_REWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterFreeGroupCtx</name><argument_list>(<argument><expr><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name><operator>-&gt;</operator><name>colNum</name> <operator>=</operator> <name>colIdxi</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FILTER_COPY_IDX</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRes</name><index>[<expr><name>gResIdx</name></expr>]</index></name><operator>-&gt;</operator><name>colIdx</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><name>colIdxi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>gResIdx</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>colIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>gResNum</name> <operator>=</operator> <name>gResIdx</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>gResIdx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>filterIsSameUnits</name><parameter_list>(<parameter><decl><type><name>SFilterColInfo</name> <modifier>*</modifier></type><name>pCol1</name></decl></parameter>, <parameter><decl><type><name>SFilterColInfo</name> <modifier>*</modifier></type><name>pCol2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCol1</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>pCol2</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>RANGE_TYPE_MR_CTX</name> <operator>==</operator> <name><name>pCol1</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>pCtx1</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name><name>pCol1</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>pCtx2</name> <init>= <expr><operator>(</operator><name>SFilterRangeCtx</name> <operator>*</operator><operator>)</operator><name><name>pCol2</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pCtx1</name><operator>-&gt;</operator><name>isnull</name></name> <operator>!=</operator> <name><name>pCtx2</name><operator>-&gt;</operator><name>isnull</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pCtx1</name><operator>-&gt;</operator><name>notnull</name></name> <operator>!=</operator> <name><name>pCtx2</name><operator>-&gt;</operator><name>notnull</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pCtx1</name><operator>-&gt;</operator><name>isrange</name></name> <operator>!=</operator> <name><name>pCtx2</name><operator>-&gt;</operator><name>isrange</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>pNode1</name> <init>= <expr><name><name>pCtx1</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>pNode2</name> <init>= <expr><name><name>pCtx2</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode1</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name>pNode2</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode1</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pNode2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pNode1</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name> <operator>!=</operator> <name><name>pNode2</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>s</name></name> <operator>||</operator> <name><name>pNode1</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name> <operator>!=</operator> <name><name>pNode2</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>e</name></name> <operator>||</operator> <name><name>pNode1</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name> <operator>!=</operator> <name><name>pNode2</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name> <operator>||</operator>
          <name><name>pNode1</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name> <operator>!=</operator> <name><name>pNode2</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>pNode1</name> <operator>=</operator> <name><name>pNode1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pNode2</name> <operator>=</operator> <name><name>pNode2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filterCheckColConflict</name><parameter_list>(<parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier></type><name>gRes1</name></decl></parameter>, <parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier></type><name>gRes2</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>conflict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>idx1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>equal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>gRes1</name><operator>-&gt;</operator><name>colNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>idx1</name> <operator>=</operator> <name><name>gRes1</name><operator>-&gt;</operator><name>colIdx</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>equal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>gRes2</name><operator>-&gt;</operator><name>colNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>idx2</name> <operator>=</operator> <name><name>gRes2</name><operator>-&gt;</operator><name>colIdx</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>idx1</name> <operator>&lt;</operator> <name>idx2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>idx1</name> <operator>&gt;</operator> <name>idx2</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>FILTER_NO_MERGE_DATA_TYPE</name><argument_list>(<argument><expr><name><name>gRes1</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>dataType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>filterIsSameUnits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRes1</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRes2</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// for long in operation</comment>
      <if_stmt><if>if <condition>(<expr><name><name>gRes1</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>optr</name> <operator>==</operator> <name>OP_TYPE_EQUAL</name> <operator>&amp;&amp;</operator> <name><name>gRes2</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>idx2</name></expr>]</index></name><operator>.</operator><name>optr</name> <operator>==</operator> <name>OP_TYPE_EQUAL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>gRes1</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>info</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRes1</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRes2</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>idx2</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>equal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>equal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>conflict</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterMergeTwoGroupsImpl</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cidx</name></decl></parameter>,
                                 <parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier></type><name>gRes1</name></decl></parameter>, <parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier></type><name>gRes2</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>empty</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>cidx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>type</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD_TYPE</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <call><name>filterInitRangeCtx</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>filterReuseRangeCtx</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>gRes2</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>cidx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>RANGE_TYPE_MR_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>gRes1</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>cidx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>RANGE_TYPE_MR_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterCopyRangeCtx</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>gRes2</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>cidx</name></expr>]</index></name><operator>.</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>filterSourceRangeFromCtx</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>gRes1</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name>cidx</name></expr>]</index></name><operator>.</operator><name>info</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterMergeTwoGroups</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>gRes1</name></decl></parameter>, <parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>gRes2</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>conflict</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>filterCheckColConflict</name><argument_list>(<argument><expr><operator>*</operator><name>gRes1</name></expr></argument>, <argument><expr><operator>*</operator><name>gRes2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conflict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>conflict</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_REWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type>         <name>idx1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>             <name>numEqual</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>gRes1</name><operator>)</operator><operator>-&gt;</operator><name>colNum</name></name> <operator>==</operator> <name><operator>(</operator><operator>*</operator><name>gRes2</name><operator>)</operator><operator>-&gt;</operator><name>colNum</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>             <name>equal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>         <name>equal1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>equal2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>merNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterColCtx</name></type>    <name>colCtx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>          <modifier>*</modifier></type><name>colCtxs</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>gRes2</name><operator>)</operator><operator>-&gt;</operator><name>colNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterColCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>gRes1</name><operator>)</operator><operator>-&gt;</operator><name>colNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>idx1</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>gRes1</name><operator>)</operator><operator>-&gt;</operator><name>colIdx</name></name><index>[<expr><name>m</name></expr>]</index></expr>;</expr_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>gRes2</name><operator>)</operator><operator>-&gt;</operator><name>colNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>idx2</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>gRes2</name><operator>)</operator><operator>-&gt;</operator><name>colIdx</name></name><index>[<expr><name>n</name></expr>]</index></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>idx1</name> <operator>&gt;</operator> <name>idx2</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx1</name> <operator>==</operator> <name>idx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>++</operator><name>merNum</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>filterMergeTwoGroupsImpl</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>LOGIC_COND_TYPE_OR</name></expr></argument>, <argument><expr><name>idx1</name></expr></argument>, <argument><expr><operator>*</operator><name>gRes1</name></expr></argument>, <argument><expr><operator>*</operator><name>gRes2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><operator>*</operator><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>numEqual</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>gRes1</name><operator>)</operator><operator>-&gt;</operator><name>colNum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>++</operator><name>equal1</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>colCtx</name><operator>.</operator><name>colIdx</name></name> <operator>=</operator> <name>idx1</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>colCtx</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>colCtxs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>filterCompareRangeCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>gRes1</name><operator>)</operator><operator>-&gt;</operator><name>colInfo</name></name><index>[<expr><name>idx1</name></expr>]</index><operator>.</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>equal</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>equal1</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name>filterCompareRangeCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>gRes2</name><operator>)</operator><operator>-&gt;</operator><name>colInfo</name></name><index>[<expr><name>idx2</name></expr>]</index><operator>.</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>equal</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>equal2</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name>equal1</name> <operator>!=</operator> <name>merNum</name> <operator>&amp;&amp;</operator> <name>equal2</name> <operator>!=</operator> <name>merNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>colCtx</name><operator>.</operator><name>colIdx</name></name> <operator>=</operator> <name>idx1</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>colCtx</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>colCtxs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>filterCompareRangeCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>gRes1</name><operator>)</operator><operator>-&gt;</operator><name>colInfo</name></name><index>[<expr><name>idx1</name></expr>]</index><operator>.</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>equal</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>++</operator><name>equal1</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name>equal1</name> <operator>!=</operator> <name>merNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>colCtx</name><operator>.</operator><name>colIdx</name></name> <operator>=</operator> <name>idx1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>colCtx</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>colCtxs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>merNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFilterColInfo</name> <modifier>*</modifier></type><name>colInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>merNum</name> <operator>==</operator> <name>equal1</name> <operator>||</operator> <name>merNum</name> <operator>==</operator> <name>equal2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterFreeGroupCtx</name><argument_list>(<argument><expr><operator>*</operator><name>gRes2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>gRes2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>colCtxs</name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>colCtxs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>        <name>ctxSize</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>colCtxs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterColCtx</name> <modifier>*</modifier></type><name>pctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ctxSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pctx</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>colCtxs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>colInfo</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>gRes1</name><operator>)</operator><operator>-&gt;</operator><name>colInfo</name></name><index>[<expr><name><name>pctx</name><operator>-&gt;</operator><name>colIdx</name></name></expr>]</index></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>filterFreeColInfo</name><argument_list>(<argument><expr><name>colInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FILTER_PUSH_CTX</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>gRes1</name><operator>)</operator><operator>-&gt;</operator><name>colInfo</name></name><index>[<expr><name><name>pctx</name><operator>-&gt;</operator><name>colIdx</name></name></expr>]</index></expr></argument>, <argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>colCtxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>colCtxs</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>colCtxs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>colCtxs</name></expr></argument>, <argument><expr><name>filterFreeColCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>colCtxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>filterFreeRangeCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterMergeGroups</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>gRes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>gResNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>gResNum</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name>gRes</name></expr></argument>, <argument><expr><operator>*</operator><name>gResNum</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>, <argument><expr><name>filterCompareGroupCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>pEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pColNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cColNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>movedNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>all</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>cColNum</name> <operator>=</operator> <name><name>gRes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>colNum</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>*</operator><name>gResNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>*</operator><name>gResNum</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>gRes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>colNum</name> <operator>==</operator> <name>cColNum</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cEnd</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>movedNum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pColNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;=</operator> <name>pEnd</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><name>cStart</name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>cEnd</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m</name> <operator>&lt;</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>filterMergeTwoGroups</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRes</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRes</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>gRes</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>gResNum</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRes</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRes</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>gResNum</name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><operator>--</operator><name>cEnd</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>--</operator><operator>(</operator><operator>*</operator><name>gResNum</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>movedNum</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>m</name> <init>= <expr><name>cStart</name></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>cEnd</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>cEnd</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m</name> <operator>&lt;</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterMergeTwoGroups</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRes</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRes</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>gRes</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>gResNum</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRes</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRes</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>gResNum</name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><operator>--</operator><name>cEnd</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>--</operator><operator>(</operator><operator>*</operator><name>gResNum</name><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><operator>++</operator><name>movedNum</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><name>pColNum</name> <operator>=</operator> <name>cColNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEnd</name> <operator>=</operator> <name>cEnd</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>-=</operator> <name>movedNum</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <operator>(</operator><operator>*</operator><name>gResNum</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cStart</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cColNum</name> <operator>=</operator> <name><name>gRes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>colNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterConvertGroupFromArray</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>groupSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>groupSize</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>groupSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>pg</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pg</name><operator>-&gt;</operator><name>unitFlags</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pg</name><operator>-&gt;</operator><name>unitNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pg</name><operator>-&gt;</operator><name>unitFlags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>pg</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterRewrite</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>gRes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>gResNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_REWRITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"no need rewrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFilterInfo</name></type> <name>oinfo</name> <init>= <expr><operator>*</operator><name>info</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>oinfo</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_CLONED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SArray</name>          <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>FILTER_DEFAULT_GROUP_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterGroup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterColInfo</name>  <modifier>*</modifier></type><name>colInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>optr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>         <name>uidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name> <operator>=</operator> <name><name>oinfo</name><operator>.</operator><name>colRangeNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name></name> <operator>=</operator> <name><name>oinfo</name><operator>.</operator><name>colRange</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>oinfo</name><operator>.</operator><name>colRangeNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>oinfo</name><operator>.</operator><name>colRange</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>FLT_OPTION_NEED_UNIQE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterInitUnitsFields</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>gResNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>gRes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>optr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>colNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>LOGIC_COND_TYPE_AND</name></expr> </then><else>: <expr><name>LOGIC_COND_TYPE_OR</name></expr></else></ternary></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SFilterGroup</name></type> <name>ng</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>colNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>colInfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name><name>res</name><operator>-&gt;</operator><name>colIdx</name><index>[<expr><name>m</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_NO_MERGE_DATA_TYPE</name><argument_list>(<argument><expr><name><name>colInfo</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>colInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RANGE_TYPE_UNIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>usize</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><name><name>colInfo</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>usize</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><operator>(</operator><name>SFilterUnit</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><name><name>colInfo</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>filterAddUnitFromUnit</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oinfo</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>filterAddUnitToGroup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ng</name></expr></argument>, <argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>colInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RANGE_TYPE_MR_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>filterAddGroupUnitFromCtx</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oinfo</name></expr></argument>, <argument><expr><name><name>colInfo</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>colIdx</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ng</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>ng</name><operator>.</operator><name>unitNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>filterConvertGroupFromArray</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterFreeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterGenerateColRange</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>gRes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>gResNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name>        <modifier>*</modifier></type><name>idxs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>         <name>colNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name>        <modifier>*</modifier></type><name>idxNum</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>idxNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>gResNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>gRes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>colNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFilterColInfo</name> <modifier>*</modifier></type><name>colInfo</name> <init>= <expr><operator>&amp;</operator><name><name>gRes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>colInfo</name><index>[<expr><name><name>gRes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>colIdx</name><index>[<expr><name>m</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_NO_MERGE_DATA_TYPE</name><argument_list>(<argument><expr><name><name>colInfo</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>++</operator><name><name>idxNum</name><index>[<expr><name><name>gRes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>colIdx</name><index>[<expr><name>m</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>idxNum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>gResNum</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>idxNum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>gResNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>idxs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>idxs</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>idxs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>idxs</name><index>[<expr><name>colNum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name>colNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name> <operator>=</operator> <name>colNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>colNum</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>gResNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>gRes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>colNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>colIdx</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;</operator> <name><name>idxs</name><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>colIdx</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name><name>idxs</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SFilterColInfo</name> <modifier>*</modifier></type><name>colInfo</name> <init>= <expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>colInfo</name><index>[<expr><name><name>res</name><operator>-&gt;</operator><name>colIdx</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>m</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>filterInitRangeCtx</name><argument_list>(<argument><expr><name><name>colInfo</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>colIdx</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>m</name></expr>]</index></name><operator>-&gt;</operator><name>colId</name> <operator>=</operator> <call><name>FILTER_GET_COL_FIELD_ID</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>colInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RANGE_TYPE_MR_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>all</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>filterSourceRangeFromCtx</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>colInfo</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>LOGIC_COND_TYPE_OR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>all</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>filterFreeRangeCtx</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name> <operator>-</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idxs</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idxs</name><index>[<expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name> <operator>-</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>idxs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><operator>--</operator><name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>--</operator><name>m</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></for>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>idxNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>idxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterPostProcessRange</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterRangeCtx</name>  <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>func</name></name> <operator>=</operator> <call><name>filterGetRangeCompFunc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterGenerateComInfo</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnits</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>blkUnits</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <call><name>filterGetCompFuncIdx</name><argument_list>(<argument><expr><call><name>FILTER_UNIT_DATA_TYPE</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rfunc</name> <operator>=</operator> <call><name>filterGetRangeCompFuncFromOptrs</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr</name></name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>compare</name><operator>.</operator><name>optr2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>optr</name> <operator>=</operator> <call><name>FILTER_UNIT_OPTR</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colId</name> <operator>=</operator> <call><name>FILTER_UNIT_COL_ID</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>FLD_TYPE_VALUE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valData</name> <operator>=</operator> <call><name>FILTER_UNIT_VAL_DATA</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>right2</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>FLD_TYPE_VALUE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valData2</name> <operator>=</operator> <call><name>FILTER_GET_VAL_FIELD_DATA</name><argument_list>(<argument><expr><call><name>FILTER_GET_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>right2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valData2</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valData</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dataSize</name> <operator>=</operator> <call><name>FILTER_UNIT_COL_SIZE</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dataType</name> <operator>=</operator> <call><name>FILTER_UNIT_DATA_TYPE</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterUpdateComUnits</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>FILTER_UNIT_LEFT_FIELD</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colData</name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterRmUnitByRange</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>pDataStatis</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rmUnit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>         <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFilterComUnit</name> <modifier>*</modifier></type><name>cunit</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FILTER_NO_MERGE_DATA_TYPE</name><argument_list>(<argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pDataStatis</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colId</name> <operator>==</operator> <name><name>cunit</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDataStatis</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>numOfNull</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_IS_NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rmUnit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_IS_NOT_NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rmUnit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pDataStatis</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>numOfNull</name> <operator>==</operator> <name>numOfRows</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_IS_NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>rmUnit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rmUnit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_IS_NULL</name> <operator>||</operator> <name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_IS_NOT_NULL</name> <operator>||</operator> <name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_IN</name> <operator>||</operator>
        <name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_LIKE</name> <operator>||</operator> <name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_MATCH</name> <operator>||</operator> <name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_NOT_EQUAL</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>pDataBlockst</name> <init>= <expr><operator>&amp;</operator><name><name>pDataStatis</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>           <modifier>*</modifier></type><name>minVal</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>maxVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type>           <name>minv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type>           <name>maxv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cunit</name><operator>-&gt;</operator><name>dataType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minv</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pDataBlockst</name><operator>-&gt;</operator><name>min</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxv</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pDataBlockst</name><operator>-&gt;</operator><name>max</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>minVal</name> <operator>=</operator> <operator>&amp;</operator><name>minv</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxVal</name> <operator>=</operator> <operator>&amp;</operator><name>maxv</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>minVal</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDataBlockst</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxVal</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDataBlockst</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>minRes</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>maxRes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cunit</name><operator>-&gt;</operator><name>rfunc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minRes</name> <operator>=</operator>
          <call>(<modifier>*</modifier><name>gRangeCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>rfunc</name></name></expr>]</index>)<argument_list>(<argument><expr><name>minVal</name></expr></argument>, <argument><expr><name>minVal</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData2</name></name></expr></argument>, <argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxRes</name> <operator>=</operator>
          <call>(<modifier>*</modifier><name>gRangeCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>rfunc</name></name></expr>]</index>)<argument_list>(<argument><expr><name>maxVal</name></expr></argument>, <argument><expr><name>maxVal</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData2</name></name></expr></argument>, <argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>minRes</name> <operator>&amp;&amp;</operator> <name>maxRes</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rmUnit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><name>minRes</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>maxRes</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>minRes</name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>OP_TYPE_LOWER_EQUAL</name></expr></argument>, <argument><expr><name>minVal</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxRes</name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>OP_TYPE_GREATER_EQUAL</name></expr></argument>, <argument><expr><name>maxVal</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>minRes</name> <operator>&amp;&amp;</operator> <name>maxRes</name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rmUnit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>minRes</name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name></expr></argument>, <argument><expr><name>minVal</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxRes</name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name></expr></argument>, <argument><expr><name>maxVal</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>minRes</name> <operator>&amp;&amp;</operator> <name>maxRes</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rmUnit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><name>minRes</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>maxRes</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_EQUAL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>minRes</name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>OP_TYPE_GREATER_THAN</name></expr></argument>, <argument><expr><name>minVal</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>maxRes</name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>OP_TYPE_LOWER_THAN</name></expr></argument>, <argument><expr><name>maxVal</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>minRes</name> <operator>||</operator> <name>maxRes</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>rmUnit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rmUnit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>rmUnit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fltDebug</name><argument_list>(<argument><expr><literal type="string">"NO Block Filter APPLY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLT_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkGroupNum</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unitNum</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>blkUnits</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unitIdx</name> <init>= <expr><name>unitNum</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>empty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>g</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// first is block unint num for a group, following append unitNum blkUnitIdx for this group</comment>
    <expr_stmt><expr><operator>*</operator><name>unitNum</name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>all</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>empty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// save group idx start pointer</comment>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pGroupIdx</name> <init>= <expr><name>unitIdx</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>u</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>uidx</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>unitIdxs</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>uidx</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// blkUnitRes == 1 is always true, so need not compare every time, delete this unit from group</comment>
        <expr_stmt><expr><operator>--</operator><operator>(</operator><operator>*</operator><name>unitNum</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>all</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>blkUnitRes</name><index>[<expr><name>uidx</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// blkUnitRes == -1 is alwary false, so in group is alwary false, need delete this group from blkGroupNum</comment>
        <expr_stmt><expr><operator>*</operator><name>unitNum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>empty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>unitIdx</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>uidx</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>unitNum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// if unit num is zero, reset unitIdx to start on this group</comment>
      <expr_stmt><expr><name>unitIdx</name> <operator>=</operator> <name>pGroupIdx</name></expr>;</expr_stmt>

      <expr_stmt><expr><operator>--</operator><name><name>info</name><operator>-&gt;</operator><name>blkGroupNum</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>empty</name> <operator>||</operator> <name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name></expr></argument>, <argument><expr><name>FI_STATUS_BLK_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name></expr></argument>, <argument><expr><name>FI_STATUS_BLK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></else></if_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>unitNum</name> <operator>=</operator> <name>unitIdx</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>unitIdx</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>blkGroupNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>FILTER_CLR_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name></expr></argument>, <argument><expr><name>FI_STATUS_BLK_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FILTER_SET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name></expr></argument>, <argument><expr><name>FI_STATUS_BLK_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>filterDumpInfoToString</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"Block Filter"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>filterExecuteBasedOnStatisImpl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pinfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>statis</name></decl></parameter>,
                                    <parameter><decl><type><name>int16_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>SFilterInfo</name> <operator>*</operator><operator>)</operator><name>pinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>         <name>all</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name>    <modifier>*</modifier></type><name>unitIdx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// FILTER_UNIT_CLR_F(info);</comment>

    <expr_stmt><expr><name>unitIdx</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>blkUnits</name></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>blkGroupNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>g</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>unitNum</name> <init>= <expr><operator>*</operator><operator>(</operator><name>unitIdx</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>unitNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>u</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SFilterComUnit</name> <modifier>*</modifier></type><name>cunit</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><operator>*</operator><operator>(</operator><name>unitIdx</name> <operator>+</operator> <name>u</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name>           <modifier>*</modifier></type><name>colData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><name><name>cunit</name><operator>-&gt;</operator><name>colData</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// if (FILTER_UNIT_GET_F(info, uidx)) {</comment>
        <comment type="line">//   p[i] = FILTER_UNIT_GET_R(info, uidx);</comment>
        <comment type="line">// } else {</comment>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>optr</name> <init>= <expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>cunit</name><operator>-&gt;</operator><name>colData</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>optr</name> <operator>==</operator> <name>OP_TYPE_IS_NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_IS_NOT_NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_IS_NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cunit</name><operator>-&gt;</operator><name>rfunc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<modifier>*</modifier><name>gRangeCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>rfunc</name></name></expr>]</index>)<argument_list>(<argument><expr><name>colData</name></expr></argument>, <argument><expr><name>colData</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData2</name></name></expr></argument>,
                                                  <argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name></expr></argument>, <argument><expr><name>colData</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="line">// FILTER_UNIT_SET_R(info, uidx, p[i]);</comment>
          <comment type="line">// FILTER_UNIT_SET_F(info, uidx);</comment>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>unitIdx</name> <operator>+=</operator> <name>unitNum</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>all</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterExecuteBasedOnStatis</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>statis</name></decl></parameter>,
                                   <parameter><decl><type><name>int16_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>statis</name> <operator>&amp;&amp;</operator> <name>numOfRows</name> <operator>&gt;=</operator> <name>FILTER_RM_UNIT_MIN_ROWS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>filterRmUnitByRange</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>statis</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name></expr></argument>, <argument><expr><name>FI_STATUS_BLK_ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name></expr></argument>, <argument><expr><name>FI_STATUS_BLK_EMPTY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>all</name> <operator>=</operator> <call><name>filterExecuteBasedOnStatisImpl</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>statis</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>_return</name>:</label>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blkFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>filterExecuteImplAll</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>statis</name></decl></parameter>,
                                              <parameter><decl><type><name>int16_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>numOfQualified</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>filterExecuteImplEmpty</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
                                                <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>statis</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>numOfQualified</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>filterExecuteImplIsNull</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pinfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>,
                                                 <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>statis</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>numOfQualified</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>SFilterInfo</name> <operator>*</operator><operator>)</operator><name>pinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>         <name>all</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>filterExecuteBasedOnStatis</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>statis</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>all</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>uidx</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>unitIdxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>colData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>colData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>colData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>colDataIsNull</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>colData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfQualified</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>all</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>filterExecuteImplNotNull</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pinfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>,
                                                  <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>statis</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>numOfQualified</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>SFilterInfo</name> <operator>*</operator><operator>)</operator><name>pinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>         <name>all</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>filterExecuteBasedOnStatis</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>statis</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>all</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>uidx</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>unitIdxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>colData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>colData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>colData</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>colDataIsNull</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>colData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfQualified</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>all</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>filterExecuteImplRange</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pinfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>statis</name></decl></parameter>,
                            <parameter><decl><type><name>int16_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>numOfQualified</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterInfo</name>  <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>SFilterInfo</name> <operator>*</operator><operator>)</operator><name>pinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>all</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type>      <name>dataSize</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dataSize</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rangeCompFunc</name></type> <name>rfunc</name> <init>= <expr><name><name>gRangeCompare</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rfunc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>valData</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>valData2</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valData2</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>func</name> <init>= <expr><name><name>gDataCompare</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>func</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>filterExecuteBasedOnStatis</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>statis</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>all</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>colData</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>colData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>colData</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<modifier>*</modifier><name>rfunc</name>)<argument_list>(<argument><expr><name>colData</name></expr></argument>, <argument><expr><name>colData</name></expr></argument>, <argument><expr><name>valData</name></expr></argument>, <argument><expr><name>valData2</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfQualified</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>all</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>filterExecuteImplMisc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pinfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>statis</name></decl></parameter>,
                           <parameter><decl><type><name>int16_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>numOfQualified</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>SFilterInfo</name> <operator>*</operator><operator>)</operator><name>pinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>         <name>all</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>filterExecuteBasedOnStatis</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>statis</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>all</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>uidx</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>unitIdxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>colData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>colData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>colData</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>colDataIsNull_s</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>colData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// match/nmatch for nchar type need convert from ucs4 to mbs</comment>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>optr</name> <operator>==</operator> <name>OP_TYPE_MATCH</name> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>optr</name> <operator>==</operator> <name>OP_TYPE_NMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>newColData</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>dataSize</name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name> <operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>colData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>colData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"castConvert1 taosUcs4ToMbs error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>func</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>optr</name></expr></argument>, <argument><expr><name>newColData</name></expr></argument>,
                               <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>valData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>func</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>optr</name></expr></argument>, <argument><expr><name>colData</name></expr></argument>,
                             <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name><operator>.</operator><name>valData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfQualified</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>all</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>filterExecuteImpl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pinfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>statis</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>numOfCols</name></decl></parameter>,
                       <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>numOfQualified</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>SFilterInfo</name> <operator>*</operator><operator>)</operator><name>pinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>         <name>all</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>filterExecuteBasedOnStatis</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>statis</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>all</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// FILTER_UNIT_CLR_F(info);</comment>

    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>g</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>u</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type>        <name>uidx</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>unitIdxs</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SFilterComUnit</name> <modifier>*</modifier></type><name>cunit</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><name>uidx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name>           <modifier>*</modifier></type><name>colData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>            <name>isNull</name> <init>= <expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>cunit</name><operator>-&gt;</operator><name>colData</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// if (FILTER_UNIT_GET_F(info, uidx)) {</comment>
        <comment type="line">//   p[i] = FILTER_UNIT_GET_R(info, uidx);</comment>
        <comment type="line">// } else {</comment>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>optr</name> <init>= <expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isNull</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>colData</name> <operator>=</operator> <call><name>colDataGetData</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>cunit</name><operator>-&gt;</operator><name>colData</name></name><operator>)</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>colData</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>isNull</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_IS_NULL</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_IS_NOT_NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_IS_NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cunit</name><operator>-&gt;</operator><name>rfunc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<modifier>*</modifier><name>gRangeCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>rfunc</name></name></expr>]</index>)<argument_list>(<argument><expr><name>colData</name></expr></argument>, <argument><expr><name>colData</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData2</name></name></expr></argument>,
                                                  <argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cunit</name><operator>-&gt;</operator><name>dataType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>&amp;&amp;</operator>
                <operator>(</operator><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_MATCH</name> <operator>||</operator> <name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_NMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>newColData</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name> <operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>colData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>colData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"castConvert1 taosUcs4ToMbs error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name></expr></argument>, <argument><expr><name>newColData</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>filterDoCompare</name><argument_list>(<argument><expr><name><name>gDataCompare</name><index>[<expr><name><name>cunit</name><operator>-&gt;</operator><name>func</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>optr</name></name></expr></argument>, <argument><expr><name>colData</name></expr></argument>, <argument><expr><name><name>cunit</name><operator>-&gt;</operator><name>valData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="line">// FILTER_UNIT_SET_R(info, uidx, p[i]);</comment>
          <comment type="line">// FILTER_UNIT_SET_F(info, uidx);</comment>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfQualified</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>all</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterSetExecFunc</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>FILTER_ALL_RES</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>filterExecuteImplAll</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_EMPTY_RES</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>filterExecuteImplEmpty</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>filterExecuteImpl</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>compare</name><operator>.</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_IS_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>filterExecuteImplIsNull</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>compare</name><operator>.</operator><name>optr</name></name> <operator>==</operator> <name>OP_TYPE_IS_NOT_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>filterExecuteImplNotNull</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>cunits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rfunc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>filterExecuteImplRange</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>filterExecuteImplMisc</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterPreprocess</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterGroupCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>gRes</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterGroupCtx</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>gResNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>filterMergeGroupUnits</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>gRes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gResNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterMergeGroups</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>gRes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gResNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fltInfo</name><argument_list>(<argument><expr><literal type="string">"Final - FilterInfo: [ALL]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_EMPTY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fltInfo</name><argument_list>(<argument><expr><literal type="string">"Final - FilterInfo: [EMPTY]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>filterGenerateColRange</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>gRes</name></expr></argument>, <argument><expr><name>gResNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterDumpInfoToString</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"Final"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterPostProcessRange</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterRewrite</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>gRes</name></expr></argument>, <argument><expr><name>gResNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterGenerateComInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>filterSetExecFunc</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>gResNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>filterFreeGroupCtx</name><argument_list>(<argument><expr><name><name>gRes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>gRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fltSetColFieldDataImpl</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>filer_get_col_from_id</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fromColId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>FILTER_ALL_RES</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FILTER_EMPTY_RES</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fromColId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call>(<modifier>*</modifier><name>fp</name>)<argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><call><name>FILTER_GET_COL_FIELD_ID</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fi</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call>(<modifier>*</modifier><name>fp</name>)<argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><call><name>FILTER_GET_COL_FIELD_SLOT_ID</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fi</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>filterUpdateComUnits</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fltInitFromNode</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>FILTER_DEFAULT_GROUP_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterGroup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>filterInitUnitsFields</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFltBuildGroupCtx</name></type> <name>tctx</name> <init>= <expr><block>{<expr><operator>.</operator><name>info</name> <operator>=</operator> <name>info</name></expr>, <expr><operator>.</operator><name>group</name> <operator>=</operator> <name>group</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesWalkExpr</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>fltTreeToGroup</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><name><name>tctx</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterConvertGroupFromArray</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><call><name>fltInitValFieldData</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>FLT_OPTION_NO_REWRITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>filterDumpInfoToString</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"Before preprocess"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><call><name>filterPreprocess</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>FI_STATUS_EMPTY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>unitRes</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>unitRes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>unitFlags</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>unitFlags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterDumpInfoToString</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"Final"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"init from node failed, code:%d"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>filterRangeExecute</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier><modifier>*</modifier></type><name>pDataStatis</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>scalarMode</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_EMPTY_RES</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FILTER_ALL_RES</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>  <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>minVal</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>maxVal</name></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>colRangeNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>colRange</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pDataStatis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pDataStatis</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>colId</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// no statistics data, load the true data block</comment>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// not support pre-filter operation on binary/nchar data type</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_NO_MERGE_DATA_TYPE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDataStatis</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>numOfNull</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pDataStatis</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>numOfNull</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pDataStatis</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>numOfNull</name> <operator>==</operator> <name>numOfRows</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>notnull</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>isrange</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>pDataBlockst</name> <init>= <expr><name><name>pDataStatis</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SFilterRangeNode</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type>             <name>minv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type>             <name>maxv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minv</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pDataBlockst</name><operator>-&gt;</operator><name>min</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxv</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pDataBlockst</name><operator>-&gt;</operator><name>max</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>minVal</name> <operator>=</operator> <operator>&amp;</operator><name>minv</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxVal</name> <operator>=</operator> <operator>&amp;</operator><name>maxv</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>minVal</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDataBlockst</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxVal</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDataBlockst</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>func</name></name><argument_list>(<argument><expr><name>minVal</name></expr></argument>, <argument><expr><name>maxVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCompareFunc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterGetTimeRangeImpl</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isStrict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterRange</name></type>     <name>ra</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>filterInitRangeCtx</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>, <argument><expr><name>FLT_OPTION_TIMESTAMP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>tmpc</name> <init>= <expr><call><name>filterInitRangeCtx</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>, <argument><expr><name>FLT_OPTION_TIMESTAMP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilterRangeCtx</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>optr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>             <name>empty</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>all</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>groupNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cur</name> <operator>=</operator> <name>tmpc</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>optr</name> <operator>=</operator> <name>LOGIC_COND_TYPE_AND</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>cur</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>optr</name> <operator>=</operator> <name>LOGIC_COND_TYPE_OR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>unitNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>u</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type>     <name>uidx</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>unitIdxs</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SFilterUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>uidx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>uint8_t</name></type> <name>raOptr</name> <init>= <expr><call><name>FILTER_UNIT_OPTR</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>filterAddRangeOptr</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>raOptr</name></expr></argument>, <argument><expr><name>LOGIC_COND_TYPE_AND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>FILTER_NO_MERGE_OPTR</name><argument_list>(<argument><expr><name>raOptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>filterAddUnitRange</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>notnull</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>notnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>unitNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>filterSourceRangeFromCtx</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>LOGIC_COND_TYPE_OR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>filterResetRangeCtx</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>all</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>notnull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>win</name> <operator>=</operator> <name>TSWINDOW_INITIALIZER</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>filterGetRangeNum</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FLT_CHK_JMP</name><argument_list>(<argument><expr><name>num</name> <operator>&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>isStrict</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"more than one time range, num:%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SFilterRange</name></type> <name>tra</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>filterGetRangeRes</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <name><name>tra</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <name><name>tra</name><operator>.</operator><name>e</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>tra</name><operator>.</operator><name>sflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>skey</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>tra</name><operator>.</operator><name>eflag</name></name></expr></argument>, <argument><expr><name>RANGE_FLG_EXCLUDE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>ekey</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>filterFreeRangeCtx</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>filterFreeRangeCtx</name><argument_list>(<argument><expr><name>tmpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"qFilter time range:[%"</literal> <name>PRId64</name> <literal type="string">"]-[%"</literal> <name>PRId64</name> <literal type="string">"]"</literal></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><operator>*</operator><name>win</name> <operator>=</operator> <name>TSWINDOW_DESC_INITIALIZER</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filterFreeRangeCtx</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>filterFreeRangeCtx</name><argument_list>(<argument><expr><name>tmpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"qFilter time range:[%"</literal> <name>PRId64</name> <literal type="string">"]-[%"</literal> <name>PRId64</name> <literal type="string">"]"</literal></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterGetTimeRange</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isStrict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>isStrict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><call><name>filterInitFromNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>FLT_OPTION_NO_REWRITE</name> <operator>|</operator> <name>FLT_OPTION_TIMESTAMP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>scalarMode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>win</name> <operator>=</operator> <name>TSWINDOW_INITIALIZER</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>isStrict</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><call><name>filterGetTimeRangeImpl</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>isStrict</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>filterFreeInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FLT_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterConverNcharColumns</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>gotNchar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>FILTER_EMPTY_RES</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FILTER_ALL_RES</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>type</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD_TYPE</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SFilterField</name></type> <name>nfi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>nfi</name><operator>.</operator><name>desc</name></name> <operator>=</operator> <name><name>fi</name><operator>-&gt;</operator><name>desc</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD_SIZE</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>nfi</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>rows</name> <operator>*</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>bufSize</name> <init>= <expr><name>bytes</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD_DATA</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD_DATA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nfi</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>varSrc</name> <init>= <expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type>  <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>varSrcLen</name> <init>= <expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>varSrcLen</name> <operator>&amp;&amp;</operator> <name><name>varSrc</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>varSrcLen</name></expr>)</condition> <block>{<block_content>
          <comment type="block">/* NULL */</comment>
          <expr_stmt><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>VarDataLenT</name><operator>)</operator><name>varSrcLen</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>varDataCopy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>taosMbsToUcs4</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>TdUcs4</name> <operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"filterConverNcharColumns taosMbsToUcs4 error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>nfi</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>gotNchar</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>gotNchar</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>filterUpdateComUnits</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterFreeNcharColumns</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilterField</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>FLD_TYPE_COLUMN</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>type</name> <init>= <expr><call><name>FILTER_GET_COL_FIELD_TYPE</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fltAddValueNodeToConverList</name><parameter_list>(<parameter><decl><type><name>SFltTreeStat</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>stat</name><operator>-&gt;</operator><name>nodeList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>nodeList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>stat</name><operator>-&gt;</operator><name>nodeList</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>nodeList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>fltReviseRewriter</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFltTreeStat</name> <modifier>*</modifier></type><name>stat</name> <init>= <expr><operator>(</operator><name>SFltTreeStat</name> <operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_LOGIC_CONDITION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SLogicConditionNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SListCell</name>           <modifier>*</modifier></type><name>cell</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>pParameterList</name><operator>-&gt;</operator><name>pHead</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>pParameterList</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>cell</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"invalid cell"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>QUERY_NODE_OPERATOR</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>QUERY_NODE_LOGIC_CONDITION</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>valueNode</name><operator>-&gt;</operator><name>placeholderNo</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>FLT_OPTION_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>!=</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>!=</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>-&gt;</operator><name>precision</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>fltAddValueNodeToConverList</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><name>valueNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>sclConvertToTsValueNode</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>valueNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>colNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>colNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_NODE_LIST</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>listNode</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>listNode</name><operator>-&gt;</operator><name>pNodeList</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name><name>listNode</name><operator>-&gt;</operator><name>pNodeList</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type>     <name>type</name> <init>= <expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SNode</name>      <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>node</argument>, <argument>listNode-&gt;pNodeList</argument>)</argument_list></macro> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_CASE_WHEN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>QUERY_NODE_WHEN_THEN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FLT_IS_COMPARISON_OPERATOR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>==</operator> <name>OP_TYPE_NOT_IN</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>==</operator> <name>OP_TYPE_NOT_LIKE</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>&gt;</operator> <name>OP_TYPE_IS_NOT_NULL</name> <operator>||</operator>
        <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>==</operator> <name>OP_TYPE_NOT_EQUAL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>FLT_OPTION_TIMESTAMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>&gt;=</operator> <name>OP_TYPE_NOT_EQUAL</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>!=</operator> <name>OP_TYPE_IS_NULL</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>!=</operator> <name>OP_TYPE_IS_NOT_NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>scalarGetOperatorParamNum</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"invalid operator, pRight:%p, nodeType:%d, opType:%d"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>OP_TYPE_IS_TRUE</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>||</operator> <name>OP_TYPE_IS_FALSE</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>||</operator> <name>OP_TYPE_IS_UNKNOWN</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>||</operator>
          <name>OP_TYPE_IS_NOT_TRUE</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>||</operator> <name>OP_TYPE_IS_NOT_FALSE</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>||</operator>
          <name>OP_TYPE_IS_NOT_UNKNOWN</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>QUERY_NODE_COLUMN</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>QUERY_NODE_COLUMN</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>(</operator><name>QUERY_NODE_NODE_LIST</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>OP_TYPE_JSON_CONTAINS</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><name>OP_TYPE_GREATER_THAN</name></expr>:</case>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>=</operator> <name>OP_TYPE_LOWER_THAN</name></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>OP_TYPE_LOWER_THAN</name></expr>:</case>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>=</operator> <name>OP_TYPE_GREATER_THAN</name></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>OP_TYPE_GREATER_EQUAL</name></expr>:</case>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>=</operator> <name>OP_TYPE_LOWER_EQUAL</name></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>OP_TYPE_LOWER_EQUAL</name></expr>:</case>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>=</operator> <name>OP_TYPE_GREATER_EQUAL</name></expr>;</expr_stmt>
            <break>break;</break>
          <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>OP_TYPE_IN</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>&amp;&amp;</operator> <name>QUERY_NODE_NODE_LIST</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"invalid IN operator node, rightType:%d"</literal></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>OP_TYPE_IN</name> <operator>!=</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>refNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SValueNode</name>  <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>FILTER_GET_FLAG</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>FLT_OPTION_TIMESTAMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <name>TSDB_DATA_TYPE_UBIGINT</name> <operator>==</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name> <operator>&lt;=</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><call><name>vectorGetConvertType</name><argument_list>(<argument><expr><name><name>refNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>type</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name><name>refNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SColumnNode</name>   <modifier>*</modifier></type><name>refNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>listNode</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>listNode</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>        <name>type</name> <init>= <expr><call><name>vectorGetConvertType</name><argument_list>(<argument><expr><name><name>refNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>listNode</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>type</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name><name>refNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"invalid node type for filter, type:%d"</literal></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>

  <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fltReviseNodes</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SFltTreeStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesRewriteExprPostOrder</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>fltReviseRewriter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>nodeList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>valueNode</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>nodeList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><call><name>sclConvertToTsValueNode</name><argument_list>(<argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>valueNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>nodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>FLT_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fltOptimizeNodes</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SFltTreeStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fltGetDataFromColId</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SFilterColumnParam</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator><operator>-&gt;</operator><name>numOfCols</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pDataBlock</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SFilterColumnParam</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator><operator>-&gt;</operator><name>pDataBlock</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>pColInfo</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fltGetDataFromSlotId</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SFilterColumnParam</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator><operator>-&gt;</operator><name>numOfCols</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pDataBlock</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SFilterColumnParam</name> <operator>*</operator><operator>)</operator><name>param</name><operator>)</operator><operator>-&gt;</operator><name>pDataBlock</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;=</operator> <name>numOfCols</name> <operator>||</operator> <name>id</name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"invalid slot id, id:%d, numOfCols:%d, arraySize:%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>,
             <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>pColInfo</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterSetDataFromSlotId</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>info</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>fltSetColFieldDataImpl</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>fltGetDataFromSlotId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterSetDataFromColId</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>fltSetColFieldDataImpl</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>fltGetDataFromColId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterInitFromNode</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"invalid param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pInfo</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pInfo</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fltError</name><argument_list>(<argument><expr><literal type="string">"taosMemoryCalloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SFilterInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>*</operator><name>pInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFltTreeStat</name></type> <name>stat</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>stat</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><call><name>fltReviseNodes</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>scalarMode</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>scalarMode</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fltDebug</name><argument_list>(<argument><expr><literal type="string">"scalar mode: %d"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>scalarMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>scalarMode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><call><name>fltInitFromNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>sclCtx</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLT_ERR_JRET</name><argument_list>(<argument><expr><call><name>fltOptimizeNodes</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>sclCtx</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>filterFreeInfo</name><argument_list>(<argument><expr><operator>*</operator><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>FLT_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>filterExecute</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>statis</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>numOfCols</name></decl></parameter>,
                   <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pResultStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>info</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pResultStatus</name> <operator>=</operator> <name>FILTER_RESULT_ALL_QUALIFIED</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScalarParam</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataType</name></type>    <name>type</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>, <expr><operator>.</operator><name>bytes</name> <operator>=</operator> sizeof<operator>(</operator><name>bool</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>sclCreateColumnInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>scalarMode</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>scalarCalculate</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>sclCtx</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FLT_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>columnData</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>output</name><operator>.</operator><name>numOfQualified</name></name> <operator>==</operator> <name><name>output</name><operator>.</operator><name>numOfRows</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pResultStatus</name> <operator>=</operator> <name>FILTER_RESULT_ALL_QUALIFIED</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>output</name><operator>.</operator><name>numOfQualified</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pResultStatus</name> <operator>=</operator> <name>FILTER_RESULT_NONE_QUALIFIED</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pResultStatus</name> <operator>=</operator> <name>FILTER_RESULT_PARTIAL_QUALIFIED</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>columnData</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>output</name><operator>.</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>keep</name> <init>= <expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>func</name></name>)<argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>statis</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>.</operator><name>numOfQualified</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// todo this should be return during filter procedure</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>output</name><operator>.</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>num</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name><name>output</name><operator>.</operator><name>numOfRows</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pResultStatus</name> <operator>=</operator> <name>FILTER_RESULT_ALL_QUALIFIED</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pResultStatus</name> <operator>=</operator> <name>FILTER_RESULT_NONE_QUALIFIED</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pResultStatus</name> <operator>=</operator> <name>FILTER_RESULT_PARTIAL_QUALIFIED</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>keep</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SClassifyConditionCxt</name> <block>{
  <decl_stmt><decl><type><name>bool</name></type> <name>hasPrimaryKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasTagIndexCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasTagCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasOtherCol</name></decl>;</decl_stmt>
}</block></struct></type> <name>SClassifyConditionCxt</name>;</typedef>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>classifyConditionImpl</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClassifyConditionCxt</name> <modifier>*</modifier></type><name>pCxt</name> <init>= <expr><operator>(</operator><name>SClassifyConditionCxt</name> <operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>&amp;&amp;</operator> <name>TSDB_SYSTEM_TABLE</name> <operator>!=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>hasPrimaryKey</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasIndex</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>hasTagIndexCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>hasTagCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>COLUMN_TYPE_TAG</name> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colType</name></name> <operator>||</operator> <name>COLUMN_TYPE_TBNAME</name> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colType</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>hasTagCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>hasOtherCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFunctionNode</name> <modifier>*</modifier></type><name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fmIsPseudoColumnFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>FUNCTION_TYPE_TBNAME</name> <operator>==</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>hasTagCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>hasOtherCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <name>EConditionType</name> <block>{
  <decl><name>COND_TYPE_PRIMARY_KEY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>COND_TYPE_TAG_INDEX</name></decl>,
  <decl><name>COND_TYPE_TAG</name></decl>,
  <decl><name>COND_TYPE_NORMAL</name></decl>
}</block></enum></type> <name>EConditionType</name>;</typedef>

<function><type><specifier>static</specifier> <name>EConditionType</name></type> <name>classifyCondition</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClassifyConditionCxt</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>hasPrimaryKey</name> <operator>=</operator> <name>false</name></expr>, <expr><operator>.</operator><name>hasTagIndexCol</name> <operator>=</operator> <name>false</name></expr>, <expr><operator>.</operator><name>hasOtherCol</name> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesWalkExpr</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>classifyConditionImpl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name><name>cxt</name><operator>.</operator><name>hasOtherCol</name></name></expr> ?</condition><then> <expr><name>COND_TYPE_NORMAL</name></expr>
                         </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>cxt</name><operator>.</operator><name>hasPrimaryKey</name></name> <operator>&amp;&amp;</operator> <name><name>cxt</name><operator>.</operator><name>hasTagCol</name></name></expr>
                                ?</condition><then> <expr><name>COND_TYPE_NORMAL</name></expr>
                                </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>cxt</name><operator>.</operator><name>hasPrimaryKey</name></name></expr> ?</condition><then> <expr><name>COND_TYPE_PRIMARY_KEY</name></expr>
                                                     </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>cxt</name><operator>.</operator><name>hasTagIndexCol</name></name></expr> ?</condition><then> <expr><name>COND_TYPE_TAG_INDEX</name></expr> </then><else>: <expr><name>COND_TYPE_TAG</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isCondColumnsFromMultiTable</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pCondCols</name> <init>= <expr><call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>nodesCollectColumnsFromNode</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COLLECT_COL_TYPE_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCondCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pCondCols</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>pFirstCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pCondCols</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SNode</name>       <modifier>*</modifier></type><name>pColNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <macro><name>FOREACH</name><argument_list>(<argument>pColNode</argument>, <argument>pCondCols</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pColNode</name><operator>)</operator><operator>-&gt;</operator><name>dbName</name></expr></argument>, <argument><expr><name><name>pFirstCol</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pColNode</name><operator>)</operator><operator>-&gt;</operator><name>tableAlias</name></expr></argument>, <argument><expr><name><name>pFirstCol</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pCondCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pCondCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>partitionLogicCond</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCondition</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pPrimaryKeyCond</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTagIndexCond</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTagCond</name></decl></parameter>,
                                  <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pOtherCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogicConditionNode</name> <modifier>*</modifier></type><name>pLogicCond</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pCondition</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pPrimaryKeyConds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pTagIndexConds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pTagConds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pOtherConds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name>     <modifier>*</modifier></type><name>pCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pCond</argument>, <argument>pLogicCond-&gt;pParameterList</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isCondColumnsFromMultiTable</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pOtherCond</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pOtherConds</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>classifyCondition</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>COND_TYPE_PRIMARY_KEY</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pPrimaryKeyCond</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pPrimaryKeyConds</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>COND_TYPE_TAG_INDEX</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTagIndexCond</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTagIndexConds</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTagCond</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTagConds</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>COND_TYPE_TAG</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTagCond</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTagConds</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>COND_TYPE_NORMAL</name></expr>:</case>
        <default>default:</default>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pOtherCond</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pOtherConds</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pTempPrimaryKeyCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pTempTagIndexCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pTempTagCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pTempOtherCond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesMergeConds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTempPrimaryKeyCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrimaryKeyConds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesMergeConds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTempTagIndexCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagIndexConds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesMergeConds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTempTagCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagConds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesMergeConds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTempOtherCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pOtherConds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pPrimaryKeyCond</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pPrimaryKeyCond</name> <operator>=</operator> <name>pTempPrimaryKeyCond</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTagIndexCond</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pTagIndexCond</name> <operator>=</operator> <name>pTempTagIndexCond</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTagCond</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pTagCond</name> <operator>=</operator> <name>pTempTagCond</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pOtherCond</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pOtherCond</name> <operator>=</operator> <name>pTempOtherCond</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pCondition</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pPrimaryKeyConds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pTagIndexConds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pTagConds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pOtherConds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pTempPrimaryKeyCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pTempTagIndexCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pTempTagCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pTempOtherCond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>filterPartitionCond</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCondition</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pPrimaryKeyCond</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTagIndexCond</name></decl></parameter>, <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTagCond</name></decl></parameter>,
                            <parameter><decl><type><name>SNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pOtherCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_LOGIC_CONDITION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pCondition</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <name>LOGIC_COND_TYPE_AND</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SLogicConditionNode</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pCondition</name><operator>)</operator><operator>-&gt;</operator><name>condType</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>partitionLogicCond</name><argument_list>(<argument><expr><name>pCondition</name></expr></argument>, <argument><expr><name>pPrimaryKeyCond</name></expr></argument>, <argument><expr><name>pTagIndexCond</name></expr></argument>, <argument><expr><name>pTagCond</name></expr></argument>, <argument><expr><name>pOtherCond</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>needOutput</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isCondColumnsFromMultiTable</name><argument_list>(<argument><expr><operator>*</operator><name>pCondition</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pOtherCond</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pOtherCond</name> <operator>=</operator> <operator>*</operator><name>pCondition</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>needOutput</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <switch>switch <condition>(<expr><call><name>classifyCondition</name><argument_list>(<argument><expr><operator>*</operator><name>pCondition</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>COND_TYPE_PRIMARY_KEY</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pPrimaryKeyCond</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pPrimaryKeyCond</name> <operator>=</operator> <operator>*</operator><name>pCondition</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>needOutput</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>COND_TYPE_TAG_INDEX</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTagIndexCond</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pTagIndexCond</name> <operator>=</operator> <operator>*</operator><name>pCondition</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>needOutput</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTagCond</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pTempCond</name> <init>= <expr><operator>*</operator><name>pCondition</name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTagIndexCond</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>pTempCond</name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>*</operator><name>pCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTempCond</name></expr>)</condition> <block>{<block_content>
              <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>*</operator><name>pTagCond</name> <operator>=</operator> <name>pTempCond</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>needOutput</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>COND_TYPE_TAG</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pTagCond</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pTagCond</name> <operator>=</operator> <operator>*</operator><name>pCondition</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>needOutput</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>COND_TYPE_NORMAL</name></expr>:</case>
      <default>default:</default>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pOtherCond</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pOtherCond</name> <operator>=</operator> <operator>*</operator><name>pCondition</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>needOutput</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>needOutput</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pCondition</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
