<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/tdb/src/db/tdbBtree.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbInt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_BTREE_ROOT</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_BTREE_LEAF</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_BTREE_OVFL</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<struct>struct <name>SBTree</name> <block>{
  <decl_stmt><decl><type><name>SPgno</name></type>         <name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>           <name>keyLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>           <name>valLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPager</name>       <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tdb_cmpr_fn_t</name></type> <name>kcmpr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>           <name>pageSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>           <name>maxLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>           <name>minLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>           <name>maxLeaf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>           <name>minLeaf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBtInfo</name></type>       <name>info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>tbname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_BTREE_PAGE_COMMON_HDR</name></cpp:macro> <cpp:value>u8 flags;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_BTREE_PAGE_GET_FLAGS</name><parameter_list>(<parameter><type><name>PAGE</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>(PAGE)-&gt;pData[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_BTREE_PAGE_SET_FLAGS</name><parameter_list>(<parameter><type><name>PAGE</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((PAGE)-&gt;pData[0] = (flags))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_BTREE_PAGE_IS_ROOT</name><parameter_list>(<parameter><type><name>PAGE</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>(TDB_BTREE_PAGE_GET_FLAGS(PAGE) &amp; TDB_BTREE_ROOT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_BTREE_PAGE_IS_LEAF</name><parameter_list>(<parameter><type><name>PAGE</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>(TDB_BTREE_PAGE_GET_FLAGS(PAGE) &amp; TDB_BTREE_LEAF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_BTREE_PAGE_IS_OVFL</name><parameter_list>(<parameter><type><name>PAGE</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>(TDB_BTREE_PAGE_GET_FLAGS(PAGE) &amp; TDB_BTREE_OVFL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_BTREE_ASSERT_FLAG</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro>                                                     \
  <cpp:value>ASSERT(TDB_FLAG_IS(flags, TDB_BTREE_ROOT) || TDB_FLAG_IS(flags, TDB_BTREE_LEAF) ||     \
         TDB_FLAG_IS(flags, TDB_BTREE_ROOT | TDB_BTREE_LEAF) || TDB_FLAG_IS(flags, 0) || \
         TDB_FLAG_IS(flags, TDB_BTREE_OVFL))</cpp:value></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>
<typedef>typedef <type><struct>struct <block>{
  <expr_stmt><expr><name>TDB_BTREE_PAGE_COMMON_HDR</name></expr></expr_stmt>
}</block></struct></type> <name>SLeafHdr</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>TDB_BTREE_PAGE_COMMON_HDR</name>
  <name>SPgno</name></type> <name>pgno</name></decl>;</decl_stmt>  <comment type="line">// right-most child</comment>
}</block></struct></type> <name>SIntHdr</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbDefaultKeyCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyLen2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeOpenImpl</name><parameter_list>(<parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// static int tdbBtreeInitPage(SPage *pPage, void *arg, int init);</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeEncodeCell</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vLen</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>,
                              <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>szCell</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeDecodeCell</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>SCellDecoder</name> <modifier>*</modifier></type><name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeBalance</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeCellSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dropOfp</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtcMoveDownward</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtcMoveUpward</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>tdbBtreeOpen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valLen</name></decl></parameter>, <parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>tbname</name></decl></parameter>, <parameter><decl><type><name>SPgno</name></type> <name>pgno</name></decl></parameter>, <parameter><decl><type><name>tdb_cmpr_fn_t</name></type> <name>kcmpr</name></decl></parameter>, <parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
                 <parameter><decl><type><name>SBTree</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>keyLen</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppBt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pBt</name> <operator>=</operator> <operator>(</operator><name>SBTree</name> <operator>*</operator><operator>)</operator><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pBt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pBt-&gt;keyLen</comment>
  <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <ternary><condition><expr><name>keyLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>TDB_VARIANT_LEN</name></expr> </then><else>: <expr><name>keyLen</name></expr></else></ternary></expr>;</expr_stmt>
  <comment type="line">// pBt-&gt;valLen</comment>
  <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>valLen</name></name> <operator>=</operator> <ternary><condition><expr><name>valLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>TDB_VARIANT_LEN</name></expr> </then><else>: <expr><name>valLen</name></expr></else></ternary></expr>;</expr_stmt>
  <comment type="line">// pBt-&gt;pPager</comment>
  <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name> <operator>=</operator> <name>pPager</name></expr>;</expr_stmt>
  <comment type="line">// pBt-&gt;kcmpr</comment>
  <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>kcmpr</name></name> <operator>=</operator> <ternary><condition><expr><name>kcmpr</name></expr> ?</condition><then> <expr><name>kcmpr</name></expr> </then><else>: <expr><name>tdbDefaultKeyCmprFn</name></expr></else></ternary></expr>;</expr_stmt>
  <comment type="line">// pBt-&gt;pageSize</comment>
  <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr>;</expr_stmt>
  <comment type="line">// pBt-&gt;maxLocal</comment>
  <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>=</operator> <call><name>tdbPageCapacity</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIntHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <comment type="line">// pBt-&gt;minLocal: Should not be allowed smaller than 15, which is [nPayload][nKey][nData]</comment>
  <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>minLocal</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <comment type="line">// pBt-&gt;maxLeaf</comment>
  <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>maxLeaf</name></name> <operator>=</operator> <call><name>tdbPageCapacity</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLeafHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// pBt-&gt;minLeaf</comment>
  <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>minLeaf</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>minLocal</name></name></expr>;</expr_stmt>

  <comment type="line">// if pgno == 0 fetch new btree root leaf page</comment>
  <if_stmt><if>if <condition>(<expr><name>pgno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// fetch page &amp; insert into main db</comment>
    <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TXN</name>   <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBegin</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TDB_TXN_WRITE</name> <operator>|</operator> <name>TDB_TXN_READ_UNCOMMITTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SBtreeInitPageArg</name></type> <name>zArg</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>zArg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0x1</literal> <operator>|</operator> <literal type="number">0x2</literal></expr>;</expr_stmt>  <comment type="line">// root leaf node;</comment>
    <expr_stmt><expr><name><name>zArg</name><operator>.</operator><name>pBt</name></name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerFetchPage</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPage</name></expr></argument>, <argument><expr><name>tdbBtreeInitPage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zArg</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbAbort</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerWrite</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbAbort</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>TDB_MAINDB_NAME</name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>root</name></name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>nLevel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>tbname</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tbname</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pEnv</name><operator>-&gt;</operator><name>pMainDb</name></name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBt</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdbAbort</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tdbPCacheRelease</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbCommit</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbPostCommit</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pgno</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
  <comment type="block">/*
  // TODO: pBt-&gt;root
  ret = tdbBtreeOpenImpl(pBt);
  if (ret &lt; 0) {
    tdbOsFree(pBt);
    return -1;
  }
  */</comment>
  <expr_stmt><expr><operator>*</operator><name>ppBt</name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtreeClose</name><parameter_list>(<parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBt</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtreeInsert</name><parameter_list>(<parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vLen</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBTC</name></type>   <name>btc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>  <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>szCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>szBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>c</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbBtcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb insert, btc: %p, pTxn: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// move to the position to insert</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcMoveTo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>btc</name><operator>.</operator><name>idx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>btc</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>btc</name><operator>.</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// dup key not allowed</comment>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"unable to insert dup key. pKey: %p, kLen: %d, btc: %p, pTxn: %p"</literal></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// ASSERT(0);</comment>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcUpsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtreeDelete</name><parameter_list>(<parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBTC</name></type> <name>btc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbBtcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb delete, btc: %p, pTxn: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// move the cursor</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcMoveTo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>btc</name><operator>.</operator><name>idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// delete the key</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbBtcDelete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtreeUpsert</name><parameter_list>(<parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBTC</name></type> <name>btc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbBtcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb upsert, btc: %p, pTxn: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// move the cursor</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcMoveTo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>btc</name><operator>.</operator><name>idx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>btc</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>btc</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name><name>btc</name><operator>.</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcUpsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtreeGet</name><parameter_list>(<parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbBtreePGet</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ppVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtreePGet</name><parameter_list>(<parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pkLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBTC</name></type>         <name>btc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name>       <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>cret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>pTKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>pTVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCellDecoder</name></type> <name>cd</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbBtcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb pget, btc: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcMoveTo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>btc</name><operator>.</operator><name>idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>cret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name><name>btc</name><operator>.</operator><name>pPage</name></name></expr></argument>, <argument><expr><name><name>btc</name><operator>.</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbBtreeDecodeCell</name><argument_list>(<argument><expr><name><name>btc</name><operator>.</operator><name>pPage</name></name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name><name>btc</name><operator>.</operator><name>pTxn</name></name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ppKey</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pTKey</name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><operator>*</operator><name>ppKey</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>kLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTKey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppKey</name> <operator>=</operator> <name>pTKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pkLen</name> <operator>=</operator> <name><name>cd</name><operator>.</operator><name>kLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppKey</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>pKey</name></name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>kLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ppVal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pTVal</name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><operator>*</operator><name>ppVal</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppVal</name> <operator>=</operator> <name>pTVal</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>vLen</name> <operator>=</operator> <name><name>cd</name><operator>.</operator><name>vLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppVal</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>pVal</name></name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TDB_CELLDECODER_FREE_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>cd</name><operator>.</operator><name>pKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TDB_CELLDECODER_FREE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbDebug</name><argument_list>(<argument><expr><literal type="string">"tdb btc/pget/2 decoder: %p pVal free: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>cd</name><operator>.</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb pget end, btc decoder: %p/0x%x, local decoder:%p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>btc</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name><name>btc</name><operator>.</operator><name>coder</name><operator>.</operator><name>freeKV</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbDefaultKeyCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>mlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>keyLen1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>keyLen2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pKey1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pKey2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mlen</name> <operator>=</operator> <ternary><condition><expr><name>keyLen1</name> <operator>&lt;</operator> <name>keyLen2</name></expr> ?</condition><then> <expr><name>keyLen1</name></expr> </then><else>: <expr><name>keyLen2</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>cret</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>cret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>keyLen1</name> <operator>&lt;</operator> <name>keyLen2</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keyLen1</name> <operator>&gt;</operator> <name>keyLen2</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>cret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>cret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
static int tdbBtreeOpenImpl(SBTree *pBt) {
  // Try to get the root page of the an existing btree
  SPgno  pgno;
  SPage *pPage;
  int    ret;

  {
    // 1. TODO: Search the main DB to check if the DB exists
    ret = tdbPagerOpenDB(pBt-&gt;pPager, &amp;pgno, true, pBt);
    ASSERT(ret == 0);
  }

  if (pgno != 0) {
    pBt-&gt;root = pgno;
    return 0;
  }

  // Try to create a new database
  ret = tdbPagerAllocPage(pBt-&gt;pPager, &amp;pgno);
  if (ret &lt; 0) {
    ASSERT(0);
    return -1;
  }

  ASSERT(pgno != 0);
  pBt-&gt;root = pgno;
  return 0;
}
*/</comment>
<function><type><name>int</name></type> <name>tdbBtreeInitPage</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>init</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>      <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>      <name>leaf</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pBt</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SBtreeInitPageArg</name> <operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pBt</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// init page</comment>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_GET_FLAGS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_BTREE_ASSERT_FLAG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbPageInit</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><ternary><condition><expr><name>leaf</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLeafHdr</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIntHdr</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></argument>, <argument><expr><name>tdbBtreeCellSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// zero page</comment>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SBtreeInitPageArg</name> <operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>leaf</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>TDB_BTREE_LEAF</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_BTREE_ASSERT_FLAG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbPageZero</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><ternary><condition><expr><name>leaf</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLeafHdr</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIntHdr</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></argument>, <argument><expr><name>tdbBtreeCellSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>leaf</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SLeafHdr</name> <modifier>*</modifier></type><name>pLeafHdr</name> <init>= <expr><operator>(</operator><name>SLeafHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pLeafHdr</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SIntHdr</name> <modifier>*</modifier></type><name>pIntHdr</name> <init>= <expr><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pIntHdr</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIntHdr</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>leaf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>keyLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>valLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>maxLeaf</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>minLocal</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>minLeaf</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TDB_BTREE_PAGE_IS_OVFL</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>keyLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>valLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>=</operator> <call><name>tdbPageCapacity</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIntHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>minLocal</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>minLocal</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>keyLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>maxLocal</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>minLocal</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>minLocal</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TDB_BTREE_BALANCE =====================</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeBalanceDeeper</name><parameter_list>(<parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pRoot</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppChild</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPager</name>           <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name>            <modifier>*</modifier></type><name>pChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>             <name>pgnoChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>               <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>                <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIntHdr</name>          <modifier>*</modifier></type><name>pIntHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBtreeInitPageArg</name></type> <name>zArg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>                <name>leaf</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pPager</name> <operator>=</operator> <name><name>pRoot</name><operator>-&gt;</operator><name>pPager</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_GET_FLAGS</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// allocate a new child page</comment>
  <expr_stmt><expr><name>pgnoChild</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zArg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>TDB_FLAG_REMOVE</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>TDB_BTREE_ROOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zArg</name><operator>.</operator><name>pBt</name></name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerFetchPage</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgnoChild</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pChild</name></expr></argument>, <argument><expr><name>tdbBtreeInitPage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zArg</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>leaf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><name><name>pChild</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>-&gt;</operator><name>pgno</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pRoot</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pgno</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerWrite</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Copy the root page content to the child page</comment>
  <expr_stmt><expr><call><name>tdbPageCopy</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>pChild</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Reinitialize the root page</comment>
  <expr_stmt><expr><name><name>zArg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>TDB_BTREE_ROOT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zArg</name><operator>.</operator><name>pBt</name></name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtreeInitPage</name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zArg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pIntHdr</name> <operator>=</operator> <operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pRoot</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIntHdr</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <name>pgnoChild</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppChild</name> <operator>=</operator> <name>pChild</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeBalanceNonRoot</name><parameter_list>(<parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pParent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type>    <name>nOlds</name></decl>, <decl><type ref="prev"/><name>pageIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name><name>pOlds</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name><name>pDivCell</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name><name>szDivCell</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>sIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>     <name>childNotLeaf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>  <name>rPgno</name></decl>;</decl_stmt>

  <block>{<block_content>  <comment type="line">// Find 3 child pages at most to do balance</comment>
    <decl_stmt><decl><type><name>int</name></type>    <name>nCells</name> <init>= <expr><call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nCells</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nOlds</name> <operator>=</operator> <name>nCells</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// has more than three child pages</comment>
      <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <name>nCells</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sIdx</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>sIdx</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>nOlds</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nOlds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>sIdx</name> <operator>+</operator> <name>i</name> <operator>&lt;=</operator> <name>nCells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SPgno</name></type> <name>pgno</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>sIdx</name> <operator>+</operator> <name>i</name> <operator>==</operator> <name>nCells</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pgno</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pParent</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pgno</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>sIdx</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pgno</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><name>pCell</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>ret</name> <operator>=</operator> <macro><name>tdbPagerFetchPage</name><argument_list>(<argument>pBt-&gt;pPager</argument>, <argument>&amp;pgno</argument>, <argument>pOlds + i</argument>, <argument>tdbBtreeInitPage</argument>,
                              <argument>&amp;((SBtreeInitPageArg){.pBt = pBt, .flags = <literal type="number">0</literal>})</argument>, <argument>pTxn</argument>)</argument_list></macro></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerWrite</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name><name>pOlds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// copy the parent key out if child pages are not leaf page</comment>
    <expr_stmt><expr><name>childNotLeaf</name> <operator>=</operator> <operator>!</operator><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pOlds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>childNotLeaf</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nOlds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sIdx</name> <operator>+</operator> <name>i</name> <operator>&lt;</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>sIdx</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>szDivCell</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tdbBtreeCellSize</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pDivCell</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tdbOsMalloc</name><argument_list>(<argument><expr><name><name>szDivCell</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDivCell</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name><name>szDivCell</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nOlds</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><name><name>pDivCell</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><name><name>pOlds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pData</name><operator>)</operator><operator>-&gt;</operator><name>pgno</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><name><name>pOlds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pData</name><operator>)</operator><operator>-&gt;</operator><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tdbPageInsertCell</name><argument_list>(<argument><expr><name><name>pOlds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pOlds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pDivCell</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>szDivCell</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>rPgno</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><name><name>pOlds</name><index>[<expr><name>nOlds</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>pData</name><operator>)</operator><operator>-&gt;</operator><name>pgno</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerWrite</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name>pParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// drop the cells on parent page</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nOlds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>nCells</name> <operator>=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>sIdx</name> <operator>&lt;</operator> <name>nCells</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdbPageDropCell</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>sIdx</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><name><name>pParent</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>-&gt;</operator><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block>

  <decl_stmt><decl><type><name>int</name></type> <name>nNews</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iPage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>oIdx</name></decl>;</decl_stmt>
  }</block> <decl><name><name>infoNews</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>

  <block>{<block_content>  <comment type="line">// Get how many new pages are needed and the new distribution</comment>

    <comment type="line">// first loop to find minimum number of pages needed</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>oPage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>oPage</name> <operator>&lt;</operator> <name>nOlds</name></expr>;</condition> <incr><expr><name>oPage</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name> <init>= <expr><name><name>pOlds</name><index>[<expr><name>oPage</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>cellBytes</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>oIdx</name></decl>;</decl_stmt>

      <for>for <control>(<init><expr><name>oIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>oIdx</name> <operator>&lt;</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>oIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>oIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cellBytes</name> <operator>=</operator> <call><name>TDB_BYTES_CELL_TAKEN</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>infoNews</name><index>[<expr><name>nNews</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+</operator> <name>cellBytes</name> <operator>&gt;</operator> <call><name>TDB_PAGE_USABLE_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <comment type="line">// page is full, use a new page</comment>
          <expr_stmt><expr><name>nNews</name><operator>++</operator></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>infoNews</name><index>[<expr><name>nNews</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+</operator> <name>cellBytes</name> <operator>&lt;=</operator> <call><name>TDB_PAGE_USABLE_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name>childNotLeaf</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// for non-child page, this cell is used as the right-most child,</comment>
            <comment type="line">// the divider cell to parent as well</comment>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>nNews</name></expr>]</index></name><operator>.</operator><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>nNews</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <name>cellBytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>nNews</name></expr>]</index></name><operator>.</operator><name>iPage</name> <operator>=</operator> <name>oPage</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>nNews</name></expr>]</index></name><operator>.</operator><name>oIdx</name> <operator>=</operator> <name>oIdx</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><name>nNews</name><operator>++</operator></expr>;</expr_stmt>

    <comment type="line">// back loop to make the distribution even</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>iNew</name> <init>= <expr><name>nNews</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iNew</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>iNew</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>szLCell</name></decl>, <decl><type ref="prev"/><name>szRCell</name></decl>;</decl_stmt>

      <comment type="line">// balance page (iNew) and (iNew-1)</comment>
      <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name><name>pOlds</name><index>[<expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iPage</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>oIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>szLCell</name> <operator>=</operator> <call><name>tdbBtreeCellSize</name><argument_list>(<argument><expr><name><name>pOlds</name><index>[<expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iPage</name></expr>]</index></name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>childNotLeaf</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>szRCell</name> <operator>=</operator> <name>szLCell</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type>    <name>iPage</name> <init>= <expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iPage</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type>    <name>oIdx</name> <init>= <expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>oIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
          <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name><name>pOlds</name><index>[<expr><name>iPage</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>oIdx</name> <operator>&lt;</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>iPage</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>oIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></for>

          <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>oIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>szRCell</name> <operator>=</operator> <call><name>tdbBtreeCellSize</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>infoNews</name><index>[<expr><name>iNew</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+</operator> <name>szRCell</name> <operator>&gt;=</operator> <name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>-</operator> <name>szRCell</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Move a cell right forward</comment>
        <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cnt</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>-=</operator> <name>szLCell</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>oIdx</name><operator>--</operator></expr>;</expr_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>oIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iPage</name><operator>--</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>oIdx</name> <operator>=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pOlds</name><index>[<expr><name><name>infoNews</name><index>[<expr><name>iNew</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iPage</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>iNew</name></expr>]</index></name><operator>.</operator><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infoNews</name><index>[<expr><name>iNew</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <name>szRCell</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block>

  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name><name>pNews</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <block>{<block_content>  <comment type="line">// Allocate new pages, reuse the old page when possible</comment>

    <decl_stmt><decl><type><name>SPgno</name></type>             <name>pgno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SBtreeInitPageArg</name></type> <name>iarg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name></type>                <name>flags</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_GET_FLAGS</name><argument_list>(<argument><expr><name><name>pOlds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>iNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iNew</name> <operator>&lt;</operator> <name>nNews</name></expr>;</condition> <incr><expr><name>iNew</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>iNew</name> <operator>&lt;</operator> <name>nOlds</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pNews</name><index>[<expr><name>iNew</name></expr>]</index></name> <operator>=</operator> <name><name>pOlds</name><index>[<expr><name>iNew</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>iarg</name><operator>.</operator><name>pBt</name></name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>iarg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerFetchPage</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><name>pNews</name> <operator>+</operator> <name>iNew</name></expr></argument>, <argument><expr><name>tdbBtreeInitPage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iarg</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerWrite</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name><name>pNews</name><index>[<expr><name>iNew</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// TODO: sort the page according to the page number</comment>
  </block_content>}</block>

  <block>{<block_content>  <comment type="line">// Do the real cell distribution</comment>
    <decl_stmt><decl><type><name>SPage</name>            <modifier>*</modifier></type><name><name>pOldsCopy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCell</name>            <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>               <name>szCell</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SBtreeInitPageArg</name></type> <name>iarg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>               <name>iNew</name></decl>, <decl><type ref="prev"/><name>nNewCells</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCellDecoder</name></type>      <name>cd</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>iarg</name><operator>.</operator><name>pBt</name></name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iarg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_GET_FLAGS</name><argument_list>(<argument><expr><name><name>pOlds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nOlds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbPageCreate</name><argument_list>(<argument><expr><name><name>pOlds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pageSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOldsCopy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbBtreeInitPage</name><argument_list>(<argument><expr><name><name>pOldsCopy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iarg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbPageCopy</name><argument_list>(<argument><expr><name><name>pOlds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pOldsCopy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOlds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nOverflow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>iNew</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nNewCells</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbBtreeInitPage</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><name>iNew</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iarg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>iOld</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iOld</name> <operator>&lt;</operator> <name>nOlds</name></expr>;</condition> <incr><expr><name>iOld</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name><name>pOldsCopy</name><index>[<expr><name>iOld</name></expr>]</index></name></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>oIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>oIdx</name> <operator>&lt;</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>oIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>oIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>szCell</name> <operator>=</operator> <call><name>tdbBtreeCellSize</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nNewCells</name> <operator>&lt;=</operator> <name><name>infoNews</name><index>[<expr><name>iNew</name></expr>]</index></name><operator>.</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iNew</name> <operator>&lt;</operator> <name>nNews</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>nNewCells</name> <operator>&lt;</operator> <name><name>infoNews</name><index>[<expr><name>iNew</name></expr>]</index></name><operator>.</operator><name>cnt</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tdbPageInsertCell</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><name>iNew</name></expr>]</index></name></expr></argument>, <argument><expr><name>nNewCells</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nNewCells</name><operator>++</operator></expr>;</expr_stmt>

          <comment type="line">// insert parent page</comment>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>childNotLeaf</name> <operator>&amp;&amp;</operator> <name>nNewCells</name> <operator>==</operator> <name><name>infoNews</name><index>[<expr><name>iNew</name></expr>]</index></name><operator>.</operator><name>cnt</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SIntHdr</name> <modifier>*</modifier></type><name>pIntHdr</name> <init>= <expr><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><name><name>pParent</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>iNew</name> <operator>==</operator> <name>nNews</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pIntHdr</name><operator>-&gt;</operator><name>pgno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pIntHdr</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><name>iNew</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><call><name>tdbBtreeDecodeCell</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <comment type="line">// TODO: pCell here may be inserted as an overflow cell, handle it</comment>
              <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pNewCell</name> <init>= <expr><call><name>tdbOsMalloc</name><argument_list>(<argument><expr><name><name>cd</name><operator>.</operator><name>kLen</name></name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>int</name></type>    <name>szNewCell</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>SPgno</name></type>  <name>pgno</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>pgno</name> <operator>=</operator> <call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><name>iNew</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>tdbBtreeEncodeCell</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>pKey</name></name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>kLen</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pNewCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szNewCell</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>,
                                 <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>tdbPageInsertCell</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>sIdx</name><operator>++</operator></expr></argument>, <argument><expr><name>pNewCell</name></expr></argument>, <argument><expr><name>szNewCell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pNewCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <if_stmt><if>if <condition>(<expr><call><name>TDB_CELLDECODER_FREE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>cd</name><operator>.</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cd</name><operator>.</operator><name>pVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// move to next new page</comment>
            <expr_stmt><expr><name>iNew</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>nNewCells</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>iNew</name> <operator>&lt;</operator> <name>nNews</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>tdbBtreeInitPage</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><name>iNew</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iarg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>childNotLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iNew</name> <operator>&lt;</operator> <name>nNews</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="line">// set current new page right-most child</comment>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><name><name>pNews</name><index>[<expr><name>iNew</name></expr>]</index></name><operator>-&gt;</operator><name>pData</name><operator>)</operator><operator>-&gt;</operator><name>pgno</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><name>pCell</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

          <comment type="line">// insert to parent as divider cell</comment>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iNew</name> <operator>&lt;</operator> <name>nNews</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><name>pCell</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><name>iNew</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tdbPageInsertCell</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>sIdx</name><operator>++</operator></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="line">// move to next new page</comment>
          <expr_stmt><expr><name>iNew</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>nNewCells</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>iNew</name> <operator>&lt;</operator> <name>nNews</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tdbBtreeInitPage</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><name>iNew</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iarg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>childNotLeaf</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><name>nNews</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>infoNews</name><index>[<expr><name>nNews</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pNews</name><index>[<expr><name>nNews</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>pData</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pgno</name> <operator>=</operator> <name>rPgno</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SIntHdr</name> <modifier>*</modifier></type><name>pIntHdr</name> <init>= <expr><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><name><name>pParent</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pIntHdr</name><operator>-&gt;</operator><name>pgno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pIntHdr</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><name>nNews</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><name><name>pDivCell</name><index>[<expr><name>nOlds</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><name>nNews</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbPageInsertCell</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>sIdx</name></expr></argument>, <argument><expr><name><name>pDivCell</name><index>[<expr><name>nOlds</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>szDivCell</name><index>[<expr><name>nOlds</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nOlds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbPageDestroy</name><argument_list>(<argument><expr><name><name>pOldsCopy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><call><name>TDB_BTREE_PAGE_IS_ROOT</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>i8</name></type> <name>flags</name> <init>= <expr><name>TDB_BTREE_ROOT</name> <operator>|</operator> <call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// copy content to the parent page</comment>
    <macro><name>tdbBtreeInitPage</name><argument_list>(<argument>pParent</argument>, <argument>&amp;(SBtreeInitPageArg){.flags = flags</argument>, <argument>.pBt = pBt}</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>tdbPageCopy</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pParent</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pNews</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pParent</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pgno</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pNews</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pData</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pgno</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pDivCell</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name><name>pDivCell</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>pageIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pageIdx</name> <operator>&lt;</operator> <name>nOlds</name></expr>;</condition> <incr><expr><operator>++</operator><name>pageIdx</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbPagerReturnPage</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name><name>pOlds</name><index>[<expr><name>pageIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init>;</init> <condition><expr><name>pageIdx</name> <operator>&lt;</operator> <name>nNews</name></expr>;</condition> <incr><expr><operator>++</operator><name>pageIdx</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbPagerReturnPage</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name><name>pNews</name><index>[<expr><name>pageIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeBalance</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>    <name>iPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>nFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pParent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>     <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>     <name>leaf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>     <name>root</name></decl>;</decl_stmt>

  <comment type="line">// Main loop to balance the BTree</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><name>iPage</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_IS_ROOT</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nFree</name> <operator>=</operator> <call><name>TDB_PAGE_FREE_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// when the page is not overflow and not too empty, the balance work</comment>
    <comment type="line">// is finished. Just break out the balance loop.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nFree</name> <operator>&lt;</operator> <call><name>TDB_PAGE_USABLE_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>iPage</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// For the root page, only balance when the page is overfull,</comment>
      <comment type="line">// ignore the case of empty</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtreeBalanceDeeper</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pBtc</name><operator>-&gt;</operator><name>pgStack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idxStack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pgStack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pgStack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// Generalized balance step</comment>
      <expr_stmt><expr><name>pParent</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pgStack</name><index>[<expr><name>iPage</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtreeBalanceNonRoot</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>pParent</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idxStack</name><index>[<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tdbPagerReturnPage</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pgStack</name><index>[<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="line">// TDB_BTREE_BALANCE</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbFetchOvflPage</name><parameter_list>(<parameter><decl><type><name>SPgno</name> <modifier>*</modifier></type><name>pPgno</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOfp</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pPgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SBtreeInitPageArg</name></type> <name>iArg</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>iArg</name><operator>.</operator><name>pBt</name></name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iArg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>TDB_FLAG_ADD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TDB_BTREE_OVFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerFetchPage</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name>pPgno</name></expr></argument>, <argument><expr><name>ppOfp</name></expr></argument>, <argument><expr><name>tdbBtreeInitPage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iArg</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// mark dirty</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerWrite</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ppOfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbPCacheRelease</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ppOfp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbLoadOvflPage</name><parameter_list>(<parameter><decl><type><name>SPgno</name> <modifier>*</modifier></type><name>pPgno</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOfp</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBtreeInitPageArg</name></type> <name>iArg</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>iArg</name><operator>.</operator><name>pBt</name></name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iArg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>TDB_FLAG_ADD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TDB_BTREE_OVFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerFetchPage</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name>pPgno</name></expr></argument>, <argument><expr><name>ppOfp</name></expr></argument>, <argument><expr><name>tdbBtreeInitPage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iArg</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TDB_BTREE_CELL =====================</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeEncodePayload</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHeader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>,
                                 <parameter><decl><type><name>int</name></type> <name>vLen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>szPayload</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPayload</name> <init>= <expr><name>kLen</name> <operator>+</operator> <name>vLen</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>maxLocal</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>maxLocal</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>nPayload</name> <operator>+</operator> <name>nHeader</name> <operator>&lt;=</operator> <name>maxLocal</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// no overflow page is needed</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pVal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name> <operator>+</operator> <name>kLen</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>szPayload</name> <operator>=</operator> <name>nPayload</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// handle overflow case</comment>
    <comment type="line">// calc local storage size</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>minLocal</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>minLocal</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>surplus</name> <init>= <expr><name>minLocal</name> <operator>+</operator> <operator>(</operator><name>nPayload</name> <operator>+</operator> <name>nHeader</name> <operator>-</operator> <name>minLocal</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>maxLocal</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nLocal</name> <init>= <expr><ternary><condition><expr><name>surplus</name> <operator>&lt;=</operator> <name>maxLocal</name></expr> ?</condition><then> <expr><name>surplus</name></expr> </then><else>: <expr><name>minLocal</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="line">// int ofpCap = tdbPageCapacity(pBt-&gt;pageSize, sizeof(SIntHdr));</comment>

    <comment type="line">// fetch a new ofp and make it dirty</comment>
    <decl_stmt><decl><type><name>SPgno</name></type>  <name>pgno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextOfp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbFetchOvflPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// local buffer for cell</comment>
    <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call><name>tdbRealloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nLeft</name> <init>= <expr><name>nPayload</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lastPage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nLocal</name> <operator>&gt;=</operator> <name>nHeader</name> <operator>+</operator> <name>kLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <comment type="line">// pack key to local</comment>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>kLen</name></expr>;</expr_stmt>
      <comment type="line">// pack partial val to local if any space left</comment>
      <if_stmt><if>if <condition>(<expr><name>nLocal</name> <operator>&gt;</operator> <name>nHeader</name> <operator>+</operator> <name>kLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pVal</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>vLen</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name> <operator>+</operator> <name>kLen</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nLocal</name> <operator>-</operator> <name>nHeader</name> <operator>-</operator> <name>kLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>nLocal</name> <operator>-</operator> <name>nHeader</name> <operator>-</operator> <name>kLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// pack nextPgno</comment>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name> <operator>+</operator> <name>nPayload</name> <operator>-</operator> <name>nLeft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// pack left val data to ovpages</comment>
      <do>do <block>{<block_content>
        <expr_stmt><expr><name>lastPage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nLeft</name> <operator>&lt;=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>nLeft</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>lastPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// fetch next ofp if not last page</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lastPage</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// fetch a new ofp and make it dirty</comment>
          <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbFetchOvflPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextOfp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SCell</name> <operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator> <operator>+</operator> <name>vLen</name> <operator>-</operator> <name>nLeft</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name> <operator>+</operator> <name>bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPageInsertCell</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bytes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ofp</name> <operator>=</operator> <name>nextOfp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><name>nLeft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nLeftKey</name> <init>= <expr><name>kLen</name></expr></init></decl>;</decl_stmt>
      <comment type="line">// pack partial key and nextPgno</comment>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nLocal</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>nLocal</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLeftKey</name> <operator>-=</operator> <name>nLocal</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name> <operator>+</operator> <name>nLocal</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>lastKeyPageSpace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">// pack left key &amp; val to ovpages</comment>
      <do>do <block>{<block_content>
        <comment type="line">// cal key to cpy</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>lastKeyPage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nLeftKey</name> <operator>&lt;=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>nLeftKey</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>lastKeyPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>lastKeyPageSpace</name> <operator>=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>nLeftKey</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// cpy key</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SCell</name> <operator>*</operator><operator>)</operator><name>pKey</name><operator>)</operator> <operator>+</operator> <name>kLen</name> <operator>-</operator> <name>nLeftKey</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>lastKeyPage</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>lastKeyPageSpace</name> <operator>&gt;=</operator> <name>vLen</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name> <operator>+</operator> <name>kLen</name> <operator>-</operator> <name>nLeftKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>vLen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name> <operator>+</operator> <name>kLen</name> <operator>-</operator> <name>nLeftKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>lastKeyPageSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>lastKeyPageSpace</name></expr>;</expr_stmt>

            <comment type="line">// fetch next ofp, a new ofp and make it dirty</comment>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbFetchOvflPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextOfp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <comment type="line">// fetch next ofp, a new ofp and make it dirty</comment>
          <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbFetchOvflPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextOfp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name> <operator>+</operator> <name>kLen</name> <operator>-</operator> <name>nLeft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPageInsertCell</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bytes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ofp</name> <operator>=</operator> <name>nextOfp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLeftKey</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><name>nLeftKey</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

      <while>while <condition>(<expr><name>nLeft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// pack left val data to ovpages</comment>
        <expr_stmt><expr><name>lastPage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nLeft</name> <operator>&lt;=</operator> <name>maxLocal</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>nLeft</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>lastPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>maxLocal</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// fetch next ofp if not last page</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lastPage</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// fetch a new ofp and make it dirty</comment>
          <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbFetchOvflPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextOfp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SCell</name> <operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator> <operator>+</operator> <name>vLen</name> <operator>-</operator> <name>nLeft</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name> <operator>+</operator> <name>bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ofp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPageInsertCell</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bytes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ofp</name> <operator>=</operator> <name>nextOfp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// free local buffer</comment>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>szPayload</name> <operator>=</operator> <name>nLocal</name> <operator>-</operator> <name>nHeader</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeEncodeCell</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vLen</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>,
                              <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>szCell</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>u8</name></type>  <name>leaf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nHeader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPayload</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name> <operator>==</operator> <name>TDB_VARIANT_LEN</name> <operator>||</operator> <name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name> <operator>==</operator> <name>kLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>==</operator> <name>TDB_VARIANT_LEN</name> <operator>||</operator> <name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>==</operator> <name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pKey</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>kLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nPayload</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>nHeader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 1. Encode Header part</comment>
  <comment type="block">/* Encode SPgno if interior page */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>leaf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>pCell</name> <operator>+</operator> <name>nHeader</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><name>nHeader</name> <operator>=</operator> <name>nHeader</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Encode kLen if need */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name> <operator>==</operator> <name>TDB_VARIANT_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nHeader</name> <operator>+=</operator> <call><name>tdbPutVarInt</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Encode vLen if need */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>==</operator> <name>TDB_VARIANT_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nHeader</name> <operator>+=</operator> <call><name>tdbPutVarInt</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// 2. Encode payload part</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>leaf</name><operator>)</operator> <operator>||</operator> <name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pVal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtreeEncodePayload</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>nHeader</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPayload</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>szCell</name> <operator>=</operator> <name>nHeader</name> <operator>+</operator> <name>nPayload</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeDecodePayload</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHeader</name></decl></parameter>, <parameter><decl><type><name>SCellDecoder</name> <modifier>*</modifier></type><name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>,
                                 <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPayload</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>maxLocal</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>maxLocal</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>kLen</name> <init>= <expr><name><name>pDecoder</name><operator>-&gt;</operator><name>kLen</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>vLen</name> <init>= <expr><name><name>pDecoder</name><operator>-&gt;</operator><name>vLen</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nPayload</name> <operator>=</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>kLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>nPayload</name> <operator>=</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>kLen</name></name> <operator>+</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>vLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>nHeader</name> <operator>+</operator> <name>nPayload</name> <operator>&lt;=</operator> <name>maxLocal</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// no over flow case</comment>
    <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <operator>(</operator><name>SCell</name> <operator>*</operator><operator>)</operator><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>vLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>=</operator> <operator>(</operator><name>SCell</name> <operator>*</operator><operator>)</operator><name>pCell</name> <operator>+</operator> <name>nHeader</name> <operator>+</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>kLen</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// handle overflow case</comment>
    <comment type="line">// calc local storage size</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>minLocal</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>minLocal</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>surplus</name> <init>= <expr><name>minLocal</name> <operator>+</operator> <operator>(</operator><name>nPayload</name> <operator>+</operator> <name>nHeader</name> <operator>-</operator> <name>minLocal</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>maxLocal</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nLocal</name> <init>= <expr><ternary><condition><expr><name>surplus</name> <operator>&lt;=</operator> <name>maxLocal</name></expr> ?</condition><then> <expr><name>surplus</name></expr> </then><else>: <expr><name>minLocal</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type>    <name>nLeft</name> <init>= <expr><name>nPayload</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SPgno</name></type>  <name>pgno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>ofp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>ofpCell</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>lastPage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nLocal</name> <operator>&gt;=</operator> <name><name>pDecoder</name><operator>-&gt;</operator><name>kLen</name></name> <operator>+</operator> <name>nHeader</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <operator>(</operator><name>SCell</name> <operator>*</operator><operator>)</operator><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>kLen</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>nLocal</name> <operator>&gt;</operator> <name>kLen</name> <operator>+</operator> <name>nHeader</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <comment type="line">// read partial val to local</comment>
        <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>TDB_CELLDECODER_SET_FREE_VAL</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tdbDebug</name><argument_list>(<argument><expr><literal type="string">"tdb btc decoder: %p/0x%x pVal: %p "</literal></expr></argument>, <argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>freeKV</name></name></expr></argument>, <argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name> <operator>+</operator> <name>kLen</name></expr></argument>, <argument><expr><name>nLocal</name> <operator>-</operator> <name>nHeader</name> <operator>-</operator> <name>kLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>nLocal</name> <operator>-</operator> <name>nHeader</name> <operator>-</operator> <name>kLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name> <operator>+</operator> <name>nPayload</name> <operator>-</operator> <name>nLeft</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// unpack left val data from ovpages</comment>
      <while>while <condition>(<expr><name>pgno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbLoadOvflPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ofpCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>nLeft</name> <operator>&lt;=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>nLeft</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>lastPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>+</operator> <name>vLen</name> <operator>-</operator> <name>nLeft</name></expr></argument>, <argument><expr><name>ofpCell</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><name>ofpCell</name> <operator>+</operator> <name>bytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tdbPCacheRelease</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nLeftKey</name> <init>= <expr><name>kLen</name></expr></init></decl>;</decl_stmt>
      <comment type="line">// load partial key and nextPgno</comment>
      <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pKey</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>TDB_CELLDECODER_SET_FREE_KEY</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr></argument>, <argument><expr><name>nLocal</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>nLocal</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLeftKey</name> <operator>-=</operator> <name>nLocal</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name> <operator>+</operator> <name>nLocal</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>lastKeyPageSpace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">// load left key &amp; val to ovpages</comment>
      <while>while <condition>(<expr><name>pgno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbLoadOvflPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ofpCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>lastKeyPage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nLeftKey</name> <operator>&lt;=</operator> <name>maxLocal</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>nLeftKey</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>lastKeyPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>lastKeyPageSpace</name> <operator>=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>nLeftKey</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// cpy key</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pKey</name></name> <operator>+</operator> <name>kLen</name> <operator>-</operator> <name>nLeftKey</name></expr></argument>, <argument><expr><name>ofpCell</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>lastKeyPage</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>lastKeyPageSpace</name> <operator>&gt;=</operator> <name>vLen</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>=</operator> <name>ofpCell</name> <operator>+</operator> <name>kLen</name> <operator>-</operator> <name>nLeftKey</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>vLen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// read partial val to local</comment>
            <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
              <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>TDB_CELLDECODER_SET_FREE_VAL</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><name>ofpCell</name> <operator>+</operator> <name>kLen</name> <operator>-</operator> <name>nLeftKey</name></expr></argument>, <argument><expr><name>lastKeyPageSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>lastKeyPageSpace</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><name>ofpCell</name> <operator>+</operator> <name>bytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tdbPCacheRelease</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>nLeftKey</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block></while>

      <while>while <condition>(<expr><name>nLeft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbLoadOvflPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ofpCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// load left val data to ovpages</comment>
        <expr_stmt><expr><name>lastPage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nLeft</name> <operator>&lt;=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>nLeft</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>lastPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>lastPage</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>TDB_CELLDECODER_SET_FREE_VAL</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><name>ofpCell</name> <operator>+</operator> <name>vLen</name> <operator>-</operator> <name>nLeft</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><name>ofpCell</name> <operator>+</operator> <name>vLen</name> <operator>-</operator> <name>nLeft</name> <operator>+</operator> <name>bytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tdbPCacheRelease</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeDecodeCell</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>SCellDecoder</name> <modifier>*</modifier></type><name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>u8</name></type>  <name>leaf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nHeader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nHeader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Clear the state of decoder</comment>
  <if_stmt><if>if <condition>(<expr><call><name>TDB_CELLDECODER_FREE_VAL</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>kLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>vLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_CELLDECODER_SET_FREE_NIL</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// tdbTrace("tdb btc decoder set nil: %p/0x%x ", pDecoder, pDecoder-&gt;freeKV);</comment>

  <comment type="line">// 1. Decode header part</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>leaf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>pCell</name> <operator>+</operator> <name>nHeader</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>pVal</name></name> <operator>=</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>pDecoder</name><operator>-&gt;</operator><name>pgno</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>nHeader</name> <operator>=</operator> <name>nHeader</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name> <operator>==</operator> <name>TDB_VARIANT_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nHeader</name> <operator>+=</operator> <call><name>tdbGetVarInt</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pDecoder</name><operator>-&gt;</operator><name>kLen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>kLen</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>==</operator> <name>TDB_VARIANT_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nHeader</name> <operator>+=</operator> <call><name>tdbGetVarInt</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pDecoder</name><operator>-&gt;</operator><name>vLen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pDecoder</name><operator>-&gt;</operator><name>vLen</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// 2. Decode payload part</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtreeDecodePayload</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>nHeader</name></expr></argument>, <argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtreeCellSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dropOfp</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>u8</name></type>  <name>leaf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nHeader</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>leaf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nHeader</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name> <operator>==</operator> <name>TDB_VARIANT_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nHeader</name> <operator>+=</operator> <call><name>tdbGetVarInt</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>kLen</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>==</operator> <name>TDB_VARIANT_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nHeader</name> <operator>+=</operator> <call><name>tdbGetVarInt</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>nHeader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>leaf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>vLen</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>nPayload</name> <init>= <expr><name>kLen</name> <operator>+</operator> <name>vLen</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nHeader</name> <operator>+</operator> <name>nPayload</name> <operator>&lt;=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>maxLocal</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>nHeader</name> <operator>+</operator> <name>nPayload</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>maxLocal</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>maxLocal</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// calc local storage size</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>minLocal</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>minLocal</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>surplus</name> <init>= <expr><name>minLocal</name> <operator>+</operator> <operator>(</operator><name>nPayload</name> <operator>+</operator> <name>nHeader</name> <operator>-</operator> <name>minLocal</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>maxLocal</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nLocal</name> <init>= <expr><ternary><condition><expr><name>surplus</name> <operator>&lt;=</operator> <name>maxLocal</name></expr> ?</condition><then> <expr><name>surplus</name></expr> </then><else>: <expr><name>minLocal</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="line">// free ofp pages' cells</comment>
    <if_stmt><if>if <condition>(<expr><name>dropOfp</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type>    <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SPgno</name></type>  <name>pgno</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>pCell</name> <operator>+</operator> <name>nLocal</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>nLeft</name> <init>= <expr><name>nPayload</name> <operator>-</operator> <name>nLocal</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nHeader</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>ofp</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>bytes</name></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>pgno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbLoadOvflPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>ofpCell</name> <init>= <expr><call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>nLeft</name> <operator>&lt;=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>nLeft</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <name><name>ofp</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPgno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><name>ofpCell</name> <operator>+</operator> <name>bytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tdbPagerReturnPage</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>nLeft</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>nLocal</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="line">// TDB_BTREE_CELL</comment>

<comment type="line">// TDB_BTREE_CURSOR =====================</comment>
<function><type><name>int</name></type> <name>tdbBtcOpen</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBtc</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCellDecoder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTxn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name> <init>= <expr><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pTxn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTxn</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tdbTxnOpen</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name> <operator>=</operator> <name>pTxn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>freeTxn</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name> <operator>=</operator> <name>pTxn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>freeTxn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtcMoveToFirst</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name>  <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>   <name>pgno</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pBt</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pPager</name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// move a clean cursor</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <macro><name>tdbPagerFetchPage</name><argument_list>(<argument>pPager</argument>, <argument>&amp;pBt-&gt;root</argument>, <argument>&amp;(pBtc-&gt;pPage)</argument>, <argument>tdbBtreeInitPage</argument>,
                            <argument>&amp;((SBtreeInitPageArg){.pBt = pBt, .flags = TDB_BTREE_ROOT | TDB_BTREE_LEAF})</argument>, <argument>pBtc-&gt;pTxn</argument>)</argument_list></macro></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TDB_BTREE_PAGE_IS_ROOT</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// no any data, point to an invalid position</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    <comment type="line">// move from a position</comment>
    int iPage = 0;

    for (; iPage &lt; pBtc-&gt;iPage; iPage++) {
      ASSERT(pBtc-&gt;idxStack[iPage] &gt;= 0);
      if (pBtc-&gt;idxStack[iPage]) break;
    }

    <comment type="line">// move upward</comment>
    for (;;) {
      if (pBtc-&gt;iPage == iPage) {
        pBtc-&gt;idx = 0;
        break;
      }

      tdbBtcMoveUpward(pBtc);
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// move downward</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcMoveDownward</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtcMoveToLast</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>nCells</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>   <name>pgno</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pBt</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pPager</name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// move a clean cursor</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <macro><name>tdbPagerFetchPage</name><argument_list>(<argument>pPager</argument>, <argument>&amp;pBt-&gt;root</argument>, <argument>&amp;(pBtc-&gt;pPage)</argument>, <argument>tdbBtreeInitPage</argument>,
                            <argument>&amp;((SBtreeInitPageArg){.pBt = pBt, .flags = TDB_BTREE_ROOT | TDB_BTREE_LEAF})</argument>, <argument>pBtc-&gt;pTxn</argument>)</argument_list></macro></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>nCells</name> <operator>=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nCells</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <ternary><condition><expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>nCells</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>nCells</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// no data at all, point to an invalid position</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    int iPage = 0;

    <comment type="line">// downward search</comment>
    for (; iPage &lt; pBtc-&gt;iPage; iPage++) {
      ASSERT(!TDB_BTREE_PAGE_IS_LEAF(pBtc-&gt;pgStack[iPage]));
      nCells = TDB_PAGE_TOTAL_CELLS(pBtc-&gt;pgStack[iPage]);
      if (pBtc-&gt;idxStack[iPage] != nCells) break;
    }

    <comment type="line">// move upward</comment>
    for (;;) {
      if (pBtc-&gt;iPage == iPage) {
        if (TDB_BTREE_PAGE_IS_LEAF(pBtc-&gt;pPage)) {
          pBtc-&gt;idx = TDB_PAGE_TOTAL_CELLS(pBtc-&gt;pPage) - 1;
        } else {
          pBtc-&gt;idx = TDB_PAGE_TOTAL_CELLS(pBtc-&gt;pPage);
        }
        break;
      }

      tdbBtcMoveUpward(pBtc);
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// move downward</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcMoveDownward</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>nCells</name> <operator>=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>nCells</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>nCells</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtreeNext</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCell</name>       <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCellDecoder</name></type> <name>cd</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>pKey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>ret</name></decl>;</decl_stmt>

  <comment type="line">// current cursor points to an invalid position</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbBtreeDecodeCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pKey</name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><operator>*</operator><name>ppKey</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>kLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pKey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppKey</name> <operator>=</operator> <name>pKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>kLen</name> <operator>=</operator> <name><name>cd</name><operator>.</operator><name>kLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>pKey</name></name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>kLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ppVal</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>.</operator><name>vLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><operator>*</operator><name>ppVal</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>pVal</name></name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pVal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>ppVal</name> <operator>=</operator> <name>pVal</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>vLen</name> <operator>=</operator> <name><name>cd</name><operator>.</operator><name>vLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcMoveToNext</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtreePrev</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCell</name>       <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCellDecoder</name></type> <name>cd</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>pKey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>ret</name></decl>;</decl_stmt>

  <comment type="line">// current cursor points to an invalid position</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbBtreeDecodeCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pKey</name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><operator>*</operator><name>ppKey</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>kLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pKey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppKey</name> <operator>=</operator> <name>pKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>kLen</name> <operator>=</operator> <name><name>cd</name><operator>.</operator><name>kLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>pKey</name></name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>kLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ppVal</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO: vLen may be zero</comment>
    <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><operator>*</operator><name>ppVal</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>ppVal</name> <operator>=</operator> <name>pVal</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>vLen</name> <operator>=</operator> <name><name>cd</name><operator>.</operator><name>vLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>pVal</name></name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcMoveToPrev</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtcMoveToNext</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>    <name>nCells</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// move upward</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tdbBtcMoveUpward</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// move downward</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtcMoveDownward</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtcMoveToPrev</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// move upward</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tdbBtcMoveUpward</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// move downward</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>tdbBtcMoveDownward</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtcMoveDownward</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>  <name>pgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgno</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><name>pCell</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pgno</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SIntHdr</name> <operator>*</operator><operator>)</operator><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>-&gt;</operator><name>pgno</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pgStack</name><index>[<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr>]</index></name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idxStack</name><index>[<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr>]</index></name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <macro><name>tdbPagerFetchPage</name><argument_list>(<argument>pBtc-&gt;pBt-&gt;pPager</argument>, <argument>&amp;pgno</argument>, <argument>&amp;pBtc-&gt;pPage</argument>, <argument>tdbBtreeInitPage</argument>,
                          <argument>&amp;((SBtreeInitPageArg){.pBt = pBtc-&gt;pBt, .flags = <literal type="number">0</literal>})</argument>, <argument>pBtc-&gt;pTxn</argument>)</argument_list></macro></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbBtcMoveUpward</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbPagerReturnPage</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pgStack</name><index>[<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>idxStack</name><index>[<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr>]</index></name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtcGet</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbPageGetCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbBtreeDecodeCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBtc</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ppKey</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppKey</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pBtc</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>pKey</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>kLen</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>kLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ppVal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppVal</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pBtc</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>pVal</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>vLen</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>vLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtcDelete</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>idx</name> <init>= <expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nCells</name> <init>= <expr><call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPager</name>     <modifier>*</modifier></type><name>pPager</name> <init>= <expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i8</name></type>          <name>iPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name>      <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>       <name>pgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name>      <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>szCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name>nCells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// drop the cell on the leaf</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerWrite</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbPageDropCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update interior page or do balance</comment>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>nCells</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbBtcGet</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// loop to update the interial page</comment>
      <expr_stmt><expr><name>pgno</name> <operator>=</operator> <call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>iPage</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>iPage</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>iPage</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pgStack</name><index>[<expr><name>iPage</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>idxStack</name><index>[<expr><name>iPage</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nCells</name> <operator>=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>nCells</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerWrite</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>

          <comment type="line">// update the cell with new key</comment>
          <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>tdbOsMalloc</name><argument_list>(<argument><expr><name>nKey</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tdbBtreeEncodeCell</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szCell</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPageUpdateCell</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pgno</name> <operator>=</operator> <call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// delete the leaf page and do balance</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtreeBalance</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtcUpsert</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>insert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>szCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>nCells</name> <init>= <expr><call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>szBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>  <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// alloc space</comment>
  <expr_stmt><expr><name>szBuf</name> <operator>=</operator> <name>kLen</name> <operator>+</operator> <name>nData</name> <operator>+</operator> <literal type="number">14</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name>tdbRealloc</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>&gt;</operator> <name>szBuf</name></expr> ?</condition><then> <expr><name>szBuf</name></expr> </then><else>: <expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pageSize</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCell</name> <operator>=</operator> <operator>(</operator><name>SCell</name> <operator>*</operator><operator>)</operator><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBuf</name></name></expr>;</expr_stmt>

  <comment type="line">// encode cell</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtreeEncodeCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szCell</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// mark dirty</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerWrite</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// insert or update</comment>
  <if_stmt><if>if <condition>(<expr><name>insert</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;=</operator> <name>nCells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPageInsertCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <name>nCells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPageUpdateCell</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// check balance</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtreeBalance</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtcMoveTo</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pCRst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nCells</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name>      <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBTree</name>     <modifier>*</modifier></type><name>pBt</name> <init>= <expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPager</name>     <modifier>*</modifier></type><name>pPager</name> <init>= <expr><name><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pTKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>tkLen</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb moveto, pager:%p, ipage:%d"</literal></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// move from a clear cursor</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <macro><name>tdbPagerFetchPage</name><argument_list>(<argument>pPager</argument>, <argument>&amp;pBt-&gt;root</argument>, <argument>&amp;(pBtc-&gt;pPage)</argument>, <argument>tdbBtreeInitPage</argument>,
                            <argument>&amp;((SBtreeInitPageArg){.pBt = pBt, .flags = TDB_BTREE_ROOT | TDB_BTREE_LEAF})</argument>, <argument>pBtc-&gt;pTxn</argument>)</argument_list></macro></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <comment type="line">// for empty tree, just return with an invalid position</comment>
    <if_stmt><if>if <condition>(<expr><call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    SPage *pPage;
    int    idx;
    int    iPage = 0;

    <comment type="line">// downward search</comment>
    for (; iPage &lt; pBtc-&gt;iPage; iPage++) {
      pPage = pBtc-&gt;pgStack[iPage];
      idx = pBtc-&gt;idxStack[iPage];
      nCells = TDB_PAGE_TOTAL_CELLS(pPage);

      ASSERT(!TDB_BTREE_PAGE_IS_LEAF(pPage));

      <comment type="line">// check if key &lt;= current position</comment>
      if (idx &lt; nCells) {
        pCell = tdbPageGetCell(pPage, idx);
        tdbBtreeDecodeCell(pPage, pCell, &amp;cd);
        c = pBt-&gt;kcmpr(pKey, kLen, cd.pKey, cd.kLen);
        if (c &gt; 0) break;
      }

      <comment type="line">// check if key &gt; current - 1 position</comment>
      if (idx &gt; 0) {
        pCell = tdbPageGetCell(pPage, idx - 1);
        tdbBtreeDecodeCell(pPage, pCell, &amp;cd);
        c = pBt-&gt;kcmpr(pKey, kLen, cd.pKey, cd.kLen, pBtc-&gt;pTxn, pBtc-&gt;pBt);
        if (c &lt;= 0) break;
      }
    }

    <comment type="line">// move upward</comment>
    for (;;) {
      if (pBtc-&gt;iPage == iPage) break;
      tdbBtcMoveUpward(pBtc);
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// search downward to the leaf</comment>
  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb search downward, pager:%p, ipage:%d"</literal></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>    <name>lidx</name></decl>, <decl><type ref="prev"/><name>ridx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nCells</name> <operator>=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>nCells</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nCells</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// compare first cell</comment>
    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>lidx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbBtcGet</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tkLen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>pBt</name><operator>-&gt;</operator><name>kcmpr</name></name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>pTKey</name></expr></argument>, <argument><expr><name>tkLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>lidx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>lidx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// compare last cell</comment>
    <if_stmt><if>if <condition>(<expr><name>lidx</name> <operator>&lt;=</operator> <name>ridx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>ridx</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbBtcGet</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tkLen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>pBt</name><operator>-&gt;</operator><name>kcmpr</name></name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>pTKey</name></expr></argument>, <argument><expr><name>tkLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>ridx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>ridx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// binary search</comment>
    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb binary search, pager:%p, ipage:%d"</literal></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>lidx</name> <operator>&gt;</operator> <name>ridx</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

      <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>(</operator><name>lidx</name> <operator>+</operator> <name>ridx</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbBtcGet</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tkLen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>pBt</name><operator>-&gt;</operator><name>kcmpr</name></name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>pTKey</name></expr></argument>, <argument><expr><name>tkLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// pKey &lt; cd.pKey</comment>
        <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// pKey &gt; cd.pKey</comment>
        <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// pKey == cd.pKey</comment>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// keep search downward or break</comment>
    <if_stmt><if>if <condition>(<expr><call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pCRst</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tdbBtcMoveDownward</name><argument_list>(<argument><expr><name>pBtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb moveto end, pager:%p, ipage:%d"</literal></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtcClose</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbPagerReturnPage</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pPage</name></name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>pgStack</name><index>[<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>pBtc</name><operator>-&gt;</operator><name>idxStack</name><index>[<expr><name><name>pBtc</name><operator>-&gt;</operator><name>iPage</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>TDB_CELLDECODER_FREE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBtc</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbDebug</name><argument_list>(<argument><expr><literal type="string">"tdb btc/close decoder: %p pVal free: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBtc</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>freeTxn</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTxnClose</name><argument_list>(<argument><expr><name><name>pBtc</name><operator>-&gt;</operator><name>pTxn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbBtcIsValid</name><parameter_list>(<parameter><decl><type><name>SBTC</name> <modifier>*</modifier></type><name>pBtc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBtc</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="line">// TDB_BTREE_CURSOR</comment>

<comment type="line">// TDB_BTREE_DEBUG =====================</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NODEBUG</name></cpp:ifndef>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SPgno</name></type> <name>pgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>    <name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>    <name>leaf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type> <name>rChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>nCells</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>nOvfl</name></decl>;</decl_stmt>
}</block></struct></type> <name>SBtPageInfo</name>;</typedef>

<decl_stmt><decl><type><name>SBtPageInfo</name></type> <name><name>btPageInfos</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>tdbBtPageInfo</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBtPageInfo</name> <modifier>*</modifier></type><name>pBtPageInfo</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pBtPageInfo</name> <operator>=</operator> <name>btPageInfos</name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBtPageInfo</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBtPageInfo</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_IS_ROOT</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtPageInfo</name><operator>-&gt;</operator><name>leaf</name></name> <operator>=</operator> <call><name>TDB_BTREE_PAGE_IS_LEAF</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBtPageInfo</name><operator>-&gt;</operator><name>rChild</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBtPageInfo</name><operator>-&gt;</operator><name>leaf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBtPageInfo</name><operator>-&gt;</operator><name>rChild</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBtPageInfo</name><operator>-&gt;</operator><name>nCells</name></name> <operator>=</operator> <call><name>TDB_PAGE_TOTAL_CELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBtPageInfo</name><operator>-&gt;</operator><name>nOvfl</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="line">// TDB_BTREE_DEBUG</comment>
</unit>
