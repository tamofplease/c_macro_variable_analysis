<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/tdb/src/db/tdbPager.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbInt.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>u8</name></type>    <name><name>hdrString</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type>   <name>pageSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type> <name>freePage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type>   <name>nFreePages</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>    <name><name>reserved</name><index>[<expr><literal type="number">102</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SFileHdr</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<expr_stmt><expr><call><name>TDB_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFileHdr</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"Size of file header is not correct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>hashset_st</name> <block>{
  <decl_stmt><decl><type><name>size_t</name></type>  <name>nbits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>mask</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>capacity</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>nitems</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>load_factor</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>prime</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>prime2</name> <init>= <expr><literal type="number">5009</literal></expr></init></decl>;</decl_stmt>

<function><type><name>hashset_t</name></type> <name>hashset_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>hashset_t</name></type> <name>set</name> <init>= <expr><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hashset_st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>set</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>nbits</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>nbits</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>tdbOsCalloc</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>set</name><operator>-&gt;</operator><name>items</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>nitems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>load_factor</name></name> <operator>=</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>

  <return>return <expr><name>set</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hashset_destroy</name><parameter_list>(<parameter><decl><type><name>hashset_t</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>hashset_add_member</name><parameter_list>(<parameter><decl><type><name>hashset_t</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>item</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>h</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>prime</name> <operator>*</operator> <name>value</name><operator>)</operator></expr>;</init> <condition><expr><name><name>set</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>h</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>h</name> <operator>+</operator> <name>prime2</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>h</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>set</name><operator>-&gt;</operator><name>nitems</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>hashset_add</name><parameter_list>(<parameter><decl><type><name>hashset_t</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>hashset_add_member</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>old_capacity</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>nitems</name></name> <operator>&gt;=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>old_capacity</name> <operator>*</operator> <name><name>set</name><operator>-&gt;</operator><name>load_factor</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>old_items</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>items</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>set</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>nbits</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>tdbOsCalloc</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>set</name><operator>-&gt;</operator><name>items</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>nitems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>old_capacity</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>hashset_add_member</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>old_items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>old_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>hashset_remove</name><parameter_list>(<parameter><decl><type><name>hashset_t</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>item</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>h</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>prime</name> <operator>*</operator> <name>value</name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name><name>set</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>h</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>h</name> <operator>+</operator> <name>prime2</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>h</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name><name>set</name><operator>-&gt;</operator><name>nitems</name></name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>hashset_contains</name><parameter_list>(<parameter><decl><type><name>hashset_t</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>item</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>h</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>prime</name> <operator>*</operator> <name>value</name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name><name>set</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>h</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>h</name> <operator>+</operator> <name>prime2</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>h</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_INITIALIZED</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((pPage)-&gt;pPager != NULL)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbPagerInitPage</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>initPage</name>)<parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
                            <parameter><decl><type><name>u8</name></type> <name>loadPage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbPagerWritePageToJournal</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbPagerPWritePageToDB</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>pageCmpFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPageL</name> <init>= <expr><operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>lhs</name><operator>)</operator> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>SPage</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPageR</name> <init>= <expr><operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>rhs</name><operator>)</operator> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>SPage</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SPgno</name></type> <name>pgnoL</name> <init>= <expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPageL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type> <name>pgnoR</name> <init>= <expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPageR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pgnoL</name> <operator>&lt;</operator> <name>pgnoR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pgnoL</name> <operator>&gt;</operator> <name>pgnoR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerOpen</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>SPager</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPager</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPager</name>  <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>fsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>zsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppPager</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>fsize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pPager</name></expr></argument>)</argument_list></sizeof>  <comment type="block">/* SPager */</comment>
          <operator>+</operator> <name>fsize</name> <operator>+</operator> <literal type="number">1</literal>      <comment type="block">/* dbFileName */</comment>
          <operator>+</operator> <name>fsize</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* jFileName */</comment>
  <expr_stmt><expr><name>pPtr</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pPtr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pPager</name> <operator>=</operator> <operator>(</operator><name>SPager</name> <operator>*</operator><operator>)</operator><name>pPtr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pPtr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pPager</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <comment type="line">// pPager-&gt;dbFileName</comment>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pPtr</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name><index>[<expr><name>fsize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pPtr</name> <operator>+=</operator> <name>fsize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <comment type="line">// pPager-&gt;jFileName</comment>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pPtr</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name> <operator>+</operator> <name>fsize</name></expr></argument>, <argument><expr><literal type="string">"-journal"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name><index>[<expr><name>fsize</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <comment type="line">// pPager-&gt;pCache</comment>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name> <operator>=</operator> <name>pCache</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>tdbOsOpen</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>, <argument><expr><name>TDB_O_CREAT</name> <operator>|</operator> <name>TDB_O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>TDB_FD_INVALID</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// if (pPager-&gt;fd &lt; 0) {</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbGnrtFileID</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pPager-&gt;jfd = -1;</comment>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>=</operator> <call><name>tdbPCacheGetPageSize</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// pPager-&gt;dbOrigSize</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbGetFileSize</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileSize</name></name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pager/open reset dirty tree: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tRBTreeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><name>pageCmpFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppPager</name> <operator>=</operator> <name>pPager</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerClose</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pPager</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/*
    if (pPager-&gt;inTran) {
      tdbOsClose(pPager-&gt;jfd);
    }
    */</comment>
    <expr_stmt><expr><call><name>tdbOsClose</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerWrite</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPage</name></decl>;</decl_stmt>

  <comment type="line">// ASSERT(pPager-&gt;inTran);</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>isDirty</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// ref page one more time so the page will not be release</comment>
  <expr_stmt><expr><call><name>tdbRefPage</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pager/mdirty page %p/%d/%d"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Set page as dirty</comment>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>isDirty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <comment type="block">/*
  // Add page to dirty list(TODO: NOT use O(n^2) algorithm)
  for (ppPage = &amp;pPager-&gt;pDirty; (*ppPage) &amp;&amp; TDB_PAGE_PGNO(*ppPage) &lt; TDB_PAGE_PGNO(pPage);
       ppPage = &amp;((*ppPage)-&gt;pDirtyNext)) {
  }

  if (*ppPage &amp;&amp; TDB_PAGE_PGNO(*ppPage) == TDB_PAGE_PGNO(pPage)) {
    tdbUnrefPage(pPage);

    return 0;
  }

  ASSERT(*ppPage == NULL || TDB_PAGE_PGNO(*ppPage) &gt; TDB_PAGE_PGNO(pPage));
  pPage-&gt;pDirtyNext = *ppPage;
  *ppPage = pPage;
  */</comment>
  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"put page: %p %d to dirty tree: %p"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tRBTreePut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Write page to journal if neccessary</comment>
  <if_stmt><if>if <condition>(<expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>pPager</name><operator>-&gt;</operator><name>pActiveTxn</name><operator>-&gt;</operator><name>jPageSet</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
       <operator>!</operator><call><name>hashset_contains</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pActiveTxn</name><operator>-&gt;</operator><name>jPageSet</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerWritePageToJournal</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page to journal since %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pPager</name><operator>-&gt;</operator><name>pActiveTxn</name><operator>-&gt;</operator><name>jPageSet</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>hashset_add</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pActiveTxn</name><operator>-&gt;</operator><name>jPageSet</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerBegin</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/*
  if (pPager-&gt;inTran) {
    return 0;
  }
  */</comment>
  <comment type="line">// Open the journal</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>jTxnFileName</name><index>[<expr><name>TDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>jTxnFileName</name></expr></argument>, <argument><expr><literal type="string">"%s.%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTxn</name><operator>-&gt;</operator><name>jfd</name></name> <operator>=</operator> <call><name>tdbOsOpen</name><argument_list>(<argument><expr><name>jTxnFileName</name></expr></argument>, <argument><expr><name>TDB_O_CREAT</name> <operator>|</operator> <name>TDB_O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>TDB_FD_INVALID</name><argument_list>(<argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>jfd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to open file due to %s. jFileName:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTxn</name><operator>-&gt;</operator><name>jPageSet</name></name> <operator>=</operator> <call><name>hashset_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>pActiveTxn</name></name> <operator>=</operator> <name>pTxn</name></expr>;</expr_stmt>
  <comment type="line">// TODO: write the size of the file</comment>
  <comment type="block">/*
  pPager-&gt;inTran = 1;
  */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerCommit</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>

  <comment type="line">// sync the journal file</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOsFSync</name><argument_list>(<argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>jfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to fsync: %s. jFileName:%s, %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// loop to write the dirty pages to file</comment>
  <decl_stmt><decl><type><name>SRBTreeIter</name></type>  <name>iter</name> <init>= <expr><call><name>tRBTreeIterCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pNode</name> <operator>=</operator> <call><name>tRBTreeIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerPWritePageToDB</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page to db since %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbttl commit:%p, %d/%d"</literal></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>dbFileSize</name></name></expr>;</expr_stmt>

  <comment type="line">// release the page</comment>
  <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>tRBTreeIterCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pNode</name> <operator>=</operator> <call><name>tRBTreeIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>isDirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tRBTreeDrop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTxn</name><operator>-&gt;</operator><name>jPageSet</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>hashset_remove</name><argument_list>(<argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>jPageSet</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tdbPCacheRelease</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pager/commit reset dirty tree: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tRBTreeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><name>pageCmpFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// sync the db file</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbOsFSync</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to fsync fd due to %s. file:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerPostCommit</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>jTxnFileName</name><index>[<expr><name>TDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>jTxnFileName</name></expr></argument>, <argument><expr><literal type="string">"%s.%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// remove the journal file</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbOsClose</name><argument_list>(<argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>jfd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to close jfd: %s. file:%s, %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbOsRemove</name><argument_list>(<argument><expr><name>jTxnFileName</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to remove file due to %s. file:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jTxnFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pPager-&gt;inTran = 0;</comment>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerPrepareAsyncCommit</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>  <name>maxPgno</name> <init>= <expr><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>

  <comment type="line">// sync the journal file</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOsFSync</name><argument_list>(<argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>jfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to fsync jfd: %s. jfile:%s, %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// loop to write the dirty pages to file</comment>
  <decl_stmt><decl><type><name>SRBTreeIter</name></type>  <name>iter</name> <init>= <expr><call><name>tRBTreeIterCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pNode</name> <operator>=</operator> <call><name>tRBTreeIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>isLocal</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SPgno</name></type> <name>pgno</name> <init>= <expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pgno</name> <operator>&gt;</operator> <name>maxPgno</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>maxPgno</name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerPWritePageToDB</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page to db since %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbttl commit:%p, %d/%d"</literal></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name> <operator>=</operator> <name>maxPgno</name></expr>;</expr_stmt>
  <comment type="line">//  pPager-&gt;dbOrigSize = pPager-&gt;dbFileSize;</comment>

  <comment type="line">// release the page</comment>
  <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>tRBTreeIterCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pNode</name> <operator>=</operator> <call><name>tRBTreeIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>isLocal</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>isDirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tRBTreeDrop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbPCacheRelease</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/*
  tdbTrace("reset dirty tree: %p", &amp;pPager-&gt;rbt);
  tRBTreeCreate(&amp;pPager-&gt;rbt, pageCmpFn);

  // sync the db file
  if (tdbOsFSync(pPager-&gt;fd) &lt; 0) {
    tdbError("failed to fsync fd due to %s. file:%s", strerror(errno), pPager-&gt;dbFileName);
    terrno = TAOS_SYSTEM_ERROR(errno);
    return -1;
  }
  */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// recovery dirty pages</comment>
<function><type><name>int</name></type> <name>tdbPagerAbort</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>pgIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>  <name>journalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>

  <comment type="line">// sync the journal file</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOsFSync</name><argument_list>(<argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>jfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to fsync jfd: %s. jfile:%s, %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>tdb_fd_t</name></type> <name>jfd</name> <init>= <expr><name><name>pTxn</name><operator>-&gt;</operator><name>jfd</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbGetFileSize</name><argument_list>(<argument><expr><name>jfd</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>journalSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pageBuf</name> <init>= <expr><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pageBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>pgIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pgIndex</name> <operator>&lt;</operator> <name>journalSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>pgIndex</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// read pgno &amp; the page from journal</comment>
    <decl_stmt><decl><type><name>SPgno</name></type> <name>pgno</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>tdbOsRead</name><argument_list>(<argument><expr><name>jfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOsRead</name><argument_list>(<argument><expr><name>jfd</name></expr></argument>, <argument><expr><name>pageBuf</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>i64</name></type> <name>offset</name> <init>= <expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>*</operator> <operator>(</operator><name>pgno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tdbOsLSeek</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to lseek fd due to %s. file:%s, offset:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOsWrite</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pageBuf</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write buf due to %s. file: %s, bufsize:%d"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>,
               <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>tdbOsFSync</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to fsync fd due to %s. dbfile:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 3, release the dirty pages</comment>
  <decl_stmt><decl><type><name>SRBTreeIter</name></type>  <name>iter</name> <init>= <expr><call><name>tRBTreeIterCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pNode</name> <operator>=</operator> <call><name>tRBTreeIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>isDirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tRBTreeDrop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hashset_remove</name><argument_list>(<argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>jPageSet</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbPCacheRelease</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"reset dirty tree: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tRBTreeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><name>pageCmpFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 4, remove the journal file</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbOsClose</name><argument_list>(<argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>jfd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to close jfd: %s. file:%s, %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>jTxnFileName</name><index>[<expr><name>TDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>jTxnFileName</name></expr></argument>, <argument><expr><literal type="string">"%s.%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbOsRemove</name><argument_list>(<argument><expr><name>jTxnFileName</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to remove file due to %s. file:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jTxnFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pPager-&gt;inTran = 0;</comment>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerFlushPage</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i32</name></type>    <name>nRef</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>  <name>maxPgno</name> <init>= <expr><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>

  <comment type="line">// loop to write the dirty pages to file</comment>
  <decl_stmt><decl><type><name>SRBTreeIter</name></type>  <name>iter</name> <init>= <expr><call><name>tRBTreeIterCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRBTreeNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pNode</name> <operator>=</operator> <call><name>tRBTreeIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>tdbGetPageRef</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SPgno</name></type> <name>pgno</name> <init>= <expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pgno</name> <operator>&gt;</operator> <name>maxPgno</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>maxPgno</name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerPWritePageToDB</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page to db since %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb/flush:%p, %d/%d/%d"</literal></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileSize</name></name></expr></argument>, <argument><expr><name>maxPgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name> <operator>=</operator> <name>maxPgno</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>isDirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pager/flush drop page: %p %d from dirty tree: %p"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tRBTreeDrop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPager</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbPCacheRelease</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break>break;</break>
  </block_content>}</block></while>
  <comment type="block">/*
  tdbTrace("tdb/flush:%p, %d/%d/%d", pPager, pPager-&gt;dbOrigSize, pPager-&gt;dbFileSize, maxPgno);
  pPager-&gt;dbOrigSize = maxPgno;

  // release the page
  iter = tRBTreeIterCreate(&amp;pPager-&gt;rbt, 1);
  while ((pNode = tRBTreeIterNext(&amp;iter)) != NULL) {
    pPage = (SPage *)pNode;
    nRef = tdbGetPageRef(pPage);
    if (nRef &gt; 1) {
      continue;
    }

    pPage-&gt;isDirty = 0;

    tdbTrace("pager/flush drop page: %p %d from dirty tree: %p", pPage, TDB_PAGE_PGNO(pPage), &amp;pPager-&gt;rbt);
    tRBTreeDrop(&amp;pPager-&gt;rbt, (SRBTreeNode *)pPage);
    tdbPCacheRelease(pPager-&gt;pCache, pPage, pTxn);
  }
  */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerFetchPage</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPgno</name> <modifier>*</modifier></type><name>ppgno</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPage</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>initPage</name>)<parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
                      <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgid</name></type>  <name>pgid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>  <name>pgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type>     <name>loadPage</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pgno</name> <operator>=</operator> <operator>*</operator><name>ppgno</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>loadPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// alloc new page</comment>
  <if_stmt><if>if <condition>(<expr><name>pgno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>loadPage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerAllocPage</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pgno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// fetch a page container</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgid</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name>TDB_FILE_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pgid</name><operator>.</operator><name>pgno</name></name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pPage</name> <operator>=</operator> <call><name>tdbPCacheFetch</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgid</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbPagerFlushPage</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbttl fetch pager:%p"</literal></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// init page if need</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TDB_PAGE_INITIALIZED</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerInitPage</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>initPage</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>loadPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// printf("thread %" PRId64 " pager fetch page %d pgno %d ppage %p\n", taosGetSelfPthreadId(), pPage-&gt;id,</comment>
  <comment type="line">//        TDB_PAGE_PGNO(pPage), pPage);</comment>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TDB_PAGE_INITIALIZED</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPager</name></name> <operator>==</operator> <name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppgno</name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppPage</name> <operator>=</operator> <name>pPage</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdbPagerReturnPage</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbPCacheRelease</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// printf("thread %" PRId64 " pager retun page %d pgno %d ppage %p\n", taosGetSelfPthreadId(), pPage-&gt;id,</comment>
  <comment type="line">//        TDB_PAGE_PGNO(pPage), pPage);</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPagerAllocFreePage</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPgno</name> <modifier>*</modifier></type><name>ppgno</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO: Allocate a page from the free list</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPagerAllocNewPage</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPgno</name> <modifier>*</modifier></type><name>ppgno</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>ppgno</name> <operator>=</operator> <operator>++</operator><name><name>pPager</name><operator>-&gt;</operator><name>dbFileSize</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerAllocPage</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPgno</name> <modifier>*</modifier></type><name>ppgno</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// Try to allocate from the free list of the pager</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerAllocFreePage</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>ppgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppgno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// Allocate the page by extending the pager</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerAllocNewPage</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>ppgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>ppgno</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPagerInitPage</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>initPage</name>)<parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
                            <parameter><decl><type><name>u8</name></type> <name>loadPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>lcode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>nLoops</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type>   <name>nRead</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type> <name>pgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>lcode</name> <operator>=</operator> <call><name>TDB_TRY_LOCK_PAGE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lcode</name> <operator>==</operator> <name>P_LOCK_SUCC</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>TDB_PAGE_INITIALIZED</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>TDB_UNLOCK_PAGE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pgno</name> <operator>=</operator> <call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb/pager:%p, pgno:%d, loadPage:%d, size:%d"</literal></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>loadPage</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>loadPage</name> <operator>&amp;&amp;</operator> <name>pgno</name> <operator>&lt;=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name>nRead</name> <operator>=</operator> <call><name>tdbOsPRead</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>pgno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdb/pager:%p, pgno:%d, nRead:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>nRead</name> <operator>&lt;</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"tdb/pager:%p, pgno:%d, nRead:%"</literal> <name>PRId64</name> <literal type="string">"pgSize:%"</literal> <name>PRId32</name></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TDB_UNLOCK_PAGE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>init</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name>initPage</name>)<argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TDB_UNLOCK_PAGE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPager</name></name> <operator>=</operator> <name>pPager</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TDB_UNLOCK_PAGE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lcode</name> <operator>==</operator> <name>P_LOCK_BUSY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>TDB_PAGE_INITIALIZED</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>nLoops</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ---------------------------- Journal manipulation</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPagerWritePageToJournal</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type> <name>pgno</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pgno</name> <operator>=</operator> <call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOsWrite</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pActiveTxn</name><operator>-&gt;</operator><name>jfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write pgno due to %s. file:%s, pgno:%u, txnId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>,
             <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pActiveTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOsWrite</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pActiveTxn</name><operator>-&gt;</operator><name>jfd</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write page data due to %s. file:%s, pageSize:%d, txnId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pActiveTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
static int tdbPagerWritePageToDB(SPager *pPager, SPage *pPage) {
  i64 offset;
  int ret;

  offset = (i64)pPage-&gt;pageSize * (TDB_PAGE_PGNO(pPage) - 1);
  if (tdbOsLSeek(pPager-&gt;fd, offset, SEEK_SET) &lt; 0) {
    tdbError("failed to lseek due to %s. file:%s, offset:%" PRId64, strerror(errno), pPager-&gt;dbFileName, offset);
    terrno = TAOS_SYSTEM_ERROR(errno);
    return -1;
  }

  ret = tdbOsWrite(pPager-&gt;fd, pPage-&gt;pData, pPage-&gt;pageSize);
  if (ret &lt; 0) {
    tdbError("failed to write page data due to %s. file:%s, pageSize:%d", strerror(errno), pPager-&gt;dbFileName,
             pPage-&gt;pageSize);
    terrno = TAOS_SYSTEM_ERROR(errno);
    return -1;
  }

  return 0;
}
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPagerPWritePageToDB</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>i64</name><operator>)</operator><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>*</operator> <operator>(</operator><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOsPWrite</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to pwrite page data due to %s. file:%s, pageSize:%d"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>,
             <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPagerRestore</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>jFileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type> <name>journalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name>   <modifier>*</modifier></type><name>pageBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>tdb_fd_t</name></type> <name>jfd</name> <init>= <expr><call><name>tdbOsOpen</name><argument_list>(<argument><expr><name>jFileName</name></expr></argument>, <argument><expr><name>TDB_O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>jfd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbGetFileSize</name><argument_list>(<argument><expr><name>jfd</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>journalSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pageBuf</name> <operator>=</operator> <call><name>tdbOsCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pageBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>pgIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pgIndex</name> <operator>&lt;</operator> <name>journalSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>pgIndex</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// read pgno &amp; the page from journal</comment>
    <decl_stmt><decl><type><name>SPgno</name></type> <name>pgno</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>tdbOsRead</name><argument_list>(<argument><expr><name>jfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOsRead</name><argument_list>(<argument><expr><name>jfd</name></expr></argument>, <argument><expr><name>pageBuf</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>i64</name></type> <name>offset</name> <init>= <expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>*</operator> <operator>(</operator><name>pgno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tdbOsLSeek</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to lseek fd due to %s. file:%s, offset:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOsWrite</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pageBuf</name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to write buf due to %s. file: %s, bufsize:%d"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>,
               <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>tdbOsFSync</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to fsync fd due to %s. dbfile:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pageBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbOsClose</name><argument_list>(<argument><expr><name>jfd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to close jfd due to %s. jFileName:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbOsRemove</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to remove file due to %s. jFileName:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>jFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerRestoreJournals</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tdbDirEntryPtr</name></type> <name>pDirEntry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tdbDirPtr</name></type>      <name>pDir</name> <init>= <expr><call><name>taosOpenDir</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pEnv</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDir</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to open %s since %s"</literal></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pEnv</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>pDirEntry</name> <operator>=</operator> <call><name>tdbReadDir</name><argument_list>(<argument><expr><name>pDir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>tdbDirEntryBaseName</name><argument_list>(<argument><expr><call><name>tdbGetDirEntryName</name><argument_list>(<argument><expr><name>pDirEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>TDB_MAINDB_NAME</name> <literal type="string">"-journal"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tdbPagerRestore</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdbCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to restore file due to %s. jFileName:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tdbCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPagerRollback</name><parameter_list>(<parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tdbDirEntryPtr</name></type> <name>pDirEntry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tdbDirPtr</name></type>      <name>pDir</name> <init>= <expr><call><name>taosOpenDir</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pEnv</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDir</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to open %s since %s"</literal></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pEnv</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>pDirEntry</name> <operator>=</operator> <call><name>tdbReadDir</name><argument_list>(<argument><expr><name>pDir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>tdbDirEntryBaseName</name><argument_list>(<argument><expr><call><name>tdbGetDirEntryName</name><argument_list>(<argument><expr><name>pDirEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>TDB_MAINDB_NAME</name> <literal type="string">"-journal"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tdbOsRemove</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdbCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to remove file due to %s. jFileName:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tdbCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
