<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/tdb/src/db/tdbTable.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbInt.h"</cpp:file></cpp:include>

<struct>struct <name>STTB</name> <block>{
  <decl_stmt><decl><type><name>TDB</name>    <modifier>*</modifier></type><name>pEnv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>STBC</name> <block>{
  <decl_stmt><decl><type><name>SBTC</name></type> <name>btc</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>tdbTbOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valLen</name></decl></parameter>, <parameter><decl><type><name>tdb_cmpr_fn_t</name></type> <name>keyCmprFn</name></decl></parameter>, <parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>TTB</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTb</name></decl></parameter>,
              <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TTB</name>    <modifier>*</modifier></type><name>pTb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fFullName</name><index>[<expr><name>TDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name>  <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPgno</name></type>   <name>pgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>nKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pTb</name> <operator>=</operator> <operator>(</operator><name>TTB</name> <operator>*</operator><operator>)</operator><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pTb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pTb-&gt;pEnv</comment>
  <expr_stmt><expr><name><name>pTb</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MAINDB</name></cpp:ifdef>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fFullName</name></expr></argument>, <argument><expr><name>TDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>pEnv</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>TDB_MAINDB_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>TDB_MAINDB_NAME</name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPager</name> <operator>=</operator> <call><name>tdbEnvGetPager</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>fFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pPager</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>pEnv</name><operator>-&gt;</operator><name>pMainDb</name></name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// new pgno &amp; insert into main db</comment>
      <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pgno</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SPgno</name> <operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pPager</name> <operator>=</operator> <call><name>tdbEnvGetPager</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>fFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pPager</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerOpen</name><argument_list>(<argument><expr><name><name>pEnv</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>fFullName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tdbEnvAddPager</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pPager</name><operator>-&gt;</operator><name>dbOrigSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <expr_stmt><expr><name>pPager</name> <operator>=</operator> <call><name>tdbEnvGetPager</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pPager</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fFullName</name></expr></argument>, <argument><expr><name>TDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>pEnv</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerOpen</name><argument_list>(<argument><expr><name><name>pEnv</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>fFullName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tdbEnvAddPager</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pPager</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// pTb-&gt;pBt</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbBtreeOpen</name><argument_list>(<argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>valLen</name></expr></argument>, <argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>keyCmprFn</name></expr></argument>, <argument><expr><name>pEnv</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pTb</name><operator>-&gt;</operator><name>pBt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rollback</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbPagerRollback</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerRestoreJournals</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>pTb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTb</name> <operator>=</operator> <name>pTb</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbClose</name><parameter_list>(<parameter><decl><type><name>TTB</name> <modifier>*</modifier></type><name>pTb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbBtreeClose</name><argument_list>(<argument><expr><name><name>pTb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pTb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbDrop</name><parameter_list>(<parameter><decl><type><name>TTB</name> <modifier>*</modifier></type><name>pTb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbInsert</name><parameter_list>(<parameter><decl><type><name>TTB</name> <modifier>*</modifier></type><name>pTb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valLen</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbBtreeInsert</name><argument_list>(<argument><expr><name><name>pTb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>valLen</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbDelete</name><parameter_list>(<parameter><decl><type><name>TTB</name> <modifier>*</modifier></type><name>pTb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbBtreeDelete</name><argument_list>(<argument><expr><name><name>pTb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbUpsert</name><parameter_list>(<parameter><decl><type><name>TTB</name> <modifier>*</modifier></type><name>pTb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vLen</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbBtreeUpsert</name><argument_list>(<argument><expr><name><name>pTb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbGet</name><parameter_list>(<parameter><decl><type><name>TTB</name> <modifier>*</modifier></type><name>pTb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbBtreeGet</name><argument_list>(<argument><expr><name><name>pTb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>ppVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbPGet</name><parameter_list>(<parameter><decl><type><name>TTB</name> <modifier>*</modifier></type><name>pTb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pkLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbBtreePGet</name><argument_list>(<argument><expr><name><name>pTb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>ppKey</name></expr></argument>, <argument><expr><name>pkLen</name></expr></argument>, <argument><expr><name>ppVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcOpen</name><parameter_list>(<parameter><decl><type><name>TTB</name> <modifier>*</modifier></type><name>pTb</name></decl></parameter>, <parameter><decl><type><name>TBC</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTbc</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTbc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTbc</name> <operator>=</operator> <operator>(</operator><name>TBC</name> <operator>*</operator><operator>)</operator><call><name>tdbOsMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pTbc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTbc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbBtcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>, <argument><expr><name><name>pTb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTbc</name> <operator>=</operator> <name>pTbc</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcMoveTo</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbBtcMoveTo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcMoveToFirst</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbBtcMoveToFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcMoveToLast</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbBtcMoveToLast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcMoveToNext</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbBtcMoveToNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcMoveToPrev</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbBtcMoveToPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcGet</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pkLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pvLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbBtcGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>, <argument><expr><name>ppKey</name></expr></argument>, <argument><expr><name>pkLen</name></expr></argument>, <argument><expr><name>ppVal</name></expr></argument>, <argument><expr><name>pvLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcDelete</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbBtcDelete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcNext</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbBtreeNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>, <argument><expr><name>ppKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>ppVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcPrev</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbBtreePrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>, <argument><expr><name>ppKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>ppVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcUpsert</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>insert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbBtcUpsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcClose</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTbc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbBtcClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pTbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbTbcIsValid</name><parameter_list>(<parameter><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbBtcIsValid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbc</name><operator>-&gt;</operator><name>btc</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</unit>
