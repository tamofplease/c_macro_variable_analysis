<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/tdb/src/db/tdbPage.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbInt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SPageMethods</name></type> <name>pageMethods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>SPageMethods</name></type> <name>pageLargeMethods</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_HDR_SIZE</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>)</parameter_list></cpp:macro>                        <cpp:value>((pPage)-&gt;pPageMethods-&gt;szPageHdr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_FREE_CELL_SIZE</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>)</parameter_list></cpp:macro>                  <cpp:value>((pPage)-&gt;pPageMethods-&gt;szFreeCell)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_NCELLS</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>)</parameter_list></cpp:macro>                          <cpp:value>(*(pPage)-&gt;pPageMethods-&gt;getCellNum)(pPage)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_CCELLS</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>)</parameter_list></cpp:macro>                          <cpp:value>(*(pPage)-&gt;pPageMethods-&gt;getCellBody)(pPage)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_FCELL</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>)</parameter_list></cpp:macro>                           <cpp:value>(*(pPage)-&gt;pPageMethods-&gt;getCellFree)(pPage)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_NFREE</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>)</parameter_list></cpp:macro>                           <cpp:value>(*(pPage)-&gt;pPageMethods-&gt;getFreeBytes)(pPage)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_CELL_OFFSET_AT</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>(*(pPage)-&gt;pPageMethods-&gt;getCellOffset)(pPage, idx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_NCELLS_SET</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>, <parameter><type><name>NCELLS</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>(*(pPage)-&gt;pPageMethods-&gt;setCellNum)(pPage, NCELLS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_CCELLS_SET</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>, <parameter><type><name>CCELLS</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>(*(pPage)-&gt;pPageMethods-&gt;setCellBody)(pPage, CCELLS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_FCELL_SET</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>, <parameter><type><name>FCELL</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>(*(pPage)-&gt;pPageMethods-&gt;setCellFree)(pPage, FCELL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_NFREE_SET</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>, <parameter><type><name>NFREE</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>(*(pPage)-&gt;pPageMethods-&gt;setFreeBytes)(pPage, NFREE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_CELL_OFFSET_AT_SET</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>OFFSET</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(pPage)-&gt;pPageMethods-&gt;setCellOffset)(pPage, idx, OFFSET)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_CELL_AT</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro>                    <cpp:value>((pPage)-&gt;pData + TDB_PAGE_CELL_OFFSET_AT(pPage, idx))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDB_PAGE_MAX_FREE_BLOCK</name><parameter_list>(<parameter><type><name>pPage</name></type></parameter>, <parameter><type><name>szAmHdr</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>((pPage)-&gt;pageSize - (szAmHdr)-TDB_PAGE_HDR_SIZE(pPage) - sizeof(SPageFtr))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbPageAllocate</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCell</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbPageDefragment</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tdbPageFree</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>szCell</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>tdbPageCreate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pageSize</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPage</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xMalloc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name>    <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>size</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xMalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TDB_IS_PGSIZE_VLD</name><argument_list>(<argument><expr><name>pageSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppPage</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <name>pageSize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pPage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>xMalloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pPage</name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>pageSize</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TDB_INIT_PAGE_LOCK</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>=</operator> <name>pageSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pageSize</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPageMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>pageMethods</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPageMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>pageLargeMethods</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppPage</name> <operator>=</operator> <name>pPage</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"page/create: %p/%d %p"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>xMalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPageDestroy</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"page/destroy: %p/%d %p"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>xFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>pPage</name><operator>-&gt;</operator><name>isDirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>iOvfl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iOvfl</name> <operator>&lt;</operator> <name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr>;</condition> <incr><expr><name>iOvfl</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbPage/destroy/free ovfl cell: %p/%p"</literal></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xFree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdbPageZero</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>szAmHdr</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xCellSize</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"page/zero: %p %"</literal> <name>PRIu8</name> <literal type="string">" %p"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>szAmHdr</name></expr></argument>, <argument><expr><name>xCellSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>szAmHdr</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PAGE_NCELLS_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PAGE_CCELLS_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPageFtr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PAGE_FCELL_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PAGE_NFREE_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_MAX_FREE_BLOCK</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>szAmHdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name> <operator>+</operator> <call><name>TDB_PAGE_HDR_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <call><name>TDB_PAGE_CCELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPageFtr</name></name> <operator>=</operator> <operator>(</operator><name>SPageFtr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPageFtr</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>xCellSize</name></name> <operator>=</operator> <name>xCellSize</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageFtr</name></name> <operator>==</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdbPageInit</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>szAmHdr</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xCellSize</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"page/init: %p %"</literal> <name>PRIu8</name> <literal type="string">" %p"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>szAmHdr</name></expr></argument>, <argument><expr><name>xCellSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>szAmHdr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name> <operator>+</operator> <call><name>TDB_PAGE_HDR_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name> <operator>+</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>TDB_PAGE_NCELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <call><name>TDB_PAGE_CCELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPageFtr</name></name> <operator>=</operator> <operator>(</operator><name>SPageFtr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPageFtr</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>xCellSize</name></name> <operator>=</operator> <name>xCellSize</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>&gt;=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>&lt;=</operator> <call><name>TDB_PAGE_NFREE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPageInsertCell</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>szCell</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>asOvfl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>    <name>nFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>nCells</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>iOvfl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>lidx</name></decl>;</decl_stmt>  <comment type="line">// local idx</comment>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pNewCell</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>szCell</name> <operator>&lt;=</operator> <call><name>TDB_PAGE_MAX_FREE_BLOCK</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nFree</name> <operator>=</operator> <call><name>TDB_PAGE_NFREE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nCells</name> <operator>=</operator> <call><name>TDB_PAGE_NCELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>iOvfl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iOvfl</name> <operator>&lt;</operator> <name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iOvfl</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name> <operator>&gt;=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <name>iOvfl</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>asOvfl</name> <operator>||</operator> <name>nFree</name> <operator>&lt;</operator> <name>szCell</name> <operator>+</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO: make it extensible</comment>
    <comment type="line">// add the cell as an overflow cell</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>iOvfl</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// TODO: here has memory leak</comment>
    <expr_stmt><expr><name>pNewCell</name> <operator>=</operator> <operator>(</operator><name>SCell</name> <operator>*</operator><operator>)</operator><call><name>tdbOsMalloc</name><argument_list>(<argument><expr><name>szCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pNewCell</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbPage/insert/new ovfl cell: %p/%p"</literal></expr></argument>, <argument><expr><name>pNewCell</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name> <operator>=</operator> <name>pNewCell</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>iOvfl</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// page must has enough space to hold the cell locally</comment>
    <expr_stmt><expr><call><name>tdbPageAllocate</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNewCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pNewCell</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// no overflow cell exists in this page</comment>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name> <operator>+</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>lidx</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>src</name> <operator>+</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>-</operator> <name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_PAGE_CELL_OFFSET_AT_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>lidx</name></expr></argument>, <argument><expr><name>pNewCell</name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_PAGE_NCELLS_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>nCells</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>==</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name> <operator>+</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>nCells</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <for>for <control>(<init>;</init> <condition><expr><name>iOvfl</name> <operator>&lt;</operator> <name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr>;</condition> <incr><expr><name>iOvfl</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPageUpdateCell</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>szCell</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbPageDropCell</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tdbPageInsertCell</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPageDropCell</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>, <parameter><decl><type><name>SBTree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>    <name>lidx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>szCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>nCells</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>iOvfl</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nCells</name> <operator>=</operator> <call><name>TDB_PAGE_NCELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name>nCells</name> <operator>+</operator> <name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>iOvfl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>iOvfl</name> <operator>&lt;</operator> <name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr>;</condition> <incr><expr><name>iOvfl</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// remove the over flow cell</comment>
      <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbPage/drop/free ovfl cell: %p"</literal></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init>;</init> <condition><expr><operator>(</operator><operator>++</operator><name>iOvfl</name><operator>)</operator> <operator>&lt;</operator> <name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name><operator>--</operator></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name> <operator>&gt;</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <name>iOvfl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCell</name> <operator>=</operator> <call><name>TDB_PAGE_CELL_AT</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>lidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>szCell</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>pPage</name><operator>-&gt;</operator><name>xCellSize</name></name>)<argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbPageFree</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>lidx</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PAGE_NCELLS_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>nCells</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init>;</init> <condition><expr><name>iOvfl</name> <operator>&lt;</operator> <name><name>pPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr>;</condition> <incr><expr><name>iOvfl</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdbPageCopy</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pFromPage</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pToPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deepCopyOvfl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>, <decl><type ref="prev"/><name>nFree</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pToPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>=</operator> <name><name>pToPage</name><operator>-&gt;</operator><name>pPageHdr</name></name> <operator>+</operator> <operator>(</operator><name><name>pFromPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>-</operator> <name><name>pFromPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pToPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>=</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pToPage</name><operator>-&gt;</operator><name>pPageFtr</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name><name>pFromPage</name><operator>-&gt;</operator><name>pPageFtr</name></name> <operator>-</operator> <name><name>pFromPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pToPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>&gt;=</operator> <name><name>pToPage</name><operator>-&gt;</operator><name>pFreeStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pToPage</name><operator>-&gt;</operator><name>pPageHdr</name></name></expr></argument>, <argument><expr><name><name>pFromPage</name><operator>-&gt;</operator><name>pPageHdr</name></name></expr></argument>, <argument><expr><name><name>pFromPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>-</operator> <name><name>pFromPage</name><operator>-&gt;</operator><name>pPageHdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pToPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name></expr></argument>, <argument><expr><name><name>pFromPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name><name>pFromPage</name><operator>-&gt;</operator><name>pPageFtr</name></name> <operator>-</operator> <name><name>pFromPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TDB_PAGE_CCELLS</name><argument_list>(<argument><expr><name>pToPage</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pToPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pToPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name><name>pToPage</name><operator>-&gt;</operator><name>pPageHdr</name></name> <operator>-</operator> <name><name>pToPage</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>pFromPage</name><operator>-&gt;</operator><name>pPageHdr</name></name> <operator>-</operator> <name><name>pFromPage</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nFree</name> <operator>=</operator> <call><name>TDB_PAGE_NFREE</name><argument_list>(<argument><expr><name>pFromPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_PAGE_NFREE_SET</name><argument_list>(<argument><expr><name>pToPage</name></expr></argument>, <argument><expr><name>nFree</name> <operator>-</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Copy the overflow cells</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>iOvfl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iOvfl</name> <operator>&lt;</operator> <name><name>pFromPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr>;</condition> <incr><expr><name>iOvfl</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pNewCell</name> <init>= <expr><name><name>pFromPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>deepCopyOvfl</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>szCell</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pFromPage</name><operator>-&gt;</operator><name>xCellSize</name></name>)<argument_list>(<argument><expr><name>pFromPage</name></expr></argument>, <argument><expr><name><name>pFromPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pNewCell</name> <operator>=</operator> <operator>(</operator><name>SCell</name> <operator>*</operator><operator>)</operator><call><name>tdbOsMalloc</name><argument_list>(<argument><expr><name>szCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pNewCell</name></expr></argument>, <argument><expr><name><name>pFromPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbPage/copy/new ovfl cell: %p/%p/%p"</literal></expr></argument>, <argument><expr><name>pNewCell</name></expr></argument>, <argument><expr><name>pToPage</name></expr></argument>, <argument><expr><name>pFromPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pToPage</name><operator>-&gt;</operator><name>apOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name> <operator>=</operator> <name>pNewCell</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pToPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name> <operator>=</operator> <name><name>pFromPage</name><operator>-&gt;</operator><name>aiOvfl</name><index>[<expr><name>iOvfl</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pToPage</name><operator>-&gt;</operator><name>nOverflow</name></name> <operator>=</operator> <name><name>pFromPage</name><operator>-&gt;</operator><name>nOverflow</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPageCapacity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pageSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amHdrSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>szPageHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>minCellIndexSize</name></decl>;</decl_stmt>  <comment type="line">// at least one cell in cell index</comment>

  <if_stmt><if>if <condition>(<expr><name>pageSize</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>szPageHdr</name> <operator>=</operator> <name><name>pageMethods</name><operator>.</operator><name>szPageHdr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>minCellIndexSize</name> <operator>=</operator> <name><name>pageMethods</name><operator>.</operator><name>szOffset</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>szPageHdr</name> <operator>=</operator> <name><name>pageLargeMethods</name><operator>.</operator><name>szPageHdr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>minCellIndexSize</name> <operator>=</operator> <name><name>pageLargeMethods</name><operator>.</operator><name>szOffset</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pageSize</name> <operator>-</operator> <name>szPageHdr</name> <operator>-</operator> <name>amHdrSize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPageFtr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>minCellIndexSize</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPageAllocate</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>szCell</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCell</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pFreeCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name>    <modifier>*</modifier></type><name>pOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>nFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>cellFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppCell</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nFree</name> <operator>=</operator> <call><name>TDB_PAGE_NFREE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nFree</name> <operator>&gt;=</operator> <name>szCell</name> <operator>+</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TDB_PAGE_CCELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 1. Try to allocate from the free space block area</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>&gt;=</operator> <name>szCell</name> <operator>+</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-=</operator> <name>szCell</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pCell</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_PAGE_CCELLS_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_alloc_finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// 2. Try to allocate from the page free list</comment>
  <expr_stmt><expr><name>cellFree</name> <operator>=</operator> <call><name>TDB_PAGE_FCELL</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cellFree</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cellFree</name> <operator>&gt;=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>cellFree</name> <operator>&amp;&amp;</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>&gt;=</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pPrevFreeCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>szPrevFreeCell</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>szFreeCell</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>nxFreeCell</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>newSize</name></decl>;</decl_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cellFree</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>pFreeCell</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>cellFree</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>pPage</name><operator>-&gt;</operator><name>pPageMethods</name><operator>-&gt;</operator><name>getFreeCellInfo</name></name><argument_list>(<argument><expr><name>pFreeCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szFreeCell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nxFreeCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>szFreeCell</name> <operator>&gt;=</operator> <name>szCell</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pCell</name> <operator>=</operator> <name>pFreeCell</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>newSize</name> <operator>=</operator> <name>szFreeCell</name> <operator>-</operator> <name>szCell</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pFreeCell</name> <operator>+=</operator> <name>szCell</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>newSize</name> <operator>&gt;=</operator> <call><name>TDB_PAGE_FREE_CELL_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>pPage</name><operator>-&gt;</operator><name>pPageMethods</name><operator>-&gt;</operator><name>setFreeCellInfo</name></name><argument_list>(<argument><expr><name>pFreeCell</name></expr></argument>, <argument><expr><name>newSize</name></expr></argument>, <argument><expr><name>nxFreeCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>pPrevFreeCell</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>pPage</name><operator>-&gt;</operator><name>pPageMethods</name><operator>-&gt;</operator><name>setFreeCellInfo</name></name><argument_list>(<argument><expr><name>pPrevFreeCell</name></expr></argument>, <argument><expr><name>szPrevFreeCell</name></expr></argument>, <argument><expr><name>pFreeCell</name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>TDB_PAGE_FCELL_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pFreeCell</name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>pPrevFreeCell</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>pPage</name><operator>-&gt;</operator><name>pPageMethods</name><operator>-&gt;</operator><name>setFreeCellInfo</name></name><argument_list>(<argument><expr><name>pPrevFreeCell</name></expr></argument>, <argument><expr><name>szPrevFreeCell</name></expr></argument>, <argument><expr><name>nxFreeCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>TDB_PAGE_FCELL_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>nxFreeCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <goto>goto <name>_alloc_finish</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pPrevFreeCell</name> <operator>=</operator> <name>pFreeCell</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>szPrevFreeCell</name> <operator>=</operator> <name>szFreeCell</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cellFree</name> <operator>=</operator> <name>nxFreeCell</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// 3. Try to dfragment and allocate again</comment>
  <expr_stmt><expr><call><name>tdbPageDefragment</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>==</operator> <name>nFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nFree</name> <operator>==</operator> <call><name>TDB_PAGE_NFREE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <call><name>TDB_PAGE_CCELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-=</operator> <name>szCell</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCell</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PAGE_CCELLS_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_alloc_finish</name>:</label>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>+=</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PAGE_NFREE_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>nFree</name> <operator>-</operator> <name>szCell</name> <operator>-</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppCell</name> <operator>=</operator> <name>pCell</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPageFree</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>szCell</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cellFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pCell</name> <operator>&gt;=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>szCell</name> <operator>&lt;=</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageFtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pCell</name> <operator>==</operator> <call><name>TDB_PAGE_CELL_AT</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nFree</name> <operator>=</operator> <call><name>TDB_PAGE_NFREE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCell</name> <operator>==</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>+=</operator> <name>szCell</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_PAGE_CCELLS_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>szCell</name> <operator>&gt;=</operator> <call><name>TDB_PAGE_FREE_CELL_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cellFree</name> <operator>=</operator> <call><name>TDB_PAGE_FCELL</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>pPage</name><operator>-&gt;</operator><name>pPageMethods</name><operator>-&gt;</operator><name>setFreeCellInfo</name></name><argument_list>(<argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>, <argument><expr><name>cellFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TDB_PAGE_FCELL_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pCell</name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name> <operator>+</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>idx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>src</name> <operator>=</operator> <name>dest</name> <operator>+</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>-</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>-=</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nFree</name> <operator>=</operator> <name>nFree</name> <operator>+</operator> <name>szCell</name> <operator>+</operator> <call><name>TDB_PAGE_OFFSET_SIZE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PAGE_NFREE_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>nFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPageDefragment</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>    <name>nFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>nCells</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pNextCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pTCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>szCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>iCell</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nFree</name> <operator>=</operator> <call><name>TDB_PAGE_NFREE</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nCells</name> <operator>=</operator> <call><name>TDB_PAGE_NCELLS</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>&lt;</operator> <name>nFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Loop to compact the page content</comment>
  <comment type="line">// Here we use an O(n^2) algorithm to do the job since</comment>
  <comment type="line">// this is a low frequency job.</comment>
  <expr_stmt><expr><name>pNextCell</name> <operator>=</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageFtr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCell</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>iCell</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>iCell</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// compact over</comment>
    <if_stmt><if>if <condition>(<expr><name>iCell</name> <operator>==</operator> <name>nCells</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>=</operator> <name>pNextCell</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nCells</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>TDB_PAGE_CELL_OFFSET_AT</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>pNextCell</name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pTCell</name> <operator>=</operator> <call><name>TDB_PAGE_CELL_AT</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pCell</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pCell</name> <operator>&lt;</operator> <name>pTCell</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pCell</name> <operator>=</operator> <name>pTCell</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pCell</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>szCell</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>pPage</name><operator>-&gt;</operator><name>xCellSize</name></name>)<argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pCell</name> <operator>+</operator> <name>szCell</name> <operator>&lt;=</operator> <name>pNextCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pCell</name> <operator>+</operator> <name>szCell</name> <operator>&lt;</operator> <name>pNextCell</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pNextCell</name> <operator>-</operator> <name>szCell</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pCell</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNextCell</name> <operator>=</operator> <name>pNextCell</name> <operator>-</operator> <name>szCell</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_PAGE_CELL_OFFSET_AT_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>pNextCell</name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeStart</name></name> <operator>==</operator> <name>nFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PAGE_CCELLS_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeEnd</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PAGE_FCELL_SET</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ---------------------------------------------------------------------------------------------------------- */</comment>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>u16</name></type> <name>cellNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type> <name>cellBody</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type> <name>cellFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type> <name>nFree</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPageHdr</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>u16</name></type> <name>szCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type> <name>nxOffset</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFreeCell</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<comment type="line">// cellNum</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>  <name>getPageCellNum</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>SPageHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellNum</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setPageCellNum</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cellNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cellNum</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SPageHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellNum</name> <operator>=</operator> <operator>(</operator><name>u16</name><operator>)</operator><name>cellNum</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// cellBody</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>  <name>getPageCellBody</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>SPageHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellBody</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setPageCellBody</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cellBody</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cellBody</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SPageHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellBody</name> <operator>=</operator> <operator>(</operator><name>u16</name><operator>)</operator><name>cellBody</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// cellFree</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>  <name>getPageCellFree</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>SPageHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellFree</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setPageCellFree</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cellFree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cellFree</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SPageHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellFree</name> <operator>=</operator> <operator>(</operator><name>u16</name><operator>)</operator><name>cellFree</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// nFree</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>  <name>getPageNFree</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>SPageHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>nFree</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setPageNFree</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nFree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nFree</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SPageHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>nFree</name> <operator>=</operator> <operator>(</operator><name>u16</name><operator>)</operator><name>nFree</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// cell offset</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>getPageCellOffset</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <call><name>getPageCellNum</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name><operator>)</operator><index>[<expr><name>idx</name></expr>]</index></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setPageCellOffset</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>offset</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name><operator>)</operator><index>[<expr><name>idx</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>u16</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// free cell info</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>getPageFreeCellInfo</name><parameter_list>(<parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>szCell</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nxOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFreeCell</name> <modifier>*</modifier></type><name>pFreeCell</name> <init>= <expr><operator>(</operator><name>SFreeCell</name> <operator>*</operator><operator>)</operator><name>pCell</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>szCell</name> <operator>=</operator> <name><name>pFreeCell</name><operator>-&gt;</operator><name>szCell</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>nxOffset</name> <operator>=</operator> <name><name>pFreeCell</name><operator>-&gt;</operator><name>nxOffset</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setPageFreeCellInfo</name><parameter_list>(<parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>szCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nxOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFreeCell</name> <modifier>*</modifier></type><name>pFreeCell</name> <init>= <expr><operator>(</operator><name>SFreeCell</name> <operator>*</operator><operator>)</operator><name>pCell</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFreeCell</name><operator>-&gt;</operator><name>szCell</name></name> <operator>=</operator> <name>szCell</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFreeCell</name><operator>-&gt;</operator><name>nxOffset</name></name> <operator>=</operator> <name>nxOffset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>SPageMethods</name></type> <name>pageMethods</name> <init>= <expr><block>{
    <expr><literal type="number">2</literal></expr>,                    <comment type="line">// szOffset</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPageHdr</name></expr></argument>)</argument_list></sizeof></expr>,     <comment type="line">// szPageHdr</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFreeCell</name></expr></argument>)</argument_list></sizeof></expr>,    <comment type="line">// szFreeCell</comment>
    <expr><name>getPageCellNum</name></expr>,       <comment type="line">// getCellNum</comment>
    <expr><name>setPageCellNum</name></expr>,       <comment type="line">// setCellNum</comment>
    <expr><name>getPageCellBody</name></expr>,      <comment type="line">// getCellBody</comment>
    <expr><name>setPageCellBody</name></expr>,      <comment type="line">// setCellBody</comment>
    <expr><name>getPageCellFree</name></expr>,      <comment type="line">// getCellFree</comment>
    <expr><name>setPageCellFree</name></expr>,      <comment type="line">// setCellFree</comment>
    <expr><name>getPageNFree</name></expr>,         <comment type="line">// getFreeBytes</comment>
    <expr><name>setPageNFree</name></expr>,         <comment type="line">// setFreeBytes</comment>
    <expr><name>getPageCellOffset</name></expr>,    <comment type="line">// getCellOffset</comment>
    <expr><name>setPageCellOffset</name></expr>,    <comment type="line">// setCellOffset</comment>
    <expr><name>getPageFreeCellInfo</name></expr>,  <comment type="line">// getFreeCellInfo</comment>
    <expr><name>setPageFreeCellInfo</name></expr>   <comment type="line">// setFreeCellInfo</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>u8</name></type> <name><name>cellNum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>cellBody</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>cellFree</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>nFree</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SPageHdrL</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>u8</name></type> <name><name>szCell</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>nxOffset</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SFreeCellL</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<comment type="line">// cellNum</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>  <name>getLPageCellNum</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>TDB_GET_U24</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SPageHdrL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellNum</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setLPageCellNum</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cellNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>TDB_PUT_U24</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SPageHdrL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellNum</name></expr></argument>, <argument><expr><name>cellNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// cellBody</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>  <name>getLPageCellBody</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>TDB_GET_U24</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SPageHdrL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellBody</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setLPageCellBody</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cellBody</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>TDB_PUT_U24</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SPageHdrL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellBody</name></expr></argument>, <argument><expr><name>cellBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// cellFree</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>  <name>getLPageCellFree</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>TDB_GET_U24</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SPageHdrL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellFree</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setLPageCellFree</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cellFree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>TDB_PUT_U24</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SPageHdrL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cellFree</name></expr></argument>, <argument><expr><name>cellFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// nFree</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>  <name>getLPageNFree</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>TDB_GET_U24</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SPageHdrL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>nFree</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setLPageNFree</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nFree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>TDB_PUT_U24</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SPageHdrL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pPageHdr</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>nFree</name></expr></argument>, <argument><expr><name>nFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// cell offset</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>getLPageCellOffset</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <call><name>getLPageCellNum</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>TDB_GET_U24</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setLPageCellOffset</name><parameter_list>(<parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>TDB_PUT_U24</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pCellIdx</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>idx</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// free cell info</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>getLPageFreeCellInfo</name><parameter_list>(<parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>szCell</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nxOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFreeCellL</name> <modifier>*</modifier></type><name>pFreeCell</name> <init>= <expr><operator>(</operator><name>SFreeCellL</name> <operator>*</operator><operator>)</operator><name>pCell</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>szCell</name> <operator>=</operator> <call><name>TDB_GET_U24</name><argument_list>(<argument><expr><name><name>pFreeCell</name><operator>-&gt;</operator><name>szCell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>nxOffset</name> <operator>=</operator> <call><name>TDB_GET_U24</name><argument_list>(<argument><expr><name><name>pFreeCell</name><operator>-&gt;</operator><name>nxOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>setLPageFreeCellInfo</name><parameter_list>(<parameter><decl><type><name>SCell</name> <modifier>*</modifier></type><name>pCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>szCell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nxOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFreeCellL</name> <modifier>*</modifier></type><name>pFreeCell</name> <init>= <expr><operator>(</operator><name>SFreeCellL</name> <operator>*</operator><operator>)</operator><name>pCell</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>TDB_PUT_U24</name><argument_list>(<argument><expr><name><name>pFreeCell</name><operator>-&gt;</operator><name>szCell</name></name></expr></argument>, <argument><expr><name>szCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TDB_PUT_U24</name><argument_list>(<argument><expr><name><name>pFreeCell</name><operator>-&gt;</operator><name>nxOffset</name></name></expr></argument>, <argument><expr><name>nxOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>SPageMethods</name></type> <name>pageLargeMethods</name> <init>= <expr><block>{
    <expr><literal type="number">3</literal></expr>,                     <comment type="line">// szOffset</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPageHdrL</name></expr></argument>)</argument_list></sizeof></expr>,     <comment type="line">// szPageHdr</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFreeCellL</name></expr></argument>)</argument_list></sizeof></expr>,    <comment type="line">// szFreeCell</comment>
    <expr><name>getLPageCellNum</name></expr>,       <comment type="line">// getCellNum</comment>
    <expr><name>setLPageCellNum</name></expr>,       <comment type="line">// setCellNum</comment>
    <expr><name>getLPageCellBody</name></expr>,      <comment type="line">// getCellBody</comment>
    <expr><name>setLPageCellBody</name></expr>,      <comment type="line">// setCellBody</comment>
    <expr><name>getLPageCellFree</name></expr>,      <comment type="line">// getCellFree</comment>
    <expr><name>setLPageCellFree</name></expr>,      <comment type="line">// setCellFree</comment>
    <expr><name>getLPageNFree</name></expr>,         <comment type="line">// getFreeBytes</comment>
    <expr><name>setLPageNFree</name></expr>,         <comment type="line">// setFreeBytes</comment>
    <expr><name>getLPageCellOffset</name></expr>,    <comment type="line">// getCellOffset</comment>
    <expr><name>setLPageCellOffset</name></expr>,    <comment type="line">// setCellOffset</comment>
    <expr><name>getLPageFreeCellInfo</name></expr>,  <comment type="line">// getFreeCellInfo</comment>
    <expr><name>setLPageFreeCellInfo</name></expr>   <comment type="line">// setFreeCellInfo</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
