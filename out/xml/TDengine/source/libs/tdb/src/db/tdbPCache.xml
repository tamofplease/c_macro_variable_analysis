<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/tdb/src/db/tdbPCache.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbInt.h"</cpp:file></cpp:include>

<comment type="line">// #include &lt;sys/types.h&gt;</comment>
<comment type="line">// #include &lt;unistd.h&gt;</comment>

<struct>struct <name>SPCache</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>         <name>szPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nPages</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name>     <modifier>*</modifier><modifier>*</modifier></type><name>aPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tdb_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name>      <modifier>*</modifier></type><name>pFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nHash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name>     <modifier>*</modifier><modifier>*</modifier></type><name>pgHash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nRecyclable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name></type>       <name>lru</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>tdbPCachePageHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPgid</name> <modifier>*</modifier></type><name>pPgid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>pPgid</name><operator>)</operator><operator>-&gt;</operator><name>fileid</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>pPgid</name><operator>)</operator><operator>-&gt;</operator><name>pgno</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>tdbPCacheOpenImpl</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SPage</name> <modifier>*</modifier></type><name>tdbPCacheFetchImpl</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPgid</name> <modifier>*</modifier></type><name>pPgid</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>   <name>tdbPCachePinPage</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>   <name>tdbPCacheRemovePageFromHash</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>   <name>tdbPCacheAddPageToHash</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>   <name>tdbPCacheUnpinPage</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>tdbPCacheCloseImpl</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdbPCacheInitLock</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tdbMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tdbPCacheDestroyLock</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tdbMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tdbPCacheLock</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tdbMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tdbPCacheUnlock</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tdbMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPCacheOpen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pageSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cacheSize</name></decl></parameter>, <parameter><decl><type><name>SPCache</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name>   <modifier>*</modifier></type><name>pPgHdr</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pCache</name> <operator>=</operator> <operator>(</operator><name>SPCache</name> <operator>*</operator><operator>)</operator><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCache</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPage</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>cacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <name>pageSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name> <operator>=</operator> <name>cacheSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>aPage</name></name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><name>cacheSize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPage</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>aPage</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbPCacheOpenImpl</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppCache</name> <operator>=</operator> <name>pCache</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPCacheClose</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbPCacheCloseImpl</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>aPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TODO:</comment>
<comment type="line">// if (pPage-&gt;id &gt;= pCache-&gt;nPages) {</comment>
<comment type="line">//   free(pPage);</comment>
<comment type="line">//   pCache-&gt;aPage[pPage-&gt;id] = NULL;</comment>
<comment type="line">// } else {</comment>
<comment type="line">//   add to free list</comment>
<comment type="line">// }</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPCacheAlterImpl</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name> <operator>==</operator> <name>nPage</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name> <operator>&lt;</operator> <name>nPage</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier><modifier>*</modifier></type><name>aPage</name> <init>= <expr><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><name>nPage</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPage</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>aPage</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iPage</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name></expr></init></decl>;</init> <condition><expr><name>iPage</name> <operator>&lt;</operator> <name>nPage</name></expr>;</condition> <incr><expr><name>iPage</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tdbPageCreate</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// TODO: handle error</comment>
        <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>aPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// pPage-&gt;pgid = 0;</comment>
      <expr_stmt><expr><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name><operator>-&gt;</operator><name>isAnchor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name><operator>-&gt;</operator><name>isLocal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name><operator>-&gt;</operator><name>nRef</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name><operator>-&gt;</operator><name>pHashNext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name><operator>-&gt;</operator><name>pLruNext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name><operator>-&gt;</operator><name>pLruPrev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name><operator>-&gt;</operator><name>pDirtyNext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <comment type="line">// add to local list</comment>
      <expr_stmt><expr><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name>iPage</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// add page to free list</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iPage</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name></expr></init></decl>;</init> <condition><expr><name>iPage</name> <operator>&lt;</operator> <name>nPage</name></expr>;</condition> <incr><expr><name>iPage</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name><operator>-&gt;</operator><name>pFreeNext</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pFree</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pFree</name></name> <operator>=</operator> <name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nFree</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iPage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iPage</name> <operator>&lt;</operator> <name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name></expr>;</condition> <incr><expr><name>iPage</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>aPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>aPage</name></name> <operator>=</operator> <name>aPage</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>SPage</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPage</name> <init>= <expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>pFree</name></name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ppPage</name></expr>;</condition><incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>iPage</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>ppPage</name><operator>)</operator><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>iPage</name> <operator>&gt;=</operator> <name>nPage</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name> <init>= <expr><operator>*</operator><name>ppPage</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>*</operator><name>ppPage</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeNext</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbPageDestroy</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nFree</name></name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ppPage</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppPage</name><operator>)</operator><operator>-&gt;</operator><name>pFreeNext</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name> <operator>=</operator> <name>nPage</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPCacheAlter</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbPCacheLock</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPCacheAlterImpl</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>nPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbPCacheUnlock</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SPage</name> <modifier>*</modifier></type><name>tdbPCacheFetch</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPgid</name> <modifier>*</modifier></type><name>pPgid</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i32</name></type>    <name>nRef</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbPCacheLock</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pPage</name> <operator>=</operator> <call><name>tdbPCacheFetchImpl</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pPgid</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pPage</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>tdbRefPage</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbPCacheUnlock</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// printf("thread %" PRId64 " fetch page %d pgno %d pPage %p nRef %d\n", taosGetSelfPthreadId(), pPage-&gt;id,</comment>
  <comment type="line">//        TDB_PAGE_PGNO(pPage), pPage, nRef);</comment>

  <if_stmt><if>if <condition>(<expr><name>pPage</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pcache/fetch page %p/%d/%d/%d"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>nRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pcache/fetch page %p"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pPage</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdbPCacheRelease</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>i32</name></type> <name>nRef</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// nRef = tdbUnrefPage(pPage);</comment>
  <comment type="line">// ASSERT(nRef &gt;= 0);</comment>

  <expr_stmt><expr><call><name>tdbPCacheLock</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>tdbUnrefPage</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pcache/release page %p/%d/%d/%d"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>nRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// test the nRef again to make sure</comment>
    <comment type="line">// it is safe th handle the page</comment>
    <comment type="line">// nRef = tdbGetPageRef(pPage);</comment>
    <comment type="line">// if (nRef == 0) {</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>isLocal</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbPCacheUnpinPage</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>TDB_TXN_IS_WRITE</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// remove from hash</comment>
        <expr_stmt><expr><call><name>tdbPCacheRemovePageFromHash</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tdbPageDestroy</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>xFree</name></name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>xArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// }</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tdbPCacheUnlock</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbPCacheGetPageSize</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pCache</name><operator>-&gt;</operator><name>szPage</name></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SPage</name> <modifier>*</modifier></type><name>tdbPCacheFetchImpl</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPgid</name> <modifier>*</modifier></type><name>pPgid</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPageH</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 1. Search the hash table</comment>
  <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pgHash</name><index>[<expr><call><name>tdbPCachePageHash</name><argument_list>(<argument><expr><name>pPgid</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>nHash</name></name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>pPage</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>pgid</name><operator>.</operator><name>pgno</name></name> <operator>==</operator> <name><name>pPgid</name><operator>-&gt;</operator><name>pgno</name></name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pgid</name><operator>.</operator><name>fileid</name></name></expr></argument>, <argument><expr><name><name>pPgid</name><operator>-&gt;</operator><name>fileid</name></name></expr></argument>, <argument><expr><name>TDB_FILE_ID_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pHashNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>pPage</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>isLocal</name></name> <operator>||</operator> <call><name>TDB_TXN_IS_WRITE</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbPCachePinPage</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>pPage</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// 1. pPage == NULL</comment>
  <comment type="line">// 2. pPage &amp;&amp; pPage-&gt;isLocal == 0 &amp;&amp; !TDB_TXN_IS_WRITE(pTxn)</comment>
  <expr_stmt><expr><name>pPageH</name> <operator>=</operator> <name>pPage</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// 2. Try to allocate a new page from the free list</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>pFree</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pFree</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pFree</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pFreeNext</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nFree</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// 3. Try to Recycle a page</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pPage</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCache</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>pLruPrev</name><operator>-&gt;</operator><name>isAnchor</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>pLruPrev</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbPCacheRemovePageFromHash</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbPCachePinPage</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// 4. Try a create new page</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pPage</name> <operator>&amp;&amp;</operator> <name><name>pTxn</name><operator>-&gt;</operator><name>xMalloc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPageCreate</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPage</name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>xMalloc</name></name></expr></argument>, <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>xArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pPage</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// init the page fields</comment>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>isAnchor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>isLocal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// 5. Page here are just created from a free list</comment>
  <comment type="line">// or by recycling or allocated streesly,</comment>
  <comment type="line">// need to initialize it</comment>
  <if_stmt><if>if <condition>(<expr><name>pPage</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pPageH</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// copy the page content</comment>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pgid</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pPgid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pPgid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>nLoops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pPageH</name><operator>-&gt;</operator><name>pPager</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>++</operator><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPager</name></name> <operator>=</operator> <name><name>pPageH</name><operator>-&gt;</operator><name>pPager</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pPageH</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// tdbDebug("pcache/pPageH: %p %ld %p %p %u", pPageH, pPageH-&gt;pPageHdr - pPageH-&gt;pData, pPageH-&gt;xCellSize, pPage,</comment>
      <comment type="line">//         TDB_PAGE_PGNO(pPageH));</comment>
      <expr_stmt><expr><call><name>tdbPageInit</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name><name>pPageH</name><operator>-&gt;</operator><name>pPageHdr</name></name> <operator>-</operator> <name><name>pPageH</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pPageH</name><operator>-&gt;</operator><name>xCellSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>kLen</name></name> <operator>=</operator> <name><name>pPageH</name><operator>-&gt;</operator><name>kLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>vLen</name></name> <operator>=</operator> <name><name>pPageH</name><operator>-&gt;</operator><name>vLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>=</operator> <name><name>pPageH</name><operator>-&gt;</operator><name>maxLocal</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>minLocal</name></name> <operator>=</operator> <name><name>pPageH</name><operator>-&gt;</operator><name>minLocal</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pgid</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pPgid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pPgid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pPager</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>isLocal</name></name> <operator>||</operator> <call><name>TDB_TXN_IS_WRITE</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdbPCacheAddPageToHash</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pPage</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdbPCachePinPage</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruNext</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>tdbGetPageRef</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruPrev</name><operator>-&gt;</operator><name>pLruNext</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pLruNext</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruNext</name><operator>-&gt;</operator><name>pLruPrev</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pLruPrev</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nRecyclable</name></name><operator>--</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pcache/pin page %p/%d/%d"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdbPCacheUnpinPage</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>i32</name></type> <name>nRef</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>isLocal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>pPage</name><operator>-&gt;</operator><name>isDirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>tdbGetPageRef</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruNext</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pCache:%p unpin page %p/%d/%d, nPages:%d"</literal></expr></argument>, <argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruPrev</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>lru</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruNext</name></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>pLruNext</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>pLruNext</name><operator>-&gt;</operator><name>pLruPrev</name></name> <operator>=</operator> <name>pPage</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>pLruNext</name></name> <operator>=</operator> <name>pPage</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nRecyclable</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="line">// printf("unpin page %d pgno %d pPage %p\n", pPage-&gt;id, TDB_PAGE_PGNO(pPage), pPage);</comment>
    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pcache/unpin page %p/%d/%d"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pcache destroy page: %p/%d/%d"</literal></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdbPCacheRemovePageFromHash</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbPageDestroy</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdbPCacheRemovePageFromHash</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><call><name>tdbPCachePageHash</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pgid</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>nHash</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPage</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>pgHash</name><index>[<expr><name>h</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>ppPage</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>ppPage</name> <operator>!=</operator> <name>pPage</name></expr>;</condition> <incr><expr><name>ppPage</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppPage</name><operator>)</operator><operator>-&gt;</operator><name>pHashNext</name></name><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <empty_stmt>;</empty_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppPage</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppPage</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pHashNext</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nPage</name></name><operator>--</operator></expr>;</expr_stmt>
    <comment type="line">// printf("rmv page %d to hash, pgno %d, pPage %p\n", pPage-&gt;id, TDB_PAGE_PGNO(pPage), pPage);</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pcache/remove page %p/%d/%d from hash %"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdbPCacheAddPageToHash</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><call><name>tdbPCachePageHash</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pgid</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>nHash</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pHashNext</name></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pgHash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pgHash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>pPage</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nPage</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"pcache/add page %p/%d/%d to hash %"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>, <argument><expr><call><name>TDB_PAGE_PGNO</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPCacheOpenImpl</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name>    <modifier>*</modifier></type><name>pPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>tsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbPCacheInitLock</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Open the free list</comment>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nFree</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pFree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tdbPageCreate</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPage</name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO: handle error</comment>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// pPage-&gt;pgid = 0;</comment>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>isAnchor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>isLocal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pHashNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pLruPrev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pDirtyNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="line">// add page to free list</comment>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeNext</name></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>pFree</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pFree</name></name> <operator>=</operator> <name>pPage</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nFree</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="line">// add to local list</comment>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pPage</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// Open the hash table</comment>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nHash</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name><name>pCache</name><operator>-&gt;</operator><name>nPages</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>pgHash</name></name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>nHash</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPage</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>pgHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Open LRU list</comment>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>nRecyclable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>isAnchor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>pLruNext</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>lru</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>lru</name><operator>.</operator><name>pLruPrev</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>lru</name></name><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tdbPCacheCloseImpl</name><parameter_list>(<parameter><decl><type><name>SPCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// free free page</comment>
  <for>for <control>(<init><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>pFree</name></name></expr></init></decl>;</init> <condition><expr><name>pPage</name></expr>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPageT</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>pFreeNext</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdbPageDestroy</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name>pPageT</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBucket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBucket</name> <operator>&lt;</operator> <name><name>pCache</name><operator>-&gt;</operator><name>nHash</name></name></expr>;</condition> <incr><expr><name>iBucket</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPage</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>pgHash</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>pPage</name></expr>;</condition><incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>pPageT</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>pHashNext</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tdbPageDestroy</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pPage</name> <operator>=</operator> <name>pPageT</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbPCacheDestroyLock</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
