<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/tdb/src/db/tdbDb.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbInt.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>tdbOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>szPage</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pages</name></decl></parameter>, <parameter><decl><type><name>TDB</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDb</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>dsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>zsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>tsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name>  <modifier>*</modifier></type><name>pPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppDb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>dsize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pDb</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dsize</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>TDB_JOURNAL_NAME</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>pPtr</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pPtr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <operator>(</operator><name>TDB</name> <operator>*</operator><operator>)</operator><name>pPtr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pPtr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pDb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <comment type="line">// pDb-&gt;rootDir</comment>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>dbName</name></name> <operator>=</operator> <name>pPtr</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>dbName</name><index>[<expr><name>dsize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pPtr</name> <operator>=</operator> <name>pPtr</name> <operator>+</operator> <name>dsize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <comment type="line">// pDb-&gt;jfname</comment>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>jnName</name></name> <operator>=</operator> <name>pPtr</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>jnName</name></name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>jnName</name><index>[<expr><name>dsize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>jnName</name></name> <operator>+</operator> <name>dsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>TDB_JOURNAL_NAME</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TDB_JOURNAL_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>jnName</name><index>[<expr><name>dsize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>TDB_JOURNAL_NAME</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>jfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPCacheOpen</name><argument_list>(<argument><expr><name>szPage</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pDb</name><operator>-&gt;</operator><name>pCache</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPager</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pgrHash</name></name> <operator>=</operator> <call><name>tdbOsMalloc</name><argument_list>(<argument><expr><name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDb</name><operator>-&gt;</operator><name>pgrHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pgrHash</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMulModeMkDir</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MAINDB</name></cpp:ifdef>
  <comment type="line">// open main db</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><name>TDB_MAINDB_NAME</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBtInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>pMainDb</name></name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><operator>*</operator><name>ppDb</name> <operator>=</operator> <name>pDb</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tdbClose</name><parameter_list>(<parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pDb</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MAINDB</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>pDb</name><operator>-&gt;</operator><name>pMainDb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMainDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <for>for <control>(<init><expr><name>pPager</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name></expr>;</init> <condition><expr><name>pPager</name></expr>;</condition> <incr><expr><name>pPager</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbPagerClose</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>tdbPCacheClose</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pgrHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdbAlter</name><parameter_list>(<parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pages</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbPCacheAlter</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdbBegin</name><parameter_list>(<parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTxn</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xMalloc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>xArg</name></decl></parameter>,
                 <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>txnId</name> <init>= <expr><operator>++</operator><name><name>pDb</name><operator>-&gt;</operator><name>txnId</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>txnId</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>txnId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name> <init>= <expr><call><name>tdbOsCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pTxn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTxn</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTxnOpen</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>, <argument><expr><name>txnId</name></expr></argument>, <argument><expr><name>xMalloc</name></expr></argument>, <argument><expr><name>xFree</name></expr></argument>, <argument><expr><name>xArg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbOsFree</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>pPager</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name></expr>;</init> <condition><expr><name>pPager</name></expr>;</condition> <incr><expr><name>pPager</name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerBegin</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to begin pager since %s. dbName:%s, txnId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>,
               <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbTxnClose</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>ppTxn</name> <operator>=</operator> <name>pTxn</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdbCommit</name><parameter_list>(<parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>pPager</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name></expr>;</init> <condition><expr><name>pPager</name></expr>;</condition> <incr><expr><name>pPager</name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerCommit</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to commit pager since %s. dbName:%s, txnId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>,
               <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdbPostCommit</name><parameter_list>(<parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>pPager</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name></expr>;</init> <condition><expr><name>pPager</name></expr>;</condition> <incr><expr><name>pPager</name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerPostCommit</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to commit pager since %s. dbName:%s, txnId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>,
               <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tdbTxnClose</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdbPrepareAsyncCommit</name><parameter_list>(<parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>pPager</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name></expr>;</init> <condition><expr><name>pPager</name></expr>;</condition> <incr><expr><name>pPager</name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerPrepareAsyncCommit</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to commit pager since %s. dbName:%s, txnId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>,
               <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdbAbort</name><parameter_list>(<parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>pTxn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>pPager</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name></expr>;</init> <condition><expr><name>pPager</name></expr>;</condition> <incr><expr><name>pPager</name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbPagerAbort</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbError</name><argument_list>(<argument><expr><literal type="string">"failed to abort pager since %s. dbName:%s, txnId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>,
               <argument><expr><name><name>pTxn</name><operator>-&gt;</operator><name>txnId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tdbTxnClose</name><argument_list>(<argument><expr><name>pTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SPager</name> <modifier>*</modifier></type><name>tdbEnvGetPager</name><parameter_list>(<parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type>      <name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPager</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>tdbCstringHash</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ppPager</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>pgrHash</name><index>[<expr><name>hash</name> <operator>%</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbttl getPager1: pager:%p, index:%d, name:%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>ppPager</name></expr></argument>, <argument><expr><name>hash</name> <operator>%</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>ppPager</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>ppPager</name><operator>)</operator><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><name>ppPager</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppPager</name><operator>)</operator><operator>-&gt;</operator><name>pHashNext</name></name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbttl getPager2: pager:%p, index:%d, name:%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>ppPager</name></expr></argument>, <argument><expr><name>hash</name> <operator>%</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>*</operator><name>ppPager</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdbEnvAddPager</name><parameter_list>(<parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type>      <name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPager</name></decl>;</decl_stmt>

  <comment type="line">// rehash if neccessary</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pDb</name><operator>-&gt;</operator><name>nPager</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add to list</comment>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name> <operator>=</operator> <name>pPager</name></expr>;</expr_stmt>

  <comment type="line">// add to hash</comment>
  <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>tdbCstringHash</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ppPager</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>pgrHash</name><index>[<expr><name>hash</name> <operator>%</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbttl addPager1: pager:%p, index:%d, name:%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>ppPager</name></expr></argument>, <argument><expr><name>hash</name> <operator>%</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPager</name><operator>-&gt;</operator><name>pHashNext</name></name> <operator>=</operator> <operator>*</operator><name>ppPager</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppPager</name> <operator>=</operator> <name>pPager</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTrace</name><argument_list>(<argument><expr><literal type="string">"tdbttl addPager2: pager:%p, index:%d, name:%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>ppPager</name></expr></argument>, <argument><expr><name>hash</name> <operator>%</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name></expr></argument>, <argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// increase the counter</comment>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nPager</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdbEnvRemovePager</name><parameter_list>(<parameter><decl><type><name>TDB</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SPager</name> <modifier>*</modifier></type><name>pPager</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type>      <name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPager</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPager</name></decl>;</decl_stmt>

  <comment type="line">// remove from the list</comment>
  <for>for <control>(<init><expr><name>ppPager</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>pgrList</name></name></expr>;</init> <condition><expr><operator>*</operator><name>ppPager</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ppPager</name> <operator>!=</operator> <name>pPager</name><operator>)</operator></expr>;</condition> <incr><expr><name>ppPager</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppPager</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>ppPager</name> <operator>==</operator> <name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppPager</name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

  <comment type="line">// remove from hash</comment>
  <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>tdbCstringHash</name><argument_list>(<argument><expr><name><name>pPager</name><operator>-&gt;</operator><name>dbFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ppPager</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>pgrHash</name><index>[<expr><name>hash</name> <operator>%</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name></expr>]</index></name></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>ppPager</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ppPager</name> <operator>!=</operator> <name>pPager</name></expr>;</condition> <incr><expr><name>ppPager</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppPager</name><operator>)</operator><operator>-&gt;</operator><name>pHashNext</name></name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>ppPager</name> <operator>==</operator> <name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppPager</name> <operator>=</operator> <name><name>pPager</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

  <comment type="line">// decrease the counter</comment>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nPager</name></name><operator>--</operator></expr>;</expr_stmt>

  <comment type="line">// rehash if necessary</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPager</name></name> <operator>&lt;</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nPgrHash</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
