<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/qworker/src/qworker.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dataSinkMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qwInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qwMsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>SQWorkerMgmt</name></type> <name>gQwMgmt</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>lock</name> <operator>=</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>qwRef</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>qwNum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>qwProcessHbLinkBroken</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>SQWMsg</name> <modifier>*</modifier></type><name>qwMsg</name></decl></parameter>, <parameter><decl><type><name>SSchedulerHbReq</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchedulerHbRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWSchStatus</name>   <modifier>*</modifier></type><name>sch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwAcquireScheduler</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>sId</name></name></expr></argument>, <argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>hbConnLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sch</name><operator>-&gt;</operator><name>hbBrokenTs</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <name><name>sch</name><operator>-&gt;</operator><name>hbConnInfo</name><operator>.</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmsgReleaseHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>hbConnInfo</name></name></expr></argument>, <argument><expr><name>TAOS_CONN_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sch</name><operator>-&gt;</operator><name>hbConnInfo</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sch</name><operator>-&gt;</operator><name>hbConnInfo</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_DLOG</name><argument_list>(<argument><expr><literal type="string">"release hb handle due to connection broken, handle:%p"</literal></expr></argument>, <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>QW_DLOG</name><argument_list>(<argument><expr><literal type="string">"ignore hb connection broken, handle:%p, currentHandle:%p"</literal></expr></argument>, <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>sch</name><operator>-&gt;</operator><name>hbConnInfo</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>hbConnLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qwReleaseScheduler</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeItem</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExplainExecInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>verboseInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwHandleTaskComplete</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>qTaskInfo_t</name></type> <name>taskHandle</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>taskHandle</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queryExecDone</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>TASK_TYPE_TEMP</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>taskType</name></name> <operator>&amp;&amp;</operator> <name>taskHandle</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>explain</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>execInfoList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExplainExecInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qGetExplainExecInfo</name><argument_list>(<argument><expr><name>taskHandle</name></expr></argument>, <argument><expr><name>execInfoList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>localExec</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SExplainLocalRsp</name></type> <name>localRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>localRsp</name><operator>.</operator><name>rsp</name><operator>.</operator><name>numOfPlans</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>execInfoList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SExplainExecInfo</name> <modifier>*</modifier></type><name>pExec</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>localRsp</name><operator>.</operator><name>rsp</name><operator>.</operator><name>numOfPlans</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExplainExecInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pExec</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>execInfoList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>localRsp</name><operator>.</operator><name>rsp</name><operator>.</operator><name>numOfPlans</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SExplainExecInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>localRsp</name><operator>.</operator><name>rsp</name><operator>.</operator><name>subplanInfo</name></name> <operator>=</operator> <name>pExec</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>localRsp</name><operator>.</operator><name>qId</name></name> <operator>=</operator> <name>qId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>localRsp</name><operator>.</operator><name>tId</name></name> <operator>=</operator> <name>tId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>localRsp</name><operator>.</operator><name>rId</name></name> <operator>=</operator> <name>rId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>localRsp</name><operator>.</operator><name>eId</name></name> <operator>=</operator> <name>eId</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>explainRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>localRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>execInfoList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SRpcHandleInfo</name></type> <name>connInfo</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ctrlConnInfo</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>connInfo</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>qwBuildAndSendExplainRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connInfo</name></expr></argument>, <argument><expr><name>execInfoList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>execInfoList</name></expr></argument>, <argument><expr><name>freeItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>needFetch</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dsGetDataLength</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>affectedRows</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwSendQueryRsp</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quickRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>quickRsp</name><operator>)</operator> <operator>||</operator> <name>QUERY_RSP_POLICY_QUICK</name> <operator>==</operator> <name>tsQueryRspPolicy</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>localExec</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qwBuildAndSendQueryRsp</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctrlConnInfo</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"query msg rsped, handle:%p, code:%x - %s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctrlConnInfo</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queryRsped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwExecTask</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>queryStop</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>qcontinue</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>       <name>useconds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>execNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>qTaskInfo_t</name></type>    <name>taskHandle</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>taskHandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DataSinkHandle</name></type> <name>sinkHandle</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLocalFetch</name></type>    <name>localFetch</name> <init>= <expr><block>{<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>mgmt</name></expr>, <expr><name><name>ctx</name><operator>-&gt;</operator><name>localExec</name></name></expr>, <expr><name>qWorkerProcessLocalFetch</name></expr>, <expr><name><name>ctx</name><operator>-&gt;</operator><name>explainRes</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>queryExecDone</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>queryStop</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>queryStop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pResList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"start to execTask, loopIdx:%d"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if *taskHandle is NULL, it's killed right now</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>hasMore</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>taskHandle</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qwDbgSimulateSleep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qExecTaskOpt</name><argument_list>(<argument><expr><name>taskHandle</name></expr></argument>, <argument><expr><name>pResList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>useconds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasMore</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>localFetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_OPS_NOT_SUPPORT</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"qExecTask failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"qExecTask failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>++</operator><name>execNum</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>numOfResBlock</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfResBlock</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SInputData</name></type> <name>inputData</name> <init>= <expr><block>{<expr><operator>.</operator><name>pData</name> <operator>=</operator> <name>pRes</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dsPutDataBlock</name><argument_list>(<argument><expr><name>sinkHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qcontinue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"dsPutDataBlock failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"data put into sink, rows:%d, continueExecTask:%d"</literal></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>qcontinue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>numOfResBlock</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>hasMore</name> <operator>==</operator> <name>false</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>numOfResBlock</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"qExecTask end with empty res, useconds:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>useconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"qExecTask done, useconds:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>useconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>dsEndPut</name><argument_list>(<argument><expr><name>sinkHandle</name></expr></argument>, <argument><expr><name>useconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwHandleTaskComplete</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>queryStop</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>queryStop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qcontinue</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>queryStop</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>queryStop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>needFetch</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryRsped</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>execNum</name> <operator>&gt;=</operator> <name>QW_DEFAULT_SHORT_RUN_TIMES</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_FETCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwGenerateSchHbRsp</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>sch</name></decl></parameter>, <parameter><decl><type><name>SQWHbInfo</name> <modifier>*</modifier></type><name>hbInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>hbInfo</name><operator>-&gt;</operator><name>connInfo</name></name> <operator>=</operator> <name><name>sch</name><operator>-&gt;</operator><name>hbConnInfo</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hbInfo</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>epId</name></name> <operator>=</operator> <name><name>sch</name><operator>-&gt;</operator><name>hbEpId</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>taskNum</name> <operator>=</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>sch</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hbInfo</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>taskStatus</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>taskNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaskStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>hbInfo</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>taskStatus</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit taskStatus failed, num:%d"</literal></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STaskStatus</name></type> <name>status</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>sch</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SQWTaskStatus</name> <modifier>*</modifier></type><name>taskStatus</name> <init>= <expr><operator>(</operator><name>SQWTaskStatus</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TODO GET EXECUTOR API TO GET MORE INFO</comment>

    <expr_stmt><expr><call><name>QW_GET_QTID</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>status</name><operator>.</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>status</name><operator>.</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>status</name><operator>.</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>taskStatus</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>status</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <name><name>taskStatus</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>hbInfo</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>taskStatus</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>sch</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwGetQueryResFromSink</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dataLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>rspMsg</name></decl></parameter>, <parameter><decl><type><name>SOutputData</name> <modifier>*</modifier></type><name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type>            <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>queryEnd</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOutputData</name></type>        <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>dataLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dsGetDataLength</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queryEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid length from dsGetDataLength, length:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>queryEnd</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dsGetDataBlock</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"dsGetDataBlock failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"no more data in sink and query end, fetched blocks %d rows %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>,
                     <argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>qwUpdateTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_SUCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>rsp</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwMallocFetchRsp</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>localExec</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>queryEnd</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>queryEnd</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>bufStatus</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>bufStatus</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>useconds</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>bufStatus</name></name> <operator>=</operator> <name>DS_BUF_EMPTY</name></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Got data from sink</comment>
    <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"there are data in sink, dataLength:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>dataLen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwMallocFetchRsp</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>localExec</name></name></expr></argument>, <argument><expr><operator>*</operator><name>dataLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>output</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>*</operator><name>dataLen</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dsGetDataBlock</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"dsGetDataBlock failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>queryEnd</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>queryEnd</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>bufStatus</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>bufStatus</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>useconds</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>compressed</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>numOfCols</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name><name>output</name><operator>.</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfBlocks</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>DS_BUF_EMPTY</name> <operator>==</operator> <name><name>pOutput</name><operator>-&gt;</operator><name>bufStatus</name></name> <operator>&amp;&amp;</operator> <name><name>pOutput</name><operator>-&gt;</operator><name>queryEnd</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task all data fetched and done, fetched blocks %d rows %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>,
                   <argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qwUpdateTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_SUCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task fetched blocks %d rows %"</literal> <name>PRId64</name> <literal type="string">", level %d"</literal></expr></argument>, <argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>, <argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>,
                   <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;=</operator> <name>QW_MIN_RES_ROWS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task fetched blocks %d rows %"</literal> <name>PRId64</name> <literal type="string">" reaches the min rows"</literal></expr></argument>, <argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>,
                   <argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>rspMsg</name> <operator>=</operator> <name>rsp</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwGetDeleteResFromSink</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SDeleteRes</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>queryEnd</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOutputData</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dsGetDataLength</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queryEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SDeleterRes</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid length from dsGetDataLength, length:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>output</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>output</name><operator>.</operator><name>pData</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dsGetDataBlock</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"dsGetDataBlock failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDeleterRes</name> <modifier>*</modifier></type><name>pDelRes</name> <init>= <expr><operator>(</operator><name>SDeleterRes</name> <operator>*</operator><operator>)</operator><name><name>output</name><operator>.</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pDelRes</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name> <operator>=</operator> <name><name>pDelRes</name><operator>-&gt;</operator><name>uidList</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <name><name>pDelRes</name><operator>-&gt;</operator><name>skey</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <name><name>pDelRes</name><operator>-&gt;</operator><name>ekey</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>affectedRows</name></name> <operator>=</operator> <name><name>pDelRes</name><operator>-&gt;</operator><name>affectedRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>tableFName</name></name></expr></argument>, <argument><expr><name><name>pDelRes</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>, <argument><expr><name><name>pDelRes</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwHandlePrePhaseEvents</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>phase</name></decl></parameter>, <parameter><decl><type><name>SQWPhaseInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>SQWPhaseOutput</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"start to handle event at phase %s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAcquireTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_SET_PHASE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryEnd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG_E</name><argument_list>(<argument><expr><literal type="string">"query already end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QW_MSG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name>phase</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QW_PHASE_PRE_QUERY</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_PROCESSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task already dropped at wrong phase %s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_TASK_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwDropTask</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// qwBuildAndSendDropRsp(&amp;ctx-&gt;ctrlConnInfo, code);</comment>
        <comment type="line">// QW_TASK_DLOG("drop rsp send, handle:%p, code:%x - %s", ctx-&gt;ctrlConnInfo.handle, code, tstrerror(code));</comment>

        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwUpdateTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_EXEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QW_PHASE_PRE_FETCH</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_PROCESSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_WLOG</name><argument_list>(<argument><expr><literal type="string">"task dropping or already dropped, phase:%s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_FETCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_WLOG</name><argument_list>(<argument><expr><literal type="string">"last fetch still not processed, phase:%s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_DUPLICATTED_OPERATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task already failed cause of %s, phase:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryRsped</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"ready msg has not been processed, phase:%s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_TASK_MSG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QW_PHASE_PRE_CQUERY</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_PROCESSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_WLOG</name><argument_list>(<argument><expr><literal type="string">"task already dropped, phase:%s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task already failed cause of %s, phase:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwDropTask</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// qwBuildAndSendDropRsp(&amp;ctx-&gt;ctrlConnInfo, code);</comment>
        <comment type="line">// QW_TASK_DLOG("drop rsp send, handle:%p, code:%x - %s", ctx-&gt;ctrlConnInfo.handle, code, tstrerror(code));</comment>

        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid phase %s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task already failed at phase %s, code:%s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UPDATE_RSP_CODE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qwReleaseTaskCtx</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"end to handle event at phase %s, code:%s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"end to handle event at phase %s, code:%s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwHandlePostPhaseEvents</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>phase</name></decl></parameter>, <parameter><decl><type><name>SQWPhaseInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>SQWPhaseOutput</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name>    <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcHandleInfo</name></type> <name>connInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"start to handle event at phase %s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAcquireTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_PROCESSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_WLOG</name><argument_list>(<argument><expr><literal type="string">"task already dropped, phase:%s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>QW_PHASE_POST_FETCH</name> <operator>==</operator> <name>phase</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_TASK_WLOG</name><argument_list>(<argument><expr><literal type="string">"drop received at wrong phase %s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// qwBuildAndSendDropRsp(&amp;ctx-&gt;ctrlConnInfo, code);</comment>
    <comment type="line">// QW_TASK_DLOG("drop rsp send, handle:%p, code:%x - %s", ctx-&gt;ctrlConnInfo.handle, code, tstrerror(code));</comment>

    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwDropTask</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task already failed, phase %s, error:%x - %s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>,
                 <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>QW_PHASE_POST_QUERY</name> <operator>==</operator> <name>phase</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qwUpdateTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_PART_SUCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queryGotData</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QW_PHASE_POST_QUERY</name> <operator>==</operator> <name>phase</name> <operator>&amp;&amp;</operator> <name>ctx</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryRsped</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>   <name>rsped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SQWMsg</name></type> <name>qwMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>msgType</name></name></expr>, <expr><operator>.</operator><name>connInfo</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ctrlConnInfo</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qwDbgSimulateRedirect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qwMsg</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qwDbgSimulateDead</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rsped</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qwSendQueryRsp</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UPDATE_RSP_CODE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_SET_PHASE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qwReleaseTaskCtx</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qwUpdateTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"end to handle event at phase %s, code:%x - %s"</literal></expr></argument>, <argument><expr><call><name>qwPhaseStr</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAbortPrerocessQuery</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwDropTask</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwPreprocessQuery</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWMsg</name> <modifier>*</modifier></type><name>qwMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwRegisterQueryBrokenLinkArg</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAddTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAcquireTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctrlConnInfo</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAddTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_INIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UPDATE_RSP_CODE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qwReleaseTaskCtx</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwProcessQuery</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWMsg</name> <modifier>*</modifier></type><name>qwMsg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>queryRsped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubplan</name>      <modifier>*</modifier></type><name>plan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWPhaseInput</name></type>  <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>qTaskInfo_t</name></type>    <name>pTaskInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DataSinkHandle</name></type> <name>sinkHandle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name>    <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwHandlePrePhaseEvents</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_PHASE_PRE_QUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwGetTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>taskType</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>taskType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>explain</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>explain</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>needFetch</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>needFetch</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>localExec</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <comment type="line">// QW_TASK_DLOGL("subplan json string, len:%d, %s", qwMsg-&gt;msgLen, qwMsg-&gt;msg);</comment>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qMsgToSubplan</name><argument_list>(<argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task physical plan to subplan failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qCreateExecTask</name><argument_list>(<argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTaskInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sinkHandle</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>OPTR_EXEC_MODEL_BATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sql</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"qCreateExecTask failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>sinkHandle</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTaskInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"create task result error, taskHandle:%p, sinkHandle:%p"</literal></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>sinkHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qwSendQueryRsp</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>plan</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>taskHandle</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>, <argument><expr><name>sinkHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qwSaveTbVersionInfo</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwExecTask</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>input</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>input</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qwHandlePostPhaseEvents</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_PHASE_POST_QUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_RSP_POLICY_QUICK</name> <operator>==</operator> <name>tsQueryRspPolicy</name> <operator>&amp;&amp;</operator> <name>ctx</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_FETCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>rsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SOutputData</name></type> <name>sOutput</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>qwGetQueryResFromSink</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sOutput</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>rsp</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>qComplete</name> <init>= <expr><operator>(</operator><name>DS_BUF_EMPTY</name> <operator>==</operator> <name><name>sOutput</name><operator>.</operator><name>bufStatus</name></name> <operator>&amp;&amp;</operator> <name><name>sOutput</name><operator>.</operator><name>queryEnd</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>qwBuildFetchRsp</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sOutput</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>qComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>qComplete</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryEnd</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dataConnInfo</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_SET_EVENT_PROCESSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_FETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>qwBuildAndSendFetchRsp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fetchType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rsp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"fetch rsp send, handle:%p, code:%x - %s, dataLen:%d"</literal></expr></argument>, <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwProcessCQuery</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWMsg</name> <modifier>*</modifier></type><name>qwMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWTaskCtx</name>   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWPhaseInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>rsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>queryStop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwHandlePrePhaseEvents</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_PHASE_PRE_CQUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwGetTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryInQueue</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryContinue</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwExecTask</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queryStop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_FETCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SOutputData</name></type> <name>sOutput</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwGetQueryResFromSink</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>sOutput</name><operator>.</operator><name>queryEnd</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>DS_BUF_LOW</name> <operator>==</operator> <name><name>sOutput</name><operator>.</operator><name>bufStatus</name></name> <operator>||</operator> <name>DS_BUF_EMPTY</name> <operator>==</operator> <name><name>sOutput</name><operator>.</operator><name>bufStatus</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task not end and buf is %s, need to continue query"</literal></expr></argument>, <argument><expr><call><name>qwBufStatusStr</name><argument_list>(<argument><expr><name><name>sOutput</name><operator>.</operator><name>bufStatus</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryContinue</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>rsp</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>qComplete</name> <init>= <expr><operator>(</operator><name>DS_BUF_EMPTY</name> <operator>==</operator> <name><name>sOutput</name><operator>.</operator><name>bufStatus</name></name> <operator>&amp;&amp;</operator> <name><name>sOutput</name><operator>.</operator><name>queryEnd</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>qwBuildFetchRsp</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sOutput</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>qComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>qComplete</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryEnd</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dataConnInfo</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_SET_EVENT_PROCESSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_FETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>qwBuildAndSendFetchRsp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fetchType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rsp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"fetch rsp send, handle:%p, code:%x - %s, dataLen:%d"</literal></expr></argument>, <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>,
                     <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryContinue</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

  <label><name>_return</name>:</label>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;&amp;</operator> <call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_FETCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_SET_EVENT_PROCESSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_FETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qwFreeFetchRsp</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rsp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dataConnInfo</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qwBuildAndSendFetchRsp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fetchType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"fetch rsp send, handle:%p, code:%x - %s, dataLen:%d"</literal></expr></argument>, <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>queryStop</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryContinue</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <name>code</name> <operator>||</operator>
        <literal type="number">0</literal> <operator>==</operator> <call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryContinue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Note: query is not running anymore</comment>
      <expr_stmt><expr><call><name>QW_SET_PHASE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

  <expr_stmt><expr><name><name>input</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qwHandlePostPhaseEvents</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_PHASE_POST_CQUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwProcessFetch</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWMsg</name> <modifier>*</modifier></type><name>qwMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>locked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name>   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>rsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWPhaseInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwHandlePrePhaseEvents</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_PHASE_PRE_FETCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwGetTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dataConnInfo</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SOutputData</name></type> <name>sOutput</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwGetQueryResFromSink</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>rsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SET_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_FETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>qComplete</name> <init>= <expr><operator>(</operator><name>DS_BUF_EMPTY</name> <operator>==</operator> <name><name>sOutput</name><operator>.</operator><name>bufStatus</name></name> <operator>&amp;&amp;</operator> <name><name>sOutput</name><operator>.</operator><name>queryEnd</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>qwBuildFetchRsp</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sOutput</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>qComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>qComplete</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryEnd</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>sOutput</name><operator>.</operator><name>queryEnd</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>DS_BUF_LOW</name> <operator>==</operator> <name><name>sOutput</name><operator>.</operator><name>bufStatus</name></name> <operator>||</operator> <name>DS_BUF_EMPTY</name> <operator>==</operator> <name><name>sOutput</name><operator>.</operator><name>bufStatus</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task not end and buf is %s, need to continue query"</literal></expr></argument>, <argument><expr><call><name>qwBufStatusStr</name><argument_list>(<argument><expr><name><name>sOutput</name><operator>.</operator><name>bufStatus</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>locked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <comment type="line">// RC WARNING</comment>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>phase</name></name> <operator>||</operator> <name>false</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>queryGotData</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_TASK_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"task query unfinished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>QW_QUERY_RUNNING</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryContinue</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryInQueue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qwUpdateTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryInQueue</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwBuildAndSendCQueryMsg</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>locked</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>input</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qwHandlePostPhaseEvents</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_PHASE_POST_FETCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qwFreeFetchRsp</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rsp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dataLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>||</operator> <name>rsp</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>rsped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qwDbgSimulateRedirect</name><argument_list>(<argument><expr><name>qwMsg</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qwDbgSimulateDead</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rsped</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qwBuildAndSendFetchRsp</name><argument_list>(<argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"%s send, handle:%p, code:%x - %s, dataLen:%d"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwProcessDrop</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWMsg</name> <modifier>*</modifier></type><name>qwMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>dropped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>locked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAcquireTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>locked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_WLOG_E</name><argument_list>(<argument><expr><literal type="string">"task already dropping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_DUPLICATTED_OPERATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>QW_QUERY_RUNNING</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwKillTaskHandle</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TSDB_CODE_TSC_QUERY_CANCELLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qwUpdateTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_DROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwDropTask</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dropped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dropped</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UPDATE_RSP_CODE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TSDB_CODE_TSC_QUERY_CANCELLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_SET_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_UPDATE_RSP_CODE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qwUpdateTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>locked</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qwReleaseTaskCtx</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwProcessHb</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>SQWMsg</name> <modifier>*</modifier></type><name>qwMsg</name></decl></parameter>, <parameter><decl><type><name>SSchedulerHbReq</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchedulerHbRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWSchStatus</name>   <modifier>*</modifier></type><name>sch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>qwMsg</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><call><name>qwProcessHbLinkBroken</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>qwMsg</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAcquireAddScheduler</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>sId</name></name></expr></argument>, <argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwRegisterHbBrokenLinkArg</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>sId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sch</name><operator>-&gt;</operator><name>hbBrokenTs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>hbConnLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sch</name><operator>-&gt;</operator><name>hbConnInfo</name><operator>.</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmsgReleaseHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>hbConnInfo</name></name></expr></argument>, <argument><expr><name>TAOS_CONN_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sch</name><operator>-&gt;</operator><name>hbConnInfo</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>hbConnInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>hbEpId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>epId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>epId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>hbConnLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_DLOG</name><argument_list>(<argument><expr><literal type="string">"hb connection updated, sId:%"</literal> <name>PRIx64</name> <literal type="string">", nodeId:%d, fqdn:%s, port:%d, handle:%p, ahandle:%p"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>sId</name></name></expr></argument>,
          <argument><expr><name><name>req</name><operator>-&gt;</operator><name>epId</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>epId</name><operator>.</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>epId</name><operator>.</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qwReleaseScheduler</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>.</operator><name>epId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>epId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>epId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qwBuildAndSendHbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmsgReleaseHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>, <argument><expr><name>TAOS_CONN_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*QW_DLOG("hb rsp send, handle:%p, code:%x - %s", qwMsg-&gt;connInfo.handle, code, tstrerror(code));*/</comment>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwProcessHbTimerEvent</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWHbParam</name> <modifier>*</modifier></type><name>hbParam</name> <init>= <expr><operator>(</operator><name>SQWHbParam</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>hbParam</name><operator>-&gt;</operator><name>qwrId</name></name> <operator>!=</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>qwRef</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>   <name>refId</name> <init>= <expr><name><name>hbParam</name><operator>-&gt;</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><call><name>qwAcquire</name><argument_list>(<argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>mgmt</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_DLOG</name><argument_list>(<argument><expr><literal type="string">"qwAcquire %"</literal> <name>PRIx64</name> <literal type="string">"failed"</literal></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>sch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>taskNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWHbInfo</name>    <modifier>*</modifier></type><name>rspList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>       <modifier>*</modifier></type><name>pExpiredSch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qwDbgDumpMgmtInfo</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>schNum</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>schNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>qwProcessHbTimerEvent</name></expr></argument>, <argument><expr><name>QW_DEFAULT_HEARTBEAT_MSEC</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>hbTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qwRelease</name><argument_list>(<argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rspList</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>schNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQWHbInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pExpiredSch</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>schNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>rspList</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pExpiredSch</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>rspList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pExpiredSch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d SQWHbInfo failed"</literal></expr></argument>, <argument><expr><name>schNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>qwProcessHbTimerEvent</name></expr></argument>, <argument><expr><name>QW_DEFAULT_HEARTBEAT_MSEC</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>hbTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qwRelease</name><argument_list>(<argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>currentMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>sch1</name> <init>= <expr><operator>(</operator><name>SQWSchStatus</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>sch1</name><operator>-&gt;</operator><name>hbConnInfo</name><operator>.</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>sId</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>QW_TLOG</name><argument_list>(<argument><expr><literal type="string">"cancel send hb to sch %"</literal> <name>PRIx64</name> <literal type="string">" cause of no connection handle"</literal></expr></argument>, <argument><expr><operator>*</operator><name>sId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>sch1</name><operator>-&gt;</operator><name>hbBrokenTs</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>currentMs</name> <operator>-</operator> <name><name>sch1</name><operator>-&gt;</operator><name>hbBrokenTs</name></name><operator>)</operator> <operator>&gt;</operator> <name>QW_SCH_TIMEOUT_MSEC</name><operator>)</operator> <operator>&amp;&amp;</operator>
          <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>sch1</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pExpiredSch</name></expr></argument>, <argument><expr><name>sId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qwGenerateSchHbRsp</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><operator>(</operator><name>SQWSchStatus</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rspList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>qwBuildAndSendHbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspList</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>connInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rspList</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rsp</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*QW_DLOG("hb rsp send, handle:%p, code:%x - %s, taskNum:%d", rspList[j].connInfo.handle, code, tstrerror(code),*/</comment>
    <comment type="block">/*(rspList[j].rsp.taskStatus ? (int32_t)taosArrayGetSize(rspList[j].rsp.taskStatus) : 0));*/</comment>
    <expr_stmt><expr><call><name>tFreeSSchedulerHbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspList</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pExpiredSch</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qwClearExpiredSch</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>pExpiredSch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>rspList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pExpiredSch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>qwProcessHbTimerEvent</name></expr></argument>, <argument><expr><name>QW_DEFAULT_HEARTBEAT_MSEC</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>hbTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qwRelease</name><argument_list>(<argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwProcessDelete</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWMsg</name> <modifier>*</modifier></type><name>qwMsg</name></decl></parameter>, <parameter><decl><type><name>SDeleteRes</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubplan</name>      <modifier>*</modifier></type><name>plan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>qTaskInfo_t</name></type>    <name>pTaskInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DataSinkHandle</name></type> <name>sinkHandle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name></type>     <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qMsgToSubplan</name><argument_list>(<argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task physical plan to subplan failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qCreateExecTask</name><argument_list>(<argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTaskInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sinkHandle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPTR_EXEC_MODEL_BATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"qCreateExecTask failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>sinkHandle</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTaskInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"create task result error, taskHandle:%p, sinkHandle:%p"</literal></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>sinkHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>taskHandle</name></name> <operator>=</operator> <name>pTaskInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>sinkHandle</name></name> <operator>=</operator> <name>sinkHandle</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwExecTask</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwGetDeleteResFromSink</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>qwFreeTaskCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerInit</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>nodeType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nodeId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMsgCb</name> <modifier>*</modifier></type><name>pMsgCb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>qWorkerMgmt</name> <operator>||</operator> <operator>(</operator><name>pMsgCb</name> <operator>&amp;&amp;</operator> <name><name>pMsgCb</name><operator>-&gt;</operator><name>mgmt</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid param to init qworker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>qwNum</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>qwNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>qwNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>gQwMgmt</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>gQwMgmt</name><operator>.</operator><name>param</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>qwOpenRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>qwNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>mgmt</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SQWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>qwNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxSchedulerNum</name></name> <operator>=</operator> <name>QW_DEFAULT_SCHEDULER_NUMBER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxTaskNum</name></name> <operator>=</operator> <name>QW_DEFAULT_TASK_NUMBER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxSchTaskNum</name></name> <operator>=</operator> <name>QW_DEFAULT_SCH_TASK_NUMBER</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxSchedulerNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                               <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"init %d scheduler hash failed"</literal></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxSchedulerNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxTaskNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"init %d task ctx hash failed"</literal></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxTaskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <call><name>taosTmrInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"qworker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>timer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"init timer failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>=</operator> <name>nodeType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>=</operator> <name>nodeId</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMsgCb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>msgCb</name></name> <operator>=</operator> <operator>*</operator><name>pMsgCb</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name><name>gQwMgmt</name><operator>.</operator><name>qwRef</name></name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>mgmt</name><operator>-&gt;</operator><name>refId</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosAddRef qw failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQWHbParam</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qwSetHbParam</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>hbTimer</name></name> <operator>=</operator> <call><name>taosTmrStart</name><argument_list>(<argument><expr><name>qwProcessHbTimerEvent</name></expr></argument>, <argument><expr><name>QW_DEFAULT_HEARTBEAT_MSEC</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>param</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>hbTimer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"start hb timer failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>qWorkerMgmt</name> <operator>=</operator> <name>mgmt</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"qworker initialized, type:%d, id:%d, handle:%p"</literal></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeType</name></name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name><name>mgmt</name><operator>-&gt;</operator><name>refId</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qwRelease</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosTmrCleanUp</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>qwNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qWorkerStopAllTasks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_DLOG</name><argument_list>(<argument><expr><literal type="string">"start to stop all tasks, taskNum:%d"</literal></expr></argument>, <argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name></decl>, <decl><type ref="prev"/><name>tId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SQWTaskCtx</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QW_GET_QTID</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_TASK_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start to force stop task"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>QW_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>QW_EVENT_PROCESSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_TASK_WLOG_E</name><argument_list>(<argument><expr><literal type="string">"task already dropping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>QW_QUERY_RUNNING</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qwKillTaskHandle</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TSDB_CODE_VND_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>QW_EVENT_PROCESSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_UPDATE_RSP_CODE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TSDB_CODE_VND_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_SET_EVENT_RECEIVED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qWorkerDestroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>qWorkerMgmt</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>*</operator><name>qWorkerMgmt</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>destroyed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>*</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>destroyed</name></name> <operator>=</operator> <operator>&amp;</operator><name>destroyed</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name><name>gQwMgmt</name><operator>.</operator><name>qwRef</name></name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"remove qw from ref list failed, refId:%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>destroyed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerGetStat</name><parameter_list>(<parameter><decl><type><name>SReadHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><name>SQWorkerStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>handle</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>qWorkerMgmt</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pStat</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQWorker</name>     <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataSinkStat</name></type> <name>sinkStat</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dsDataSinkGetCacheSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sinkStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>cacheDataSize</name></name> <operator>=</operator> <name><name>sinkStat</name><operator>.</operator><name>cachedSize</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>queryProcessed</name></name> <operator>=</operator> <call><name>QW_STAT_GET</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>queryProcessed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>cqueryProcessed</name></name> <operator>=</operator> <call><name>QW_STAT_GET</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>cqueryProcessed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>fetchProcessed</name></name> <operator>=</operator> <call><name>QW_STAT_GET</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>fetchProcessed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>dropProcessed</name></name> <operator>=</operator> <call><name>QW_STAT_GET</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>dropProcessed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>hbProcessed</name></name> <operator>=</operator> <call><name>QW_STAT_GET</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>hbProcessed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>deleteProcessed</name></name> <operator>=</operator> <call><name>QW_STAT_GET</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>deleteProcessed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfQueryInQueue</name></name> <operator>=</operator> <call><name><name>handle</name><operator>-&gt;</operator><name>pMsgCb</name><operator>-&gt;</operator><name>qsizeFp</name></name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>pMsgCb</name><operator>-&gt;</operator><name>mgmt</name></name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name>QUERY_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfFetchInQueue</name></name> <operator>=</operator> <call><name><name>handle</name><operator>-&gt;</operator><name>pMsgCb</name><operator>-&gt;</operator><name>qsizeFp</name></name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>pMsgCb</name><operator>-&gt;</operator><name>mgmt</name></name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name>FETCH_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>timeInQueryQueue</name></name> <operator>=</operator> <call><name>qwGetTimeInQueue</name><argument_list>(<argument><expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></argument>, <argument><expr><name>QUERY_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>timeInFetchQueue</name></name> <operator>=</operator> <call><name>qwGetTimeInQueue</name><argument_list>(<argument><expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></argument>, <argument><expr><name>FETCH_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerProcessLocalQuery</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>qId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>tId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>rId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eId</name></decl></parameter>,
                                 <parameter><decl><type><name>SQWMsg</name> <modifier>*</modifier></type><name>qwMsg</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>explainRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWorker</name>      <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>pMgmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name>    <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubplan</name>      <modifier>*</modifier></type><name>plan</name> <init>= <expr><operator>(</operator><name>SSubplan</name> <operator>*</operator><operator>)</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWPhaseInput</name></type>  <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>qTaskInfo_t</name></type>    <name>pTaskInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DataSinkHandle</name></type> <name>sinkHandle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SReadHandle</name></type>    <name>rHandle</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAddTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAddTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>JOB_TASK_STATUS_INIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwHandlePrePhaseEvents</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_PHASE_PRE_QUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAcquireTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>taskType</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>taskType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>explain</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>explain</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>needFetch</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>needFetch</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>localExec</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>explainRes</name></name> <operator>=</operator> <name>explainRes</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rHandle</name><operator>.</operator><name>pMsgCb</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgCb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rHandle</name><operator>.</operator><name>pMsgCb</name><operator>-&gt;</operator><name>clientRpc</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qCreateExecTask</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rHandle</name></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTaskInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sinkHandle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPTR_EXEC_MODEL_BATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"qCreateExecTask failed, code:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>sinkHandle</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTaskInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"create task result error, taskHandle:%p, sinkHandle:%p"</literal></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>sinkHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>plan</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>taskHandle</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>, <argument><expr><name>sinkHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwExecTask</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>rHandle</name><operator>.</operator><name>pMsgCb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>input</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>input</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qwHandlePostPhaseEvents</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_PHASE_POST_QUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UPDATE_RSP_CODE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qwReleaseTaskCtx</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerProcessLocalFetch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>qId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>tId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>rId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eId</name></decl></parameter>,
                                 <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRsp</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>explainRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWorker</name>   <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>pMgmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>rsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>queryStop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SQWPhaseInput</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwHandlePrePhaseEvents</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_PHASE_PRE_FETCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwGetTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SCH_MERGE_FETCH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>explainRes</name></name> <operator>=</operator> <name>explainRes</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SOutputData</name></type> <name>sOutput</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwGetQueryResFromSink</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>rsp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwExecTask</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queryStop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>qComplete</name> <init>= <expr><operator>(</operator><name>DS_BUF_EMPTY</name> <operator>==</operator> <name><name>sOutput</name><operator>.</operator><name>bufStatus</name></name> <operator>&amp;&amp;</operator> <name><name>sOutput</name><operator>.</operator><name>queryEnd</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>qwBuildFetchRsp</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sOutput</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>qComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>qComplete</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queryEnd</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

<label><name>_return</name>:</label>

  <expr_stmt><expr><operator>*</operator><name>pRsp</name> <operator>=</operator> <name>rsp</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>input</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qwHandlePostPhaseEvents</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_PHASE_POST_FETCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
