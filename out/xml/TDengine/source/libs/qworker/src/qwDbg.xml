<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/qworker/src/qwDbg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dataSinkMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qwInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qwMsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>SQWDebug</name></type> <name>gQWDebug</name> <init>= <expr><block>{<expr><operator>.</operator><name>statusEnable</name> <operator>=</operator> <name>true</name></expr>,
                     <expr><operator>.</operator><name>dumpEnable</name> <operator>=</operator> <name>false</name></expr>,
                     <expr><operator>.</operator><name>redirectSimulate</name> <operator>=</operator> <name>false</name></expr>,
                     <expr><operator>.</operator><name>deadSimulate</name> <operator>=</operator> <name>false</name></expr>,
                     <expr><operator>.</operator><name>sleepSimulate</name> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>qwDbgValidateStatus</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>oriStatus</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>newStatus</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gQWDebug</name><operator>.</operator><name>statusEnable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>oriStatus</name> <operator>==</operator> <name>newStatus</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>==</operator> <name>JOB_TASK_STATUS_EXEC</name> <operator>||</operator> <name>newStatus</name> <operator>==</operator> <name>JOB_TASK_STATUS_FAIL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ignore</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name>oriStatus</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JOB_TASK_STATUS_NULL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_EXEC</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_FAIL</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_INIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    <case>case <expr><name>JOB_TASK_STATUS_INIT</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_DROP</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_EXEC</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_FAIL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    <case>case <expr><name>JOB_TASK_STATUS_EXEC</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_PART_SUCC</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_SUCC</name> <operator>&amp;&amp;</operator>
          <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_FAIL</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_DROP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    <case>case <expr><name>JOB_TASK_STATUS_PART_SUCC</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_EXEC</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_SUCC</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_FAIL</name> <operator>&amp;&amp;</operator>
          <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_DROP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    <case>case <expr><name>JOB_TASK_STATUS_SUCC</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_DROP</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_FAIL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    <case>case <expr><name>JOB_TASK_STATUS_FAIL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_DROP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><name>JOB_TASK_STATUS_DROP</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_FAIL</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>!=</operator> <name>JOB_TASK_STATUS_PART_SUCC</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid task origStatus:%s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>oriStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid task status update from %s to %s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>oriStatus</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>newStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwDbgDumpSchInfo</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>sch</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskNum</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>sch</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_DLOG</name><argument_list>(<argument><expr><literal type="string">"***The %dth scheduler status, hbBrokenTs:%"</literal> <name>PRId64</name> <literal type="string">",taskNum:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sch</name><operator>-&gt;</operator><name>hbBrokenTs</name></name></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name></decl>, <decl><type ref="prev"/><name>tId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskStatus</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>sch</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pTask</name> <operator>=</operator> <operator>(</operator><name>SQWTaskStatus</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QW_GET_QTID</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"job refId:%"</literal> <name>PRIx64</name> <literal type="string">", code:%x, task status:%d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>sch</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  
  <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwDbgDumpTasksInfo</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>QW_DUMP</name><argument_list>(<argument><expr><literal type="string">"***Total remain ctx num %d"</literal></expr></argument>, <argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name></decl>, <decl><type ref="prev"/><name>tId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>SQWTaskCtx</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QW_GET_QTID</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"%p lock:%x, phase:%d, type:%d, explain:%d, needFetch:%d, localExec:%d, msgType:%d, fetchType:%d, "</literal>
      <literal type="string">"execId:%x, level:%d, queryGotData:%d, queryRsped:%d, queryEnd:%d, queryContinue:%d, queryInQueue:%d, "</literal>
      <literal type="string">"rspCode:%x, affectedRows:%"</literal> <name>PRId64</name> <literal type="string">", taskHandle:%p, sinkHandle:%p, tbFName:%s, sver:%d, tver:%d, events:%d,%d,%d,%d,%d"</literal></expr></argument>,
      <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>taskType</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>explain</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>needFetch</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>localExec</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>,
      <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fetchType</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>queryGotData</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>queryRsped</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>queryEnd</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>queryContinue</name></name></expr></argument>, 
      <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>queryInQueue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rspCode</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>affectedRows</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>taskHandle</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>,
      <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>sversion</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>tversion</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>QW_EVENT_CANCEL</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>QW_EVENT_READY</name></expr>]</index></name></expr></argument>, 
      <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>QW_EVENT_FETCH</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>QW_EVENT_DROP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>QW_EVENT_CQUERY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwDbgDumpMgmtInfo</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gQWDebug</name><operator>.</operator><name>dumpEnable</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_DUMP</name><argument_list>(<argument><expr><literal type="string">"total remain scheduler num %d"</literal></expr></argument>, <argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>        <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>sch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sch</name> <operator>=</operator> <operator>(</operator><name>SQWSchStatus</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qwDbgDumpSchInfo</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>sch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qwDbgDumpTasksInfo</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwDbgBuildAndSendRedirectRsp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rspType</name></decl></parameter>, <parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>rsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pEpSet</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>contLen</name> <operator>=</operator> <call><name>tSerializeSEpSet</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tSerializeSEpSet</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>rspType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>rsp</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>contLen</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rpcRsp</name><operator>.</operator><name>info</name><operator>.</operator><name>hasEpSet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"response %s msg, code: %s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>rspType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwDbgSimulateRedirect</name><parameter_list>(<parameter><decl><type><name>SQWMsg</name> <modifier>*</modifier></type><name>qwMsg</name></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>rsped</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>ignoreTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rsped</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gQWDebug</name><operator>.</operator><name>redirectSimulate</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>ignoreTime</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TDMT_SCH_QUERY</name> <operator>==</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SEpSet</name></type> <name>epSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>inUse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <literal type="number">7100</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <literal type="number">7200</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <literal type="number">7300</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <name>QW_PHASE_POST_QUERY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qwDbgBuildAndSendRedirectRsp</name><argument_list>(<argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_SYN_NOT_LEADER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>rsped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TDMT_SCH_MERGE_QUERY</name> <operator>==</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_SET_PHASE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_PHASE_POST_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qwDbgBuildAndSendRedirectRsp</name><argument_list>(<argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_SYN_NOT_LEADER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>rsped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>TDMT_SCH_FETCH</name> <operator>==</operator> <name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qwDbgBuildAndSendRedirectRsp</name><argument_list>(<argument><expr><name><name>qwMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qwMsg</name><operator>-&gt;</operator><name>connInfo</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_SYN_NOT_LEADER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>rsped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwDbgSimulateSleep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gQWDebug</name><operator>.</operator><name>sleepSimulate</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>ignoreTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>++</operator><name>ignoreTime</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosSsleep</name><argument_list>(<argument><expr><call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwDbgSimulateDead</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>rsped</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gQWDebug</name><operator>.</operator><name>deadSimulate</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rsped</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>ignoreTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>++</operator><name>ignoreTime</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name> <init>=
        <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SCH_FETCH</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SCH_MERGE_FETCH</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dataConnInfo</name></name></expr>
                                                                                  </then><else>: <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctrlConnInfo</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qwBuildAndSendErrorRsp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>TSDB_CODE_RPC_BROKEN_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>qwBuildAndSendDropMsg</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>rsped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <return>return;</return>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwDbgEnableDebug</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"lock"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gQWDebug</name><operator>.</operator><name>lockEnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"qw lock debug enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gQWDebug</name><operator>.</operator><name>statusEnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"qw status debug enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"dump"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gQWDebug</name><operator>.</operator><name>dumpEnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"qw dump debug enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"sleep"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gQWDebug</name><operator>.</operator><name>sleepSimulate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"qw sleep debug enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"dead"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gQWDebug</name><operator>.</operator><name>deadSimulate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"qw dead debug enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"redirect"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gQWDebug</name><operator>.</operator><name>redirectSimulate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"qw redirect debug enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid qw debug option:%s"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
</block_content>}</block></function>
</unit>
