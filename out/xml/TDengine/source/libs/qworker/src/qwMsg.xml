<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/qworker/src/qwMsg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qwMsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dataSinkMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qwInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tgrant.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>qwMallocFetchRsp</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>rpcMalloc</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier><modifier>*</modifier></type><name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>length</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier></type><name>pRsp</name> <init>=
      <expr><operator>(</operator><name>SRetrieveTableRsp</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>rpcMalloc</name></expr> ?</condition><then> <expr><call><name>rpcReallocCont</name><argument_list>(<argument><expr><operator>*</operator><name>rsp</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><operator>*</operator><name>rsp</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"rpcMallocCont %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>rsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>rsp</name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwBuildFetchRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>SOutputData</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>qComplete</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><operator>(</operator><name>SRetrieveTableRsp</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>useconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>completed</name></name> <operator>=</operator> <name>qComplete</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>compressed</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>compLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwFreeFetchRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwBuildAndSendErrorRsp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rspType</name></decl></parameter>, <parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>rspType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>NULL</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwBuildAndSendQueryRsp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rspType</name></decl></parameter>, <parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STbVerInfo</name>     <modifier>*</modifier></type><name>tbInfo</name> <init>= <expr><ternary><condition><expr><name>ctx</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>affectedRows</name> <init>= <expr><ternary><condition><expr><name>ctx</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>affectedRows</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryTableRsp</name></type>  <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>affectedRows</name></name> <operator>=</operator> <name>affectedRows</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tbInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><name><name>tbInfo</name><operator>-&gt;</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>sversion</name></name> <operator>=</operator> <name><name>tbInfo</name><operator>-&gt;</operator><name>sversion</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>tversion</name></name> <operator>=</operator> <name><name>tbInfo</name><operator>-&gt;</operator><name>tversion</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><call><name>tSerializeSQueryTableRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSQueryTableRsp failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"rpcMallocCont %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tSerializeSQueryTableRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSQueryTableRsp %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>rspType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pRsp</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgSize</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwBuildAndSendExplainRsp</name><parameter_list>(<parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pExecList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExplainExecInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pExecList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainRsp</name></type>       <name>rsp</name> <init>= <expr><block>{<expr><operator>.</operator><name>numOfPlans</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pExecList</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>subplanInfo</name> <operator>=</operator> <name>pInfo</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSExplainRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSExplainRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_SCH_EXPLAIN_RSP</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pRsp</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>contLen</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>rpcRsp</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwBuildAndSendHbRsp</name><parameter_list>(<parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>, <parameter><decl><type><name>SSchedulerHbRsp</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSSchedulerHbRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pStatus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSSchedulerHbRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>pStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_SCH_QUERY_HEARTBEAT_RSP</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>contLen</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pRsp</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwBuildAndSendFetchRsp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rspType</name></decl></parameter>, <parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataLength</name></decl></parameter>,
                               <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <operator>(</operator><name>SRetrieveTableRsp</name> <operator>*</operator><operator>)</operator><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dataLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>rspType</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pRsp</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pRsp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dataLength</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t qwBuildAndSendCancelRsp(SRpcHandleInfo *pConn, int32_t code) {
  STaskCancelRsp *pRsp = (STaskCancelRsp *)rpcMallocCont(sizeof(STaskCancelRsp));
  pRsp-&gt;code = code;

  SRpcMsg rpcRsp = {
      .msgType = TDMT_SCH_CANCEL_TASK_RSP,
      .pCont = pRsp,
      .contLen = sizeof(*pRsp),
      .code = code,
      .info = *pConn,
  };

  tmsgSendRsp(&amp;rpcRsp);
  return TSDB_CODE_SUCCESS;
}

int32_t qwBuildAndSendDropRsp(SRpcHandleInfo *pConn, int32_t code) {
  STaskDropRsp *pRsp = (STaskDropRsp *)rpcMallocCont(sizeof(STaskDropRsp));
  pRsp-&gt;code = code;

  SRpcMsg rpcRsp = {
      .msgType = TDMT_SCH_DROP_TASK_RSP,
      .pCont = pRsp,
      .contLen = sizeof(*pRsp),
      .code = code,
      .info = *pConn,
  };

  tmsgSendRsp(&amp;rpcRsp);
  return TSDB_CODE_SUCCESS;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>qwBuildAndSendDropMsg</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaskDropReq</name></type> <name>qMsg</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>header</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>sId</name></name> <operator>=</operator> <name>sId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>queryId</name></name> <operator>=</operator> <name>qId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>tId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <name>rId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <name>eId</name></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><call><name>tSerializeSTaskDropReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>qMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSTaskDropReq get size, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"rpcMallocCont %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>tSerializeSTaskDropReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qMsg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSTaskDropReq failed, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>pNewMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_SCH_DROP_TASK</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgSize</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>FETCH_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNewMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"put drop task msg to queue failed, vgId:%d, code:%s"</literal></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"drop task msg put to queue, vgId:%d"</literal></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwBuildAndSendCQueryMsg</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryContinueReq</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>SQueryContinueReq</name> <operator>*</operator><operator>)</operator><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryContinueReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>req</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"rpcMallocCont %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryContinueReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>sId</name></name> <operator>=</operator> <name>sId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>queryId</name></name> <operator>=</operator> <name>qId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>taskId</name></name> <operator>=</operator> <name>tId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>execId</name></name> <operator>=</operator> <name>eId</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>pNewMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_SCH_QUERY_CONTINUE</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>req</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SQueryContinueReq</name></expr></argument>)</argument_list></sizeof></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>QUERY_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNewMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"put query continue msg to queue failed, vgId:%d, code:%s"</literal></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"query continue msg put to queue, vgId:%d"</literal></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwRegisterQueryBrokenLinkArg</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaskDropReq</name></type> <name>qMsg</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>header</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>sId</name></name> <operator>=</operator> <name>sId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>queryId</name></name> <operator>=</operator> <name>qId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>tId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <name>rId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qMsg</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <name>eId</name></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><call><name>tSerializeSTaskDropReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>qMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSTaskDropReq get size, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"rpcMallocCont %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>tSerializeSTaskDropReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qMsg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSTaskDropReq failed, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>brokenMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_SCH_DROP_TASK</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgSize</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>TSDB_CODE_RPC_BROKEN_LINK</name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tmsgRegisterBrokenLinkArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>brokenMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwRegisterHbBrokenLinkArg</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sId</name></decl></parameter>, <parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pConn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchedulerHbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>sId</name></name> <operator>=</operator> <name>sId</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><call><name>tSerializeSSchedulerHbReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSSchedulerHbReq hbReq failed, size:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_ELOG</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSerializeSSchedulerHbReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_ELOG</name><argument_list>(<argument><expr><literal type="string">"tSerializeSSchedulerHbReq hbReq failed, size:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>brokenMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_SCH_QUERY_HEARTBEAT</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>msg</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>msgSize</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>TSDB_CODE_RPC_BROKEN_LINK</name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pConn</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tmsgRegisterBrokenLinkArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>brokenMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerPreprocessQueryMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>chkGrant</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>qWorkerMgmt</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pMsg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWorker</name>     <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubQueryMsg</name></type>  <name>msg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSSubQueryMsg</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSSubQueryMsg failed, contLen:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>chkGrant</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>TEST_SHOW_REWRITE_MASK</name><argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>msgMask</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>grantCheck</name><argument_list>(<argument><expr><name>TSDB_GRANT_TIME</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"query failed cause of grant expired, msgMask:%d"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>msgMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSSubQueryMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_GRANT_EXPIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>sId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>rId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>execId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SQWMsg</name></type> <name>qwMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>, <expr><operator>.</operator><name>msg</name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>msg</name></name></expr>, <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>msgLen</name></name></expr>, <expr><operator>.</operator><name>connInfo</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"prerocessQuery start, handle:%p, SQL:%s"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qwPreprocessQuery</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>qwMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"prerocessQuery end, handle:%p, code:%x"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeSSubQueryMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerAbortPreprocessQueryMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>qWorkerMgmt</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pMsg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQWorker</name>     <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubQueryMsg</name></type> <name>msg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSSubQueryMsg</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSSubQueryMsg failed, contLen:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>sId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>rId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>execId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"Abort prerocessQuery start, handle:%p"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qwAbortPrerocessQuery</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"Abort prerocessQuery end, handle:%p"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeSSubQueryMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerProcessQueryMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>node</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>qWorkerMgmt</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pMsg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWorker</name>     <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qwUpdateTimeInQueue</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>QUERY_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_STAT_INC</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>queryProcessed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSubQueryMsg</name></type>  <name>msg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSSubQueryMsg</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSSubQueryMsg failed, contLen:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>sId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>rId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>execId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SQWMsg</name></type> <name>qwMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>node</name></expr>,
                  <expr><operator>.</operator><name>msg</name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>msg</name></name></expr>,
                  <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>msgLen</name></name></expr>,
                  <expr><operator>.</operator><name>connInfo</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
                  <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>qwMsg</name><operator>.</operator><name>msgInfo</name><operator>.</operator><name>explain</name></name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>explain</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qwMsg</name><operator>.</operator><name>msgInfo</name><operator>.</operator><name>taskType</name></name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>taskType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qwMsg</name><operator>.</operator><name>msgInfo</name><operator>.</operator><name>needFetch</name></name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>needFetch</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"processQuery start, node:%p, type:%s, handle:%p, SQL:%s"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qwProcessQuery</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>qwMsg</name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"processQuery end, node:%p, code:%x"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeSSubQueryMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerProcessCQueryMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>             <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>queryDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryContinueReq</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><name>SQueryContinueReq</name> <operator>*</operator><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>needStop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name>        <modifier>*</modifier></type><name>handles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWorker</name>          <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qwUpdateTimeInQueue</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>QUERY_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_STAT_INC</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>cqueryProcessed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid cquery msg, msg:%p, msgLen:%d"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sId</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>sId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tId</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>rId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>execId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SQWMsg</name></type> <name>qwMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>node</name></expr>, <expr><operator>.</operator><name>msg</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>connInfo</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"processCQuery start, node:%p, handle:%p"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwProcessCQuery</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>qwMsg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"processCQuery end, node:%p"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerProcessFetchMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>node</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>qWorkerMgmt</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pMsg</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SResFetchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWorker</name>     <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qwUpdateTimeInQueue</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>FETCH_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_STAT_INC</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>fetchProcessed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSResFetchReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSResFetchReq %d failed"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>sId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>rId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>execId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SQWMsg</name></type> <name>qwMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>node</name></expr>, <expr><operator>.</operator><name>msg</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>connInfo</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>, <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"processFetch start, node:%p, handle:%p"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwProcessFetch</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>qwMsg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"processFetch end, node:%p"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerProcessRspMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>mgmt</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qwUpdateTimeInQueue</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>FETCH_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_STAT_INC</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>rspProcessed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qProcessRspMsg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t qWorkerProcessCancelMsg(void *node, void *qWorkerMgmt, SRpcMsg *pMsg, int64_t ts) {
  if (NULL == node || NULL == qWorkerMgmt || NULL == pMsg) {
    return TSDB_CODE_QRY_INVALID_INPUT;
  }

  SQWorker       *mgmt = (SQWorker *)qWorkerMgmt;
  int32_t         code = 0;
  STaskCancelReq *msg = pMsg-&gt;pCont;

  qwUpdateTimeInQueue(mgmt, ts, FETCH_QUEUE);
  QW_STAT_INC(mgmt-&gt;stat.msgStat.cancelProcessed, 1);

  if (NULL == msg || pMsg-&gt;contLen &lt; sizeof(*msg)) {
    qError("invalid task cancel msg");
    QW_ERR_RET(TSDB_CODE_QRY_INVALID_INPUT);
  }

  msg-&gt;sId = be64toh(msg-&gt;sId);
  msg-&gt;queryId = be64toh(msg-&gt;queryId);
  msg-&gt;taskId = be64toh(msg-&gt;taskId);
  msg-&gt;refId = be64toh(msg-&gt;refId);
  msg-&gt;execId = ntohl(msg-&gt;execId);

  uint64_t sId = msg-&gt;sId;
  uint64_t qId = msg-&gt;queryId;
  uint64_t tId = msg-&gt;taskId;
  int64_t  rId = msg-&gt;refId;
  int32_t  eId = msg-&gt;execId;

  SQWMsg qwMsg = {.node = node, .msg = NULL, .msgLen = 0, .connInfo = pMsg-&gt;info};

  <comment type="line">// QW_ERR_JRET(qwCancelTask(qWorkerMgmt, msg-&gt;sId, msg-&gt;queryId, msg-&gt;taskId));</comment>

_return:

  QW_ERR_RET(qwBuildAndSendCancelRsp(&amp;qwMsg.connInfo, code));
  QW_SCH_TASK_DLOG("cancel rsp send, handle:%p, code:%x - %s", qwMsg.connInfo.handle, code, tstrerror(code));

  return TSDB_CODE_SUCCESS;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>qWorkerProcessDropMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>node</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>qWorkerMgmt</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pMsg</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWorker</name>     <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qwUpdateTimeInQueue</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>FETCH_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_STAT_INC</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>dropProcessed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STaskDropReq</name></type>  <name>msg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSTaskDropReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSTaskDropReq failed, contLen:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>sId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>rId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>execId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SQWMsg</name></type> <name>qwMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>node</name></expr>, <expr><operator>.</operator><name>msg</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>connInfo</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_RPC_BROKEN_LINK</name> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"receive drop task due to network broken, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"processDrop start, node:%p, handle:%p"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwProcessDrop</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>qwMsg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"processDrop end, node:%p"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerProcessHbMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>node</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>qWorkerMgmt</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pMsg</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchedulerHbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWorker</name>       <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qwUpdateTimeInQueue</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>FETCH_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_STAT_INC</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>hbProcessed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid hb msg, msg:%p, msgLen:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSSchedulerHbReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid hb msg, msg:%p, msgLen:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSSchedulerHbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>sId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWMsg</name></type>   <name>qwMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>node</name></expr>, <expr><operator>.</operator><name>msg</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>connInfo</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_RPC_BROKEN_LINK</name> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_DLOG</name><argument_list>(<argument><expr><literal type="string">"receive Hb msg due to network broken, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_SCH_DLOG</name><argument_list>(<argument><expr><literal type="string">"processHb start, node:%p, handle:%p"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwProcessHb</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qwMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_SCH_DLOG</name><argument_list>(<argument><expr><literal type="string">"processHb end, node:%p"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qWorkerProcessDeleteMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qWorkerMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SDeleteRes</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>node</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>qWorkerMgmt</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pMsg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVDeleteReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWorker</name>   <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>qWorkerMgmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_STAT_INC</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>deleteProcessed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDeserializeSVDeleteReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>sId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>rId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SQWMsg</name></type> <name>qwMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>node</name></expr>, <expr><operator>.</operator><name>msg</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>msg</name></name></expr>, <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>phyLen</name></name></expr>, <expr><operator>.</operator><name>connInfo</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"processDelete start, node:%p, handle:%p, sql:%s"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwProcessDelete</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>qwMsg</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_SCH_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"processDelete end, node:%p"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
