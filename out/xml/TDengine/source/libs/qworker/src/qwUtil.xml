<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/qworker/src/qwUtil.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dataSinkMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qwInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qwMsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>

<function><type><name>char</name> <modifier>*</modifier></type><name>qwPhaseStr</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>phase</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>phase</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QW_PHASE_PRE_QUERY</name></expr>:</case>
      <return>return <expr><literal type="string">"PRE_QUERY"</literal></expr>;</return>
    <case>case <expr><name>QW_PHASE_POST_QUERY</name></expr>:</case>
      <return>return <expr><literal type="string">"POST_QUERY"</literal></expr>;</return>
    <case>case <expr><name>QW_PHASE_PRE_FETCH</name></expr>:</case>
      <return>return <expr><literal type="string">"PRE_FETCH"</literal></expr>;</return>
    <case>case <expr><name>QW_PHASE_POST_FETCH</name></expr>:</case>
      <return>return <expr><literal type="string">"POST_FETCH"</literal></expr>;</return>
    <case>case <expr><name>QW_PHASE_PRE_CQUERY</name></expr>:</case>
      <return>return <expr><literal type="string">"PRE_CQUERY"</literal></expr>;</return>
    <case>case <expr><name>QW_PHASE_POST_CQUERY</name></expr>:</case>
      <return>return <expr><literal type="string">"POST_CQUERY"</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>qwBufStatusStr</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>bufStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>bufStatus</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>DS_BUF_LOW</name></expr>:</case>
      <return>return <expr><literal type="string">"LOW"</literal></expr>;</return>
    <case>case <expr><name>DS_BUF_FULL</name></expr>:</case>
      <return>return <expr><literal type="string">"FULL"</literal></expr>;</return>
    <case>case <expr><name>DS_BUF_EMPTY</name></expr>:</case>
      <return>return <expr><literal type="string">"EMPTY"</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwSetTaskStatus</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWTaskStatus</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>origStatus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>ignore</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>origStatus</name> <operator>=</operator> <call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwDbgValidateStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>origStatus</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ignore</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>origStatus</name> <operator>!=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>origStatus</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task status updated from %s to %s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>origStatus</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break>break;</break>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAddSchedulerImpl</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rwType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWSchStatus</name></type> <name>newSch</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>newSch</name><operator>.</operator><name>tasksHash</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxSchTaskNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>newSch</name><operator>.</operator><name>tasksHash</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_SCH_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashInit %d failed"</literal></expr></argument>, <argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxSchTaskNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>newSch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newSch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASH_NODE_EXIST</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>QW_SCH_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashPut new sch to scheduleHash failed, errno:%d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>newSch</name><operator>.</operator><name>tasksHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>newSch</name><operator>.</operator><name>tasksHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAcquireSchedulerImpl</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rwType</name></decl></parameter>, <parameter><decl><type><name>SQWSchStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>sch</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nOpt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>rwType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>sch</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>sch</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>rwType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>QW_NOT_EXIST_ADD</name> <operator>==</operator> <name>nOpt</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwAddSchedulerImpl</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>sId</name></expr></argument>, <argument><expr><name>rwType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>nOpt</name> <operator>=</operator> <name>QW_NOT_EXIST_RET_ERR</name></expr>;</expr_stmt>

        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QW_NOT_EXIST_RET_ERR</name> <operator>==</operator> <name>nOpt</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_SCH_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>QW_SCH_ELOG</name><argument_list>(<argument><expr><literal type="string">"unknown notExistOpt:%d"</literal></expr></argument>, <argument><expr><name>nOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <break>break;</break>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAcquireAddScheduler</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rwType</name></decl></parameter>, <parameter><decl><type><name>SQWSchStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>sch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>qwAcquireSchedulerImpl</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>sId</name></expr></argument>, <argument><expr><name>rwType</name></expr></argument>, <argument><expr><name>sch</name></expr></argument>, <argument><expr><name>QW_NOT_EXIST_ADD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAcquireScheduler</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rwType</name></decl></parameter>, <parameter><decl><type><name>SQWSchStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>sch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>qwAcquireSchedulerImpl</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>sId</name></expr></argument>, <argument><expr><name>rwType</name></expr></argument>, <argument><expr><name>sch</name></expr></argument>, <argument><expr><name>QW_NOT_EXIST_RET_ERR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwReleaseScheduler</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rwType</name></decl></parameter>, <parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>rwType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>schLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAcquireTaskStatus</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rwType</name></decl></parameter>, <parameter><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>sch</name></decl></parameter>, <parameter><decl><type><name>SQWTaskStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>qId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eId</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_SET_QTID</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>rwType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>task</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>sch</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>task</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>rwType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_TASK_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAddTaskStatusImpl</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>sch</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rwType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>SQWTaskStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>qId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eId</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_SET_QTID</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SQWTaskStatus</name></type> <name>ntask</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ntask</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ntask</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <name>rId</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_LOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>sch</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntask</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ntask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HASH_NODE_EXIST</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>rwType</name> <operator>&amp;&amp;</operator> <name>task</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><call><name>qwAcquireTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rwType</name></expr></argument>, <argument><expr><name>sch</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"task status already exist, newStatus:%s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_TASK_ALREADY_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashPut to tasksHash failed, error:%x - %s"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_TASK_DLOG</name><argument_list>(<argument><expr><literal type="string">"task status added, newStatus:%s"</literal></expr></argument>, <argument><expr><call><name>jobTaskStatusStr</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>rwType</name> <operator>&amp;&amp;</operator> <name>task</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwAcquireTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rwType</name></expr></argument>, <argument><expr><name>sch</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAddTaskStatus</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>tsch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwAcquireAddScheduler</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>sId</name></expr></argument>, <argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAddTaskStatusImpl</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tsch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>qwReleaseScheduler</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAddAcquireTaskStatus</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rwType</name></decl></parameter>, <parameter><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>sch</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>status</name></decl></parameter>,
                               <parameter><decl><type><name>SQWTaskStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>qwAddTaskStatusImpl</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sch</name></expr></argument>, <argument><expr><name>rwType</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwReleaseTaskStatus</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rwType</name></decl></parameter>, <parameter><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>sch</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>QW_UNLOCK</name><argument_list>(<argument><expr><name>rwType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sch</name><operator>-&gt;</operator><name>tasksLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAcquireTaskCtx</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>qId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eId</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_SET_QTID</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"task ctx not exist, may be dropped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_TASK_CTX_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwGetTaskCtx</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>qId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eId</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_SET_QTID</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"task ctx not exist, may be dropped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_TASK_CTX_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAddTaskCtxImpl</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>acquire</name></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>qId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eId</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_SET_QTID</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SQWTaskCtx</name></type> <name>nctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>nctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQWTaskCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>HASH_NODE_EXIST</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>acquire</name> <operator>&amp;&amp;</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><call><name>qwAcquireTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><call><name>qwGetTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>QW_TASK_ELOG_E</name><argument_list>(<argument><expr><literal type="string">"task ctx already exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_TASK_ALREADY_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>QW_TASK_ELOG</name><argument_list>(<argument><expr><literal type="string">"taosHashPut to ctxHash failed, error:%x"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>acquire</name> <operator>&amp;&amp;</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><call><name>qwAcquireTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><call><name>qwGetTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAddTaskCtx</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><call><name>qwAddTaskCtxImpl</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwAddAcquireTaskCtx</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>qwAddTaskCtxImpl</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>qwReleaseTaskCtx</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>qwFreeTaskHandle</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name> <modifier>*</modifier></type><name>taskHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Note: free/kill may in RC</comment>
  <decl_stmt><decl><type><name>qTaskInfo_t</name></type> <name>otaskHandle</name> <init>= <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><name>taskHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>otaskHandle</name> <operator>&amp;&amp;</operator> <call><name>atomic_val_compare_exchange_ptr</name><argument_list>(<argument><expr><name>taskHandle</name></expr></argument>, <argument><expr><name>otaskHandle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDestroyTask</name><argument_list>(<argument><expr><name>otaskHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task handle destroyed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwKillTaskHandle</name><parameter_list>(<parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Note: free/kill may in RC</comment>
  <decl_stmt><decl><type><name>qTaskInfo_t</name></type> <name>taskHandle</name> <init>= <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>taskHandle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>taskHandle</name> <operator>&amp;&amp;</operator> <call><name>atomic_val_compare_exchange_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>taskHandle</name></name></expr></argument>, <argument><expr><name>taskHandle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"start to kill task"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qAsyncKillTask</name><argument_list>(<argument><expr><name>taskHandle</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>taskHandle</name></name></expr></argument>, <argument><expr><name>taskHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwFreeTaskCtx</name><parameter_list>(<parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ctrlConnInfo</name><operator>.</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmsgReleaseHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctrlConnInfo</name></name></expr></argument>, <argument><expr><name>TAOS_CONN_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctrlConnInfo</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctrlConnInfo</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// NO need to release dataConnInfo</comment>

  <expr_stmt><expr><call><name>qwFreeTaskHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>taskHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dsDestroyDataSinker</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"sink handle destroyed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwDropTaskCtx</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>qId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eId</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_SET_QTID</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SQWTaskCtx</name></type> <name>octx</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_TASK_CTX_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>octx</name> <operator>=</operator> <operator>*</operator><name>ctx</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>taskHandle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sinkHandle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_SET_EVENT_PROCESSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>QW_EVENT_DROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG_E</name><argument_list>(<argument><expr><literal type="string">"taosHashRemove from ctx hash failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_TASK_CTX_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qwFreeTaskCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>octx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_TASK_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"task ctx dropped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwDropTaskStatus</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWSchStatus</name>  <modifier>*</modifier></type><name>sch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskStatus</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>qId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eId</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QW_SET_QTID</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qwAcquireScheduler</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>sId</name></expr></argument>, <argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_WLOG_E</name><argument_list>(<argument><expr><literal type="string">"scheduler does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qwAcquireTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><name>sch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qwReleaseScheduler</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QW_TASK_WLOG_E</name><argument_list>(<argument><expr><literal type="string">"task does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>sch</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QW_TASK_ELOG_E</name><argument_list>(<argument><expr><literal type="string">"taosHashRemove task from hash failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QW_TASK_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"task status dropped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>task</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qwReleaseTaskStatus</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><name>sch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>qwReleaseScheduler</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwUpdateTaskStatus</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWSchStatus</name>  <modifier>*</modifier></type><name>sch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWTaskStatus</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwAcquireScheduler</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><name>sId</name></expr></argument>, <argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwAcquireTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><name>sch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_ERR_JRET</name><argument_list>(<argument><expr><call><name>qwSetTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>task</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qwReleaseTaskStatus</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><name>sch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>qwReleaseScheduler</name><argument_list>(<argument><expr><name>QW_READ</name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwDropTask</name><parameter_list>(<parameter><decl><type><name>QW_FPARAMS_DEF</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwDropTaskStatus</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QW_ERR_RET</name><argument_list>(<argument><expr><call><name>qwDropTaskCtx</name><argument_list>(<argument><expr><call><name>QW_FPARAMS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QW_TASK_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"task is dropped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwSetHbParam</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>refId</name></decl></parameter>, <parameter><decl><type><name>SQWHbParam</name> <modifier>*</modifier><modifier>*</modifier></type><name>pParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>paramIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>newParamIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>paramIdx</name> <operator>=</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>paramIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>paramIdx</name> <operator>==</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>gQwMgmt</name><operator>.</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>newParamIdx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>newParamIdx</name> <operator>=</operator> <name>paramIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>paramIdx</name> <operator>==</operator> <call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>paramIdx</name></name></expr></argument>, <argument><expr><name>paramIdx</name></expr></argument>, <argument><expr><name>newParamIdx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>paramIdx</name> <operator>==</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>gQwMgmt</name><operator>.</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>paramIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>gQwMgmt</name><operator>.</operator><name>param</name><index>[<expr><name>paramIdx</name></expr>]</index></name><operator>.</operator><name>qwrId</name> <operator>=</operator> <name><name>gQwMgmt</name><operator>.</operator><name>qwRef</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gQwMgmt</name><operator>.</operator><name>param</name><index>[<expr><name>paramIdx</name></expr>]</index></name><operator>.</operator><name>refId</name> <operator>=</operator> <name>refId</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pParam</name> <operator>=</operator> <operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>param</name><index>[<expr><name>paramIdx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwSaveTbVersionInfo</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tbName</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qGetQueryTableSchemaVersion</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>sversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>tversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dbFName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>tbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbInfo</name><operator>.</operator><name>tbFName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwCloseRef</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>qwNum</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gQwMgmt</name><operator>.</operator><name>qwRef</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name><name>gQwMgmt</name><operator>.</operator><name>qwRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gQwMgmt</name><operator>.</operator><name>qwRef</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwDestroySchStatus</name><parameter_list>(<parameter><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>qwDestroyImpl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name> <init>= <expr><operator>(</operator><name>SQWorker</name> <operator>*</operator><operator>)</operator><name>pMgmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>    <name>nodeType</name> <init>= <expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeType</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>nodeId</name> <init>= <expr><name><name>mgmt</name><operator>-&gt;</operator><name>nodeId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>schStatusCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"start to destroy qworker, type:%d, id:%d, handle:%p"</literal></expr></argument>, <argument><expr><name>nodeType</name></expr></argument>, <argument><expr><name>nodeId</name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosTmrStop</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>hbTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>hbTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosTmrCleanUp</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>qId</name></decl>, <decl><type ref="prev"/><name>tId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>eId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SQWTaskCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SQWTaskCtx</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QW_GET_QTID</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>qId</name></expr></argument>, <argument><expr><name>tId</name></expr></argument>, <argument><expr><name>eId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>qwFreeTaskCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QW_TASK_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"task ctx freed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>taskCount</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>ctxHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>sch</name> <init>= <expr><operator>(</operator><name>SQWSchStatus</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qwDestroySchStatus</name><argument_list>(<argument><expr><name>sch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>schStatusCount</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name><name>mgmt</name><operator>-&gt;</operator><name>destroyed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>qwNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qwCloseRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"qworker destroyed, type:%d, id:%d, handle:%p, taskCount:%d, schStatusCount: %d"</literal></expr></argument>, <argument><expr><name>nodeType</name></expr></argument>, <argument><expr><name>nodeId</name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>,
         <argument><expr><name>taskCount</name></expr></argument>, <argument><expr><name>schStatusCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwOpenRef</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gQwMgmt</name><operator>.</operator><name>qwRef</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gQwMgmt</name><operator>.</operator><name>qwRef</name></name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>qwDestroyImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>gQwMgmt</name><operator>.</operator><name>qwRef</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"init qworker ref failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QW_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gQwMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qwUpdateTimeInQueue</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>EQueueType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>ts</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_QUEUE</name></expr>:</case>
      <expr_stmt><expr><operator>++</operator><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>waitTime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>waitTime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>total</name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FETCH_QUEUE</name></expr>:</case>
      <expr_stmt><expr><operator>++</operator><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>waitTime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>waitTime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>total</name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"unsupported queue type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>qwGetTimeInQueue</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>EQueueType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWTimeInQ</name> <modifier>*</modifier></type><name>pStat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_QUEUE</name></expr>:</case>
      <expr_stmt><expr><name>pStat</name> <operator>=</operator> <operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>waitTime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <return>return <expr><ternary><condition><expr><name><name>pStat</name><operator>-&gt;</operator><name>num</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>pStat</name><operator>-&gt;</operator><name>total</name></name> <operator>/</operator> <name><name>pStat</name><operator>-&gt;</operator><name>num</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    <case>case <expr><name>FETCH_QUEUE</name></expr>:</case>
      <expr_stmt><expr><name>pStat</name> <operator>=</operator> <operator>&amp;</operator><name><name>mgmt</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>msgStat</name><operator>.</operator><name>waitTime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <return>return <expr><ternary><condition><expr><name><name>pStat</name><operator>-&gt;</operator><name>num</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>pStat</name><operator>-&gt;</operator><name>total</name></name> <operator>/</operator> <name><name>pStat</name><operator>-&gt;</operator><name>num</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"unsupported queue type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qwClearExpiredSch</name><parameter_list>(<parameter><decl><type><name>SQWorker</name> <modifier>*</modifier></type><name>mgmt</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pExpiredSch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pExpiredSch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name>     <modifier>*</modifier></type><name>sId</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pExpiredSch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SQWSchStatus</name> <modifier>*</modifier></type><name>pSch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>qwAcquireScheduler</name><argument_list>(<argument><expr><name>mgmt</name></expr></argument>, <argument><expr><operator>*</operator><name>sId</name></expr></argument>, <argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pSch</name><operator>-&gt;</operator><name>tasksHash</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qwDestroySchStatus</name><argument_list>(<argument><expr><name>pSch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>mgmt</name><operator>-&gt;</operator><name>schHash</name></name></expr></argument>, <argument><expr><name>sId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"sch %"</literal> <name>PRIx64</name> <literal type="string">" destroyed"</literal></expr></argument>, <argument><expr><operator>*</operator><name>sId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qwReleaseScheduler</name><argument_list>(<argument><expr><name>QW_WRITE</name></expr></argument>, <argument><expr><name>mgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
