<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/filloperator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taosdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttypes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tfill.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_POS_INVALID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_POS_START</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_POS_MID</name></cpp:macro>     <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_POS_END</name></cpp:macro>     <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>STimeRange</name> <block>{
  <decl_stmt><decl><type><name>TSKEY</name></type>    <name>skey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>    <name>ekey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name></decl>;</decl_stmt>
}</block></struct></type> <name>STimeRange</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SFillOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>SFillInfo</name></name><modifier>*</modifier></type> <name>pFillInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>      <name>pRes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>      <name>pFinalRes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>           <name>totalInputRows</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type>            <name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>      <name>existNewGroupBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type>       <name>win</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColMatchInfo</name></type>     <name>matchInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>primaryTsCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>primarySrcSlotId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>          <name>curGroupId</name></decl>;</decl_stmt>  <comment type="line">// current handled group id</comment>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type>        <name>pExprInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>numOfExpr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name></type>         <name>noFillExprSupp</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFillOperatorInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>destroyFillOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>doApplyScalarCalculation</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>scanFlag</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doHandleRemainBlockForNewGroupImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                               <parameter><decl><type><name>SResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalInputRows</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>existNewGroupBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>order</name> <init>= <expr><name>TSDB_ORDER_ASC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>scanFlag</name> <init>= <expr><name>MAIN_SCAN</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getTableScanInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scanFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ekey</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>existNewGroupBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosResetFillInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><call><name>getFillInfoStart</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doApplyScalarCalculation</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>existNewGroupBlock</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosFillSetStartInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFillSetInputDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfResultRows</name> <init>= <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosFillResultDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>numOfResultRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>curGroupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>existNewGroupBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>existNewGroupBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doHandleRemainBlockFromNewGroup</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                            <parameter><decl><type><name>SResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosFillHasMoreResults</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfResultRows</name> <init>= <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosFillResultDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name></expr></argument>, <argument><expr><name>numOfResultRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>curGroupId</name></name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// handle the cached new group data block</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>existNewGroupBlock</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doHandleRemainBlockForNewGroupImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doApplyScalarCalculation</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>scanFlag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>         <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// reset the row value before applying the no-fill functions to the input data block, which is "pBlock" in this case.</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pNoFillSupp</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>noFillExprSupp</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pNoFillSupp</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pNoFillSupp</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pNoFillSupp</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pNoFillSupp</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doFillImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>     <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>order</name> <init>= <expr><name>TSDB_ORDER_ASC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>scanFlag</name> <init>= <expr><name>MAIN_SCAN</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getTableScanInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scanFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>doHandleRemainBlockFromNewGroup</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>curGroupId</name></name></expr>;</expr_stmt>
    <return>return <expr><name>pResBlock</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pDownstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>pDownstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>pDownstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalInputRows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosFillSetStartInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primarySrcSlotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doApplyScalarCalculation</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>curGroupId</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>curGroupId</name></name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>curGroupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>  <comment type="line">// the first data block</comment>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalInputRows</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>order</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosFillSetStartInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>taosFillSetStartInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>taosFillSetInputDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>curGroupId</name></name> <operator>!=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// the new group data block</comment>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>existNewGroupBlock</name></name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>

        <comment type="line">// Fill the previous group data block, before handle the data block of new group.</comment>
        <comment type="line">// Close the fill operation for previous group data block</comment>
        <expr_stmt><expr><call><name>taosFillSetStartInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfResultRows</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name> <operator>-</operator> <name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosFillResultDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>numOfResultRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// current group has no more result to return</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// 1. The result in current group not reach the threshold of output result, continue</comment>
      <comment type="line">// 2. If multiple group results existing in one SSDataBlock is not allowed, return immediately</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>threshold</name></name> <operator>||</operator> <name>pBlock</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>existNewGroupBlock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>curGroupId</name></name></expr>;</expr_stmt>
        <return>return <expr><name>pResBlock</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>doHandleRemainBlockFromNewGroup</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>threshold</name></name> <operator>||</operator> <name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>curGroupId</name></name></expr>;</expr_stmt>
        <return>return <expr><name>pResBlock</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>existNewGroupBlock</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// try next group</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>doHandleRemainBlockForNewGroupImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>threshold</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>curGroupId</name></name></expr>;</expr_stmt>
        <return>return <expr><name>pResBlock</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doFill</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>     <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>fillResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>fillResult</name> <operator>=</operator> <call><name>doFillImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fillResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>fillResult</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fillResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>fillResult</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>fillResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>fillResult</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyFillOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SFillOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name> <operator>=</operator> <call><name>taosDestroyFillInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>noFillExprSupp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initFillInfo</name><parameter_list>(<parameter><decl><type><name>SFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pNotFillExpr</name></decl></parameter>,
                            <parameter><decl><type><name>int32_t</name></type> <name>numOfNotFillCols</name></decl></parameter>, <parameter><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>pValNode</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fillType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>createFillColInfo</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pNotFillExpr</name></expr></argument>, <argument><expr><name>numOfNotFillCols</name></expr></argument>, <argument><expr><name>pValNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>     <name>startKey</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>win</name><operator>.</operator><name>skey</name></name></expr> </then><else>: <expr><name><name>win</name><operator>.</operator><name>ekey</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>w</name> <init>= <expr><call><name>getAlignQueryTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>startKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>getFirstQualifiedTimeWindow</name><argument_list>(<argument><expr><name>startKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name> <operator>=</operator> <call><name>taosCreateFillInfo</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>numOfNotFillCols</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>fillType</name></expr></argument>, <argument><expr><name>pColInfo</name></expr></argument>,
                                        <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsCol</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>win</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>win</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>win</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>win</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isWstartColumnExist</name><parameter_list>(<parameter><decl><type><name>SFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>noFillExprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>noFillExprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>exprInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>noFillExprSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>exprInfo</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_COLUMN</name> <operator>&amp;&amp;</operator> <name><name>exprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>numOfParams</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
        <name><name>exprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>colType</name></name> <operator>==</operator> <name>COLUMN_TYPE_WINDOW_START</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createPrimaryTsExprIfNeeded</name><parameter_list>(<parameter><decl><type><name>SFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SFillPhysiNode</name><modifier>*</modifier></type> <name>pPhyFillNode</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSupp</name></decl></parameter>,
                                           <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>wstartExist</name> <init>= <expr><call><name>isWstartColumnExist</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>wstartExist</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pWStartTs</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>QUERY_NODE_TARGET</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"pWStartTs of fill physical node is not a target node, %s"</literal></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_QRY_SYS_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pExprSupp</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>pExprSupp</name><operator>-&gt;</operator><name>numOfExprs</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SExprInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pExpr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>createExprFromTargetNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExpr</name><index>[<expr><name><name>pExprSupp</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExprSupp</name><operator>-&gt;</operator><name>numOfExprs</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExprSupp</name><operator>-&gt;</operator><name>pExprInfo</name></name> <operator>=</operator> <name>pExpr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createFillOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SFillPhysiNode</name><modifier>*</modifier></type> <name>pPhyFillNode</name></decl></parameter>,
                                      <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFillOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>     <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>numOfExpr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>=</operator> <name>pExprInfo</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pNoFillSupp</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>noFillExprSupp</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pNoFillSupp</name><operator>-&gt;</operator><name>pExprInfo</name></name> <operator>=</operator> <call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pNotFillExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNoFillSupp</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createPrimaryTsExprIfNeeded</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pPhyFillNode</name></expr></argument>, <argument><expr><name>pNoFillSupp</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><name>pNoFillSupp</name></expr></argument>, <argument><expr><name><name>pNoFillSupp</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name><name>pNoFillSupp</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name> <init>=
      <expr><ternary><condition><expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name> <operator>==</operator> <name><name>downstream</name><operator>-&gt;</operator><name>operatorType</name></name></expr>
      ?</condition><then> <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SMergeAlignedIntervalAggOperatorInfo</name><operator>*</operator><operator>)</operator><name><name>downstream</name><operator>-&gt;</operator><name>info</name></name><operator>)</operator><operator>-&gt;</operator><name><name>intervalAggOperatorInfo</name><operator>-&gt;</operator><name>interval</name></name></expr>
      </then><else>: <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SIntervalAggOperatorInfo</name><operator>*</operator><operator>)</operator><name><name>downstream</name><operator>-&gt;</operator><name>info</name></name><operator>)</operator><operator>-&gt;</operator><name>interval</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>order</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name> <operator>==</operator> <name>ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><name>TSDB_ORDER_ASC</name></expr> </then><else>: <expr><name>TSDB_ORDER_DESC</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><call><name>convertFillType</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsCol</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pWStartTs</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primarySrcSlotId</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pWStartTs</name></name><operator>)</operator><operator>-&gt;</operator><name>pExpr</name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutputCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>extractColMatchInfo</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>, <argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfOutputCols</name></expr></argument>,
                             <argument><expr><name>COL_MATCH_FROM_SLOT_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initFillInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfExpr</name></name></expr></argument>, <argument><expr><name><name>pNoFillSupp</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name><name>pNoFillSupp</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>,
                      <argument><expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></argument>, <argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>timeRange</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>,
                      <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name> <operator>=</operator> <call><name>createOneDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"FillOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_FILL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfExpr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doFill</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyFillOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

  <label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyFillOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSKEY</name></type> <name>getNextWindowTs</name><parameter_list>(<parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>ts</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getNextIntervalWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>win</name><operator>.</operator><name>skey</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSKEY</name></type> <name>getPrevWindowTs</name><parameter_list>(<parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>ts</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getNextIntervalWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name>TSDB_ORDER_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>win</name><operator>.</operator><name>skey</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setRowCell</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SResultCellData</name><modifier>*</modifier></type> <name>pCell</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>rowId</name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>isNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SResultCellData</name><modifier>*</modifier></type> <name>getResultCell</name><parameter_list>(<parameter><decl><type><name>SResultRowData</name><modifier>*</modifier></type> <name>pRaw</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRaw</name> <operator>||</operator> <operator>!</operator><name><name>pRaw</name><operator>-&gt;</operator><name>pRowVal</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>pData</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pRaw</name><operator>-&gt;</operator><name>pRowVal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><name><name>pRaw</name><operator>-&gt;</operator><name>pRowVal</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pData</name> <operator>+=</operator> <operator>(</operator><name><name>pCell</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SResultCellData</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pCell</name> <operator>=</operator> <operator>(</operator><name>SResultCellData</name><operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>pCell</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>destroyFillColumnInfo</name><parameter_list>(<parameter><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pFillCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyExprInfo</name><argument_list>(<argument><expr><name><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pExpr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosVariantDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fillVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pFillCol</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFillCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>destroyStreamFillSupporter</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name> <operator>=</operator> <call><name>destroyFillColumnInfo</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfFillCols</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashCleanup</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pResMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pResMap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>releaseOutputBuf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>SResultRow</name><operator>*</operator><operator>)</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>pRowVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>notFillExprSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>destroyStreamFillLinearInfo</name><parameter_list>(<parameter><decl><type><name>SStreamFillLinearInfo</name><modifier>*</modifier></type> <name>pFillLinear</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pFillLinear</name><operator>-&gt;</operator><name>pDeltaVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pFillLinear</name><operator>-&gt;</operator><name>pNextDeltaVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFillLinear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name><modifier>*</modifier></type> <name>destroyStreamFillInfo</name><parameter_list>(<parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_SET_VALUE</name> <operator>||</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name><operator>-&gt;</operator><name>pRowVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name> <operator>=</operator> <call><name>destroyStreamFillLinearInfo</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>delRanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyStreamFillOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SStreamFillOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name> <operator>=</operator> <call><name>destroyStreamFillInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name> <operator>=</operator> <call><name>destroyStreamFillSupporter</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevSrcBlock</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevSrcBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name> <operator>=</operator> <call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resetFillWindow</name><parameter_list>(<parameter><decl><type><name>SResultRowData</name><modifier>*</modifier></type> <name>pRowData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRowData</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRowData</name><operator>-&gt;</operator><name>pRowVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resetPrevAndNextWindow</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>, <parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>resetFillWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>releaseOutputBuf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>SResultRow</name><operator>*</operator><operator>)</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>pRowVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resetFillWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resetFillWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resetFillWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>nextNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getCurWindowFromDiscBuf</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>resetPrevAndNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>curVLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>streamStateFillGet</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curVLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getWindowFromDiscBuf</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>resetPrevAndNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>curVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>curVLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>streamStateFillGet</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>curVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curVLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name>curVal</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateFillSeekKeyPrev</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWinKey</name></type>          <name>preKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>            <name>preVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>preVLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateGetGroupKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preKey</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>preVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preVLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>preKey</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name>preVal</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateCurNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateCurNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pCur</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pCur</name> <operator>=</operator> <call><name>streamStateFillSeekKeyNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SWinKey</name></type> <name>nextKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>nextVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nextVLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateGetGroupKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextKey</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nextVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextVLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>nextKey</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name>nextVal</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFillSup</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_PREV</name> <operator>||</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_NEXT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateCurNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SWinKey</name></type> <name>nextNextKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>nextNextVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>nextNextVLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateGetGroupKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextNextKey</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nextNextVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextNextVLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>nextNext</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>nextNextKey</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>nextNext</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name>nextNextVal</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hasPrevWindow</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name>INT64_MIN</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>hasNextWindow</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name>INT64_MIN</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>hasNextNextWindow</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pFillSup</name><operator>-&gt;</operator><name>nextNext</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name>INT64_MIN</name></expr>;</return>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transBlockToResultRow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowId</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SResultRowData</name><modifier>*</modifier></type> <name>pRowVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><name>pRowVal</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>rowId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>rowId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pRowVal</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calcDeltaData</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowId</name></decl></parameter>, <parameter><decl><type><name>SResultRowData</name><modifier>*</modifier></type> <name>pRowVal</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDelta</name></decl></parameter>,
                          <parameter><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pFillCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>winCount</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>notFillCol</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pFillCol</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>var</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>rowId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type>           <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><name>pRowVal</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type>           <name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <name>winCount</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>start</name> <operator>-</operator> <name>end</name><operator>)</operator> <operator>/</operator> <name>winCount</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pDelta</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calcRowDeltaData</name><parameter_list>(<parameter><decl><type><name>SResultRowData</name><modifier>*</modifier></type> <name>pStartRow</name></decl></parameter>, <parameter><decl><type><name>SResultRowData</name><modifier>*</modifier></type> <name>pEndRow</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDelta</name></decl></parameter>, <parameter><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pFillCol</name></decl></parameter>,
                             <parameter><decl><type><name>int32_t</name></type> <name>numOfCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>winCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>notFillCol</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pFillCol</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pSCell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><name>pStartRow</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type>           <name>start</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pSCell</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pSCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pECell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><name>pEndRow</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type>           <name>end</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pECell</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pECell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <name>winCount</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pDelta</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setFillInfoStart</name><parameter_list>(<parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setFillInfoEnd</name><parameter_list>(<parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setFillKeyInfo</name><parameter_list>(<parameter><decl><type><name>TSKEY</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setFillInfoStart</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setFillInfoEnd</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setDeleteFillValueInfo</name><parameter_list>(<parameter><decl><type><name>TSKEY</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>, <parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>hasNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>needFill</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>realStart</name> <init>= <expr><call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>,
                                <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>needFill</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>realStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_INVALID</name></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_FILL_NULL</name></expr>:</case>
    <case>case <expr><name>TSDB_FILL_SET_VALUE</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>TSDB_FILL_PREV</name></expr>:</case>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_FILL_NEXT</name></expr>:</case>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_FILL_LINEAR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>hasNext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>nextEnd</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfWins</name> <init>= <expr><call><name>taosTimeCountInterval</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>,
                                                <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>calcRowDeltaData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pDeltaVal</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name></expr></argument>,
                       <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr></argument>, <argument><expr><name>numOfWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>winIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>copyNotFillExpData</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>, <parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfFillCols</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type>    <name>pFillCol</name> <init>= <expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pFillCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pCurCell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name><name>pCurCell</name><operator>-&gt;</operator><name>isNull</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pCurCell</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pCurCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setFillValueInfo</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowId</name></decl></parameter>, <parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>,
                      <parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>preRowKey</name></name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>needFill</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_START</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>prevWKey</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>nextWKey</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>prevWKey</name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nextWKey</name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>needFill</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_INVALID</name></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_FILL_NULL</name></expr>:</case>
    <case>case <expr><name>TSDB_FILL_SET_VALUE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>preRowKey</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>resetFillWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>hasNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>nextRowKey</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>preRowKey</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name>prevWKey</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_END</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>needFill</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_START</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name>prevWKey</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_END</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>nextWKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_START</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>copyNotFillExpData</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TSDB_FILL_PREV</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>hasNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>nextRowKey</name></name><operator>)</operator> <operator>||</operator>
                                      <operator>(</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>nextRowKey</name></name> <operator>&amp;&amp;</operator> <call><name>hasNextNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
                                      <operator>(</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>nextRowKey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>nextWKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>pRowVal</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name>prevWKey</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_END</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>preRowKey</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TSDB_FILL_NEXT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name>prevWKey</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_END</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>pRowVal</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>preRowKey</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>hasNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>nextWKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_START</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TSDB_FILL_LINEAR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>winIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>hasNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name>prevWKey</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_MID</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>nextEnd</name></name> <operator>=</operator> <name>nextWKey</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfWins</name> <init>= <expr><call><name>taosTimeCountInterval</name><argument_list>(<argument><expr><name>prevWKey</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>,
                                                  <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>calcRowDeltaData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pDeltaVal</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name></expr></argument>,
                         <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr></argument>, <argument><expr><name>numOfWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>numOfWins</name> <operator>=</operator> <call><name>taosTimeCountInterval</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>nextWKey</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>,
                                          <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>calcRowDeltaData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pNextDeltaVal</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name></expr></argument>,
                         <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr></argument>, <argument><expr><name>numOfWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>hasNext</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name>prevWKey</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_END</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>nextEnd</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfWins</name> <init>= <expr><call><name>taosTimeCountInterval</name><argument_list>(<argument><expr><name>prevWKey</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>,
                                                  <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>calcRowDeltaData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pDeltaVal</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name></expr></argument>,
                         <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr></argument>, <argument><expr><name>numOfWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>hasNext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>hasNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>nextWKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>FILL_POS_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>nextEnd</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfWins</name> <init>= <expr><call><name>taosTimeCountInterval</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>nextWKey</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>,
                                                  <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>calcRowDeltaData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pDeltaVal</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name></expr></argument>,
                         <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr></argument>, <argument><expr><name>numOfWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>hasNext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block> <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <name>FILL_POS_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkResult</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>, <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSimpleHashGet</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pResMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tSimpleHashPut</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pResMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildFillResult</name><parameter_list>(<parameter><decl><type><name>SResultRowData</name><modifier>*</modifier></type> <name>pResRow</name></decl></parameter>, <parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFillSup</name><operator>-&gt;</operator><name>hasDelete</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>checkResult</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type>    <name>pFillCol</name> <init>= <expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pFillCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFillInfo</name></type>        <name>tmpInfo</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>currentKey</name> <operator>=</operator> <name>ts</name></expr>,
        <expr><operator>.</operator><name>order</name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>,
        <expr><operator>.</operator><name>interval</name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>filled</name> <init>= <expr><call><name>fillIfWindowPseudoColumn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpInfo</name></expr></argument>, <argument><expr><name>pFillCol</name></expr></argument>, <argument><expr><name>pColData</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>filled</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><name>pResRow</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setRowCell</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hasRemainCalc</name><parameter_list>(<parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>INT64_MIN</name> <operator>&amp;&amp;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doStreamFillNormal</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>, <parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><call><name>hasRemainCalc</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildFillResult</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>,
                                     <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doStreamFillLinear</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>, <parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><call><name>hasRemainCalc</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SWinKey</name></type>  <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>, <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFillSup</name><operator>-&gt;</operator><name>hasDelete</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>checkResult</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>,
                                       <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>winIndex</name></name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>winIndex</name></name><operator>++</operator></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pFillCol</name> <init>= <expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SFillInfo</name></type>     <name>tmp</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>currentKey</name> <operator>=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name></expr>,
          <expr><operator>.</operator><name>order</name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>,
          <expr><operator>.</operator><name>interval</name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr>,
      }</block></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pFillCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int16_t</name></type>          <name>type</name> <init>= <expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>          <name>index</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pFillCol</name><operator>-&gt;</operator><name>notFillCol</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>filled</name> <init>= <expr><call><name>fillIfWindowPseudoColumn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>pFillCol</name></expr></argument>, <argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>filled</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>setRowCell</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>pCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>||</operator> <name><name>pCell</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>pDelta</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pDeltaVal</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type>  <name>vCell</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>vCell</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>vCell</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>pDelta</name><operator>)</operator> <operator>*</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>winIndex</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SET_TYPED_DATA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>vCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>,
                                     <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keepResultInDiscBuf</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SResultRowData</name><modifier>*</modifier></type> <name>pRow</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>, <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>key</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>streamStateFillPut</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doStreamFillRange</name><parameter_list>(<parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>needFill</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildFillResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name>FILL_POS_START</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildFillResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_FILL_LINEAR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doStreamFillNormal</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>doStreamFillLinear</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name>FILL_POS_MID</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>buildFillResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name> <operator>&amp;&amp;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>hasNext</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>hasNext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>winIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pDeltaVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayAddAll</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pDeltaVal</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pNextDeltaVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setFillKeyInfo</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>nextEnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doStreamFillLinear</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name>FILL_POS_END</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildFillResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>keepBlockRowInDiscBuf</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>tsCol</name></decl></parameter>,
                           <parameter><decl><type><name>int32_t</name></type> <name>rowId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>ts</name> <init>= <expr><name><name>tsCol</name><index>[<expr><name>rowId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>nextRowKey</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SResultRowData</name></type> <name>tmpNextRow</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name>ts</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tmpNextRow</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rowSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transBlockToResultRow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>rowId</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpNextRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>keepResultInDiscBuf</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpNextRow</name></expr></argument>, <argument><expr><name>rowSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>tmpNextRow</name><operator>.</operator><name>pRowVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doFillResults</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>, <parameter><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>,
                          <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>tsCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowId</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getWindowFromDiscBuf</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>tsCol</name><index>[<expr><name>rowId</name></expr>]</index></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>preRowKey</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>resetFillWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>setFillValueInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>tsCol</name><index>[<expr><name>rowId</name></expr>]</index></name></expr></argument>, <argument><expr><name>rowId</name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doStreamFillRange</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doStreamFillImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>           <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type>    <name>pFillSup</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type>         <name>pFillInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>             <name>pBlock</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>                 <name>groupId</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>             <name>pRes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasRemainCalc</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doStreamFillRange</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsCol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>tsCol</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>keepBlockRowInDiscBuf</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>tsCol</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>rowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>preBlock</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevSrcBlock</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>preBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type>              <name>preRowId</name> <init>= <expr><name><name>preBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pPreTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>preBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsCol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>doFillResults</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>preBlock</name></expr></argument>, <argument><expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pPreTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>preRowId</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>ts</name> <init>= <expr><name><name>tsCol</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>keepBlockRowInDiscBuf</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>tsCol</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>rowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFillResults</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pFillSup</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>tsCol</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevSrcBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>copyDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevSrcBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildDeleteRange</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOp</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>delRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><name><name>pOp</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>     <name>pBlock</name> <init>= <expr><name>delRes</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGroupCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalStartCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalEndCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTbNameCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>TABLE_NAME_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pStartCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pEndCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pUidCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pGroupCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCalStartCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCalEndCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTableCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>TABLE_NAME_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>tbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>streamStateGetParName</name><argument_list>(<argument><expr><name><name>pOp</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tbname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pTableCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>parTbName</name><index>[<expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>TSDB_TABLE_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>parTbName</name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parTbName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pTableCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>parTbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildDeleteResult</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>startTs</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>endTs</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>,
                              <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>delRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type>    <name>pFillSup</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasPrevWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>start</name> <init>= <expr><call><name>getNextWindowTs</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>buildDeleteRange</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>endTs</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>delRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>hasNextWindow</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>end</name> <init>= <expr><call><name>getPrevWindowTs</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>buildDeleteRange</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>startTs</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>delRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>buildDeleteRange</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>startTs</name></expr></argument>, <argument><expr><name>endTs</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>delRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doDeleteFillResultImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>startTs</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>endTs</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getWindowFromDiscBuf</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>startTs</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setDeleteFillValueInfo</name><argument_list>(<argument><expr><name>startTs</name></expr></argument>, <argument><expr><name>endTs</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>startTs</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>needFill</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFillDel</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>buildDeleteResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>startTs</name></expr></argument>, <argument><expr><name>endTs</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>STimeRange</name></type> <name>tw</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>startTs</name></expr>,
        <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>endTs</name></expr>,
        <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>delRanges</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>key</name><operator>.</operator><name>ts</name></name> <operator>&lt;=</operator> <name>endTs</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>,
                           <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tSimpleHashPut</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>pResMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doDeleteFillFinalize</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type>         <name>pFillInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                  <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>delRanges</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSimpleHashClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>pResMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>delIndex</name></name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>delIndex</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STimeRange</name><modifier>*</modifier></type> <name>range</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>delRanges</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>delIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>!=</operator> <name><name>range</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>getWindowFromDiscBuf</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDeleteFillValueInfo</name><argument_list>(<argument><expr><name><name>range</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>needFill</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doStreamFillRange</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>skey</name></name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>groupId</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamStateFillDel</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doDeleteFillResult</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type>    <name>pFillSup</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type>         <name>pFillInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>             <name>pBlock</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcDelBlock</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>             <name>pRes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>             <name>pDelRes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>tsStarts</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pStartCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGroupCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>groupIds</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pGroupCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcDelRowIndex</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TSKEY</name></type>            <name>ts</name> <init>= <expr><name><name>tsStarts</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcDelRowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type>            <name>endTs</name> <init>= <expr><name>ts</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>         <name>groupId</name> <init>= <expr><name><name>groupIds</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcDelRowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SWinKey</name></type>          <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateGetAndCheckCur</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcDelRowIndex</name></name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SWinKey</name></type> <name>nextKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>, <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcDelRowIndex</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>nextVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>  <name>nextLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TSKEY</name></type>    <name>delTs</name> <init>= <expr><name><name>tsStarts</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcDelRowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>delGroupId</name> <init>= <expr><name><name>groupIds</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcDelRowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>groupId</name> <operator>!=</operator> <name>delGroupId</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>delTs</name> <operator>&gt;</operator> <name><name>nextKey</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SWinKey</name></type> <name>delKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>delGroupId</name></expr>, <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>delTs</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>delTs</name> <operator>==</operator> <name><name>nextKey</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateCurNext</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateGetGroupKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextKey</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nextVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// ts will be deleted later</comment>
        <if_stmt><if>if <condition>(<expr><name>delTs</name> <operator>!=</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>streamStateFillDel</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pCur</name> <operator>=</operator> <call><name>streamStateGetAndCheckCur</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>endTs</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>delTs</name></expr></argument>, <argument><expr><name><name>nextKey</name><operator>.</operator><name>ts</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcDelRowIndex</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doDeleteFillResultImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>endTs</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resetStreamFillInfo</name><parameter_list>(<parameter><decl><type><name>SStreamFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevSrcBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>pResMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>hasDelete</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>delRanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>delIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doApplyStreamScalarCalculation</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDstBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>               <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pDstBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pDstBlock</name></expr></argument>, <argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pDstBlock</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pDstBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pSup</name> <operator>=</operator> <operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>notFillExprSup</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pDstBlock</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDstBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pDstBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doStreamFill</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>           <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_RES_TO_RETURN</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>hasRemainCalc</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doStreamFillRange</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>doDeleteFillFinalize</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="string">"stream fill"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>resetStreamFillInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>   <name>fillResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name> <operator>&gt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// If there are delete datablocks, we receive  them first.</comment>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>preBlock</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevSrcBlock</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>preBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type>              <name>preRowId</name> <init>= <expr><name><name>preBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pPreTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>preBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsCol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>doFillResults</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr></argument>, <argument><expr><name>preBlock</name></expr></argument>, <argument><expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pPreTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>preRowId</name></expr></argument>,
                        <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>preRowKey</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="string">"stream fill"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="string">"stream fill recv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <switch>switch <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>STREAM_RETRIEVE</name></expr>:</case>
          <return>return <expr><name>pBlock</name></expr>;</return>
        <case>case <expr><name>STREAM_DELETE_RESULT</name></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcDelBlock</name></name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcDelRowIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>hasDelete</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>doDeleteFillResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><literal type="string">"stream fill delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <continue>continue;</continue>
        </block_content>}</block> <break>break;</break>
        <case>case <expr><name>STREAM_NORMAL</name></expr>:</case>
        <case>case <expr><name>STREAM_INVALID</name></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><call><name>doApplyStreamScalarCalculation</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block> <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doStreamFillImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_RES_TO_RETURN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doDeleteFillFinalize</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>resetStreamFillInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="string">"stream fill"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initResultBuf</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>rowSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SResultCellData</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SResSchema</name><modifier>*</modifier></type>   <name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pCol</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>rowSize</name></name> <operator>+=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>nextNext</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>nextNext</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>initStreamFillSup</name><parameter_list>(<parameter><decl><type><name>SStreamFillPhysiNode</name><modifier>*</modifier></type> <name>pPhyFillNode</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>,
                                               <parameter><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pFillExprInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfFillCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamFillSupporter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pFillSup</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfFillCols</name></name> <operator>=</operator> <name>numOfFillCols</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfNotFillCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>noFillExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pNotFillExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfNotFillCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name> <operator>=</operator> <call><name>createFillColInfo</name><argument_list>(<argument><expr><name>pFillExprInfo</name></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfFillCols</name></name></expr></argument>, <argument><expr><name>noFillExprInfo</name></expr></argument>, <argument><expr><name>numOfNotFillCols</name></expr></argument>,
                                            <argument><expr><operator>(</operator><specifier>const</specifier> <name>SNodeListNode</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pValues</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>convertFillType</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>numOfFillCols</name></name> <operator>+</operator> <name>numOfNotFillCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <operator>*</operator><name>pInterval</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initResultBuf</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyStreamFillSupporter</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>noFillExpr</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pNotFillExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfNotFillCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillSup</name><operator>-&gt;</operator><name>notFillExprSup</name></name></expr></argument>, <argument><expr><name>noFillExpr</name></expr></argument>, <argument><expr><name>numOfNotFillCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyStreamFillSupporter</name><argument_list>(<argument><expr><name>pFillSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>pResMap</name></name> <operator>=</operator> <call><name>tSimpleHashInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>hasDelete</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><name>pFillSup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>initStreamFillInfo</name><parameter_list>(<parameter><decl><type><name>SStreamFillSupporter</name><modifier>*</modifier></type> <name>pFillSup</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamFillInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>preRowKey</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>needFill</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamFillLinearInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>hasNext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>nextEnd</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pDeltaVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pNextDeltaVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFillSup</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_LINEAR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pDeltaVal</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pNextDeltaVal</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pDeltaVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>pNextDeltaVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pLinearInfo</name><operator>-&gt;</operator><name>winIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFillSup</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_SET_VALUE</name> <operator>||</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SResultRowData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name><operator>-&gt;</operator><name>pRowVal</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pFillSup</name><operator>-&gt;</operator><name>rowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pFillSup</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>delRanges</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STimeRange</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>delIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>pFillInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createStreamFillOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SStreamFillPhysiNode</name><modifier>*</modifier></type> <name>pPhyFillNode</name></decl></parameter>,
                                            <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamFillOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamFillOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>           <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SStreamIntervalOperatorInfo</name><operator>*</operator><operator>)</operator><name><name>downstream</name><operator>-&gt;</operator><name>info</name></name><operator>)</operator><operator>-&gt;</operator><name>interval</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfFillCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pFillExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfFillCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name> <operator>=</operator> <call><name>initStreamFillSup</name><argument_list>(<argument><expr><name>pPhyFillNode</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>pFillExprInfo</name></expr></argument>, <argument><expr><name>numOfFillCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevSrcBlock</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevSrcBlock</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name> <operator>=</operator> <call><name>initStreamFillInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_SET_VALUE</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type>    <name>pFillCol</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pFillCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SVariant</name><modifier>*</modifier></type>        <name>pVar</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pFillCol</name><operator>-&gt;</operator><name>fillVal</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SET_TYPED_DATA</name><argument_list>(<argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SET_TYPED_DATA</name><argument_list>(<argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SET_TYPED_DATA</name><argument_list>(<argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_NULL</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>numOfAllCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type>    <name>pFillCol</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillSup</name><operator>-&gt;</operator><name>pAllColInfo</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pFillCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SResultCellData</name><modifier>*</modifier></type> <name>pCell</name> <init>= <expr><call><name>getResultCell</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillInfo</name><operator>-&gt;</operator><name>pResRow</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_DELETE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsCol</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pWStartTs</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primarySrcSlotId</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pWStartTs</name></name><operator>)</operator><operator>-&gt;</operator><name>pExpr</name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutputCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>extractColMatchInfo</name><argument_list>(<argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>, <argument><expr><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>numOfOutputCols</name></expr></argument>, <argument><expr><name>COL_MATCH_FROM_SLOT_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pPhyFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pFillExprInfo</name></expr></argument>, <argument><expr><name>numOfFillCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>srcRowIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"StreamFillOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FILL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>,
                  <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doStreamFill</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyStreamFillOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

  <label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>destroyStreamFillOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
