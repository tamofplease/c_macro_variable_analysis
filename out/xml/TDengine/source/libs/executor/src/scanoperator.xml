<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/scanoperator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttypes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_REVERSE_SCAN_FLAG</name><parameter_list>(<parameter><type><name>_info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_info)-&gt;scanFlag = REVERSE_SCAN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWITCH_ORDER</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>(((n) = ((n) == TSDB_ORDER_ASC) ? TSDB_ORDER_DESC : TSDB_ORDER_ASC))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>STableMergeScanExecInfo</name> <block>{
  <decl_stmt><decl><type><name>SFileBlockLoadRecorder</name></type> <name>blockRecorder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSortExecInfo</name></type>          <name>sortExecInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>STableMergeScanExecInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>STableMergeScanSortSourceParam</name> <block>{
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>readerIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>       <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>   <name>inputBlock</name></decl>;</decl_stmt>
}</block></struct></type> <name>STableMergeScanSortSourceParam</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>processBlockWithProbability</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSampleExecInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>processBlockWithProbability</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSampleExecInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (pInfo-&gt;sampleRatio == 1) {
    return true;
  }

  uint32_t val = taosRandR((uint32_t*) &amp;pInfo-&gt;seed);
  return (val % ((uint32_t)(1/pInfo-&gt;sampleRatio))) == 0;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>switchCtxOrder</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>SWITCH_ORDER</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getNextTimeWindow</name><parameter_list>(<parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>tw</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>factor</name> <init>= <expr><call><name>GET_FORWARD_DIRECTION_FACTOR</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>!=</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>!=</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>skey</name></name> <operator>+=</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <name><name>tw</name><operator>-&gt;</operator><name>skey</name></name> <operator>+</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>key</name> <init>= <expr><name><name>tw</name><operator>-&gt;</operator><name>skey</name></name></expr></init></decl>, <decl><type ref="prev"/><name>interval</name> <init>= <expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// convert key to second</comment>
  <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>interval</name> <operator>*=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type>    <name>t</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>mon</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <name>interval</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>mon</name> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>mon</name> <operator>%</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>taosMktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000LL</literal></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mon</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>mon</name> <operator>+</operator> <name>interval</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>mon</name> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>mon</name> <operator>%</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>taosMktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000LL</literal></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>ekey</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>overlapWithTimeWindow</name><parameter_list>(<parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>w</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// 0 by default, which means it is not a interval operator of the upstream operator.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>getAlignQueryTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>ekey</name></name> <operator>&gt;=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TMAX</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>getNextTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>ekey</name></name> <operator>&gt;</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>TMAX</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>getAlignQueryTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TMAX</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>getNextTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>.</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>skey</name></name> <operator>&lt;</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// this function is for table scanner to extract temporary results of upstream aggregate results.</comment>
<function><type><specifier>static</specifier> <name>SResultRow</name><modifier>*</modifier></type> <name>getTableGroupOutputBuf</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SFilePage</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>!=</operator> <name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SET_RES_WINDOW_KEY</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowPosition</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><operator>(</operator><name>SResultRowPosition</name><operator>*</operator><operator>)</operator><call><name>tSimpleHashGet</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pdInfo</name><operator>.</operator><name>pAggSup</name><operator>-&gt;</operator><name>pResultRowHashTable</name></name></expr></argument>,
                                                               <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>GET_RES_WINDOW_KEY_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pPage</name> <operator>=</operator> <call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pdInfo</name><operator>.</operator><name>pAggSup</name><operator>-&gt;</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>pageId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SResultRow</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pPage</name><operator>)</operator> <operator>+</operator> <name><name>p1</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doDynamicPruneDataBlock</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pdInfo</name><operator>.</operator><name>pExprSup</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup1</name> <init>= <expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pdInfo</name><operator>.</operator><name>pExprSup</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type>  <name>pPage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pRow</name> <init>= <expr><call><name>getTableGroupOutputBuf</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>notLoadBlock</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSup1</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>functionId</name> <init>= <expr><name><name>pSup1</name><operator>-&gt;</operator><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>getResultEntryInfo</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pdInfo</name><operator>.</operator><name>pExprSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>reqStatus</name> <init>= <expr><call><name>fmFuncDynDataRequired</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><name>pEntry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>reqStatus</name> <operator>!=</operator> <name>FUNC_DATA_REQUIRED_NOT_LOAD</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>notLoadBlock</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// release buffer pages</comment>
  <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pdInfo</name><operator>.</operator><name>pAggSup</name><operator>-&gt;</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>notLoadBlock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>FUNC_DATA_REQUIRED_NOT_LOAD</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>doFilterByBlockSMA</name><parameter_list>(<parameter><decl><type><name>SFilterInfo</name><modifier>*</modifier></type> <name>pFilterInfo</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name><modifier>*</modifier><modifier>*</modifier></type> <name>pColsAgg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>,
                               <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pColsAgg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pFilterInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>keep</name> <init>= <expr><call><name>filterRangeExecute</name><argument_list>(<argument><expr><name>pFilterInfo</name></expr></argument>, <argument><expr><name>pColsAgg</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>keep</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>doLoadBlockSMA</name><parameter_list>(<parameter><decl><type><name>STableScanBase</name><modifier>*</modifier></type> <name>pTableScanInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>allColumnsHaveAgg</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsdbRetrieveDatablockSMA</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>dataReader</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allColumnsHaveAgg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allColumnsHaveAgg</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  <comment type="line">//  if (allColumnsHaveAgg == true) {</comment>
  int32_t numOfCols = taosArrayGetSize(pBlock-&gt;pDataBlock);

  <comment type="line">// todo create this buffer during creating operator</comment>
  if (pBlock-&gt;pBlockAgg == NULL) {
    pBlock-&gt;pBlockAgg = taosMemoryCalloc(numOfCols, POINTER_BYTES);
    if (pBlock-&gt;pBlockAgg == NULL) {
      T_LONG_JMP(pTaskInfo-&gt;env, TSDB_CODE_OUT_OF_MEMORY);
    }
  }

  size_t num = taosArrayGetSize(pTableScanInfo-&gt;matchInfo.pList);
  for (int32_t i = 0; i &lt; num; ++i) {
    SColMatchItem* pColMatchInfo = taosArrayGet(pTableScanInfo-&gt;matchInfo.pList, i);
    if (!pColMatchInfo-&gt;needOutput) {
      continue;
    }

    pBlock-&gt;pBlockAgg[pColMatchInfo-&gt;dstSlotId] = pColAgg[i];
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doSetTagColumnData</name><parameter_list>(<parameter><decl><type><name>STableScanBase</name><modifier>*</modifier></type> <name>pTableScanInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>,
                               <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pseudoSup</name><operator>.</operator><name>numOfExprs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pseudoSup</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addTagPseudoColumnData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>readHandle</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                                          <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>metaCache</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// ignore the table not exists error, since this table may have been dropped during the scan procedure.</comment>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// reset the error code.</comment>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// todo handle the slimit info</comment>
<function><type><name>void</name></type> <name>applyLimitOffset</name><parameter_list>(<parameter><decl><type><name>SLimitInfo</name><modifier>*</modifier></type> <name>pLimitInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLimit</name><modifier>*</modifier></type>     <name>pLimit</name> <init>= <expr><operator>&amp;</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>id</name> <init>= <expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pLimit</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>-=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataEmpty</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"current block ignore due to offset, current:%"</literal> <name>PRId64</name> <literal type="string">", %s"</literal></expr></argument>, <argument><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataTrimFirstNRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pLimit</name><operator>-&gt;</operator><name>limit</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pLimit</name><operator>-&gt;</operator><name>limit</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputRows</name></name> <operator>+</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <comment type="line">// limit the output rows</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>overflowRows</name> <init>= <expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputRows</name></name> <operator>+</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <name><name>pLimit</name><operator>-&gt;</operator><name>limit</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>keep</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <name>overflowRows</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>blockDataKeepFirstNRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>keep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"output limit %"</literal> <name>PRId64</name> <literal type="string">" has reached, %s"</literal></expr></argument>, <argument><expr><name><name>pLimit</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_EXEC_DONE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>loadDataBlock</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableScanBase</name><modifier>*</modifier></type> <name>pTableScanInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                             <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>          <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFileBlockLoadRecorder</name><modifier>*</modifier></type> <name>pCost</name> <init>= <expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>readRecorder</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>totalBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>loadSMA</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name><name>pTableScanInfo</name><operator>-&gt;</operator><name>dataBlockLoadFlag</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
      <call><name>overlapWithTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pdInfo</name><operator>.</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>status</name><operator>)</operator> <operator>=</operator> <name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>status</name> <operator>==</operator> <name>FUNC_DATA_REQUIRED_FILTEROUT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s data block filter out, brange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">", rows:%d"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>filterOutBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>status</name> <operator>==</operator> <name>FUNC_DATA_REQUIRED_NOT_LOAD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s data block skipped, brange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">", rows:%d"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doSetTagColumnData</name><argument_list>(<argument><expr><name>pTableScanInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>skipBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>status</name> <operator>==</operator> <name>FUNC_DATA_REQUIRED_SMA_LOAD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>loadBlockStatis</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>loadSMA</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>  <comment type="line">// mark the operation of load sma;</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>doLoadBlockSMA</name><argument_list>(<argument><expr><name>pTableScanInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>  <comment type="line">// failed to load the block sma data, data block statistics does not exist, load data block instead</comment>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s data block SMA loaded, brange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">", rows:%d"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doSetTagColumnData</name><argument_list>(<argument><expr><name>pTableScanInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s failed to load SMA, since not all columns have SMA"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>status</name> <operator>==</operator> <name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// try to filter data block according to sma info</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>loadSMA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>doLoadBlockSMA</name><argument_list>(<argument><expr><name>pTableScanInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type>   <name>keep</name> <init>= <expr><call><name>doFilterByBlockSMA</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s data block filter out by block SMA, brange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">", rows:%d"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>filterOutBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>status</name><operator>)</operator> <operator>=</operator> <name>FUNC_DATA_REQUIRED_FILTEROUT</name></expr>;</expr_stmt>

        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// free the sma info, since it should not be involved in later computing process.</comment>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// try to filter data block according to current results</comment>
  <expr_stmt><expr><call><name>doDynamicPruneDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>status</name> <operator>==</operator> <name>FUNC_DATA_REQUIRED_NOT_LOAD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s data block skipped due to dynamic prune, brange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">", rows:%d"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>skipBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>FUNC_DATA_REQUIRED_FILTEROUT</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>totalCheckedRows</name></name> <operator>+=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>loadBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>tsdbRetrieveDataBlock</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>dataReader</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doSetTagColumnData</name><argument_list>(<argument><expr><name>pTableScanInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// restore the previous value</comment>
  <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>-=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>el</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>readRecorder</name><operator>.</operator><name>filterTime</name></name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>filterOutBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s data block filter out, brange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">", rows:%d, elapsed time:%.2f ms"</literal></expr></argument>,
             <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s data block filter applied, elapsed time:%.2f ms"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>applyLimitOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCost</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>numOfOutputRows</name></name> <operator>=</operator> <name><name>pCost</name><operator>-&gt;</operator><name>totalRows</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepareForDescendingScan</name><parameter_list>(<parameter><decl><type><name>STableScanBase</name><modifier>*</modifier></type> <name>pTableScanInfo</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>SET_REVERSE_SCAN_FLAG</name><argument_list>(<argument><expr><name>pTableScanInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>switchCtxOrder</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>order</name></name> <operator>=</operator> <name>TSDB_ORDER_DESC</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pTWindow</name> <init>= <expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>twindows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pTWindow</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pTWindow</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>STableCachedVal</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type>       <name>pTags</name></decl>;</decl_stmt>
}</block></struct></type> <name>STableCachedVal</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeTableCachedVal</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>param</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableCachedVal</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STableCachedVal</name><modifier>*</modifier></type> <name>createTableCacheVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMetaReader</name><modifier>*</modifier></type> <name>pMetaReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableCachedVal</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableCachedVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>pName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pMetaReader</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// only child table has tag value</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pMetaReader</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type> <name>pTag</name> <init>= <expr><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name><name>pMetaReader</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name>pTag</name></expr></argument>, <argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pVal</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// const void *key, size_t keyLen, void *value</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>freeCachedMetaItem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>freeTableCachedVal</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>addTagPseudoColumnData</name><parameter_list>(<parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfExpr</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                               <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idStr</name></decl></parameter>, <parameter><decl><type><name>STableMetaCacheInfo</name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// currently only the tbname pseudo column</comment>
  <if_stmt><if>if <condition>(<expr><name>numOfExpr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// backup the rows</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>backupRows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type>            <name>freeReader</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableCachedVal</name></type> <name>val</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type>  <name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// 1. check if it is existed in meta cache</comment>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qWarn</name><argument_list>(<argument><expr><literal type="string">"failed to get table meta, table may have been dropped, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>,
              <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get table meta, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>metaReaderReleaseLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pTags</name></name> <operator>=</operator> <operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>freeReader</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>metaFetch</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pTableMetaEntryCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>qWarn</name><argument_list>(<argument><expr><literal type="string">"failed to get table meta, table may have been dropped, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>,
                <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get table meta, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>terrno</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>metaReaderReleaseLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>STableCachedVal</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><call><name>createTableCacheVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><name>pVal</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>freeReader</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosLRUCacheInsert</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pTableMetaEntryCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pVal</name></expr></argument>,
                                       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableCachedVal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>freeCachedMetaItem</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TAOS_LRU_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TAOS_LRU_STATUS_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to put meta into lru cache, code:%d, %s"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeTableCachedVal</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>cacheHit</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STableCachedVal</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pTableMetaEntryCache</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><name>pVal</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pTableMetaEntryCache</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"retrieve table meta from cache:%"</literal> <name>PRIu64</name> <literal type="string">", hit:%"</literal> <name>PRIu64</name> <literal type="string">" miss:%"</literal> <name>PRIu64</name> <literal type="string">", %s"</literal></expr></argument>, <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>metaFetch</name></name></expr></argument>,
           <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>cacheHit</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>pCache</name><operator>-&gt;</operator><name>metaFetch</name></name> <operator>-</operator> <name><name>pCache</name><operator>-&gt;</operator><name>cacheHit</name></name><operator>)</operator></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfExpr</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr1</name> <init>= <expr><operator>&amp;</operator><name><name>pExpr</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>dstSlotId</name> <init>= <expr><name><name>pExpr1</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>dstSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colInfoDataCleanup</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>functionId</name> <init>= <expr><name><name>pExpr1</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>functionId</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// this is to handle the tbname</comment>
    <if_stmt><if>if <condition>(<expr><call><name>fmIsScanPseudoColumnFunc</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setTbNameColData</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>functionId</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>pName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// these are tags</comment>
      <decl_stmt><decl><type><name>STagVal</name></type> <name>tagVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>tagVal</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><name>pExpr1</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>metaGetTableTagVal</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>pTags</name></name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>tTagValToData</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STagVal</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>bool</name></type> <name>isNullVal</name> <init>= <expr><operator>(</operator><name>data</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <call><name>tTagIsJsonNull</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>isNullVal</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNItems</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>STagVal</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// todo opt for json tag</comment>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// restore the rows</comment>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>backupRows</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>freeReader</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setTbNameColData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>functionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>SScalarFuncExecFuncs</name></name></type> <name>fpSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fmGetScalarFuncExecFuncs</name><argument_list>(<argument><expr><name>functionId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>TSDB_TABLE_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>   <name><name>buf</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <macro><name>STR_TO_VARSTR</name><argument_list>(<argument>buf</argument>, <argument>name</argument>)</argument_list></macro>

  <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>infoData</name> <init>= <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>colInfoDataEnsureCapacity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SScalarParam</name></type> <name>srcParam</name> <init>= <expr><block>{<expr><operator>.</operator><name>numOfRows</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>, <expr><operator>.</operator><name>columnData</name> <operator>=</operator> <operator>&amp;</operator><name>infoData</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name></type> <name>param</name> <init>= <expr><block>{<expr><operator>.</operator><name>columnData</name> <operator>=</operator> <name>pColInfoData</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>fpSet</name><operator>.</operator><name>process</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fpSet</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>srcParam</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get the corresponding callback function, functionId:%d"</literal></expr></argument>, <argument><expr><name>functionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doTableScanImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>  <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>    <name>pBlock</name> <init>= <expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><call><name>tsdbNextDataBlock</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isTaskKilled</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// process this data block based on the probabilities</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>processThisBlock</name> <init>= <expr><call><name>processBlockWithProbability</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>sample</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>processThisBlock</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <call><name>getTableGroupId</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><call><name>loadDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">//    int32_t  code = loadDataBlockOnDemand(pOperator-&gt;pRuntimeEnv, pTableScanInfo, pBlock, &amp;status);</comment>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// current block is filter out according to filter condition, continue load the next block</comment>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>FUNC_DATA_REQUIRED_FILTEROUT</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>=</operator> <name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readRecorder</name><operator>.</operator><name>totalRows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readRecorder</name><operator>.</operator><name>elapsedTime</name></name> <operator>+=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>totalCost</name></name> <operator>=</operator> <name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readRecorder</name><operator>.</operator><name>elapsedTime</name></name></expr>;</expr_stmt>

    <comment type="line">// todo refactor</comment>
    <comment type="block">/*pTableScanInfo-&gt;lastStatus.uid = pBlock-&gt;info.id.uid;*/</comment>
    <comment type="block">/*pTableScanInfo-&gt;lastStatus.ts = pBlock-&gt;info.window.ekey;*/</comment>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>pBlock</name></expr>;</return>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doGroupedTableScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>  <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// The read handle is not initialized yet, since no qualified tables exists</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// do the ascending order traverse in the first place.</comment>
  <while>while <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>&lt;</operator> <name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanInfo</name><operator>.</operator><name>numOfAsc</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>doTableScanImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>&lt;</operator> <name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanInfo</name><operator>.</operator><name>numOfAsc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setTaskStatus</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>TASK_NOT_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>scanFlag</name></name> <operator>=</operator> <name>REPEAT_SCAN</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"start to repeat ascending order scan data blocks due to query func required, %s"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// do prepare for the next round table scan operation</comment>
      <expr_stmt><expr><call><name>tsdbReaderReset</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>total</name> <init>= <expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanInfo</name><operator>.</operator><name>numOfAsc</name></name> <operator>+</operator> <name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanInfo</name><operator>.</operator><name>numOfDesc</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>&lt;</operator> <name>total</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>prepareForDescendingScan</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbReaderReset</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s start to descending order scan data blocks due to query func required"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>&lt;</operator> <name>total</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>doTableScanImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>p</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>&lt;</operator> <name>total</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setTaskStatus</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>TASK_NOT_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>scanFlag</name></name> <operator>=</operator> <name>REPEAT_SCAN</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s start to repeat descending order scan data blocks"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tsdbReaderReset</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doTableScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>  <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// scan table one by one sequentially</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>==</operator> <name>TABLE_SCAN__TABLE_ORDER</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTables</name> <init>= <expr><call><name>tableListGetSize</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>doGroupedTableScan</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>result</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// if no data, switch to next table and continue scan</comment>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentTable</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentTable</name></name> <operator>&gt;=</operator> <name>numOfTables</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pTableInfo</name> <init>= <expr><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentTable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tsdbSetTableList</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><name>pTableInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"set uid:%"</literal> <name>PRIu64</name> <literal type="string">" into scanner, total tables:%d, index:%d %s"</literal></expr></argument>, <argument><expr><name><name>pTableInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>,
             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentTable</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tsdbReaderReset</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// scan table group by group sequentially</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name><name>pInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name><operator>)</operator> <operator>&gt;=</operator> <call><name>tableListGetOutputGroups</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type>        <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tableListGetGroupList</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsdbReaderOpen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readHandle</name><operator>.</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>num</name></expr></argument>,
                                    <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><operator>(</operator><name>STsdbReader</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>doGroupedTableScan</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name><name>pInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name><operator>)</operator> <operator>&gt;=</operator> <call><name>tableListGetOutputGroups</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// reset value for the next group data output</comment>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_OPENED</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>limitInfo</name><operator>.</operator><name>numOfOutputRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>limitInfo</name><operator>.</operator><name>remainOffset</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>limitInfo</name><operator>.</operator><name>limit</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>        <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tableListGetGroupList</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tsdbSetTableList</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbReaderReset</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>doGroupedTableScan</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableScannerExecInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SOperatorInfo</name></name><modifier>*</modifier></type> <name>pOptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOptrExplain</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFileBlockLoadRecorder</name><modifier>*</modifier></type> <name>pRecorder</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFileBlockLoadRecorder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type>         <name>pTableScanInfo</name> <init>= <expr><name><name>pOptr</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRecorder</name> <operator>=</operator> <name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readRecorder</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pOptrExplain</name> <operator>=</operator> <name>pRecorder</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFileBlockLoadRecorder</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyTableScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name> <init>= <expr><operator>(</operator><name>STableScanInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupQueryTableDataCond</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosLRUCacheCleanup</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>metaCache</name><operator>.</operator><name>pTableMetaEntryCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pseudoSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createTableScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pTableScanNode</name></decl></parameter>, <parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>readHandle</name></decl></parameter>,
                                           <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableScanInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>  <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type>     <name>pScanNode</name> <init>= <expr><operator>&amp;</operator><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDescNode</name> <init>= <expr><name><name>pScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>extractColMatchInfo</name><argument_list>(<argument><expr><name><name>pScanNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>, <argument><expr><name>pDescNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>, <argument><expr><name>COL_MATCH_FROM_COL_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initLimitInfo</name><argument_list>(<argument><expr><name><name>pScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>, <argument><expr><name><name>pScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>limitInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initQueryTableDataCond</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><name>pTableScanNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pScanNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pseudoSup</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name> <operator>=</operator> <call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pScanNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name> <operator>=</operator> <call><name>createSqlFunctionCtx</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanInfo</name></name> <operator>=</operator> <operator>(</operator><name>SScanInfo</name><operator>)</operator><block>{<expr><operator>.</operator><name>numOfAsc</name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><operator>.</operator><name>numOfDesc</name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>scanFlag</name></name> <operator>=</operator> <name>MAIN_SCAN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pdInfo</name><operator>.</operator><name>interval</name></name> <operator>=</operator> <call><name>extractIntervalInfo</name><argument_list>(<argument><expr><name>pTableScanNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readHandle</name></name> <operator>=</operator> <operator>*</operator><name>readHandle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataBlockLoadFlag</name></name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>dataRequired</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sample</name><operator>.</operator><name>sampleRatio</name></name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>ratio</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sample</name><operator>.</operator><name>seed</name></name> <operator>=</operator> <call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name>pDescNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>assignBlockUid</name></name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>assignBlockUid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasGroupByTag</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"TableScanOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>,
                  <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>metaCache</name><operator>.</operator><name>pTableMetaEntryCache</name></name> <operator>=</operator> <call><name>taosLRUCacheInit</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>metaCache</name><operator>.</operator><name>pTableMetaEntryCache</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosLRUCacheSetStrictCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>metaCache</name><operator>.</operator><name>pTableMetaEntryCache</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doTableScan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyTableScanOperatorInfo</name></expr></argument>,
                                         <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>getTableScannerExecInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// for non-blocking operator, the open cost is always 0</comment>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyTableScanOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createTableSeqScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReadHandle</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableScanInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>  <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>pReadHandle</name></expr>;</expr_stmt>
  <comment type="line">//  pInfo-&gt;prevGroupId       = -1;</comment>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"TableSeqScanOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SEQ_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>,
                  <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doTableScanImpl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>doClearBufferedBlocks</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>validBlockIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isSessionWindow</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>parentType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SESSION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isStateWindow</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>parentType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_STATE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isIntervalWindow</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>parentType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name> <operator>||</operator>
         <name><name>pInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>parentType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name> <operator>||</operator>
         <name><name>pInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>parentType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isSignleIntervalWindow</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>parentType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isSlidingWindow</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>isIntervalWindow</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>interval</name></name> <operator>!=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setGroupId</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>groupColIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>groupColIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>groupCol</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pColInfo</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rowIndex</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name><name>groupCol</name><index>[<expr><name>rowIndex</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resetTableScanInfo</name><parameter_list>(<parameter><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>twindows</name></name> <operator>=</operator> <operator>*</operator><name>pWin</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>readPreVersionData</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pTableScanOp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>tbUid</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>startTs</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>endTs</name></decl></parameter>,
                                       <parameter><decl><type><name>int64_t</name></type> <name>maxVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableKeyInfo</name></type> <name>tblInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>tbUid</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type>     <name>pTableScanInfo</name> <init>= <expr><name><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryTableDataCond</name></type> <name>cond</name> <init>= <expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>cond</name><operator>.</operator><name>startVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cond</name><operator>.</operator><name>endVersion</name></name> <operator>=</operator> <name>maxVersion</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cond</name><operator>.</operator><name>twindows</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindow</name><operator>)</operator><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>startTs</name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>endTs</name></expr>}</block></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pTableScanOp</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>tsdbReaderOpen</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readHandle</name><operator>.</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tblInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>(</operator><name>STsdbReader</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pReader</name></expr></argument>,
                                     <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tsdbNextDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="block">/*SSDataBlock* p = */</comment><expr_stmt><expr><call><name>tsdbRetrieveDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doSetTagColumnData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <call><name>getTableGroupId</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"retrieve prev rows:%d, skey:%"</literal> <name>PRId64</name> <literal type="string">", ekey:%"</literal> <name>PRId64</name> <literal type="string">" uid:%"</literal> <name>PRIu64</name> <literal type="string">", max ver:%"</literal> <name>PRId64</name>
         <literal type="string">", suid:%"</literal> <name>PRIu64</name></expr></argument>,
         <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>startTs</name></expr></argument>, <argument><expr><name>endTs</name></expr></argument>, <argument><expr><name>tbUid</name></expr></argument>, <argument><expr><name>maxVersion</name></expr></argument>, <argument><expr><name><name>cond</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>pBlock</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>getGroupIdByCol</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>maxVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pPreRes</name> <init>= <expr><call><name>readPreVersionData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>maxVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pPreRes</name> <operator>||</operator> <name><name>pPreRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPreRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>calGroupIdByData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartScalarSup</name></name></expr></argument>, <argument><expr><name>pPreRes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>getGroupIdByUid</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>getTableGroupId</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>getGroupIdByData</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>maxVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>needCalc</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>getGroupIdByCol</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>maxVersion</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>getGroupIdByUid</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>prepareRangeScan</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pRowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pRowIndex</name><operator>)</operator> <operator>==</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>startData</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pStartTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>endData</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pEndTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type>      <name>win</name> <init>= <expr><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name><name>startData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name><name>endData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGpCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>gpData</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pGpCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>         <name>groupId</name> <init>= <expr><name><name>gpData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>calStartData</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pCalStartTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>calEndData</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pCalEndTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>setGroupId</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>, <argument><expr><operator>*</operator><name>pRowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isSlidingWindow</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>updateWin</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>calStartData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>updateWin</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>calEndData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pRowIndex</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

  <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>pRowIndex</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>(</operator><operator>*</operator><name>pRowIndex</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>==</operator> <name><name>startData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>groupId</name> <operator>==</operator> <name><name>gpData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>endData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>==</operator> <name><name>endData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>groupId</name> <operator>==</operator> <name><name>gpData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>startData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>startData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>endData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name><operator>)</operator> <operator>||</operator>
           <operator>!</operator><operator>(</operator><call><name>isInTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name><name>startData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isInTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name><name>endData</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>resetTableScanInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_OPENED</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STimeWindow</name></type> <name>getSlidingWindow</name><parameter_list>(<parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>startTsCol</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>endTsCol</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>gpIdCol</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>,
                                    <parameter><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pDataBlockInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pRowIndex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>hasGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowInfo</name></type> <name>dumyInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dumyInfo</name><operator>.</operator><name>cur</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><call><name>getActiveTimeWindow</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dumyInfo</name></expr></argument>, <argument><expr><name><name>startTsCol</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>endWin</name> <init>= <expr><name>win</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>preWin</name> <init>= <expr><name>win</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>    <name>groupId</name> <init>= <expr><name><name>gpIdCol</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>hasGroup</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pRowIndex</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <while>while <condition>(<expr><operator>(</operator><name>groupId</name> <operator>==</operator> <name><name>gpIdCol</name><index>[<expr><operator>(</operator><operator>*</operator><name>pRowIndex</name><operator>)</operator></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>startTsCol</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>endWin</name><operator>.</operator><name>ekey</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pRowIndex</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pRowIndex</name><operator>)</operator> <operator>==</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <do>do <block>{<block_content>
      <expr_stmt><expr><name>preWin</name> <operator>=</operator> <name>endWin</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getNextTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endWin</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name><name>endTsCol</name><index>[<expr><operator>(</operator><operator>*</operator><name>pRowIndex</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>endWin</name><operator>.</operator><name>skey</name></name></expr>)</condition>;</do>
    <expr_stmt><expr><name>endWin</name> <operator>=</operator> <name>preWin</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>==</operator> <name><name>endWin</name><operator>.</operator><name>ekey</name></name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>pRowIndex</name><operator>)</operator> <operator>==</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>||</operator> <name>groupId</name> <operator>!=</operator> <name><name>gpIdCol</name><index>[<expr><operator>*</operator><name>pRowIndex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>endWin</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>
      <return>return <expr><name>win</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>endWin</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doRangeScan</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSDB</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tsColIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pRowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>doTableScan</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pResult</name> <operator>&amp;&amp;</operator> <call><name>prepareRangeScan</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSDB</name></expr></argument>, <argument><expr><name>pRowIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// scan next window data</comment>
      <expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>doTableScan</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pResult</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pSDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRowIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>updateWin</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindow</name><operator>)</operator><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>INT64_MIN</name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>needCalc</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>tmpBlock</name> <init>= <expr><call><name>createOneDataBlock</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmpBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>calGroupIdByData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartScalarSup</name></name></expr></argument>, <argument><expr><name>tmpBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>tmpBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDestCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type>             <name>isNull</name> <init>= <expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pSrcCol</name></expr></argument>, <argument><expr><name><name>tmpBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>pSrcData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrcCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDestCol</name></expr></argument>, <argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>pSrcData</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>tmpBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>calWin</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>updateWin</name></name></expr>;</expr_stmt>
        <return>return <expr><name>pResult</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>calWin</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>updateWin</name></name></expr>;</expr_stmt>
      <return>return <expr><name>pResult</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>generateSessionScanRange</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDestBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pDestBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pDestBlock</name></expr></argument>, <argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>startData</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pStartTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>endData</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pEndTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>uidCol</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pUidCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDestStartCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDestEndCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDestUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDestGpCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDestCalStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDestCalEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>          <name>version</name> <init>= <expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><call><name>getGroupIdByData</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>uidCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>startData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// gap must be 0.</comment>
    <decl_stmt><decl><type><name>SSessionKey</name></type> <name>startWin</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getCurSessionWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>pStreamAggSup</name></name></expr></argument>, <argument><expr><name><name>startData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>startData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_INVALID_SESSION_WIN_KEY</name><argument_list>(<argument><expr><name>startWin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// window has been closed.</comment>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SSessionKey</name></type> <name>endWin</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getCurSessionWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>pStreamAggSup</name></name></expr></argument>, <argument><expr><name><name>endData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>endData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>IS_INVALID_SESSION_WIN_KEY</name><argument_list>(<argument><expr><name>endWin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDestStartCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>startWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDestEndCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>endWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDestUidCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDestGpCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDestCalStartTsCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDestCalEndTsCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>generateIntervalScanRange</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDestBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pDestBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcStartTsCol</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcEndTsCol</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcGpCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>srcUidData</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pSrcUidCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSrcStartTsCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>  <name>srcStartTsCol</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pSrcStartTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>  <name>srcEndTsCol</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pSrcEndTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>version</name> <init>= <expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>needCalc</name></name> <operator>&amp;&amp;</operator> <name><name>srcStartTsCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>srcEndTsCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>     <name>srcUid</name> <init>= <expr><name><name>srcUidData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type>        <name>startTs</name> <init>= <expr><name><name>srcStartTsCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type>        <name>endTs</name> <init>= <expr><name><name>srcEndTsCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pPreRes</name> <init>= <expr><call><name>readPreVersionData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name></name></expr></argument>, <argument><expr><name>srcUid</name></expr></argument>, <argument><expr><name>startTs</name></expr></argument>, <argument><expr><name>endTs</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pPreRes</name></expr></argument>, <argument><expr><literal type="string">"pre res"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pSrcBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name><name>pPreRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTsCol</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pPreRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rows</name> <operator>=</operator> <name><name>pPreRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><call><name>calGroupIdByData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartScalarSup</name></name></expr></argument>, <argument><expr><name>pPreRes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>appendOneRowToStreamSpecialBlock</name><argument_list>(<argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pTsCol</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pTsCol</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcUid</name></expr></argument>,
                                       <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><literal type="string">"new delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>srcGp</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pSrcGpCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>srcStartTsCol</name> <operator>=</operator> <operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pSrcStartTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>srcEndTsCol</name> <operator>=</operator> <operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pSrcEndTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>srcUidData</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pSrcUidCol</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pDestBlock</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDeUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGpCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>srcUid</name> <init>= <expr><name><name>srcUidData</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><name><name>srcGp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>groupId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>groupId</name> <operator>=</operator> <call><name>getGroupIdByData</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>srcUid</name></expr></argument>, <argument><expr><name><name>srcStartTsCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>calStartTs</name> <init>= <expr><name><name>srcStartTsCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCalStartTsCol</name></expr></argument>, <argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>calStartTs</name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><call><name>getSlidingWindow</name><argument_list>(<argument><expr><name>srcStartTsCol</name></expr></argument>, <argument><expr><name>srcEndTsCol</name></expr></argument>, <argument><expr><name>srcGp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>,
                                       <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>needCalc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type>       <name>calEndTs</name> <init>= <expr><name><name>srcStartTsCol</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCalEndTsCol</name></expr></argument>, <argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>calEndTs</name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDeUidCol</name></expr></argument>, <argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>srcUid</name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pStartTsCol</name></expr></argument>, <argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>win</name><operator>.</operator><name>skey</name></name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pEndTsCol</name></expr></argument>, <argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>win</name><operator>.</operator><name>ekey</name></name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pGpCol</name></expr></argument>, <argument><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>groupId</name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>generateDeleteResultBlock</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDestBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pDestBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pDestBlock</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcStartTsCol</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcEndTsCol</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>srcUidData</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pSrcUidCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcGpCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>srcGp</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pSrcGpCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSrcStartTsCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>  <name>srcStartTsCol</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pSrcStartTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>  <name>srcEndTsCol</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pSrcEndTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>version</name> <init>= <expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>srcUid</name> <init>= <expr><name><name>srcUidData</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><name><name>srcGp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name><name>tbname</name><index>[<expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>TSDB_TABLE_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>groupId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>groupId</name> <operator>=</operator> <call><name>getGroupIdByData</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>srcUid</name></expr></argument>, <argument><expr><name><name>srcStartTsCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>tbnameCalSup</name><operator>.</operator><name>pExprInfo</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>parTbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>streamStateGetParName</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStreamScanOp</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parTbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>parTbname</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>parTbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>appendOneRowToStreamSpecialBlock</name><argument_list>(<argument><expr><name>pDestBlock</name></expr></argument>, <argument><expr><name>srcStartTsCol</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>srcEndTsCol</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>srcUidData</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>,
                                     <argument><expr><ternary><condition><expr><name><name>tbname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>tbname</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>generateScanRange</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDestBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isIntervalWindow</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateIntervalScanRange</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name>pDestBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isSessionWindow</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isStateWindow</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateSessionScanRange</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name>pDestBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>generateDeleteResultBlock</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name>pDestBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STREAM_CLEAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDestBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pDestBlock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>calBlockTbName</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>    <name>pTbNameCalSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tbnameCalSup</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStreamScanOp</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTbNameCalSup</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTbNameCalSup</name><operator>-&gt;</operator><name>numOfExprs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>tbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>streamStateGetParName</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStreamScanOp</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name> <init>= <expr><call><name>blockCopyOneRow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name> <operator>=</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>TSDB_TABLE_NAME_LEN</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>data</name> <init>= <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pTbNameCalSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name><name>pTbNameCalSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// TODO check tbname validation</comment>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>!=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*pBlock-&gt;info.parTbName[len + 1] = 0;*/</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>&amp;&amp;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamStatePutParName</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pSrcBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>appendOneRowToStreamSpecialBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>pStartTs</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>pEndTs</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pUid</name></decl></parameter>,
                                      <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pGp</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pTbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGpCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalStartCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalEndCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTableCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>TABLE_NAME_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pStartTsCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pStartTs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pEndTsCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pEndTs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pUidCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pUid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pGpCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pGp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCalStartCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pStartTs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCalEndCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pEndTs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pTableCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pTbName</name></expr></argument>, <argument><expr><name>pTbName</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkUpdateData</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>invertible</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColDataInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColDataInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>tsCol</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pColDataInfo</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>   <name>tableInserted</name> <init>= <expr><call><name>updateInfoIsTableInserted</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>rowId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>rowId</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>rowId</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SResultRowInfo</name></type> <name>dumyInfo</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dumyInfo</name><operator>.</operator><name>cur</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isClosed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>INT64_MIN</name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tableInserted</name> <operator>&amp;&amp;</operator> <call><name>isOverdue</name><argument_list>(<argument><expr><name><name>tsCol</name><index>[<expr><name>rowId</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>getActiveTimeWindow</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dumyInfo</name></expr></argument>, <argument><expr><name><name>tsCol</name><index>[<expr><name>rowId</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>isClosed</name> <operator>=</operator> <call><name>isCloseWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// must check update info first.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>update</name> <init>= <expr><call><name>updateInfoIsUpdated</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>tsCol</name><index>[<expr><name>rowId</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>closedWin</name> <init>= <expr><name>isClosed</name> <operator>&amp;&amp;</operator> <call><name>isSignleIntervalWindow</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                     <call><name>isDeletedStreamWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>,
                                           <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>update</name> <operator>||</operator> <name>closedWin</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>out</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"stream update check not pass, update %d, closedWin %d"</literal></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>closedWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>gpId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>appendOneRowToStreamSpecialBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name></expr></argument>, <argument><expr><name>tsCol</name> <operator>+</operator> <name>rowId</name></expr></argument>, <argument><expr><name>tsCol</name> <operator>+</operator> <name>rowId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gpId</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>closedWin</name> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>needCalc</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>gpId</name> <operator>=</operator> <call><name>calGroupIdByData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartScalarSup</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>rowId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendOneRowToStreamSpecialBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name></expr></argument>, <argument><expr><name>tsCol</name> <operator>+</operator> <name>rowId</name></expr></argument>, <argument><expr><name>tsCol</name> <operator>+</operator> <name>rowId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name>gpId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>out</name> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>needCalc</name></name></expr> ?</condition><then> <expr><name>STREAM_DELETE_DATA</name></expr> </then><else>: <expr><name>STREAM_CLEAR</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setBlockIntoRes</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>  <name>pOperator</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStreamScanOp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>  <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STREAM_NORMAL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <call><name>getTableGroupId</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// todo extract method</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColMatchItem</name><modifier>*</modifier></type> <name>pColMatchInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pColMatchInfo</name><operator>-&gt;</operator><name>needOutput</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>colExists</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>blockDataGetNumOfCols</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pResCol</name> <init>= <expr><call><name>bdGetColumnInfoData</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name> <operator>==</operator> <name><name>pColMatchInfo</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pColMatchInfo</name><operator>-&gt;</operator><name>dstSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pResCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>colExists</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// the required column does not exists in submit block, let's set it to be all null value</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>colExists</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pColMatchInfo</name><operator>-&gt;</operator><name>dstSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAppendNNULL</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// currently only the tbname pseudo column</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfPseudoExpr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addTagPseudoColumnData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPseudoExpr</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfPseudoExpr</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>,
                                          <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// ignore the table not exists error, since this table may have been dropped during the scan procedure.</comment>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataFreeRes</name><argument_list>(<argument><expr><operator>(</operator><name>SSDataBlock</name><operator>*</operator><operator>)</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// reset the error code.</comment>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataFreeRes</name><argument_list>(<argument><expr><operator>(</operator><name>SSDataBlock</name><operator>*</operator><operator>)</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>calBlockTbName</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doQueueScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>   <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"queue scan called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pReq</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pReq</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>SSubmitReq</name><modifier>*</modifier></type> <name>pSubmit</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pMsg</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tqReaderSetDataMsg</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>, <argument><expr><name>pSubmit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"submit msg messed up when initing stream submit block %p"</literal></expr></argument>, <argument><expr><name>pSubmit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pReq</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name>tqNextDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name></type> <name>block</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tqRetrieveDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name><name>block</name><operator>.</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>setBlockIntoRes</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pReq</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><call><name>doTableScan</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>&amp;&amp;</operator> <name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"queue scan tsdb return %d rows"</literal></expr></argument>, <argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>returned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>pResult</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>returned</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTSInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"queue scan tsdb over, switch to wal ver %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>snapshotVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tqSeekVer</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>snapshotVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>==</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>snapshotVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SFetchRet</name></type> <name>ret</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tqNextBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>.</operator><name>fetchType</name></name> <operator>==</operator> <name>FETCH_TYPE__DATA</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>setBlockIntoRes</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ret</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_EXEC_RECV</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"queue scan log return %d rows"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ret</name><operator>.</operator><name>fetchType</name></name> <operator>==</operator> <name>FETCH_TYPE__META</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//        pTaskInfo-&gt;streamInfo.lastStatus = ret.offset;</comment>
        <comment type="line">//        pTaskInfo-&gt;streamInfo.metaBlk = ret.meta;</comment>
        <comment type="line">//        return NULL;</comment>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ret</name><operator>.</operator><name>fetchType</name></name> <operator>==</operator> <name>FETCH_TYPE__NONE</name> <operator>||</operator>
                 <operator>(</operator><name><name>ret</name><operator>.</operator><name>fetchType</name></name> <operator>==</operator> <name>FETCH_TYPE__SEP</name> <operator>&amp;&amp;</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_RECV</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name></name> <operator>=</operator> <name><name>ret</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>curVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>formatBuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>formatBuf</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ret</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"queue scan log return null, offset %s"</literal></expr></argument>, <argument><expr><name>formatBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_OPENED</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    } else if (pTaskInfo-&gt;streamInfo.prepareStatus.type == TMQ_OFFSET__SNAPSHOT_DATA) {
    SSDataBlock* pResult = doTableScan(pInfo-&gt;pTableScanOp);
    if (pResult &amp;&amp; pResult-&gt;info.rows &gt; 0) {
      qDebug("stream scan tsdb return %d rows", pResult-&gt;info.rows);
      return pResult;
    }
    qDebug("stream scan tsdb return null");
    return NULL;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>filterDelBlockByUid</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>rows</name> <init>= <expr><name><name>pSrc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcStartCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>startCol</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pSrcStartCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcEndCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>endCol</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pSrcEndCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>uidCol</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pSrcUidCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstStartCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstEndCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uidCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstStartCol</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>startCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstEndCol</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>endCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstUidCol</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>uidCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>cap</name> <init>= <expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// for partition by tag</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setBlockGroupIdByUid</name><parameter_list>(<parameter><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>startTsCol</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pStartTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGpCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>gpCol</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pGpCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>uidCol</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pUidCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>rows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>needCalc</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><call><name>getGroupIdByUid</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>uidCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pGpCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doStreamScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// NOTE: this operator does never check if current status is done or not</comment>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>   <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"stream scan called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  SStreamState* pState = pTaskInfo-&gt;streamInfo.pState;
  if (pState) {
    printf("&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; stream write backend\n");
    SWinKey key = {
        .ts = 1,
        .groupId = 2,
    };
    char tmp[100] = "abcdefg1";
    if (streamStatePut(pState, &amp;key, &amp;tmp, strlen(tmp) + 1) &lt; 0) {
      ASSERT(0);
    }

    key.ts = 2;
    char tmp2[100] = "abcdefg2";
    if (streamStatePut(pState, &amp;key, &amp;tmp2, strlen(tmp2) + 1) &lt; 0) {
      ASSERT(0);
    }

    key.groupId = 5;
    key.ts = 1;
    char tmp3[100] = "abcdefg3";
    if (streamStatePut(pState, &amp;key, &amp;tmp3, strlen(tmp3) + 1) &lt; 0) {
      ASSERT(0);
    }

    char*   val2 = NULL;
    int32_t sz;
    if (streamStateGet(pState, &amp;key, (void**)&amp;val2, &amp;sz) &lt; 0) {
      ASSERT(0);
    }
    printf("stream read %s %d\n", val2, sz);
    streamFreeVal(val2);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>recoverStep</name></name> <operator>==</operator> <name>STREAM_RECOVER_STEP__PREPARE1</name> <operator>||</operator>
      <name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>recoverStep</name></name> <operator>==</operator> <name>STREAM_RECOVER_STEP__PREPARE2</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTSInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>tableCond</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryTableDataCond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>recoverStep</name></name> <operator>==</operator> <name>STREAM_RECOVER_STEP__PREPARE1</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>startVersion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>endVersion</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>fillHistoryVer1</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"stream recover step 1, from %"</literal> <name>PRId64</name> <literal type="string">" to %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>startVersion</name></name></expr></argument>,
             <argument><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>endVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>startVersion</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>fillHistoryVer1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>endVersion</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>fillHistoryVer2</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"stream recover step 2, from %"</literal> <name>PRId64</name> <literal type="string">" to %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>startVersion</name></name></expr></argument>,
             <argument><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>endVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*resetTableScanInfo(pTSInfo, pWin);*/</comment>
    <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>recoverStep</name></name> <operator>=</operator> <name>STREAM_RECOVER_STEP__SCAN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>recoverStep</name></name> <operator>==</operator> <name>STREAM_RECOVER_STEP__SCAN</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>doTableScan</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>calBlockTbName</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>TSKEY</name></type> <name>maxTs</name> <init>= <expr><call><name>updateInfoFillBlockData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>, <argument><expr><name>maxTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"stream recover scan get block, rows %d"</literal></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="string">"scan recover"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>pBlock</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>recoverStep</name></name> <operator>=</operator> <name>STREAM_RECOVER_STEP__NONE</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTSInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>startVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>endVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>total</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">// TODO: refactor</comment>
<label><name>FETCH_NEXT_BLOCK</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockType</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_BLOCK</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>validBlockIndex</name></name> <operator>&gt;=</operator> <name>total</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doClearBufferedBlocks</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*pOperator-&gt;status = OP_EXEC_DONE;*/</comment>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>      <name>current</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>validBlockIndex</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>&amp;&amp;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>streamStatePutParName</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// TODO move into scan</comment>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>calWin</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>calWin</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>STREAM_NORMAL</name></expr>:</case>
      <case>case <expr><name>STREAM_GET_ALL</name></expr>:</case>
        <return>return <expr><name>pBlock</name></expr>;</return>
      <case>case <expr><name>STREAM_RETRIEVE</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockType</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_DATAREADER_RETRIEVE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>copyDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>prepareRangeScan</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>updateResIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateInfoAddCloseWindowSBF</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <break>break;</break>
      <case>case <expr><name>STREAM_DELETE_DATA</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="string">"stream scan delete recv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDelBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pDelBlock</name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_DELETE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>filterDelBlockByUid</name><argument_list>(<argument><expr><name>pDelBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pDelBlock</name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>setBlockGroupIdByUid</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pDelBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pDelBlock</name></expr></argument>, <argument><expr><literal type="string">"stream scan delete recv filtered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pDelBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pDelBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <goto>goto <name>FETCH_NEXT_BLOCK</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isIntervalWindow</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isSessionWindow</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isStateWindow</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>generateDeleteResultBlock</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pDelBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STREAM_DELETE_RESULT</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pDelBlock</name></expr></argument>, <argument><expr><literal type="string">"stream scan delete result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pDelBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name></name></expr>;</return>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <goto>goto <name>FETCH_NEXT_BLOCK</name>;</goto>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockType</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>updateResIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>generateScanRange</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pDelBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>prepareRangeScan</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>updateResIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>copyDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STREAM_DELETE_DATA</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pDelBlock</name></expr></argument>, <argument><expr><literal type="string">"stream scan delete data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pDelBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_DATAREADER_RANGE</name></expr>;</expr_stmt>
            <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name></name></expr>;</return>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <goto>goto <name>FETCH_NEXT_BLOCK</name>;</goto>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block> <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
    <comment type="line">// printDataBlock(pBlock, "stream scan recv");</comment>
    <return>return <expr><name>pBlock</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockType</name></name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"scan mode %d"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>STREAM_SCAN_FROM_RES</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_READERHANDLE</name></expr>;</expr_stmt>
        <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
      </block_content>}</block> <break>break;</break>
      <case>case <expr><name>STREAM_SCAN_FROM_DELETE_DATA</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>generateScanRange</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>prepareRangeScan</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>updateResIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_DATAREADER_RANGE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>copyDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STREAM_DELETE_DATA</name></expr>;</expr_stmt>
        <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name></name></expr>;</return>
      </block_content>}</block> <break>break;</break>
      <case>case <expr><name>STREAM_SCAN_FROM_UPDATERES</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>generateScanRange</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>prepareRangeScan</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>updateResIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_DATAREADER_RANGE</name></expr>;</expr_stmt>
        <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr>;</return>
      </block_content>}</block> <break>break;</break>
      <case>case <expr><name>STREAM_SCAN_FROM_DATAREADER_RANGE</name></expr>:</case>
      <case>case <expr><name>STREAM_SCAN_FROM_DATAREADER_RETRIEVE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSDB</name> <init>= <expr><call><name>doRangeScan</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>updateResIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pSDB</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>uint64_t</name></type>        <name>version</name> <init>= <expr><call><name>getReaderMaxVersion</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>updateInfoSetScanRange</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>twindows</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pSDB</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>==</operator> <name>STREAM_SCAN_FROM_DATAREADER_RANGE</name></expr> ?</condition><then> <expr><name>STREAM_NORMAL</name></expr> </then><else>: <expr><name>STREAM_PULL_DATA</name></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>checkUpdateData</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pSDB</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line">// printDataBlock(pSDB, "stream scan update");</comment>
          <expr_stmt><expr><call><name>calBlockTbName</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>pSDB</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_READERHANDLE</name></expr>;</expr_stmt>
      </block_content>}</block> <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <decl_stmt><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>pStreamAggSup</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isStateWindow</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pSup</name><operator>-&gt;</operator><name>pScanBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_DATAREADER_RANGE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>updateResIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pScanBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pScanBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>prepareRangeScan</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>updateResIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>totBlockNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <label><name>NEXT_SUBMIT_BLK</name>:</label>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>validBlockIndex</name></name> <operator>&gt;=</operator> <name>totBlockNum</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>updateInfoDestoryColseWinSBF</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>doClearBufferedBlocks</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"stream scan return empty, consume block %d"</literal></expr></argument>, <argument><expr><name>totBlockNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type>     <name>current</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>validBlockIndex</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pSubmit</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tqReaderSetDataMsg</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>, <argument><expr><name>pSubmit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"submit msg messed up when initing stream submit block %p, current %d, total %d"</literal></expr></argument>, <argument><expr><name>pSubmit</name></expr></argument>, <argument><expr><name>current</name></expr></argument>,
                 <argument><expr><name>totBlockNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><call><name>tqNextDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name></type> <name>block</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tqRetrieveDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name><name>block</name><operator>.</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>setBlockIntoRes</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>updateInfoIgnore</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>,
                             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="string">"stream scan ignore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>checkUpdateData</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>updateResIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_CLEAR</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_UPDATERES</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_INVERT</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_RES</name></expr>;</expr_stmt>
              <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_DATA</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_DELETE_DATA</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if <condition>(<expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></else></if_stmt>
      <comment type="block">/*blockDataCleanup(pInfo-&gt;pRes);*/</comment>
    </block_content>}</block></while>

    <comment type="line">// record the scan action.</comment>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfExec</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>
    <comment type="line">// printDataBlock(pInfo-&gt;pRes, "stream scan");</comment>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"scan rows: %d"</literal></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>FETCH_NEXT_BLOCK</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <goto>goto <name>NEXT_SUBMIT_BLK</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SArray</name><modifier>*</modifier></type> <name>extractTableIdList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableListInfo</name><modifier>*</modifier></type> <name>pTableListInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tableIdList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Transfer the Array of STableKeyInfo into uid list.</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>tableListGetSize</name><argument_list>(<argument><expr><name>pTableListInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pkeyInfo</name> <init>= <expr><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name>pTableListInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tableIdList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkeyInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>tableIdList</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doRawScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// NOTE: this operator does never check if current status is done or not</comment>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>      <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamRawScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>metaRsp</name><operator>.</operator><name>metaRspLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// use metaRspLen !=0 to judge if data is meta</comment>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>metaRsp</name><operator>.</operator><name>metaRsp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap doRawScan called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>dataReader</name></name> <operator>&amp;&amp;</operator> <call><name>tsdbNextDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>isTaskKilled</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>tsdbRetrieveDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dataReader</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap doRawScan get data uid:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>
      <return>return <expr><name>pBlock</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SMetaTableInfo</name></type> <name>mtInfo</name> <init>= <expr><call><name>getUidfromSnapShot</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sContext</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mtInfo</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// read snapshot done, change to get data from wal</comment>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap read snapshot done, change to get data from wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>mtInfo</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TMQ_OFFSET__LOG</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>sContext</name><operator>-&gt;</operator><name>snapVersion</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>mtInfo</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap change get data uid:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>mtInfo</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qStreamPrepareScan</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sContext</name><operator>-&gt;</operator><name>subType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>tDeleteSSchemaWrapper</name><argument_list>(<argument><expr><name><name>mtInfo</name><operator>.</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap stream scan tsdb return null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_META</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSnapContext</name><modifier>*</modifier></type> <name>sContext</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>sContext</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>         <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type>       <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>       <name>uid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getMetafromSnapShot</name><argument_list>(<argument><expr><name>sContext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tmqsnap getMetafromSnapShot error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sContext</name><operator>-&gt;</operator><name>queryMetaOrData</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// change to get data next poll request</comment>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TMQ_OFFSET__SNAPSHOT_META</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>metaRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>metaRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>metaRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TMQ_OFFSET__SNAPSHOT_META</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>metaRsp</name><operator>.</operator><name>rspOffset</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>metaRsp</name><operator>.</operator><name>resMsgType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>metaRsp</name><operator>.</operator><name>metaRspLen</name></name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>metaRsp</name><operator>.</operator><name>metaRsp</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">//  else if (pTaskInfo-&gt;streamInfo.prepareStatus.type == TMQ_OFFSET__LOG) {</comment>
  <comment type="line">//    int64_t fetchVer = pTaskInfo-&gt;streamInfo.prepareStatus.version + 1;</comment>
  <comment type="line">//</comment>
  <comment type="line">//    while(1){</comment>
  <comment type="line">//      if (tqFetchLog(pInfo-&gt;tqReader-&gt;pWalReader, pInfo-&gt;sContext-&gt;withMeta, &amp;fetchVer, &amp;pInfo-&gt;pCkHead) &lt; 0) {</comment>
  <comment type="line">//        qDebug("tmqsnap tmq poll: consumer log end. offset %" PRId64, fetchVer);</comment>
  <comment type="line">//        pTaskInfo-&gt;streamInfo.lastStatus.version = fetchVer;</comment>
  <comment type="line">//        pTaskInfo-&gt;streamInfo.lastStatus.type = TMQ_OFFSET__LOG;</comment>
  <comment type="line">//        return NULL;</comment>
  <comment type="line">//      }</comment>
  <comment type="line">//      SWalCont* pHead = &amp;pInfo-&gt;pCkHead-&gt;head;</comment>
  <comment type="line">//      qDebug("tmqsnap tmq poll: consumer log offset %" PRId64 " msgType %d", fetchVer, pHead-&gt;msgType);</comment>
  <comment type="line">//</comment>
  <comment type="line">//      if (pHead-&gt;msgType == TDMT_VND_SUBMIT) {</comment>
  <comment type="line">//        SSubmitReq* pCont = (SSubmitReq*)&amp;pHead-&gt;body;</comment>
  <comment type="line">//        tqReaderSetDataMsg(pInfo-&gt;tqReader, pCont, 0);</comment>
  <comment type="line">//        SSDataBlock* block = tqLogScanExec(pInfo-&gt;sContext-&gt;subType, pInfo-&gt;tqReader, pInfo-&gt;pFilterOutTbUid,</comment>
  <comment type="line">//        &amp;pInfo-&gt;pRes); if(block){</comment>
  <comment type="line">//          pTaskInfo-&gt;streamInfo.lastStatus.type = TMQ_OFFSET__LOG;</comment>
  <comment type="line">//          pTaskInfo-&gt;streamInfo.lastStatus.version = fetchVer;</comment>
  <comment type="line">//          qDebug("tmqsnap fetch data msg, ver:%" PRId64 ", type:%d", pHead-&gt;version, pHead-&gt;msgType);</comment>
  <comment type="line">//          return block;</comment>
  <comment type="line">//        }else{</comment>
  <comment type="line">//          fetchVer++;</comment>
  <comment type="line">//        }</comment>
  <comment type="line">//      } else{</comment>
  <comment type="line">//        ASSERT(pInfo-&gt;sContext-&gt;withMeta);</comment>
  <comment type="line">//        ASSERT(IS_META_MSG(pHead-&gt;msgType));</comment>
  <comment type="line">//        qDebug("tmqsnap fetch meta msg, ver:%" PRId64 ", type:%d", pHead-&gt;version, pHead-&gt;msgType);</comment>
  <comment type="line">//        pTaskInfo-&gt;streamInfo.metaRsp.rspOffset.version = fetchVer;</comment>
  <comment type="line">//        pTaskInfo-&gt;streamInfo.metaRsp.rspOffset.type = TMQ_OFFSET__LOG;</comment>
  <comment type="line">//        pTaskInfo-&gt;streamInfo.metaRsp.resMsgType = pHead-&gt;msgType;</comment>
  <comment type="line">//        pTaskInfo-&gt;streamInfo.metaRsp.metaRspLen = pHead-&gt;bodyLen;</comment>
  <comment type="line">//        pTaskInfo-&gt;streamInfo.metaRsp.metaRsp = taosMemoryMalloc(pHead-&gt;bodyLen);</comment>
  <comment type="line">//        memcpy(pTaskInfo-&gt;streamInfo.metaRsp.metaRsp, pHead-&gt;body, pHead-&gt;bodyLen);</comment>
  <comment type="line">//        return NULL;</comment>
  <comment type="line">//      }</comment>
  <comment type="line">//    }</comment>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyRawScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamRawScanInfo</name><modifier>*</modifier></type> <name>pRawScan</name> <init>= <expr><operator>(</operator><name>SStreamRawScanInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pRawScan</name><operator>-&gt;</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroySnapContext</name><argument_list>(<argument><expr><name><name>pRawScan</name><operator>-&gt;</operator><name>sContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRawScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// for subscribing db or stb (not including column),</comment>
<comment type="line">// if this scan is used, meta data can be return</comment>
<comment type="line">// and schemas are decided when scanning</comment>
<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createRawScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// create operator</comment>
  <comment type="line">// create tb reader</comment>
  <comment type="line">// create meta reader</comment>
  <comment type="line">// create tq reader</comment>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStreamRawScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamRawScanInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>      <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vnode</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>vnode</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sContext</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>sContext</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"RawScanOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>,
                  <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>doRawScan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyRawScanOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_end</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyStreamScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pStreamScan</name> <init>= <expr><operator>(</operator><name>SStreamScanInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pTableScanOp</name></name> <operator>&amp;&amp;</operator> <name><name>pStreamScan</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyOperatorInfo</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pTableScanOp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>tqReader</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqCloseReader</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pPseudoExpr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyExprInfo</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pPseudoExpr</name></name></expr></argument>, <argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>numOfPseudoExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pPseudoExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStreamScan</name><operator>-&gt;</operator><name>tbnameCalSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>updateInfoDestroy</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pPullDataRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pDeleteDataRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pStreamScan</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pStreamScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createStreamScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pTableScanNode</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>,
                                            <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamScanInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>   <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type>     <name>pScanPhyNode</name> <init>= <expr><operator>&amp;</operator><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDescNode</name> <init>= <expr><name><name>pScanPhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTagCond</name></name> <operator>=</operator> <name>pTagCond</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupTags</name></name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>extractColMatchInfo</name><argument_list>(<argument><expr><name><name>pScanPhyNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>, <argument><expr><name>pDescNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>, <argument><expr><name>COL_MATCH_FROM_COL_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutput</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pColIds</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColMatchItem</name><modifier>*</modifier></type> <name>id</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int16_t</name></type> <name>colId</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>colId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pColIds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>dstSlotId</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>pSubtable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pSubTableExpr</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExprInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pSubTableExpr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tbnameCalSup</name><operator>.</operator><name>pExprInfo</name></name> <operator>=</operator> <name>pSubTableExpr</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createExprFromOneNode</name><argument_list>(<argument><expr><name>pSubTableExpr</name></expr></argument>, <argument><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tbnameCalSup</name></name></expr></argument>, <argument><expr><name>pSubTableExpr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>pTags</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfTags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pTagExpr</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfTags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTagExpr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tagCalSup</name></name></expr></argument>, <argument><expr><name>pTagExpr</name></expr></argument>, <argument><expr><name>numOfTags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>vnode</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>  <name>pTableScanOp</name> <init>= <expr><call><name>createTableScanOperatorInfo</name><argument_list>(<argument><expr><name>pTableScanNode</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTSInfo</name> <init>= <expr><operator>(</operator><name>STableScanInfo</name><operator>*</operator><operator>)</operator><name><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>endVersion</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>        <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tableListGetGroupList</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>initTableReader</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>TABLE_SCAN__TABLE_ORDER</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReaderOpen</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>destroyTableScanOperatorInfo</name><argument_list>(<argument><expr><name>pTableScanOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_error</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>initTqReader</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>tqReader</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name> <operator>=</operator> <call><name>tqOpenReader</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>tqReader</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name></name> <operator>=</operator> <name>pTableScanOp</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>streamStateSetNumber</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name></name> <operator>=</operator> <operator>*</operator><name>pHandle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableUid</name></name> <operator>=</operator> <name><name>pScanPhyNode</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>snapshotVer</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

    <comment type="line">// set the extract column id to streamHandle</comment>
    <expr_stmt><expr><call><name>tqReaderSetColIdList</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>, <argument><expr><name>pColIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tableIdList</name> <init>= <expr><call><name>extractTableIdList</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqReaderSetTbUidList</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>, <argument><expr><name>tableIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tableIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tableIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>tableCond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryTableDataCond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pColIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// create the pseduo columns info</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPseudoExpr</name></name> <operator>=</operator> <call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>numOfPseudoExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pScanPhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name>pDescNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanMode</name></name> <operator>=</operator> <name>STREAM_SCAN_FROM_READERHANDLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>windowSup</name></name> <operator>=</operator> <operator>(</operator><name>SWindowSupporter</name><operator>)</operator><block>{<expr><operator>.</operator><name>pStreamAggSup</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>gap</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>parentType</name> <operator>=</operator> <name>QUERY_NODE_PHYSICAL_PLAN</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_RETRIEVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStreamScanOp</name></name> <operator>=</operator> <name>pOperator</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>deleteDataIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDeleteDataRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_DELETE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>updateWin</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindow</name><operator>)</operator><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateDataRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>assignBlockUid</name></name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>assignBlockUid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>needCalc</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"StreamScanOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>,
                  <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>__optr_fn_t</name></type> <name>nextFn</name> <init>= <expr><ternary><condition><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_STREAM</name></expr> ?</condition><then> <expr><name>doStreamScan</name></expr> </then><else>: <expr><name>doQueueScan</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>nextFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyStreamScanOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pColIds</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pColIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyStreamScanOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doTagScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STagScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type>    <name>pExprInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>  <name>pRes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>tableListGetSize</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setTaskStatus</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>TASK_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>        <name><name>str</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>curPos</name></name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>curPos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get table meta, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pExprInfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// refactor later</comment>
      <if_stmt><if>if <condition>(<expr><call><name>fmIsScanPseudoColumnFunc</name><argument_list>(<argument><expr><name><name>pExprInfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>functionId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// it is a tag value</comment>
        <decl_stmt><decl><type><name>STagVal</name></type> <name>val</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>val</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><name>pExprInfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>metaGetTableTagVal</name><argument_list>(<argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>tTagValToData</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STagVal</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                      <argument><expr><operator>(</operator><name>data</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <call><name>tTagIsJsonNull</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>STagVal</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>pInfo</name><operator>-&gt;</operator><name>curPos</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// qDebug("QInfo:0x%"PRIx64" create tag values results completed, rows:%d", GET_TASKID(pRuntimeEnv), count);</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setTaskStatus</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>TASK_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyTagScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STagScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>STagScanInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createTagScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>pReadHandle</name></decl></parameter>, <parameter><decl><type><name>STagScanPhysiNode</name><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>,
                                         <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STagScanInfo</name><modifier>*</modifier></type>  <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagScanInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDescNode</name> <init>= <expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfExprs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfExprs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfExprs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>extractColMatchInfo</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>, <argument><expr><name>pDescNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>COL_MATCH_FROM_COL_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name>pDescNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name></name> <operator>=</operator> <operator>*</operator><name>pReadHandle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>curPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"TagScanOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_TAG_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>,
                  <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doTagScan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyTagScanOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>getTableDataBlockImpl</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMergeScanSortSourceParam</name><modifier>*</modifier></type> <name>source</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>                  <name>pOperator</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>pOperator</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMergeScanInfo</name><modifier>*</modifier></type>            <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>                  <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                         <name>readIdx</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>readerIdx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>                    <name>pBlock</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>inputBlock</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pQueryCond</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queryConds</name></name></expr></argument>, <argument><expr><name>readIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name>readIdx</name> <operator>+</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>tableStartIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>pHandle</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readHandle</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsdbReaderOpen</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><name>pQueryCond</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>reader</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>tsdbNextDataBlock</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isTaskKilled</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// process this data block based on the probabilities</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>processThisBlock</name> <init>= <expr><call><name>processBlockWithProbability</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sample</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>processThisBlock</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pQueryCond</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pQueryCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pQueryCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>loadDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//    code = loadDataBlockFromOneTable(pOperator, pTableScanInfo, pBlock, &amp;status);</comment>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// current block is filter out according to filter condition, continue load the next block</comment>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>FUNC_DATA_REQUIRED_FILTEROUT</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <call><name>getTableGroupId</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readRecorder</name><operator>.</operator><name>elapsedTime</name></name> <operator>+=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>pBlock</name></expr>;</return>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>generateSortByTsInfo</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>colMatchInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tsTargetSlotId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>colMatchInfo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColMatchItem</name><modifier>*</modifier></type> <name>colInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>colMatchInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>colInfo</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tsTargetSlotId</name> <operator>=</operator> <name><name>colInfo</name><operator>-&gt;</operator><name>dstSlotId</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>         <name>pList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockOrderInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockOrderInfo</name></type> <name>bi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>bi</name><operator>.</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bi</name><operator>.</operator><name>slotId</name></name> <operator>=</operator> <name>tsTargetSlotId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bi</name><operator>.</operator><name>nullFirst</name></name> <operator>=</operator> <name>NULL_ORDER_FIRST</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pList</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dumpQueryTableCond</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryTableDataCond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>colList</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>colList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>colList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>startGroupTableMergeScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMergeScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>       <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfTables</name> <init>= <expr><call><name>tableListGetSize</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableStartIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTables</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>tableKeyInfo</name> <init>= <expr><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>tableKeyInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>!=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableEndIndex</name></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tableStartIdx</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableStartIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tableEndIdx</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableEndIndex</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// todo the total available buffer should be determined by total capacity of buffer of this task.</comment>
  <comment type="line">// the additional one is reserved for merge result</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortBufSize</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>bufPageSize</name></name> <operator>*</operator> <operator>(</operator><name>tableEndIdx</name> <operator>-</operator> <name>tableStartIdx</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfBufPage</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortBufSize</name></name> <operator>/</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>bufPageSize</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name> <operator>=</operator> <call><name>tsortCreateSortHandle</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name></expr></argument>, <argument><expr><name>SORT_MULTISOURCE_MERGE</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bufPageSize</name></name></expr></argument>, <argument><expr><name>numOfBufPage</name></expr></argument>,
                                             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInputBlock</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortSetFetchRawDataFp</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>, <argument><expr><name>getTableDataBlockImpl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// one table has one data block</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTable</name> <init>= <expr><name>tableEndIdx</name> <operator>-</operator> <name>tableStartIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queryConds</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfTable</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryTableDataCond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTable</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableMergeScanSortSourceParam</name></type> <name>param</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>param</name><operator>.</operator><name>readerIdx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>.</operator><name>pOperator</name></name> <operator>=</operator> <name>pOperator</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>param</name><operator>.</operator><name>inputBlock</name></name> <operator>=</operator> <call><name>createOneDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>inputBlock</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortSourceParams</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQueryTableDataCond</name></type> <name>cond</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dumpQueryTableCond</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queryConds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTable</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type>                    <name>ps</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSortSource</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STableMergeScanSortSourceParam</name><modifier>*</modifier></type> <name>param</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortSourceParams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>onlyRef</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsortAddSource</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsortOpen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stopGroupTableMergeScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMergeScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>       <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTable</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queryConds</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSortExecInfo</name></type> <name>sortExecInfo</name> <init>= <expr><call><name>tsortGetSortExecInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name><operator>.</operator><name>sortMethod</name></name> <operator>=</operator> <name><name>sortExecInfo</name><operator>.</operator><name>sortMethod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name><operator>.</operator><name>sortBuffer</name></name> <operator>=</operator> <name><name>sortExecInfo</name><operator>.</operator><name>sortBuffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name><operator>.</operator><name>loops</name></name> <operator>+=</operator> <name><name>sortExecInfo</name><operator>.</operator><name>loops</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name><operator>.</operator><name>readBytes</name></name> <operator>+=</operator> <name><name>sortExecInfo</name><operator>.</operator><name>readBytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name><operator>.</operator><name>writeBytes</name></name> <operator>+=</operator> <name><name>sortExecInfo</name><operator>.</operator><name>writeBytes</name></name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTable</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableMergeScanSortSourceParam</name><modifier>*</modifier></type> <name>param</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortSourceParams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>inputBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortSourceParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortDestroySortHandle</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queryConds</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>cond</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queryConds</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>colList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queryConds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queryConds</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>getSortedTableMergeScanBlockData</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>,
                                              <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMergeScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>       <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STupleHandle</name><modifier>*</modifier></type> <name>pTupleHandle</name> <init>= <expr><call><name>tsortNextTuple</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTupleHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>appendOneRowToDataBlock</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>pTupleHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s get sorted row blocks, rows:%d"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>applyLimitOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>numOfOutputRows</name></name> <operator>+=</operator> <name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pResBlock</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>doTableMergeScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>       <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMergeScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>_openFn</name></name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>tableListSize</name> <init>= <expr><call><name>tableListGetSize</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>hasGroupId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasGroupId</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>tableListSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableStartIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>STableKeyInfo</name><operator>*</operator><operator>)</operator><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableStartIndex</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>groupId</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>startGroupTableMergeScan</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableStartIndex</name></name> <operator>&lt;</operator> <name>tableListSize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pBlock</name> <operator>=</operator> <call><name>getSortedTableMergeScanBlockData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>,
                                              <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
      <return>return <expr><name>pBlock</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>stopGroupTableMergeScan</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableEndIndex</name></name> <operator>&gt;=</operator> <name>tableListSize</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableStartIndex</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>tableEndIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <call><name>tableListGetInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableStartIndex</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>groupId</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>startGroupTableMergeScan</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyTableMergeScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMergeScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name> <init>= <expr><operator>(</operator><name>STableMergeScanInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanupQueryTableDataCond</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTable</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>queryConds</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTable</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableMergeScanSortSourceParam</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>sortSourceParams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>inputBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>sortSourceParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsortDestroySortHandle</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>queryConds</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>queryConds</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>queryConds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pResBlock</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pSortInputBlock</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pSortInputBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pseudoSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosLRUCacheCleanup</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>metaCache</name><operator>.</operator><name>pTableMetaEntryCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getTableMergeScanExplainExecInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOptrExplain</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pOptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO: merge these two info into one struct</comment>
  <decl_stmt><decl><type><name>STableMergeScanExecInfo</name><modifier>*</modifier></type> <name>execInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMergeScanExecInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMergeScanInfo</name><modifier>*</modifier></type>     <name>pInfo</name> <init>= <expr><name><name>pOptr</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>execInfo</name><operator>-&gt;</operator><name>blockRecorder</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readRecorder</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>execInfo</name><operator>-&gt;</operator><name>sortExecInfo</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pOptrExplain</name> <operator>=</operator> <name>execInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STableMergeScanExecInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createTableMergeScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pTableScanNode</name></decl></parameter>, <parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>readHandle</name></decl></parameter>,
                                                <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMergeScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMergeScanInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>       <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDescNode</name> <init>= <expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>extractColMatchInfo</name><argument_list>(<argument><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanCols</name></name></expr></argument>, <argument><expr><name>pDescNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>, <argument><expr><name>COL_MATCH_FROM_COL_ID</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initQueryTableDataCond</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><name>pTableScanNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pseudoSup</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name> <operator>=</operator> <call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name> <operator>=</operator> <call><name>createSqlFunctionCtx</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scanInfo</name></name> <operator>=</operator> <operator>(</operator><name>SScanInfo</name><operator>)</operator><block>{<expr><operator>.</operator><name>numOfAsc</name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><operator>.</operator><name>numOfDesc</name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>metaCache</name><operator>.</operator><name>pTableMetaEntryCache</name></name> <operator>=</operator> <call><name>taosLRUCacheInit</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>metaCache</name><operator>.</operator><name>pTableMetaEntryCache</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataBlockLoadFlag</name></name> <operator>=</operator> <name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>scanFlag</name></name> <operator>=</operator> <name>MAIN_SCAN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readHandle</name></name> <operator>=</operator> <operator>*</operator><name>readHandle</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>limitInfo</name><operator>.</operator><name>limit</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>limitInfo</name><operator>.</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sample</name><operator>.</operator><name>sampleRatio</name></name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>ratio</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sample</name><operator>.</operator><name>seed</name></name> <operator>=</operator> <call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name>pDescNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortSourceParams</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMergeScanSortSourceParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name> <operator>=</operator> <call><name>generateSortByTsInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInputBlock</name></name> <operator>=</operator> <call><name>createOneDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initLimitInfo</name><argument_list>(<argument><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>, <argument><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>rowSize</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>nCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bufPageSize</name></name> <operator>=</operator> <call><name>getProperSortPageSize</name><argument_list>(<argument><expr><name>rowSize</name></expr></argument>, <argument><expr><name>nCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"TableMergeScanOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_MERGE_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>,
                  <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doTableMergeScan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyTableMergeScanOperatorInfo</name></expr></argument>,
                                         <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>getTableMergeScanExplainExecInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ====================================================================================================================</comment>
<comment type="line">// TableCountScanOperator</comment>
<function_decl><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doTableCountScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>         <name>destoryTableCountScanOperator</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>         <name>buildVnodeGroupedStbTableCount</name><parameter_list>(<parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>,
                                                   <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>stbUid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>         <name>buildVnodeGroupedNtbTableCount</name><parameter_list>(<parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>,
                                                   <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>         <name>buildVnodeFilteredTbCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                              <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>buildVnodeGroupedTableCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                        <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>buildVnodeDbTableCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                           <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>         <name>buildSysDbGroupedTableCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                                <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>infodbTableNum</name></decl></parameter>,
                                                <parameter><decl><type><name>size_t</name></type> <name>perfdbTableNum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>         <name>buildSysDbFilterTableCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>,
                                               <parameter><decl><type><name>size_t</name></type> <name>infodbTableNum</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>perfdbTableNum</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type>  <name>GROUP_TAG_DB_NAME</name> <init>= <expr><literal type="string">"db_name"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type>  <name>GROUP_TAG_STABLE_NAME</name> <init>= <expr><literal type="string">"stable_name"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>tblCountScanGetGroupTagsSlotId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>scanCols</name></decl></parameter>, <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>supp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>scanCols</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>scanCols</argument>)</argument_list></macro> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_TARGET</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_QRY_SYS_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>targetNode</name> <init>= <expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>targetNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_QRY_SYS_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>colNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>targetNode</name><operator>-&gt;</operator><name>pExpr</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>colNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>GROUP_TAG_DB_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>supp</name><operator>-&gt;</operator><name>dbNameSlotId</name></name> <operator>=</operator> <name><name>targetNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>colNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>GROUP_TAG_STABLE_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>supp</name><operator>-&gt;</operator><name>stbNameSlotId</name></name> <operator>=</operator> <name><name>targetNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tblCountScanGetCountSlotId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>pseudoCols</name></decl></parameter>, <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>supp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pseudoCols</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pseudoCols</argument>)</argument_list></macro> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_TARGET</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_QRY_SYS_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>targetNode</name> <init>= <expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>targetNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_FUNCTION</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_QRY_SYS_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>funcNode</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>targetNode</name><operator>-&gt;</operator><name>pExpr</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>funcNode</name><operator>-&gt;</operator><name>funcType</name></name> <operator>==</operator> <name>FUNCTION_TYPE_TABLE_COUNT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>supp</name><operator>-&gt;</operator><name>tbCountSlotId</name></name> <operator>=</operator> <name><name>targetNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tblCountScanGetInputs</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>groupTags</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>supp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>groupTags</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>groupTags</argument>)</argument_list></macro> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_QRY_SYS_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>colNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>colNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>GROUP_TAG_DB_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>supp</name><operator>-&gt;</operator><name>groupByDbName</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>colNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>GROUP_TAG_STABLE_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>supp</name><operator>-&gt;</operator><name>groupByStbName</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>supp</name><operator>-&gt;</operator><name>dbNameFilter</name></name></expr></argument>, <argument><expr><call><name>tNameGetDbNameP</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_DB_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>supp</name><operator>-&gt;</operator><name>stbNameFilter</name></name></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getTableCountScanSupp</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>groupTags</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>scanCols</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pseudoCols</name></decl></parameter>,
                              <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>supp</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>taskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tblCountScanGetInputs</name><argument_list>(<argument><expr><name>groupTags</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>supp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s get table count scan supp. get inputs error"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>taskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>supp</name><operator>-&gt;</operator><name>dbNameSlotId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>supp</name><operator>-&gt;</operator><name>stbNameSlotId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>supp</name><operator>-&gt;</operator><name>tbCountSlotId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tblCountScanGetGroupTagsSlotId</name><argument_list>(<argument><expr><name>scanCols</name></expr></argument>, <argument><expr><name>supp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s get table count scan supp. get group tags slot id error"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>taskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tblCountScanGetCountSlotId</name><argument_list>(<argument><expr><name>pseudoCols</name></expr></argument>, <argument><expr><name>supp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s get table count scan supp. get count error"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>taskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createTableCountScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>readHandle</name></decl></parameter>, <parameter><decl><type><name>STableCountScanPhysiNode</name><modifier>*</modifier></type> <name>pTblCountScanNode</name></decl></parameter>,
                                                <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type>              <name>pScanNode</name> <init>= <expr><operator>&amp;</operator><name><name>pTblCountScanNode</name><operator>-&gt;</operator><name>scan</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableCountScanOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>               <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pInfo</name> <operator>||</operator> <operator>!</operator><name>pOperator</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name></name> <operator>=</operator> <operator>*</operator><name>readHandle</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDescNode</name> <init>= <expr><name><name>pScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name>pDescNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>getTableCountScanSupp</name><argument_list>(<argument><expr><name><name>pTblCountScanNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTblCountScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>tableName</name></name></expr></argument>,
                        <argument><expr><name><name>pTblCountScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanCols</name></name></expr></argument>, <argument><expr><name><name>pTblCountScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>supp</name></name></expr></argument>,
                        <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"TableCountScanOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_COUNT_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>,
                  <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doTableCountScan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destoryTableCountScanOperator</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destoryTableCountScanOperator</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fillTableCountScanDataBlock</name><parameter_list>(<parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>stbName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>count</name></decl></parameter>,
                                 <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSupp</name><operator>-&gt;</operator><name>dbNameSlotId</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>colInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupp</name><operator>-&gt;</operator><name>dbNameSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>varDbName</name><index>[<expr><name>TSDB_DB_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>varDbName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>TSDB_DB_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>varDbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>colInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>varDbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSupp</name><operator>-&gt;</operator><name>stbNameSlotId</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>colInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupp</name><operator>-&gt;</operator><name>stbNameSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>stbName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>varStbName</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>varStbName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>varStbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>stbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>colInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>varStbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>colInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSupp</name><operator>-&gt;</operator><name>tbCountSlotId</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>colInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupp</name><operator>-&gt;</operator><name>tbCountSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>colInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>buildSysDbTableCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>supp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>         <name>pRes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>infodbTableNum</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getInfosDbMeta</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infodbTableNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>perfdbTableNum</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getPerfDbMeta</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>perfdbTableNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSupp</name><operator>-&gt;</operator><name>groupByDbName</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildSysDbGroupedTableCount</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>infodbTableNum</name></expr></argument>, <argument><expr><name>perfdbTableNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pRes</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>buildSysDbFilterTableCount</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>infodbTableNum</name></expr></argument>, <argument><expr><name>perfdbTableNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pRes</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildSysDbFilterTableCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>,
                                       <parameter><decl><type><name>size_t</name></type> <name>infodbTableNum</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>perfdbTableNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pSupp</name><operator>-&gt;</operator><name>dbNameFilter</name></name></expr></argument>, <argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>infodbTableNum</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pSupp</name><operator>-&gt;</operator><name>dbNameFilter</name></name></expr></argument>, <argument><expr><name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>perfdbTableNum</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pSupp</name><operator>-&gt;</operator><name>dbNameFilter</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>infodbTableNum</name> <operator>+</operator> <name>perfdbTableNum</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildSysDbGroupedTableCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                        <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>infodbTableNum</name></decl></parameter>,
                                        <parameter><decl><type><name>size_t</name></type> <name>perfdbTableNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currGrpIdx</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><call><name>calcGroupId</name><argument_list>(<argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>infodbTableNum</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currGrpIdx</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><call><name>calcGroupId</name><argument_list>(<argument><expr><name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>perfdbTableNum</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currGrpIdx</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doTableCountScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>               <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type>         <name>pSupp</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>supp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>                 <name>pRes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>mnd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildSysDbTableCount</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>buildVnodeDbTableCount</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>buildVnodeDbTableCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                           <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>vgId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>dbName</name><index>[<expr><name>TSDB_DB_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// get dbname</comment>
  <expr_stmt><expr><call><name>vnodeGetInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SName</name></type> <name>sn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSupp</name><operator>-&gt;</operator><name>groupByDbName</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildVnodeGroupedTableCount</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>buildVnodeFilteredTbCount</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><ternary><condition><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>pRes</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildVnodeGroupedTableCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                        <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSupp</name><operator>-&gt;</operator><name>groupByStbName</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>stbUidList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stbUidList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeGetStbIdList</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>vnode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stbUidList</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get stb id list error: %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currGrpIdx</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stbUidList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>stbUid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stbUidList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currGrpIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>buildVnodeGroupedStbTableCount</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>stbUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currGrpIdx</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currGrpIdx</name></name> <operator>==</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stbUidList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>buildVnodeGroupedNtbTableCount</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currGrpIdx</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><call><name>calcGroupId</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>dbTableCount</name> <init>= <expr><call><name>metaGetTbNum</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>dbTableCount</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildVnodeFilteredTbCount</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                      <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pSupp</name><operator>-&gt;</operator><name>dbNameFilter</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pSupp</name><operator>-&gt;</operator><name>stbNameFilter</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>tb_uid_t</name></type>      <name>uid</name> <init>= <expr><call><name>metaGetTableEntryUidByName</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name><name>pSupp</name><operator>-&gt;</operator><name>stbNameFilter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SMetaStbStats</name></type> <name>stats</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>metaGetStbStats</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ctbNum</name> <init>= <expr><name><name>stats</name><operator>.</operator><name>ctbNum</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name><name>pSupp</name><operator>-&gt;</operator><name>stbNameFilter</name></name></expr></argument>, <argument><expr><name>ctbNum</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>tbNumVnode</name> <init>= <expr><call><name>metaGetTbNum</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tbNumVnode</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>tbNumVnode</name> <init>= <expr><call><name>metaGetTbNum</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tbNumVnode</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildVnodeGroupedNtbTableCount</name><parameter_list>(<parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>,
                                           <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullStbName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fullStbName</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><call><name>calcGroupId</name><argument_list>(<argument><expr><name>fullStbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullStbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ntbNum</name> <init>= <expr><call><name>metaGetNtbNum</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>ntbNum</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildVnodeGroupedStbTableCount</name><parameter_list>(<parameter><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STableCountScanSupp</name><modifier>*</modifier></type> <name>pSupp</name></decl></parameter>,
                                           <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>stbUid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>stbName</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaGetTableSzNameByUid</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name>stbUid</name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>fullStbName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fullStbName</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><call><name>calcGroupId</name><argument_list>(<argument><expr><name>fullStbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullStbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMetaStbStats</name></type> <name>stats</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaGetStbStats</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name>stbUid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ctbNum</name> <init>= <expr><name><name>stats</name><operator>.</operator><name>ctbNum</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>fillTableCountScanDataBlock</name><argument_list>(<argument><expr><name>pSupp</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><name>ctbNum</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destoryTableCountScanOperator</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableCountScanOperatorInfo</name><modifier>*</modifier></type> <name>pTableCountScanInfo</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pTableCountScanInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTableCountScanInfo</name><operator>-&gt;</operator><name>stbUidList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
