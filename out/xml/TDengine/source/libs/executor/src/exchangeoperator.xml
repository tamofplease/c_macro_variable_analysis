<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/exchangeoperator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SFetchRspHandleWrapper</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>exchangeId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>sourceIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFetchRspHandleWrapper</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SSourceDataInfo</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>totalRows</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>            <name>startTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EX_SOURCE_STATUS</name></type>   <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type>        <name>taskId</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSourceDataInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>destroyExchangeOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>freeBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pParam</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>freeSourceDataInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>setAllSourcesCompleted</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>loadRemoteDataCallback</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>doSendFetchDataRequest</name><parameter_list>(<parameter><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sourceIndex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>getCompletedSources</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>prepareConcurrentlyLoad</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>seqLoadRemoteData</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>prepareLoadRemoteData</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>handleLimitOffset</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SLimitInfo</name><modifier>*</modifier></type> <name>pLimitInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                                 <parameter><decl><type><name>bool</name></type> <name>holdDataInBuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>doExtractResultBlocks</name><parameter_list>(<parameter><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name></decl></parameter>, <parameter><decl><type><name>SSourceDataInfo</name><modifier>*</modifier></type> <name>pDataInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>concurrentlyLoadRemoteDataImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name></decl></parameter>,
                                           <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>totalSources</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>completed</name> <init>= <expr><call><name>getCompletedSources</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>completed</name> <operator>==</operator> <name>totalSources</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setAllSourcesCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"prepare wait for ready, %p, %s"</literal></expr></argument>, <argument><expr><name>pExchangeInfo</name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isTaskKilled</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalSources</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSourceDataInfo</name><modifier>*</modifier></type> <name>pDataInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EX_SOURCE_DATA_EXHAUSTED</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EX_SOURCE_DATA_READY</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pDataInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
        <goto>goto <name>_error</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type>     <name>pRsp</name> <init>= <expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSources</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// todo</comment>
      <decl_stmt><decl><type><name>SLoadRemoteDataInfo</name><modifier>*</modifier></type> <name>pLoadInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>loadInfo</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EX_SOURCE_DATA_EXHAUSTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s vgId:%d, taskId:0x%"</literal> <name>PRIx64</name> <literal type="string">" execId:%d index:%d completed, rowsOfSource:%"</literal> <name>PRIu64</name>
               <literal type="string">", totalRows:%"</literal> <name>PRIu64</name> <literal type="string">", try next %d/%"</literal> <name>PRIzu</name></expr></argument>,
               <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>,
               <argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>totalSources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doExtractResultBlocks</name><argument_list>(<argument><expr><name>pExchangeInfo</name></expr></argument>, <argument><expr><name>pDataInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_error</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRetrieveRsp</name> <init>= <expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>updateLoadRemoteInfo</name><argument_list>(<argument><expr><name>pLoadInfo</name></expr></argument>, <argument><expr><name><name>pRetrieveRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pRetrieveRsp</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>, <argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>startTime</name></name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pRetrieveRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>completed</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EX_SOURCE_DATA_EXHAUSTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s fetch msg rsp from vgId:%d, taskId:0x%"</literal> <name>PRIx64</name>
               <literal type="string">" execId:%d index:%d completed, blocks:%d, numOfRows:%"</literal> <name>PRId64</name> <literal type="string">", rowsOfSource:%"</literal> <name>PRIu64</name> <literal type="string">", totalRows:%"</literal> <name>PRIu64</name>
               <literal type="string">", total:%.2f Kb, try next %d/%"</literal> <name>PRIzu</name></expr></argument>,
               <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>,
               <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
               <argument><expr><name>totalSources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s fetch msg rsp from vgId:%d, taskId:0x%"</literal> <name>PRIx64</name>
               <literal type="string">" execId:%d blocks:%d, numOfRows:%"</literal> <name>PRId64</name> <literal type="string">", totalRows:%"</literal> <name>PRIu64</name> <literal type="string">", total:%.2f Kb"</literal></expr></argument>,
               <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>,
               <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EX_SOURCE_DATA_EXHAUSTED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EX_SOURCE_DATA_NOT_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doSendFetchDataRequest</name><argument_list>(<argument><expr><name>pExchangeInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>_error</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return;</return>
    </block_content>}</block></for>  <comment type="line">// end loop</comment>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>complete1</name> <init>= <expr><call><name>getCompletedSources</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>complete1</name> <operator>==</operator> <name>totalSources</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"all sources are completed, %s"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

<label><name>_error</name>:</label>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doLoadRemoteDataImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>_openFn</name></name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>totalSources</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSources</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SLoadRemoteDataInfo</name><modifier>*</modifier></type> <name>pLoadInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>loadInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s all %"</literal> <name>PRIzu</name> <literal type="string">" source(s) are exhausted, total rows:%"</literal> <name>PRIu64</name> <literal type="string">" bytes:%"</literal> <name>PRIu64</name> <literal type="string">", elapsed:%.2f ms"</literal></expr></argument>,
           <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>totalSources</name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalSize</name></name></expr></argument>,
           <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalElapsed</name></name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// we have buffered retrieved datablock, return it directly</comment>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pRecycledBlocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>seqLoadData</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>seqLoadRemoteData</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>concurrentlyLoadRemoteDataImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pExchangeInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pRecycledBlocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>loadRemoteData</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>doLoadRemoteDataImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SLimitInfo</name><modifier>*</modifier></type> <name>pLimitInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>hasLimitOffsetInfo</name><argument_list>(<argument><expr><name>pLimitInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>status</name> <init>= <expr><call><name>handleLimitOffset</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pLimitInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>PROJECT_RETRIEVE_CONTINUE</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>PROJECT_RETRIEVE_DONE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>rows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>numOfOutputRows</name></name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>pBlock</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>pBlock</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initDataSource</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>numOfSources</name></decl></parameter>, <parameter><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfSources</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSourceDataInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfSources</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSourceDataInfo</name></type> <name>dataInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dataInfo</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>EX_SOURCE_DATA_NOT_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dataInfo</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dataInfo</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSourceDataInfo</name><modifier>*</modifier></type> <name>pDs</name> <init>= <expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initExchangeOperator</name><parameter_list>(<parameter><decl><type><name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pExNode</name></decl></parameter>, <parameter><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfSources</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pExNode</name><operator>-&gt;</operator><name>pSrcEndPoints</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfSources</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s invalid number: %d of sources in exchange operator"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>numOfSources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSources</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfSources</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDownstreamSourceNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSources</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfSources</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SDownstreamSourceNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNodeList</name><operator>*</operator><operator>)</operator><name><name>pExNode</name><operator>-&gt;</operator><name>pSrcEndPoints</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSources</name></name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>initLimitInfo</name><argument_list>(<argument><expr><name><name>pExNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>, <argument><expr><name><name>pExNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>self</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name>exchangeObjRefPool</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>initDataSource</name><argument_list>(<argument><expr><name>numOfSources</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createExchangeOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pTransporter</name></decl></parameter>, <parameter><decl><type><name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pExNode</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExchangeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initExchangeOperator</name><argument_list>(<argument><expr><name>pExNode</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDummyBlock</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pExNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRecycledBlocks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExchangeOpStopInfo</name></type> <name>stopInfo</name> <init>= <expr><block>{<expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr>, <expr><name><name>pInfo</name><operator>-&gt;</operator><name>self</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qAppendTaskStopInfo</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stopInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>seqLoadData</name></name> <operator>=</operator> <name><name>pExNode</name><operator>-&gt;</operator><name>seqRecvData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTransporter</name></name> <operator>=</operator> <name>pTransporter</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"ExchangeOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>,
                  <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDummyBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>prepareLoadRemoteData</name></expr></argument>, <argument><expr><name>loadRemoteData</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyExchangeOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doDestroyExchangeOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyExchangeOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExInfo</name> <init>= <expr><operator>(</operator><name>SExchangeInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name>exchangeObjRefPool</name></expr></argument>, <argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>freeBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSDataBlock</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pParam</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>freeSourceDataInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSourceDataInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SSourceDataInfo</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doDestroyExchangeOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExInfo</name> <init>= <expr><operator>(</operator><name>SExchangeInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>pSources</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name></expr></argument>, <argument><expr><name>freeSourceDataInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>, <argument><expr><name>freeBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>pRecycledBlocks</name></name></expr></argument>, <argument><expr><name>freeBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pExInfo</name><operator>-&gt;</operator><name>pDummyBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExInfo</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>loadRemoteDataCallback</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFetchRspHandleWrapper</name><modifier>*</modifier></type> <name>pWrapper</name> <init>= <expr><operator>(</operator><name>SFetchRspHandleWrapper</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name>exchangeObjRefPool</name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>exchangeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pExchangeInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qWarn</name><argument_list>(<argument><expr><literal type="string">"failed to acquire exchange operator, since it may have been released, %p"</literal></expr></argument>, <argument><expr><name>pExchangeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>index</name> <init>= <expr><name><name>pWrapper</name><operator>-&gt;</operator><name>sourceIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSourceDataInfo</name><modifier>*</modifier></type> <name>pSourceDataInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSourceDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><name><name>pSourceDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>compLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>useconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRsp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s fetch rsp received, index:%d, blocks:%d, rows:%"</literal> <name>PRId64</name> <literal type="string">", %p"</literal></expr></argument>, <argument><expr><name><name>pSourceDataInfo</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>,
           <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>pExchangeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSourceDataInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s fetch rsp received, index:%d, error:%s, %p"</literal></expr></argument>, <argument><expr><name><name>pSourceDataInfo</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>pExchangeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pSourceDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EX_SOURCE_DATA_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to invoke post when fetch rsp is ready, code:%s, %p"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pExchangeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>exchangeObjRefPool</name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>exchangeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doSendFetchDataRequest</name><parameter_list>(<parameter><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sourceIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>totalSources</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSources</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSources</name></name></expr></argument>, <argument><expr><name>sourceIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSourceDataInfo</name><modifier>*</modifier></type>       <name>pDataInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name></expr></argument>, <argument><expr><name>sourceIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EX_SOURCE_DATA_NOT_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFetchRspHandleWrapper</name><modifier>*</modifier></type> <name>pWrapper</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFetchRspHandleWrapper</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>exchangeId</name></name> <operator>=</operator> <name><name>pExchangeInfo</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>sourceIndex</name></name> <operator>=</operator> <name>sourceIndex</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSource</name><operator>-&gt;</operator><name>localExec</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataBuf</name></type> <name>pBuf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>=
        <expr><call>(<modifier>*</modifier><name><name>pTaskInfo</name><operator>-&gt;</operator><name>localFetch</name><operator>.</operator><name>fp</name></name>)<argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>localFetch</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>schedId</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>queryId</name></name></expr></argument>,
                                    <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>localFetch</name><operator>.</operator><name>explainRes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>loadRemoteDataCallback</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SResFetchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>nodeId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>sId</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>schedId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>queryId</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>queryId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>execId</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><call><name>tSerializeSResFetchReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tSerializeSResFetchReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s build fetch msg and send to vgId:%d, ep:%s, taskId:0x%"</literal> <name>PRIx64</name> <literal type="string">", execId:%d, %p, %d/%"</literal> <name>PRIzu</name></expr></argument>,
           <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>,
           <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name>pExchangeInfo</name></expr></argument>, <argument><expr><name>sourceIndex</name></expr></argument>, <argument><expr><name>totalSources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// send the fetch remote task result reques</comment>
    <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pMsgSendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMsgSendInfo</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s prepare message %d failed"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>pWrapper</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>paramFreeFp</name></name> <operator>=</operator> <name>taosMemoryFree</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>msgSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>fetchMsgType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>loadRemoteDataCallback</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
        <expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>updateLoadRemoteInfo</name><parameter_list>(<parameter><decl><type><name>SLoadRemoteDataInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>startTs</name></decl></parameter>,
                          <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalSize</name></name> <operator>+=</operator> <name>dataLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalElapsed</name></name> <operator>+=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTs</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>extractDataBlockFromFetchRsp</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pColList</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNextStart</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pColList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// data from other sources</comment>
    <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pNextStart</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>blockDecode</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// extract data according to pColList</comment>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <comment type="line">// todo refactor:extract method</comment>
    <decl_stmt><decl><type><name>SSysTableSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><operator>(</operator><name>SSysTableSchema</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSysTableSchema</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>SSysTableSchema</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSysTableSchema</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>idata</name> <init>= <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>blockDecode</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// data from mnode</comment>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>relocateColumnData</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>pColList</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// todo move this to time window aggregator, since the primary timestamp may not be known by exchange operator.</comment>
  <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>setAllSourcesCompleted</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SLoadRemoteDataInfo</name><modifier>*</modifier></type> <name>pLoadInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>loadInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>               <name>totalSources</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSources</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s all %"</literal> <name>PRIzu</name> <literal type="string">" sources are exhausted, total rows: %"</literal> <name>PRIu64</name> <literal type="string">", %.2f Kb, elapsed:%.2f ms"</literal></expr></argument>,
         <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>totalSources</name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>,
         <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalElapsed</name></name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getCompletedSources</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>total</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>completed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>total</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSourceDataInfo</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EX_SOURCE_DATA_EXHAUSTED</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>completed</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>completed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>prepareConcurrentlyLoad</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type>  <name>totalSources</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSources</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>startTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Asynchronously send all fetch requests to all sources.</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalSources</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doSendFetchDataRequest</name><argument_list>(<argument><expr><name>pExchangeInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>endTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s send all fetch requests to %"</literal> <name>PRIzu</name> <literal type="string">" sources completed, elapsed:%.2fms"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>totalSources</name></expr></argument>, <argument><expr><operator>(</operator><name>endTs</name> <operator>-</operator> <name>startTs</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTs</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isTaskKilled</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doExtractResultBlocks</name><parameter_list>(<parameter><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name></decl></parameter>, <parameter><decl><type><name>SSourceDataInfo</name><modifier>*</modifier></type> <name>pDataInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRetrieveRsp</name> <init>= <expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>pStart</name> <init>= <expr><name><name>pRetrieveRsp</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>index</name><operator>++</operator> <operator>&lt;</operator> <name><name>pRetrieveRsp</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pb</name> <init>= <expr><call><name>createOneDataBlock</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pDummyBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>extractDataBlockFromFetchRsp</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>seqLoadRemoteData</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>totalSources</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSources</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>startTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;=</operator> <name>totalSources</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setAllSourcesCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSourceDataInfo</name><modifier>*</modifier></type> <name>pDataInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSourceDataInfo</name></name></expr></argument>, <argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EX_SOURCE_DATA_NOT_READY</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>doSendFetchDataRequest</name><argument_list>(<argument><expr><name>pExchangeInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isTaskKilled</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>pSources</name></name></expr></argument>, <argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s vgId:%d, taskID:0x%"</literal> <name>PRIx64</name> <literal type="string">" execId:%d error happens, code:%s"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name><name>pDataInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type>   <name>pRsp</name> <init>= <expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SLoadRemoteDataInfo</name><modifier>*</modifier></type> <name>pLoadInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>loadInfo</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s vgId:%d, taskID:0x%"</literal> <name>PRIx64</name> <literal type="string">" execId:%d %d of total completed, rowsOfSource:%"</literal> <name>PRIu64</name>
             <literal type="string">", totalRows:%"</literal> <name>PRIu64</name> <literal type="string">" try next"</literal></expr></argument>,
             <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
             <argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EX_SOURCE_DATA_EXHAUSTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doExtractResultBlocks</name><argument_list>(<argument><expr><name>pExchangeInfo</name></expr></argument>, <argument><expr><name>pDataInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRetrieveRsp</name> <init>= <expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>completed</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s fetch msg rsp from vgId:%d, taskId:0x%"</literal> <name>PRIx64</name> <literal type="string">" execId:%d numOfRows:%"</literal> <name>PRId64</name> <literal type="string">", rowsOfSource:%"</literal> <name>PRIu64</name>
             <literal type="string">", totalRows:%"</literal> <name>PRIu64</name> <literal type="string">", totalBytes:%"</literal> <name>PRIu64</name> <literal type="string">" try next %d/%"</literal> <name>PRIzu</name></expr></argument>,
             <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>pRetrieveRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>,
             <argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalSize</name></name></expr></argument>, <argument><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
             <argument><expr><name>totalSources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EX_SOURCE_DATA_EXHAUSTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s fetch msg rsp from vgId:%d, taskId:0x%"</literal> <name>PRIx64</name> <literal type="string">" execId:%d numOfRows:%"</literal> <name>PRId64</name> <literal type="string">", totalRows:%"</literal> <name>PRIu64</name>
             <literal type="string">", totalBytes:%"</literal> <name>PRIu64</name></expr></argument>,
             <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>nodeId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>execId</name></name></expr></argument>, <argument><expr><name><name>pRetrieveRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>,
             <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pLoadInfo</name><operator>-&gt;</operator><name>totalSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>updateLoadRemoteInfo</name><argument_list>(<argument><expr><name>pLoadInfo</name></expr></argument>, <argument><expr><name><name>pRetrieveRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pRetrieveRsp</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>, <argument><expr><name>startTs</name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pRetrieveRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDataInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></while>

<label><name>_error</name>:</label>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>prepareLoadRemoteData</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>OPTR_IS_OPENED</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type> <name>pExchangeInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>seqLoadData</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>prepareConcurrentlyLoad</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>openedTs</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>OPTR_SET_OPENED</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>handleLimitOffset</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SLimitInfo</name><modifier>*</modifier></type> <name>pLimitInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>holdDataInBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainGroupOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// it is the first group</comment>
      <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>PROJECT_RETRIEVE_CONTINUE</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>!=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// now it is the data from a new group</comment>
      <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainGroupOffset</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <comment type="line">// ignore data block in current group</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainGroupOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PROJECT_RETRIEVE_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// set current group id of the project operator</comment>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// here check for a new group data, we need to handle the data of the previous group.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>!=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputGroups</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>&lt;=</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputGroups</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_EXEC_DONE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>PROJECT_RETRIEVE_DONE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// reset the value for a new group data</comment>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>=</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>

    <comment type="line">// existing rows that belongs to previous group.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>PROJECT_RETRIEVE_DONE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// here we reach the start position, according to the limit/offset requirements.</comment>

  <comment type="line">// set current group id</comment>
  <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>-=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PROJECT_RETRIEVE_CONTINUE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&amp;&amp;</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataTrimFirstNRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// check for the limitation in each group</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>limit</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputRows</name></name> <operator>+</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>keepRows</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>limit</name></name> <operator>-</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputRows</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataKeepFirstNRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>keepRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>&lt;=</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputGroups</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_EXEC_DONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>PROJECT_RETRIEVE_DONE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// todo optimize performance</comment>
  <comment type="line">// If there are slimit/soffset value exists, multi-round result can not be packed into one group, since the</comment>
  <comment type="line">// they may not belong to the same group the limit/offset value is not valid in this case.</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>holdDataInBuf</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>threshold</name></name><operator>)</operator> <operator>||</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
      <name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>PROJECT_RETRIEVE_DONE</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// not full enough, continue to accumulate the output data in the buffer.</comment>
    <return>return <expr><name>PROJECT_RETRIEVE_CONTINUE</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
