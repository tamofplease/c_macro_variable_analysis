<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/executor.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tudf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnode.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type> <name>initPoolOnce</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>             <name>exchangeObjRefPool</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initRefPool</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>exchangeObjRefPool</name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>doDestroyExchangeOperatorInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupRefPool</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exchangeObjRefPool</name></expr></argument>, <argument><expr><name>exchangeObjRefPool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doSetSMABlock</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numOfBlocks</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pOperator</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>!=</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to find stream scan operator to set the input data block, %s"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// not handle this in join query</comment>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"join not supported for stream block scan, %s"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_NOT_OPENED</name></expr>;</expr_stmt>
    <return>return <expr><call><name>doSetSMABlock</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>numOfBlocks</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_NOT_OPENED</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__MERGED_SUBMIT</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfBlocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockType</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockType</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__DATA_BLOCK</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfBlocks</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SSDataBlock</name><operator>*</operator><operator>)</operator><name>input</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockType</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_BLOCK</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doSetStreamOpOpen</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pOperator</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>!=</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to find stream scan operator to set the input data block, %s"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// not handle this in join query</comment>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"join not supported for stream block scan, %s"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_NOT_OPENED</name></expr>;</expr_stmt>
      <return>return <expr><call><name>doSetStreamOpOpen</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doSetStreamBlock</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numOfBlocks</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pOperator</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>!=</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to find stream scan operator to set the input data block, %s"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// not handle this in join query</comment>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"join not supported for stream block scan, %s"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_NOT_OPENED</name></expr>;</expr_stmt>
    <return>return <expr><call><name>doSetStreamBlock</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>numOfBlocks</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_NOT_OPENED</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>validBlockIndex</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__MERGED_SUBMIT</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// ASSERT(numOfBlocks &gt; 1);</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfBlocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockType</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfBlocks</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockType</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INPUT__DATA_BLOCK</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfBlocks</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SSDataBlock</name><operator>*</operator><operator>)</operator><name>input</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBlockLists</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockType</name></name> <operator>=</operator> <name>STREAM_INPUT__DATA_BLOCK</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qSetStreamOpOpen</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doSetStreamOpOpen</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s failed to set the stream block data"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s set the stream block successfully"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qSetMultiStreamInput</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pBlocks</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numOfBlocks</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pBlocks</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>numOfBlocks</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doSetStreamBlock</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pBlocks</name></expr></argument>, <argument><expr><name>numOfBlocks</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s failed to set the stream block data"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s set the stream block successfully"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qSetSMAInput</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pBlocks</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numOfBlocks</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pBlocks</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>numOfBlocks</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doSetSMABlock</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pBlocks</name></expr></argument>, <argument><expr><name>numOfBlocks</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s failed to set the sma block data"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s set the sma block successfully"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>qTaskInfo_t</name></type> <name>qCreateQueueExecTaskInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>readers</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSchemaWrapper</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// create raw scan</comment>

    <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExecTaskInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTaskInfo</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setTaskStatus</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>TASK_NOT_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>created</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>=</operator> <name>OPTR_EXEC_MODEL_QUEUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <call><name>createRawScanOperatorInfo</name><argument_list>(<argument><expr><name>readers</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>pTaskInfo</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>SSubplan</name></name><modifier>*</modifier></type> <name>pPlan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>qStringToSubplan</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>qTaskInfo_t</name></type> <name>pTaskInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qCreateExecTask</name><argument_list>(<argument><expr><name>readers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pPlan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTaskInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPTR_EXEC_MODEL_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDestroyTask</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// extract the number of output columns</comment>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDescNode</name> <init>= <expr><name><name>pPlan</name><operator>-&gt;</operator><name>pNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfCols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pDescNode-&gt;pSlots</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SSlotDescNode</name><modifier>*</modifier></type> <name>pSlotDesc</name> <init>= <expr><operator>(</operator><name>SSlotDescNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSlotDesc</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>numOfCols</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>pSchema</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pSchema</name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>pTaskInfo</name><operator>)</operator><operator>-&gt;</operator><name><name>schemaInfo</name><operator>.</operator><name>qsw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pTaskInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>qTaskInfo_t</name></type> <name>qCreateStreamExecTaskInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>readers</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*qDebugL("stream task string %s", (const char*)msg);*/</comment>

  <decl_stmt><decl><type><name><name>struct</name> <name>SSubplan</name></name><modifier>*</modifier></type> <name>pPlan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>qStringToSubplan</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>qTaskInfo_t</name></type> <name>pTaskInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qCreateExecTask</name><argument_list>(<argument><expr><name>readers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pPlan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTaskInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPTR_EXEC_MODEL_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDestroyTask</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pTaskInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SArray</name><modifier>*</modifier></type> <name>filterUnqualifiedTables</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>tableIdList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>qa</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// let's discard the tables those are not created according to the queried super table.</comment>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tableIdList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>id</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tableIdList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get table meta, uid:%"</literal> <name>PRIu64</name> <literal type="string">" code:%s, %s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TODO handle ntb case</comment>
    <if_stmt><if>if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name> <operator>||</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name> <operator>!=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>tableUid</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pTagCond</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type>          <name>qualified</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STableKeyInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><operator>.</operator><name>groupId</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>isQualifiedTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>, <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qualified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to filter new table, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">", %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qualified</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// handle multiple partition</comment>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>qa</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>qa</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qUpdateQualifiedTableId</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>tableIdList</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isAdd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>isAdd</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"add %d tables id into query list, %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tableIdList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// traverse to the stream scanner node to add this table id</comment>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>!=</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pInfo</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>isAdd</name></expr>)</condition> <block>{<block_content>  <comment type="line">// add new table id</comment>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>qa</name> <init>= <expr><call><name>filterUnqualifiedTables</name><argument_list>(<argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>tableIdList</name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfQualifiedTables</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>qa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">" %d qualified child tables added into stream scanner"</literal></expr></argument>, <argument><expr><name>numOfQualifiedTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqReaderAddTbUidList</name><argument_list>(<argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>, <argument><expr><name>qa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>qa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// todo refactor STableList</comment>
    <decl_stmt><decl><type><name>bool</name></type>   <name>assignUid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufLen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pScanInfo</name><operator>-&gt;</operator><name>pGroupTags</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>getTableTagsBufLen</name><argument_list>(<argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>keyBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bufLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>assignUid</name> <operator>=</operator> <call><name>groupbyTbname</name><argument_list>(<argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>keyBuf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>keyBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>qa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pTableListInfo</name> <init>= <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfQualifiedTables</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>     <name>uid</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>qa</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STableKeyInfo</name></type> <name>keyInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <operator>*</operator><name>uid</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>bufLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>assignUid</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>keyInfo</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>keyInfo</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getGroupIdFromTagsVal</name><argument_list>(<argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name><name>keyInfo</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>, <argument><expr><name>keyBuf</name></expr></argument>,
                                       <argument><expr><operator>&amp;</operator><name><name>keyInfo</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>qa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>code</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
      bool exists = false;
      for (int32_t k = 0; k &lt; taosArrayGetSize(pListInfo-&gt;pTableList); ++k) {
        STableKeyInfo* pKeyInfo = taosArrayGet(pListInfo-&gt;pTableList, k);
        if (pKeyInfo-&gt;uid == keyInfo.uid) {
          qWarn("ignore duplicated query table uid:%" PRIu64 " added, %s", pKeyInfo-&gt;uid, pTaskInfo-&gt;id.str);
          exists = true;
        }
      }

      if (!exists) {
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><call><name>tableListAddTableInfo</name><argument_list>(<argument><expr><name>pTableListInfo</name></expr></argument>, <argument><expr><name><name>keyInfo</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>keyInfo</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>keyBuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>qa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// remove the table id in current list</comment>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">" %d remove child tables from the stream scanner"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tableIdList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqReaderRemoveTbUidList</name><argument_list>(<argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>, <argument><expr><name>tableIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qGetQueryTableSchemaVersion</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>sversion</name></decl></parameter>,
                                    <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>tversion</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tinfo</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dbName</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tableName</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>schemaInfo</name><operator>.</operator><name>sw</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>sversion</name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>schemaInfo</name><operator>.</operator><name>sw</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>tversion</name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>schemaInfo</name><operator>.</operator><name>tversion</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>schemaInfo</name><operator>.</operator><name>dbname</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>schemaInfo</name><operator>.</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>dbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>schemaInfo</name><operator>.</operator><name>tablename</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>schemaInfo</name><operator>.</operator><name>tablename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>tableName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qCreateExecTask</name><parameter_list>(<parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>readHandle</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>taskId</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>,
                        <parameter><decl><type><name>qTaskInfo_t</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>DataSinkHandle</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>EOPTR_EXEC_MODEL</name></type> <name>model</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pSubplan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pTaskInfo</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>initPoolOnce</name></expr></argument>, <argument><expr><name>initRefPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>cleanupRefPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"start to create subplan task, TID:0x%"</literal> <name>PRIx64</name> <literal type="string">" QID:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>, <argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createExecTaskInfoImpl</name><argument_list>(<argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>readHandle</name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>model</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to createExecTaskInfoImpl, code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataSinkMgtCfg</name></type> <name>cfg</name> <init>= <expr><block>{<expr><operator>.</operator><name>maxDataBlockNum</name> <operator>=</operator> <literal type="number">500</literal></expr>, <expr><operator>.</operator><name>maxDataBlockNumPerQuery</name> <operator>=</operator> <literal type="number">50</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dsDataSinkMgtInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to dsDataSinkMgtInit, code:%s, %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pTask</name><operator>)</operator><operator>-&gt;</operator><name><name>id</name><operator>.</operator><name>str</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>handle</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pSinkParam</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createDataSinkParam</name><argument_list>(<argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSinkParam</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>readHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to createDataSinkParam, vgId:%d, code:%s, %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pTask</name><operator>)</operator><operator>-&gt;</operator><name><name>id</name><operator>.</operator><name>str</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dsCreateDataSinker</name><argument_list>(<argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>pSinkParam</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pTask</name><operator>)</operator><operator>-&gt;</operator><name><name>id</name><operator>.</operator><name>str</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pSinkParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"subplan task create completed, TID:0x%"</literal> <name>PRIx64</name> <literal type="string">" QID:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>, <argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>queryId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_error</name>:</label>
  <comment type="line">// if failed to add ref for all tables in this query, abort current query</comment>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSDataBlock</name><operator>*</operator><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExecTaskOpt</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pResList</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>useconds</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>hasMore</name></decl></parameter>, <parameter><decl><type><name>SLocalFetch</name><modifier>*</modifier></type> <name>pLocal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>threadId</name> <init>= <expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pLocal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>localFetch</name></name></expr></argument>, <argument><expr><name>pLocal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pLocal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>curOwner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>curOwner</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s-%p execTask is now executed by thread:%p"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>curOwner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_QRY_IN_EXEC</name></expr>;</expr_stmt>
    <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>isTaskKilled</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s already killed, abort"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// error occurs, record the error code and return to client</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanUpUdfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s task abort due to error/cancel occurs, code:%s"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s execTask is launched"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>current</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>blockIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pRes</name> <operator>=</operator> <call><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>blockIndex</name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>createOneDataBlock</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SSDataBlock</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>, <argument><expr><name>blockIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyDataBlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>blockIndex</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>current</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>current</name> <operator>&gt;=</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>hasMore</name> <operator>=</operator> <operator>(</operator><name>pRes</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>el</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>elapsedTime</name></name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>useconds</name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>elapsedTime</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>cleanUpUdfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>total</name> <init>= <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s task suspended, %d rows in %d blocks returned, total:%"</literal> <name>PRId64</name> <literal type="string">" rows, in sinkNode:%d, elapsed:%.2f ms"</literal></expr></argument>,
         <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>el</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qCleanExecTaskBlockBuf</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pResultBlockList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExecTask</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>useconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>threadId</name> <init>= <expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>curOwner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>curOwner</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s-%p execTask is now executed by thread:%p"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>curOwner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_QRY_IN_EXEC</name></expr>;</expr_stmt>
    <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>isTaskKilled</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s already killed, abort"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// error occurs, record the error code and return to client</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanUpUdfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s task abort due to error/cancel occurs, code:%s"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s execTask is launched"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <call><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>el</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>elapsedTime</name></name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pRes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>useconds</name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>elapsedTime</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>cleanUpUdfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>current</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>pRes</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><operator>(</operator><operator>*</operator><name>pRes</name><operator>)</operator><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>rows</name></name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>total</name> <init>= <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s task suspended, %d rows returned, total:%"</literal> <name>PRId64</name> <literal type="string">" rows, in sinkNode:%d, elapsed:%.2f ms"</literal></expr></argument>,
         <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>el</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qAppendTaskStopInfo</name><parameter_list>(<parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>SExchangeOpStopInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>pStopInfo</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stopInfoComp</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier><modifier>*</modifier></type> <name>lp</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier><modifier>*</modifier></type> <name>rp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangeOpStopInfo</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><operator>(</operator><name>SExchangeOpStopInfo</name><operator>*</operator><operator>)</operator><name>lp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExchangeOpStopInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SExchangeOpStopInfo</name><operator>*</operator><operator>)</operator><name>rp</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>refId</name></name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>refId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>refId</name></name> <operator>&gt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>refId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qRemoveTaskStopInfo</name><parameter_list>(<parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>SExchangeOpStopInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><call><name>taosArraySearchIdx</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>pStopInfo</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>stopInfoComp</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>pStopInfo</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qStopTaskOperators</name><parameter_list>(<parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>pStopInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExchangeOpStopInfo</name><modifier>*</modifier></type> <name>pStop</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>pStopInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExchangeInfo</name><modifier>*</modifier></type>       <name>pExchangeInfo</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name>exchangeObjRefPool</name></expr></argument>, <argument><expr><name><name>pStop</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pExchangeInfo</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExchangeInfo</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>exchangeObjRefPool</name></expr></argument>, <argument><expr><name><name>pStop</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>stopInfo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qAsyncKillTask</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>qinfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rspCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>qinfo</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTaskInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_QRY_INVALID_QHANDLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s execTask async killed"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setTaskKilled</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>rspCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qStopTaskOperators</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printTaskExecCostInLog</name><parameter_list>(<parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaskCostInfo</name><modifier>*</modifier></type> <name>pSummary</name> <init>= <expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>idleTime</name> <init>= <expr><name><name>pSummary</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <name><name>pSummary</name><operator>-&gt;</operator><name>created</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SFileBlockLoadRecorder</name><modifier>*</modifier></type> <name>pRecorder</name> <init>= <expr><name><name>pSummary</name><operator>-&gt;</operator><name>pRecoder</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSummary</name><operator>-&gt;</operator><name>pRecoder</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(
        <argument><expr><literal type="string">"%s :cost summary: idle:%.2f ms, elapsed time:%.2f ms, extract tableList:%.2f ms, "</literal>
        <literal type="string">"createGroupIdMap:%.2f ms, total blocks:%d, "</literal>
        <literal type="string">"load block SMA:%d, load data block:%d, total rows:%"</literal> <name>PRId64</name> <literal type="string">", check rows:%"</literal> <name>PRId64</name></expr></argument>,
        <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idleTime</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name><name>pSummary</name><operator>-&gt;</operator><name>elapsedTime</name></name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name><name>pSummary</name><operator>-&gt;</operator><name>extractListTime</name></name></expr></argument>,
        <argument><expr><name><name>pSummary</name><operator>-&gt;</operator><name>groupIdMapTime</name></name></expr></argument>, <argument><expr><name><name>pRecorder</name><operator>-&gt;</operator><name>totalBlocks</name></name></expr></argument>, <argument><expr><name><name>pRecorder</name><operator>-&gt;</operator><name>loadBlockStatis</name></name></expr></argument>, <argument><expr><name><name>pRecorder</name><operator>-&gt;</operator><name>loadBlocks</name></name></expr></argument>,
        <argument><expr><name><name>pRecorder</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pRecorder</name><operator>-&gt;</operator><name>totalCheckedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s :cost summary: idle in queue:%.2f ms, elapsed time:%.2f ms"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idleTime</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>,
           <argument><expr><name><name>pSummary</name><operator>-&gt;</operator><name>elapsedTime</name></name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qDestroyTask</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>qTaskHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>qTaskHandle</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTaskInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s execTask completed, numOfRows:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printTaskExecCostInLog</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// print the query cost summary</comment>
  <expr_stmt><expr><call><name>doDestroyTask</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qGetExplainExecInfo</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pExecInfoList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>getOperatorExplainExecInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>, <argument><expr><name>pExecInfoList</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qSerializeTaskStatus</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator>struct <name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nOptrWithVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//  int32_t code = encodeOperator(pTaskInfo-&gt;pRoot, pOutput, len, &amp;nOptrWithVal);</comment>
<comment type="line">//  if ((code == TSDB_CODE_SUCCESS) &amp;&amp; (nOptrWithVal == 0)) {</comment>
<comment type="line">//    taosMemoryFreeClear(*pOutput);</comment>
<comment type="line">//    *len = 0;</comment>
<comment type="line">//  }</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qDeserializeTaskStatus</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator>struct <name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTaskInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pInput</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<comment type="line">//  return decodeOperator(pTaskInfo-&gt;pRoot, pInput, len);</comment>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExtractStreamScanner</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>scanner</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name> <init>= <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>scanner</name> <operator>=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pOperator</name> <operator>=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t qStreamInput(qTaskInfo_t tinfo, void* pItem) {
  SExecTaskInfo* pTaskInfo = (SExecTaskInfo*)tinfo;
  ASSERT(pTaskInfo-&gt;execModel == OPTR_EXEC_MODEL_STREAM);
  taosWriteQitem(pTaskInfo-&gt;streamInfo.inputQueue-&gt;queue, pItem);
  return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>qStreamSourceRecoverStep1</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>fillHistoryVer1</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>recoverStep</name></name> <operator>=</operator> <name>STREAM_RECOVER_STEP__PREPARE1</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qStreamSourceRecoverStep2</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>fillHistoryVer2</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>recoverStep</name></name> <operator>=</operator> <name>STREAM_RECOVER_STEP__PREPARE2</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qStreamRecoverFinish</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>recoverStep</name></name> <operator>=</operator> <name>STREAM_RECOVER_STEP__NONE</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qStreamSetParamForRecover</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name> <init>= <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name> <operator>||</operator>
        <name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name> <operator>||</operator>
        <name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name> <operator>||</operator>
             <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTriggerSaved</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMarkSaved</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"save stream param for interval: %d,  %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTriggerSaved</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMarkSaved</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SESSION</name> <operator>||</operator>
               <name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_SESSION</name> <operator>||</operator>
               <name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name> <operator>||</operator>
             <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTriggerSaved</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMarkSaved</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"save stream param for session: %d,  %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTriggerSaved</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMarkSaved</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_STATE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamStateAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name> <operator>||</operator>
             <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTriggerSaved</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMarkSaved</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"save stream param for state: %d,  %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTriggerSaved</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMarkSaved</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// iterate operator tree</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"unexpected stream, multiple downstream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pOperator</name> <operator>=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qStreamRestoreParam</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name> <init>= <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name> <operator>||</operator>
        <name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name> <operator>||</operator>
        <name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTriggerSaved</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMarkSaved</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name> <operator>||</operator>
             <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"restore stream param for interval: %d,  %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SESSION</name> <operator>||</operator>
               <name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_SESSION</name> <operator>||</operator>
               <name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTriggerSaved</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMarkSaved</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name> <operator>||</operator>
             <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"restore stream param for session: %d,  %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_STATE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamStateAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTriggerSaved</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMarkSaved</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name> <operator>||</operator>
             <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qInfo</name><argument_list>(<argument><expr><literal type="string">"restore stream param for state: %d,  %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// iterate operator tree</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"unexpected stream, multiple downstream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pOperator</name> <operator>=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>qExtractReaderFromStreamScanner</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>scanner</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name>scanner</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>SSchemaWrapper</name><modifier>*</modifier></type> <name>qExtractSchemaFromTask</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>schema</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>qExtractTbnameFromTask</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>tbName</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqMetaRsp</name><modifier>*</modifier></type> <name>qStreamExtractMetaMsg</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>metaRsp</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>qStreamExtractPrepareUid</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name><operator>.</operator><name>uid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qStreamExtractOffset</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>STqOffsetVal</name><modifier>*</modifier></type> <name>pOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pOffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqOffsetVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>initQueryTableDataCondForTmq</name><parameter_list>(<parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>SSnapContext</name><modifier>*</modifier></type> <name>sContext</name></decl></parameter>, <parameter><decl><type><name>SMetaTableInfo</name><modifier>*</modifier></type> <name>pMtInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryTableDataCond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name><name>pMtInfo</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name></name> <operator>=</operator> <name>TSWINDOW_INITIALIZER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pMtInfo</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TIMEWINDOW_RANGE_CONTAINED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>startVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>endVersion</name></name> <operator>=</operator> <name><name>sContext</name><operator>-&gt;</operator><name>snapVersion</name></name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfo</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pCond</name><operator>-&gt;</operator><name>colList</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pMtInfo</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pMtInfo</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pMtInfo</name><operator>-&gt;</operator><name>schema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colId</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qStreamScanMemData</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSubmitReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pReq</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pReq</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qStreamPrepareScan</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>STqOffsetVal</name><modifier>*</modifier></type> <name>pOffset</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>subType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><operator>(</operator><name>SExecTaskInfo</name><operator>*</operator><operator>)</operator><name>tinfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name> <init>= <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>prepareStatus</name></name> <operator>=</operator> <operator>*</operator><name>pOffset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>returned</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tOffsetEqual</name><argument_list>(<argument><expr><name>pOffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>lastStatus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>subType</name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_OPENED</name></expr>;</expr_stmt>
    <comment type="line">// TODO add more check</comment>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pOperator</name> <operator>=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTSInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTSInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
      if (tOffsetEqual(pOffset, &amp;pTaskInfo-&gt;streamInfo.lastStatus) &amp;&amp;
          pInfo-&gt;tqReader-&gt;pWalReader-&gt;curVersion != pOffset-&gt;version) {
        qError("prepare scan ver %" PRId64 " actual ver %" PRId64 ", last %" PRId64, pOffset-&gt;version,
               pInfo-&gt;tqReader-&gt;pWalReader-&gt;curVersion, pTaskInfo-&gt;streamInfo.lastStatus.version);
        ASSERT(0);
      }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if <condition>(<expr><call><name>tqSeekVer</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name></name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tqReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>==</operator> <name><name>pOffset</name><operator>-&gt;</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/*pInfo-&gt;blockType = STREAM_INPUT__TABLE_SCAN;*/</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name> <init>= <expr><name><name>pOffset</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><name><name>pOffset</name><operator>-&gt;</operator><name>ts</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>tableListGetSize</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pTableInfo</name> <init>= <expr><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>pTableInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>ts</name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/*if (pTaskInfo-&gt;streamInfo.lastStatus.type != TMQ_OFFSET__SNAPSHOT_DATA ||*/</comment>
      <comment type="block">/*pTaskInfo-&gt;streamInfo.lastStatus.uid != uid || pTaskInfo-&gt;streamInfo.lastStatus.ts != ts) {*/</comment>
      <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>         <name>numOfTables</name> <init>= <expr><call><name>tableListGetSize</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"switch to next table %"</literal> <name>PRId64</name> <literal type="string">" (cursor %d), %"</literal> <name>PRId64</name> <literal type="string">" rows returned"</literal></expr></argument>, <argument><expr><name>uid</name></expr></argument>,
             <argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>currentTable</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTableScanOp</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTables</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pTableInfo</name> <init>= <expr><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pTableInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name>uid</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>currentTable</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <comment type="line">// TODO after dropping table, table may not found</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>        <name>num</name> <init>= <expr><call><name>tableListGetSize</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>tsdbReaderOpen</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>readHandle</name><operator>.</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>num</name></expr></argument>,
                           <argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
            <name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>STableKeyInfo</name></type> <name>tki</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>uid</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tsdbSetTableList</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tki</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>oldSkey</name> <init>= <expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>twindows</name><operator>.</operator><name>skey</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>twindows</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name>ts</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbReaderReset</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>dataReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>twindows</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name>oldSkey</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>scanTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tsdb reader offset seek to uid %"</literal> <name>PRId64</name> <literal type="string">" ts %"</literal> <name>PRId64</name> <literal type="string">", table cur set to %d , all table num %d"</literal></expr></argument>, <argument><expr><name>uid</name></expr></argument>,
             <argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>currentTable</name></name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*}*/</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamRawScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSnapContext</name><modifier>*</modifier></type>       <name>sContext</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>sContext</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setForSnapShot</name><argument_list>(<argument><expr><name>sContext</name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"setDataForSnapShot error. uid:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SMetaTableInfo</name></type> <name>mtInfo</name> <init>= <expr><call><name>getUidfromSnapShot</name><argument_list>(<argument><expr><name>sContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>cleanupQueryTableDataCond</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>tableCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tableListClear</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>mtInfo</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="line">// no data</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>initQueryTableDataCondForTmq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>tableCond</name></name></expr></argument>, <argument><expr><name>sContext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>tableCond</name><operator>.</operator><name>twindows</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>pOffset</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name> <operator>=</operator> <call><name>tableListCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tableListAddTableInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><name><name>mtInfo</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>        <name>size</name> <init>= <expr><call><name>tableListGetSize</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tsdbReaderOpen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>tableCond</name></name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>dataReader</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>cleanupQueryTableDataCond</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>tableCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>mtInfo</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDeleteSSchemaWrapper</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <name><name>mtInfo</name><operator>.</operator><name>schema</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap qStreamPrepareScan snapshot data uid %"</literal> <name>PRId64</name> <literal type="string">" ts %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>mtInfo</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_META</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamRawScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSnapContext</name><modifier>*</modifier></type>       <name>sContext</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>sContext</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setForSnapShot</name><argument_list>(<argument><expr><name>sContext</name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"setForSnapShot error. uid:%"</literal> <name>PRIu64</name> <literal type="string">" ,version:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap qStreamPrepareScan snapshot meta uid %"</literal> <name>PRId64</name> <literal type="string">" ts %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamRawScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dataReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dataReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap qStreamPrepareScan snapshot log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qProcessRspMsg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pSendInfo</name> <init>= <expr><operator>(</operator><name>SMsgSendInfo</name><operator>*</operator><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataBuf</name></type> <name>buf</name> <init>= <expr><block>{<expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr>, <expr><operator>.</operator><name>pData</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name><name>pSendInfo</name><operator>-&gt;</operator><name>fp</name></name><argument_list>(<argument><expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroySendMsgInfo</name><argument_list>(<argument><expr><name>pSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
