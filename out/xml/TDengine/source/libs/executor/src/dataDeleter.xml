<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/dataDeleter.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dataSinkInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dataSinkMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tqueue.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SDataSinkStat</name></type> <name>gDataSinkStat</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>SDataDeleterBuf</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>useSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>allocSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>pData</name></decl>;</decl_stmt>
}</block></struct></type> <name>SDataDeleterBuf</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SDataCacheEntry</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>compressed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SDataCacheEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SDataDeleterHandle</name> <block>{
  <decl_stmt><decl><type><name>SDataSinkHandle</name></type>     <name>sink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataSinkManager</name><modifier>*</modifier></type>   <name>pManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pSchema</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataDeleterNode</name><modifier>*</modifier></type>   <name>pDeleter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDeleterParam</name><modifier>*</modifier></type>      <name>pParam</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STaosQueue</name><modifier>*</modifier></type>         <name>pDataBlocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataDeleterBuf</name></type>     <name>nextOutput</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                <name>queryEnd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>            <name>useconds</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>            <name>cachedSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThreadMutex</name></type>       <name>mutex</name></decl>;</decl_stmt>
}</block></struct></type> <name>SDataDeleterHandle</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>toDataCacheEntry</name><parameter_list>(<parameter><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SInputData</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SDataDeleterBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataCacheEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SDataCacheEntry</name><operator>*</operator><operator>)</operator><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SDeleterRes</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>==</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>==</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>useSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SDataCacheEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColRes</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColSKey</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColEKey</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDeleterRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>(</operator><name>SDeleterRes</name><operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pParam</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pParam</name><operator>-&gt;</operator><name>pUidList</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDeleter</name><operator>-&gt;</operator><name>tableFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDeleter</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>affectedRows</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColRes</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>affectedRows</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColSKey</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColEKey</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>skey</name></name> <operator>&lt;=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pDeleter</name><operator>-&gt;</operator><name>deleteTimeRange</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pDeleter</name><operator>-&gt;</operator><name>deleteTimeRange</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"delete %"</literal> <name>PRId64</name> <literal type="string">" rows, from %"</literal> <name>PRId64</name> <literal type="string">" to %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>affectedRows</name></name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>useSize</name></name> <operator>+=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>cachedSize</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gDataSinkStat</name><operator>.</operator><name>cachedSize</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>allocBuf</name><parameter_list>(<parameter><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>pDeleter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SInputData</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SDataDeleterBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>capacity</name> <init>= <expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pManager</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxDataBlockNumPerQuery</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"SinkNode queue is full, no capacity, max:%d, current:%d, no capacity"</literal></expr></argument>, <argument><expr><name>capacity</name></expr></argument>,
           <argument><expr><call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SDataCacheEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SDeleterRes</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>allocSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"SinkNode failed to malloc memory, size:%d, code:%d"</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>allocSize</name></name></expr></argument>, <argument><expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name> <operator>!=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>updateStatus</name><parameter_list>(<parameter><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>pDeleter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>blockNums</name> <init>= <expr><call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>status</name> <init>=
      <expr><operator>(</operator><ternary><condition><expr><literal type="number">0</literal> <operator>==</operator> <name>blockNums</name></expr> ?</condition><then> <expr><name>DS_BUF_EMPTY</name></expr>
                      </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>blockNums</name> <operator>&lt;</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>pManager</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxDataBlockNumPerQuery</name></name></expr> ?</condition><then> <expr><name>DS_BUF_LOW</name></expr> </then><else>: <expr><name>DS_BUF_FULL</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getStatus</name><parameter_list>(<parameter><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>pDeleter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>status</name> <init>= <expr><name><name>pDeleter</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>putDataBlock</name><parameter_list>(<parameter><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SInputData</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pContinue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>pDeleter</name> <init>= <expr><operator>(</operator><name>SDataDeleterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataDeleterBuf</name><modifier>*</modifier></type>    <name>pBuf</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataDeleterBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBuf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>allocBuf</name><argument_list>(<argument><expr><name>pDeleter</name></expr></argument>, <argument><expr><name>pInput</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>toDataCacheEntry</name><argument_list>(<argument><expr><name>pDeleter</name></expr></argument>, <argument><expr><name>pInput</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pContinue</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>DS_BUF_LOW</name> <operator>==</operator> <call><name>updateStatus</name><argument_list>(<argument><expr><name>pDeleter</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>endPut</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SDataSinkHandle</name></name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>useconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>pDeleter</name> <init>= <expr><operator>(</operator><name>SDataDeleterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>queryEnd</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <name>useconds</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getDataLength</name><parameter_list>(<parameter><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pQueryEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>pDeleter</name> <init>= <expr><operator>(</operator><name>SDataDeleterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosQueueEmpty</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pQueryEnd</name> <operator>=</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>queryEnd</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataDeleterBuf</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosReadQitem</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>nextOutput</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataDeleterBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataCacheEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SDataCacheEntry</name><operator>*</operator><operator>)</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>nextOutput</name><operator>.</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pQueryEnd</name> <operator>=</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>queryEnd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"got data len %"</literal> <name>PRId64</name> <literal type="string">", row num %d in sink"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pLen</name></expr></argument>,
         <argument><expr><operator>(</operator><operator>(</operator><name>SDataCacheEntry</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>nextOutput</name><operator>.</operator><name>pData</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getDataBlock</name><parameter_list>(<parameter><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SOutputData</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>pDeleter</name> <init>= <expr><operator>(</operator><name>SDataDeleterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>nextOutput</name><operator>.</operator><name>pData</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>queryEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>useconds</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>bufStatus</name></name> <operator>=</operator> <name>DS_BUF_EMPTY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>queryEnd</name></name> <operator>=</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>queryEnd</name></name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SDataCacheEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SDataCacheEntry</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>nextOutput</name><operator>.</operator><name>pData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pParam</name><operator>-&gt;</operator><name>pUidList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>compressed</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>cachedSize</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gDataSinkStat</name><operator>.</operator><name>cachedSize</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>nextOutput</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// todo persistent</comment>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>bufStatus</name></name> <operator>=</operator> <call><name>updateStatus</name><argument_list>(<argument><expr><name>pDeleter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>queryEnd</name></name> <operator>=</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>queryEnd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>useconds</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>destroyDataSinker</name><parameter_list>(<parameter><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>pDeleter</name> <init>= <expr><operator>(</operator><name>SDataDeleterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gDataSinkStat</name><operator>.</operator><name>cachedSize</name></name></expr></argument>, <argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>cachedSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>nextOutput</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pParam</name><operator>-&gt;</operator><name>pUidList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name>taosQueueEmpty</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataDeleterBuf</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosReadQitem</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pBuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getCacheSize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SDataSinkHandle</name></name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>pDispatcher</name> <init>= <expr><operator>(</operator><name>SDataDeleterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDispatcher</name><operator>-&gt;</operator><name>cachedSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>createDataDeleter</name><parameter_list>(<parameter><decl><type><name>SDataSinkManager</name><modifier>*</modifier></type> <name>pManager</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataSinkNode</name><modifier>*</modifier></type> <name>pDataSink</name></decl></parameter>, <parameter><decl><type><name>DataSinkHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>,
                          <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataDeleterHandle</name><modifier>*</modifier></type> <name>deleter</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataDeleterHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>deleter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataDeleterNode</name><modifier>*</modifier></type> <name>pDeleterNode</name> <init>= <expr><operator>(</operator><name>SDataDeleterNode</name><operator>*</operator><operator>)</operator><name>pDataSink</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fPut</name></name> <operator>=</operator> <name>putDataBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fEndPut</name></name> <operator>=</operator> <name>endPut</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fGetLen</name></name> <operator>=</operator> <name>getDataLength</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fGetData</name></name> <operator>=</operator> <name>getDataBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fDestroy</name></name> <operator>=</operator> <name>destroyDataSinker</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fGetCacheSize</name></name> <operator>=</operator> <name>getCacheSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>pManager</name></name> <operator>=</operator> <name>pManager</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>pDeleter</name></name> <operator>=</operator> <name>pDeleterNode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name><name>pDataSink</name><operator>-&gt;</operator><name>pInputDataBlockDesc</name></name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>pParam</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid input param in creating data deleter, code%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>pParam</name></name> <operator>=</operator> <name>pParam</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DS_BUF_EMPTY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>queryEnd</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>deleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name> <operator>=</operator> <call><name>taosOpenQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deleter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>deleter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pHandle</name> <operator>=</operator> <name>deleter</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

  <label><name>_end</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>deleter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyDataSinker</name><argument_list>(<argument><expr><operator>(</operator><name>SDataSinkHandle</name><operator>*</operator><operator>)</operator><name>deleter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>deleter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
