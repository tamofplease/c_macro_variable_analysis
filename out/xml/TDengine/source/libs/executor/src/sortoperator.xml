<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/sortoperator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SSortOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SOptrBasicInfo</name></type> <name>binfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>       <name>sortBufSize</name></decl>;</decl_stmt>  <comment type="line">// max buffer size for in-memory sort</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pSortInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSortHandle</name><modifier>*</modifier></type>   <name>pSortHandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColMatchInfo</name></type>  <name>matchInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>bufPageSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>startTs</name></decl>;</decl_stmt>      <comment type="line">// sort start time</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>       <name>sortElapsed</name></decl>;</decl_stmt>  <comment type="line">// sort elapsed time, time to flush to disk not included.</comment>
  <decl_stmt><decl><type><name>SLimitInfo</name></type>     <name>limitInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSortOperatorInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doSort</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>      <name>doOpenSortOperator</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>      <name>getExplainExecInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOptrExplain</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>destroySortOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// todo add limit/offset impl</comment>
<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createSortOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SSortPhysiNode</name><modifier>*</modifier></type> <name>pSortNode</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSortOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>     <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name> <operator>=</operator> <name>pTaskInfo</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDescNode</name> <init>= <expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name>pDescNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type>   <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutputCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>extractColMatchInfo</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>, <argument><expr><name>pDescNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfOutputCols</name></expr></argument>, <argument><expr><name>COL_MATCH_FROM_SLOT_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name> <operator>=</operator> <call><name>createSqlFunctionCtx</name><argument_list>(<argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <name>pResBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name> <operator>=</operator> <call><name>createSortInfo</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initLimitInfo</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>, <argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"SortOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_SORT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>=</operator> <name>pExprInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>

  <comment type="line">// lazy evaluation for the following parameter since the input datablock is not known till now.</comment>
  <comment type="line">//  pInfo-&gt;bufPageSize  = rowSize &lt; 1024 ? 1024 * 2 : rowSize * 2;</comment>
  <comment type="line">//  there are headers, so pageSize = rowSize + header pInfo-&gt;sortBufSize  = pInfo-&gt;bufPageSize * 16;</comment>
  <comment type="line">// TODO dynamic set the available sort buffer</comment>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>doOpenSortOperator</name></expr></argument>, <argument><expr><name>doSort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroySortOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>getExplainExecInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>appendOneRowToDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>STupleHandle</name><modifier>*</modifier></type> <name>pTupleHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>             <name>isNull</name> <init>= <expr><call><name>tsortIsNullVal</name><argument_list>(<argument><expr><name>pTupleHandle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>tsortGetValue</name><argument_list>(<argument><expr><name>pTupleHandle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>getSortedBlockData</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pColMatchInfo</name></decl></parameter>,
                                <parameter><decl><type><name>SSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>tsortGetSortedDataBlock</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STupleHandle</name><modifier>*</modifier></type> <name>pTupleHandle</name> <init>= <expr><call><name>tsortNextTuple</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTupleHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>appendOneRowToDataBlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTupleHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// todo extract function to handle this</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pColMatchInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColMatchItem</name><modifier>*</modifier></type> <name>pmInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pColMatchInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">//      ASSERT(pmInfo-&gt;matchType == COL_MATCH_FROM_SLOT_ID);</comment>

      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pmInfo</name><operator>-&gt;</operator><name>srcSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pmInfo</name><operator>-&gt;</operator><name>dstSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pDataBlock</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>loadNextDataBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name> <init>= <expr><operator>(</operator><name>SOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>   <name>pBlock</name> <init>= <expr><call><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo refactor: merged with fetch fp</comment>
<function><type><name>void</name></type> <name>applyScalarFunction</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>     <name>pOperator</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSortOperatorInfo</name><modifier>*</modifier></type> <name>pSort</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name></expr></argument>,
                                         <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doOpenSortOperator</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>     <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>OPTR_IS_OPENED</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>startTs</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//  pInfo-&gt;binfo.pRes is not equalled to the input datablock.</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name> <operator>=</operator> <call><name>tsortCreateSortHandle</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name></expr></argument>, <argument><expr><name>SORT_SINGLESOURCE_SORT</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortSetFetchRawDataFp</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>, <argument><expr><name>loadNextDataBlock</name></expr></argument>, <argument><expr><name>applyScalarFunction</name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>ps</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSortSource</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>onlyRef</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsortAddSource</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsortOpen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>startTs</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>OPTR_SET_OPENED</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>doSort</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>     <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>_openFn</name></name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pBlock</name> <operator>=</operator> <call><name>getSortedBlockData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>,
                                <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>blockDataGetNumOfRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// todo add the limit/offset info</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>remainOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>remainOffset</name></name> <operator>&gt;=</operator> <call><name>blockDataGetNumOfRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>remainOffset</name></name> <operator>-=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>blockDataTrimFirstNRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>remainOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>remainOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>limit</name><operator>.</operator><name>limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>limit</name><operator>.</operator><name>limit</name></name> <operator>&lt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>numOfOutputRows</name></name> <operator>+</operator> <call><name>blockDataGetNumOfRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>remain</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>limit</name><operator>.</operator><name>limit</name></name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>numOfOutputRows</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>blockDataKeepFirstNRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>numOfRows</name> <init>= <expr><call><name>blockDataGetNumOfRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>numOfOutputRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><ternary><condition><expr><call><name>blockDataGetNumOfRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>pBlock</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroySortOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SSortOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortDestroySortHandle</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getExplainExecInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOptrExplain</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pOptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSortExecInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSortExecInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSortOperatorInfo</name><modifier>*</modifier></type> <name>pOperatorInfo</name> <init>= <expr><operator>(</operator><name>SSortOperatorInfo</name><operator>*</operator><operator>)</operator><name><name>pOptr</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pInfo</name> <operator>=</operator> <call><name>tsortGetSortExecInfo</name><argument_list>(<argument><expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pOptrExplain</name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSortExecInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//=====================================================================================</comment>
<comment type="line">// Group Sort Operator</comment>
<typedef>typedef <type><enum>enum <name>EChildOperatorStatus</name> <block>{ <decl><name>CHILD_OP_NEW_GROUP</name></decl>, <decl><name>CHILD_OP_SAME_GROUP</name></decl>, <decl><name>CHILD_OP_FINISHED</name></decl> }</block></enum></type> <name>EChildOperatorStatus</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SGroupSortOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SOptrBasicInfo</name></type>       <name>binfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>              <name>pSortInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColMatchInfo</name></type>        <name>matchInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>              <name>startTs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>             <name>sortElapsed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                 <name>hasGroupId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>             <name>currGroupId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>         <name>prefetchedSortInput</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSortHandle</name><modifier>*</modifier></type>         <name>pCurrSortHandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EChildOperatorStatus</name></type> <name>childOpStatus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSortExecInfo</name></type>        <name>sortExecInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>SGroupSortOperatorInfo</name>;</typedef>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>getGroupSortedBlockData</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>,
                                     <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pColMatchInfo</name></decl></parameter>, <parameter><decl><type><name>SGroupSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>tsortGetSortedDataBlock</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STupleHandle</name><modifier>*</modifier></type> <name>pTupleHandle</name> <init>= <expr><call><name>tsortNextTuple</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTupleHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>appendOneRowToDataBlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTupleHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pColMatchInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColMatchItem</name><modifier>*</modifier></type> <name>pmInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pColMatchInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">//      ASSERT(pmInfo-&gt;matchType == COL_MATCH_FROM_SLOT_ID);</comment>

      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pmInfo</name><operator>-&gt;</operator><name>srcSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pmInfo</name><operator>-&gt;</operator><name>dstSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pDataBlock</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SGroupSortSourceParam</name> <block>{
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>          <name>childOpInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGroupSortOperatorInfo</name><modifier>*</modifier></type> <name>grpSortOpInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>SGroupSortSourceParam</name>;</typedef>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>fetchNextGroupSortDataBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupSortSourceParam</name><modifier>*</modifier></type>  <name>source</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGroupSortOperatorInfo</name><modifier>*</modifier></type> <name>grpSortOpInfo</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>grpSortOpInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>grpSortOpInfo</name><operator>-&gt;</operator><name>prefetchedSortInput</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>block</name> <init>= <expr><name><name>grpSortOpInfo</name><operator>-&gt;</operator><name>prefetchedSortInput</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>grpSortOpInfo</name><operator>-&gt;</operator><name>prefetchedSortInput</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>block</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>childOp</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>childOpInfo</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>   <name>block</name> <init>= <expr><call><name><name>childOp</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>childOp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>==</operator> <name><name>grpSortOpInfo</name><operator>-&gt;</operator><name>currGroupId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>grpSortOpInfo</name><operator>-&gt;</operator><name>childOpStatus</name></name> <operator>=</operator> <name>CHILD_OP_SAME_GROUP</name></expr>;</expr_stmt>
        <return>return <expr><name>block</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>grpSortOpInfo</name><operator>-&gt;</operator><name>childOpStatus</name></name> <operator>=</operator> <name>CHILD_OP_NEW_GROUP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>grpSortOpInfo</name><operator>-&gt;</operator><name>prefetchedSortInput</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>grpSortOpInfo</name><operator>-&gt;</operator><name>childOpStatus</name></name> <operator>=</operator> <name>CHILD_OP_FINISHED</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>beginSortGroup</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>          <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">//  pInfo-&gt;binfo.pRes is not equalled to the input datablock.</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name> <operator>=</operator>
      <call><name>tsortCreateSortHandle</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name></expr></argument>, <argument><expr><name>SORT_SINGLESOURCE_SORT</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortSetFetchRawDataFp</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name></expr></argument>, <argument><expr><name>fetchNextGroupSortDataBlock</name></expr></argument>, <argument><expr><name>applyScalarFunction</name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type>           <name>ps</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSortSource</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGroupSortSourceParam</name><modifier>*</modifier></type> <name>param</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGroupSortSourceParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>childOpInfo</name></name> <operator>=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>grpSortOpInfo</name></name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>onlyRef</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsortAddSource</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsortOpen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>finishSortGroup</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSortExecInfo</name></type> <name>sortExecInfo</name> <init>= <expr><call><name>tsortGetSortExecInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name><operator>.</operator><name>sortMethod</name></name> <operator>=</operator> <name><name>sortExecInfo</name><operator>.</operator><name>sortMethod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name><operator>.</operator><name>sortBuffer</name></name> <operator>=</operator> <name><name>sortExecInfo</name><operator>.</operator><name>sortBuffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name><operator>.</operator><name>loops</name></name> <operator>+=</operator> <name><name>sortExecInfo</name><operator>.</operator><name>loops</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name><operator>.</operator><name>readBytes</name></name> <operator>+=</operator> <name><name>sortExecInfo</name><operator>.</operator><name>readBytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name><operator>.</operator><name>writeBytes</name></name> <operator>+=</operator> <name><name>sortExecInfo</name><operator>.</operator><name>writeBytes</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortDestroySortHandle</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>doGroupSort</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>          <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGroupSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>_openFn</name></name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>hasGroupId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasGroupId</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>prefetchedSortInput</name></name> <operator>=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>prefetchedSortInput</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currGroupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>prefetchedSortInput</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>childOpStatus</name></name> <operator>=</operator> <name>CHILD_OP_NEW_GROUP</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>beginSortGroup</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// beginSortGroup would fetch all child blocks of pInfo-&gt;currGroupId;</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>childOpStatus</name></name> <operator>!=</operator> <name>CHILD_OP_SAME_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pBlock</name> <operator>=</operator> <call><name>getGroupSortedBlockData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>,
                                     <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>currGroupId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
      <return>return <expr><name>pBlock</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>childOpStatus</name></name> <operator>==</operator> <name>CHILD_OP_NEW_GROUP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>finishSortGroup</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currGroupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>prefetchedSortInput</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>beginSortGroup</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>childOpStatus</name></name> <operator>==</operator> <name>CHILD_OP_FINISHED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>finishSortGroup</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getGroupSortExplainExecInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOptrExplain</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SGroupSortOperatorInfo</name><operator>*</operator><operator>)</operator><name><name>pOptr</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pOptrExplain</name> <operator>=</operator> <operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sortExecInfo</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSortExecInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyGroupSortOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SGroupSortOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortDestroySortHandle</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCurrSortHandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createGroupSortOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SGroupSortPhysiNode</name><modifier>*</modifier></type> <name>pSortPhyNode</name></decl></parameter>,
                                           <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupSortOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGroupSortOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>          <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDescNode</name> <init>= <expr><name><name>pSortPhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type>   <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pSortPhyNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name> <operator>=</operator> <name>pExprInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name> <operator>=</operator> <call><name>createSqlFunctionCtx</name><argument_list>(<argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name>pDescNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutputCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>extractColMatchInfo</name><argument_list>(<argument><expr><name><name>pSortPhyNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>, <argument><expr><name>pDescNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfOutputCols</name></expr></argument>, <argument><expr><name>COL_MATCH_FROM_SLOT_ID</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto  <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name> <operator>=</operator> <call><name>createSortInfo</name><argument_list>(<argument><expr><name><name>pSortPhyNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"GroupSortOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_GROUP_SORT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doGroupSort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyGroupSortOperatorInfo</name></expr></argument>,
                                         <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>getGroupSortExplainExecInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyGroupSortOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//=====================================================================================</comment>
<comment type="line">// Multiway Sort Merge operator</comment>
<typedef>typedef <type><struct>struct <name>SMultiwayMergeOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SOptrBasicInfo</name></type> <name>binfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>bufPageSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>       <name>sortBufSize</name></decl>;</decl_stmt>  <comment type="line">// max buffer size for in-memory sort</comment>
  <decl_stmt><decl><type><name>SLimitInfo</name></type>     <name>limitInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pSortInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSortHandle</name><modifier>*</modifier></type>   <name>pSortHandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColMatchInfo</name></type>  <name>matchInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>   <name>pInputBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>   <name>pIntermediateBlock</name></decl>;</decl_stmt>   <comment type="line">// to hold the intermediate result</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>startTs</name></decl>;</decl_stmt>  <comment type="line">// sort start time</comment>
  <decl_stmt><decl><type><name>bool</name></type>           <name>groupSort</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>hasGroupId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>       <name>groupId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STupleHandle</name><modifier>*</modifier></type>  <name>prefetchedTuple</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMultiwayMergeOperatorInfo</name>;</typedef>

<function><type><name>int32_t</name></type> <name>openMultiwayMergeOperator</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMultiwayMergeOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>              <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>OPTR_IS_OPENED</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>startTs</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfBufPage</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortBufSize</name></name> <operator>/</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>bufPageSize</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name> <operator>=</operator> <call><name>tsortCreateSortHandle</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name></expr></argument>, <argument><expr><name>SORT_MULTISOURCE_MERGE</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bufPageSize</name></name></expr></argument>, <argument><expr><name>numOfBufPage</name></expr></argument>,
                                             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInputBlock</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortSetFetchRawDataFp</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>, <argument><expr><name>loadNextDataBlock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsortSetCompareGroupId</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>numOfDownstream</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pDownstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDownstream</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pDownstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>_openFn</name></name><argument_list>(<argument><expr><name>pDownstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>ps</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSortSource</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>pDownstream</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>onlyRef</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tsortAddSource</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsortOpen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>startTs</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>OPTR_SET_OPENED</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doGetSortedBlockData</name><parameter_list>(<parameter><decl><type><name>SMultiwayMergeOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STupleHandle</name><modifier>*</modifier></type> <name>pTupleHandle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupSort</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>prefetchedTuple</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pTupleHandle</name> <operator>=</operator> <call><name>tsortNextTuple</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pTupleHandle</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>prefetchedTuple</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <call><name>tsortGetGroupId</name><argument_list>(<argument><expr><name>pTupleHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>prefetchedTuple</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pTupleHandle</name> <operator>=</operator> <call><name>tsortNextTuple</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pTupleHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupSort</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>tupleGroupId</name> <init>= <expr><call><name>tsortGetGroupId</name><argument_list>(<argument><expr><name>pTupleHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>hasGroupId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name>tupleGroupId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasGroupId</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendOneRowToDataBlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTupleHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>==</operator> <name>tupleGroupId</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>appendOneRowToDataBlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTupleHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>prefetchedTuple</name></name> <operator>=</operator> <name>pTupleHandle</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>appendOneRowToDataBlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTupleHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupSort</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasGroupId</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>getMultiwaySortedBlockData</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pColMatchInfo</name></decl></parameter>,
                                        <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMultiwayMergeOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>capacity</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIntermediateBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIntermediateBlock</name></name> <operator>=</operator> <call><name>tsortGetSortedDataBlock</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIntermediateBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIntermediateBlock</name></name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIntermediateBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIntermediateBlock</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doGetSortedBlockData</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>applyLimitOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pColMatchInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColMatchItem</name><modifier>*</modifier></type> <name>pmInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pColMatchInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pmInfo</name><operator>-&gt;</operator><name>srcSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pmInfo</name><operator>-&gt;</operator><name>dstSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name><operator>.</operator><name>numOfOutputRows</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s get sorted block, groupId:0x%"</literal> <name>PRIx64</name> <literal type="string">" rows:%d"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>,
         <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pDataBlock</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>doMultiwayMerge</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>              <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMultiwayMergeOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>_openFn</name></name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"start to merge final sorted rows, %s"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>getMultiwaySortedBlockData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyMultiwayMergeOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMultiwayMergeOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SMultiwayMergeOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInputBlock</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInputBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIntermediateBlock</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIntermediateBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortDestroySortHandle</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getMultiwayMergeExplainExecInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOptrExplain</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pOptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSortExecInfo</name><modifier>*</modifier></type> <name>pSortExecInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSortExecInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMultiwayMergeOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SMultiwayMergeOperatorInfo</name><operator>*</operator><operator>)</operator><name><name>pOptr</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pSortExecInfo</name> <operator>=</operator> <call><name>tsortGetSortExecInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pOptrExplain</name> <operator>=</operator> <name>pSortExecInfo</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSortExecInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createMultiwayMergeOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>downStreams</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numStreams</name></decl></parameter>,
                                               <parameter><decl><type><name>SMergePhysiNode</name><modifier>*</modifier></type> <name>pMergePhyNode</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pPhyNode</name> <init>= <expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pMergePhyNode</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMultiwayMergeOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMultiwayMergeOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>              <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type>         <name>pDescNode</name> <init>= <expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initLimitInfo</name><argument_list>(<argument><expr><name><name>pMergePhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>, <argument><expr><name><name>pMergePhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name>pDescNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowSize</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rowSize</name> <operator>&lt;</operator> <literal type="number">100</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutputCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>extractColMatchInfo</name><argument_list>(<argument><expr><name><name>pMergePhyNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>, <argument><expr><name>pDescNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfOutputCols</name></expr></argument>, <argument><expr><name>COL_MATCH_FROM_SLOT_ID</name></expr></argument>,
                             <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SPhysiNode</name><modifier>*</modifier></type>  <name>pChildNode</name> <init>= <expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pInputBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pChildNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupSort</name></name> <operator>=</operator> <name><name>pMergePhyNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSortInfo</name></name> <operator>=</operator> <call><name>createSortInfo</name><argument_list>(<argument><expr><name><name>pMergePhyNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInputBlock</name></name> <operator>=</operator> <name>pInputBlock</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bufPageSize</name></name> <operator>=</operator> <call><name>getProperSortPageSize</name><argument_list>(<argument><expr><name>rowSize</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortBufSize</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>bufPageSize</name></name> <operator>*</operator> <operator>(</operator><name>numStreams</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>  <comment type="line">// one additional is reserved for merged result.</comment>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"MultiwayMergeOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>openMultiwayMergeOperator</name></expr></argument>, <argument><expr><name>doMultiwayMerge</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>destroyMultiwayMergeOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>getMultiwayMergeExplainExecInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>downStreams</name></expr></argument>, <argument><expr><name>numStreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyMultiwayMergeOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
