<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/dataSinkMgt.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dataSinkMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dataSinkInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tarray.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SDataSinkManager</name></type> <name>gDataSinkManager</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDataSinkStat</name></type>           <name>gDataSinkStat</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>dsDataSinkMgtInit</name><parameter_list>(<parameter><decl><type><name>SDataSinkMgtCfg</name><modifier>*</modifier></type> <name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>gDataSinkManager</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>*</operator><name>cfg</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gDataSinkManager</name><operator>.</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="line">// to avoid compiler eror</comment>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dsDataSinkGetCacheSize</name><parameter_list>(<parameter><decl><type><name>SDataSinkStat</name><modifier>*</modifier></type> <name>pStat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>cachedSize</name></name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gDataSinkStat</name><operator>.</operator><name>cachedSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dsCreateDataSinker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SDataSinkNode</name><modifier>*</modifier></type> <name>pDataSink</name></decl></parameter>, <parameter><decl><type><name>DataSinkHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pParam</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>nodeType</name><argument_list>(<argument><expr><name>pDataSink</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DISPATCH</name></expr>:</case>
      <return>return <expr><call><name>createDataDispatcher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gDataSinkManager</name></expr></argument>, <argument><expr><name>pDataSink</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_DELETE</name></expr>:</case>
      <return>return <expr><call><name>createDataDeleter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gDataSinkManager</name></expr></argument>, <argument><expr><name>pDataSink</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_QUERY_INSERT</name></expr>:</case>
      <return>return <expr><call><name>createDataInserter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gDataSinkManager</name></expr></argument>, <argument><expr><name>pDataSink</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid input node type:%d, %s"</literal></expr></argument>, <argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pDataSink</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dsPutDataBlock</name><parameter_list>(<parameter><decl><type><name>DataSinkHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SInputData</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pContinue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandleImpl</name> <init>= <expr><operator>(</operator><name>SDataSinkHandle</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pHandleImpl</name><operator>-&gt;</operator><name>fPut</name></name><argument_list>(<argument><expr><name>pHandleImpl</name></expr></argument>, <argument><expr><name>pInput</name></expr></argument>, <argument><expr><name>pContinue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dsEndPut</name><parameter_list>(<parameter><decl><type><name>DataSinkHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>useconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandleImpl</name> <init>= <expr><operator>(</operator><name>SDataSinkHandle</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pHandleImpl</name><operator>-&gt;</operator><name>fEndPut</name></name><argument_list>(<argument><expr><name>pHandleImpl</name></expr></argument>, <argument><expr><name>useconds</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dsGetDataLength</name><parameter_list>(<parameter><decl><type><name>DataSinkHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pQueryEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandleImpl</name> <init>= <expr><operator>(</operator><name>SDataSinkHandle</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pHandleImpl</name><operator>-&gt;</operator><name>fGetLen</name></name><argument_list>(<argument><expr><name>pHandleImpl</name></expr></argument>, <argument><expr><name>pLen</name></expr></argument>, <argument><expr><name>pQueryEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dsGetDataBlock</name><parameter_list>(<parameter><decl><type><name>DataSinkHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SOutputData</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandleImpl</name> <init>= <expr><operator>(</operator><name>SDataSinkHandle</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pHandleImpl</name><operator>-&gt;</operator><name>fGetData</name></name><argument_list>(<argument><expr><name>pHandleImpl</name></expr></argument>, <argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dsGetCacheSize</name><parameter_list>(<parameter><decl><type><name>DataSinkHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandleImpl</name> <init>= <expr><operator>(</operator><name>SDataSinkHandle</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pHandleImpl</name><operator>-&gt;</operator><name>fGetCacheSize</name></name><argument_list>(<argument><expr><name>pHandleImpl</name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dsScheduleProcess</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ahandle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dsDestroyDataSinker</name><parameter_list>(<parameter><decl><type><name>DataSinkHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandleImpl</name> <init>= <expr><operator>(</operator><name>SDataSinkHandle</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pHandleImpl</name><operator>-&gt;</operator><name>fDestroy</name></name><argument_list>(<argument><expr><name>pHandleImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHandleImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
