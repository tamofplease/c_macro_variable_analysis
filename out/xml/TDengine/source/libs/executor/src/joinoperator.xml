<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/joinoperator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttypes.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SJoinOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>joinType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>inputOrder</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pLeft</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>leftPos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfo</name></type>  <name>leftCol</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRight</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>rightPos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfo</name></type>  <name>rightCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>       <name>pCondAfterMerge</name></decl>;</decl_stmt>
}</block></struct></type> <name>SJoinOperatorInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type>         <name>setJoinColumnInfo</name><parameter_list>(<parameter><decl><type><name>SColumnInfo</name><modifier>*</modifier></type> <name>pColumn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SColumnNode</name><modifier>*</modifier></type> <name>pColumnNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doMergeJoin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SOperatorInfo</name></name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>         <name>destroyMergeJoinOperator</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>         <name>extractTimeCondition</name><parameter_list>(<parameter><decl><type><name>SJoinOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDownstream</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfDownstream</name></decl></parameter>,
                                         <parameter><decl><type><name>SSortMergeJoinPhysiNode</name><modifier>*</modifier></type> <name>pJoinNode</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extractTimeCondition</name><parameter_list>(<parameter><decl><type><name>SJoinOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDownstream</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfDownstream</name></decl></parameter>,
                                 <parameter><decl><type><name>SSortMergeJoinPhysiNode</name><modifier>*</modifier></type> <name>pJoinNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pMergeCondition</name> <init>= <expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>pMergeCondition</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pMergeCondition</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_OPERATOR</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pMergeCondition</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type>   <name>col1</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type>   <name>col2</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type>   <name>leftTsCol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type>   <name>rightTsCol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>col1</name><operator>-&gt;</operator><name>dataBlockId</name></name> <operator>==</operator> <name><name>col2</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><name>leftTsCol</name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rightTsCol</name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>col1</name><operator>-&gt;</operator><name>dataBlockId</name></name> <operator>==</operator> <name><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>resultDataBlockId</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>col2</name><operator>-&gt;</operator><name>dataBlockId</name></name> <operator>==</operator> <name><name>pDownstream</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>resultDataBlockId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>leftTsCol</name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rightTsCol</name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>col1</name><operator>-&gt;</operator><name>dataBlockId</name></name> <operator>==</operator> <name><name>pDownstream</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>resultDataBlockId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>col2</name><operator>-&gt;</operator><name>dataBlockId</name></name> <operator>==</operator> <name><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>resultDataBlockId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>leftTsCol</name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rightTsCol</name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>setJoinColumnInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>leftCol</name></name></expr></argument>, <argument><expr><name>leftTsCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setJoinColumnInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>rightCol</name></name></expr></argument>, <argument><expr><name>rightTsCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt></block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createMergeJoinOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDownstream</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfDownstream</name></decl></parameter>,
                                           <parameter><decl><type><name>SSortMergeJoinPhysiNode</name><modifier>*</modifier></type> <name>pJoinNode</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJoinOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SJoinOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>     <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOperator</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type>   <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <name>pResBlock</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"MergeJoinOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_JOIN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>=</operator> <name>pExprInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>extractTimeCondition</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pDownstream</name></expr></argument>, <argument><expr><name>numOfDownstream</name></expr></argument>, <argument><expr><name>pJoinNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>pOnConditions</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondAfterMerge</name></name> <operator>=</operator> <call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondAfterMerge</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pLogicCond</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCondAfterMerge</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pLogicCond</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pLogicCond</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLogicCond</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLogicCond</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLogicCond</name><operator>-&gt;</operator><name>condType</name></name> <operator>=</operator> <name>LOGIC_COND_TYPE_AND</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>pOnConditions</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondAfterMerge</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondAfterMerge</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondAfterMerge</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondAfterMerge</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name> <operator>==</operator> <name>ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name> <operator>==</operator> <name>ORDER_DESC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>=</operator> <name>TSDB_ORDER_DESC</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doMergeJoin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyMergeJoinOperator</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pDownstream</name></expr></argument>, <argument><expr><name>numOfDownstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyMergeJoinOperator</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setJoinColumnInfo</name><parameter_list>(<parameter><decl><type><name>SColumnInfo</name><modifier>*</modifier></type> <name>pColumn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SColumnNode</name><modifier>*</modifier></type> <name>pColumnNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>slotId</name></name> <operator>=</operator> <name><name>pColumnNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <name><name>pColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyMergeJoinOperator</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJoinOperatorInfo</name><modifier>*</modifier></type> <name>pJoinOperator</name> <init>= <expr><operator>(</operator><name>SJoinOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name><name>pJoinOperator</name><operator>-&gt;</operator><name>pCondAfterMerge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pJoinOperator</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pJoinOperator</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mergeJoinJoinLeftRight</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SOperatorInfo</name></name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>currRow</name></decl></parameter>,
                                   <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pLeftBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>leftPos</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRightBlock</name></decl></parameter>,
                                   <parameter><decl><type><name>int32_t</name></type> <name>rightPos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJoinOperatorInfo</name><modifier>*</modifier></type> <name>pJoinInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>blockId</name> <init>= <expr><name><name>pExprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>slotId</name> <init>= <expr><name><name>pExprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rowIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pLeftBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>blockId</name></name> <operator>==</operator> <name>blockId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pSrc</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pLeftBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowIndex</name> <operator>=</operator> <name>leftPos</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pSrc</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRightBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowIndex</name> <operator>=</operator> <name>rightPos</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>currRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>currRow</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<typedef>typedef <type><struct>struct <name>SRowLocation</name> <block>{
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>SRowLocation</name>;</typedef>

<comment type="line">// pBlock[tsSlotId][startPos, endPos) == timestamp,</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mergeJoinGetBlockRowsEqualTs</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>tsSlotId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>,
                                            <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pEndPos</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>rowLocations</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>createdBlocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numRows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>startPos</name> <operator>&lt;</operator> <name>numRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>tsSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>startPos</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pNextVal</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>pNextVal</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>endPos</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pEndPos</name> <operator>=</operator> <name>endPos</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>endPos</name> <operator>-</operator> <name>startPos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>block</name> <init>= <expr><name>pBlock</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>         <name>createdNewBlock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>endPos</name> <operator>==</operator> <name>numRows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>blockDataExtractBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name> <operator>-</operator> <name>startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>createdBlocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>createdNewBlock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SRowLocation</name></type> <name>location</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name>startPos</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>endPos</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>location</name><operator>.</operator><name>pDataBlock</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>location</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>createdNewBlock</name></expr> ?</condition><then> <expr><name>j</name> <operator>-</operator> <name>startPos</name></expr> </then><else>: <expr><name>j</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>rowLocations</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// whichChild == 0, left child of join; whichChild ==1, right child of join</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mergeJoinGetDownStreamRowsEqualTimeStamp</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>whichChild</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>tsSlotId</name></decl></parameter>,
                                                        <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>startDataBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>startPos</name></decl></parameter>,
                                                        <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>rowLocations</name></decl></parameter>,
                                                        <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>createdBlocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>whichChild</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>whichChild</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SJoinOperatorInfo</name><modifier>*</modifier></type> <name>pJoinInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>endPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>       <name>dataBlock</name> <init>= <expr><name>startDataBlock</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mergeJoinGetBlockRowsEqualTs</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>tsSlotId</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endPos</name></expr></argument>, <argument><expr><name>rowLocations</name></expr></argument>, <argument><expr><name>createdBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>endPos</name> <operator>==</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>ds</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><name>whichChild</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>dataBlock</name> <operator>=</operator> <call><name><name>ds</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>whichChild</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>leftPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>=</operator> <name>dataBlock</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whichChild</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>rightPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pRight</name></name> <operator>=</operator> <name>dataBlock</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dataBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setTaskStatus</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></argument>, <argument><expr><name>TASK_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>endPos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mergeJoinGetBlockRowsEqualTs</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>tsSlotId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endPos</name></expr></argument>, <argument><expr><name>rowLocations</name></expr></argument>, <argument><expr><name>createdBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>endPos</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>whichChild</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>leftPos</name></name> <operator>=</operator> <name>endPos</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whichChild</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>rightPos</name></name> <operator>=</operator> <name>endPos</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mergeJoinJoinDownstreamTsRanges</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>,
                                               <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>nRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJoinOperatorInfo</name><modifier>*</modifier></type> <name>pJoinInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>            <name>leftRowLocations</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRowLocation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>            <name>leftCreatedBlocks</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>rightRowLocations</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRowLocation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>rightCreatedBlocks</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mergeJoinGetDownStreamRowsEqualTimeStamp</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>leftCol</name><operator>.</operator><name>slotId</name></name></expr></argument>, <argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>,
                                           <argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>leftPos</name></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>leftRowLocations</name></expr></argument>, <argument><expr><name>leftCreatedBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mergeJoinGetDownStreamRowsEqualTimeStamp</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>rightCol</name><operator>.</operator><name>slotId</name></name></expr></argument>, <argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>,
                                           <argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>rightPos</name></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>rightRowLocations</name></expr></argument>, <argument><expr><name>rightCreatedBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>leftNumJoin</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>leftRowLocations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>rightNumJoin</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>rightRowLocations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><operator>*</operator><name>nRows</name> <operator>+</operator> <name>leftNumJoin</name> <operator>*</operator> <name>rightNumJoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s can not ensure block capacity for join. left: %zu, right: %zu"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>leftNumJoin</name></expr></argument>, <argument><expr><name>rightNumJoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>leftNumJoin</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rightNumJoin</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SRowLocation</name><modifier>*</modifier></type> <name>leftRow</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>leftRowLocations</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SRowLocation</name><modifier>*</modifier></type> <name>rightRow</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>rightRowLocations</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>mergeJoinJoinLeftRight</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><operator>*</operator><name>nRows</name></expr></argument>, <argument><expr><name><name>leftRow</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>leftRow</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>rightRow</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>,
                               <argument><expr><name><name>rightRow</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><operator>*</operator><name>nRows</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>rightCreatedBlocks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>rightCreatedBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>rightCreatedBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>rightRowLocations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>leftCreatedBlocks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>leftCreatedBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>leftCreatedBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>leftRowLocations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mergeJoinGetNextTimestamp</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pLeftTs</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pRightTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJoinOperatorInfo</name><modifier>*</modifier></type> <name>pJoinInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pJoinInfo</name><operator>-&gt;</operator><name>leftPos</name></name> <operator>&gt;=</operator> <name><name>pJoinInfo</name><operator>-&gt;</operator><name>pLeft</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>ds1</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>=</operator> <call><name><name>ds1</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>ds1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>leftPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setTaskStatus</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></argument>, <argument><expr><name>TASK_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pRight</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pJoinInfo</name><operator>-&gt;</operator><name>rightPos</name></name> <operator>&gt;=</operator> <name><name>pJoinInfo</name><operator>-&gt;</operator><name>pRight</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>ds2</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pRight</name></name> <operator>=</operator> <call><name><name>ds2</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>ds2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>rightPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pRight</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setTaskStatus</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></argument>, <argument><expr><name>TASK_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// only the timestamp match support for ordinary table</comment>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pLeftCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pLeft</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>leftCol</name><operator>.</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>pLeftVal</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pLeftCol</name></expr></argument>, <argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>leftPos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pLeftTs</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>pLeftVal</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pRightCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pRight</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>rightCol</name><operator>.</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>pRightVal</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pRightCol</name></expr></argument>, <argument><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>rightPos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRightTs</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>pRightVal</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pLeftCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRightCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doMergeJoinImpl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SOperatorInfo</name></name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJoinOperatorInfo</name><modifier>*</modifier></type> <name>pJoinInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nrows</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>asc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pJoinInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>leftTs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>rightTs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>hasNextTs</name> <init>= <expr><call><name>mergeJoinGetNextTimestamp</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leftTs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rightTs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNextTs</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>leftTs</name> <operator>==</operator> <name>rightTs</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mergeJoinJoinDownstreamTsRanges</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>leftTs</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>asc</name> <operator>&amp;&amp;</operator> <name>leftTs</name> <operator>&lt;</operator> <name>rightTs</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>asc</name> <operator>&amp;&amp;</operator> <name>leftTs</name> <operator>&gt;</operator> <name>rightTs</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>leftPos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>leftPos</name></name> <operator>&gt;=</operator> <name><name>pJoinInfo</name><operator>-&gt;</operator><name>pLeft</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>asc</name> <operator>&amp;&amp;</operator> <name>leftTs</name> <operator>&gt;</operator> <name>rightTs</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>asc</name> <operator>&amp;&amp;</operator> <name>leftTs</name> <operator>&lt;</operator> <name>rightTs</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>rightPos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>rightPos</name></name> <operator>&gt;=</operator> <name><name>pJoinInfo</name><operator>-&gt;</operator><name>pRight</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>nrows</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>threshold</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>doMergeJoin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SOperatorInfo</name></name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJoinOperatorInfo</name><modifier>*</modifier></type> <name>pJoinInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><name><name>pJoinInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRowsBefore</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doMergeJoinImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfNewRows</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <name>numOfRowsBefore</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfNewRows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>threshold</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pRes</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
