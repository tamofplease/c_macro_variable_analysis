<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/dataInserter.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dataSinkInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dataSinkMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tqueue.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SDataSinkStat</name></type> <name>gDataSinkStat</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>SSubmitRes</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>affectedRows</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSubmitRes</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SDataInserterHandle</name> <block>{
  <decl_stmt><decl><type><name>SDataSinkHandle</name></type>     <name>sink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataSinkManager</name><modifier>*</modifier></type>   <name>pManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type>           <name>pSchema</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryInserterNode</name><modifier>*</modifier></type> <name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitRes</name></type>          <name>submitRes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SInserterParam</name><modifier>*</modifier></type>     <name>pParam</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>             <name>pDataBlocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>           <name>pCols</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                <name>queryEnd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>            <name>useconds</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>            <name>cachedSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThreadMutex</name></type>       <name>mutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tsem_t</name></type>              <name>ready</name></decl>;</decl_stmt>
}</block></struct></type> <name>SDataInserterHandle</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SSubmitRspParam</name> <block>{
  <decl_stmt><decl><type><name>SDataInserterHandle</name><modifier>*</modifier></type> <name>pInserter</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSubmitRspParam</name>;</typedef>

<function><type><name>int32_t</name></type> <name>inserterCallback</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubmitRspParam</name><modifier>*</modifier></type>     <name>pParam</name> <init>= <expr><operator>(</operator><name>SSubmitRspParam</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataInserterHandle</name><modifier>*</modifier></type> <name>pInserter</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>pInserter</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>pRsp</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SDecoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSSubmitRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tFreeSSubmitRsp</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>pRsp</name><operator>-&gt;</operator><name>nBlocks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>pRsp</name><operator>-&gt;</operator><name>nBlocks</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSubmitBlkRsp</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>pRsp</name><operator>-&gt;</operator><name>pBlocks</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>blk</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tFreeSSubmitRsp</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
          <goto>goto <name>_return</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>affectedRows</name></name> <operator>+=</operator> <name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>pRsp</name><operator>-&gt;</operator><name>affectedRows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"submit rsp received, affectedRows:%d, total:%"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>pRsp</name><operator>-&gt;</operator><name>affectedRows</name></name></expr></argument>,
           <argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>affectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tFreeSSubmitRsp</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>pRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInserter</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sendSubmitRequest</name><parameter_list>(<parameter><decl><type><name>SDataInserterHandle</name><modifier>*</modifier></type> <name>pInserter</name></decl></parameter>, <parameter><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pTransporter</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// send the fetch remote task result reques</comment>
  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pMsgSendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMsgSendInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSubmitRspParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitRspParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>pInserter</name></name> <operator>=</operator> <name>pInserter</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>pParam</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>paramFreeFp</name></name> <operator>=</operator> <name>taosMemoryFree</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>pMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>inserterCallback</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name>pTransporter</name></expr></argument>, <argument><expr><name>pEpset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dataBlockToSubmit</name><parameter_list>(<parameter><decl><type><name>SDataInserterHandle</name><modifier>*</modifier></type> <name>pInserter</name></decl></parameter>, <parameter><decl><type><name>SSubmitReq</name><modifier>*</modifier><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type>   <name>pBlocks</name> <init>= <expr><name><name>pInserter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STSchema</name><modifier>*</modifier></type> <name>pTSchema</name> <init>= <expr><name><name>pInserter</name><operator>-&gt;</operator><name>pSchema</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>uid</name> <init>= <expr><name><name>pInserter</name><operator>-&gt;</operator><name>pNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>suid</name> <init>= <expr><name><name>pInserter</name><operator>-&gt;</operator><name>pNode</name><operator>-&gt;</operator><name>stableId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>vgId</name> <init>= <expr><name><name>pInserter</name><operator>-&gt;</operator><name>pNode</name><operator>-&gt;</operator><name>vgId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>            <name>fullCol</name> <init>= <expr><operator>(</operator><name><name>pInserter</name><operator>-&gt;</operator><name>pNode</name><operator>-&gt;</operator><name>pCols</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// cal size</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cap</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>      <name>rows</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// TODO min</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rowSize</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>maxLen</name> <init>= <expr><call><name>TD_ROW_MAX_BYTES_FROM_SCHEMA</name><argument_list>(<argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cap</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>rows</name> <operator>*</operator> <name>maxLen</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// assign data</comment>
  <comment type="line">// TODO</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>blkHead</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO</comment>
    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>rowData</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>lastTs</name> <init>= <expr><name>TSKEY_MIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>ignoreRow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SRowBuilder</name></type> <name>rb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tdSRowInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdSRowSetTpInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>ignoreRow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>STColumn</name><modifier>*</modifier></type>  <name>pColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int16_t</name></type>          <name>colIdx</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fullCol</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>slotId</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>slotId</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name>colIdx</name> <operator>=</operator> <operator>*</operator><name>slotId</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>pColData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"col type mis-match, schema type:%d, type in block:%d"</literal></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
          <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ignoreRow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name> <operator>==</operator> <name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>data</name> <operator>==</operator> <name>lastTs</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>ignoreRow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
              <break>break;</break>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>lastTs</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fullCol</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>rb</name><operator>.</operator><name>hasNone</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>ignoreRow</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>rows</name><operator>++</operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>rowLen</name> <init>= <expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rowData</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>, <argument><expr><name>rowLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <name>rowLen</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dataLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>blkHead</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pReq</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>putDataBlock</name><parameter_list>(<parameter><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SInputData</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pContinue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataInserterHandle</name><modifier>*</modifier></type> <name>pInserter</name> <init>= <expr><operator>(</operator><name>SDataInserterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInput</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>dataBlockToSubmit</name><argument_list>(<argument><expr><name>pInserter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sendSubmitRequest</name><argument_list>(<argument><expr><name>pInserter</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>pParam</name><operator>-&gt;</operator><name>readHandle</name><operator>-&gt;</operator><name>pMsgCb</name><operator>-&gt;</operator><name>clientRpc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInserter</name><operator>-&gt;</operator><name>pNode</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInserter</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pInserter</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>code</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pContinue</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>endPut</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SDataSinkHandle</name></name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>useconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataInserterHandle</name><modifier>*</modifier></type> <name>pInserter</name> <init>= <expr><operator>(</operator><name>SDataInserterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInserter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>queryEnd</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <name>useconds</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInserter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getDataLength</name><parameter_list>(<parameter><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pQueryEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataInserterHandle</name><modifier>*</modifier></type> <name>pDispatcher</name> <init>= <expr><operator>(</operator><name>SDataInserterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <name><name>pDispatcher</name><operator>-&gt;</operator><name>submitRes</name><operator>.</operator><name>affectedRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"got total affectedRows %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><name>pLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>destroyDataSinker</name><parameter_list>(<parameter><decl><type><name>SDataSinkHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataInserterHandle</name><modifier>*</modifier></type> <name>pInserter</name> <init>= <expr><operator>(</operator><name>SDataInserterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gDataSinkStat</name><operator>.</operator><name>cachedSize</name></name></expr></argument>, <argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>cachedSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>pParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInserter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getCacheSize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SDataSinkHandle</name></name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataInserterHandle</name><modifier>*</modifier></type> <name>pDispatcher</name> <init>= <expr><operator>(</operator><name>SDataInserterHandle</name><operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDispatcher</name><operator>-&gt;</operator><name>cachedSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>createDataInserter</name><parameter_list>(<parameter><decl><type><name>SDataSinkManager</name><modifier>*</modifier></type> <name>pManager</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataSinkNode</name><modifier>*</modifier></type> <name>pDataSink</name></decl></parameter>, <parameter><decl><type><name>DataSinkHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>,
                           <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataInserterHandle</name><modifier>*</modifier></type> <name>inserter</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataInserterHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>inserter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQueryInserterNode</name><modifier>*</modifier></type> <name>pInserterNode</name> <init>= <expr><operator>(</operator><name>SQueryInserterNode</name><operator>*</operator><operator>)</operator><name>pDataSink</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fPut</name></name> <operator>=</operator> <name>putDataBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fEndPut</name></name> <operator>=</operator> <name>endPut</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fGetLen</name></name> <operator>=</operator> <name>getDataLength</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fGetData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fDestroy</name></name> <operator>=</operator> <name>destroyDataSinker</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>fGetCacheSize</name></name> <operator>=</operator> <name>getCacheSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>pManager</name></name> <operator>=</operator> <name>pManager</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <name>pInserterNode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>pParam</name></name> <operator>=</operator> <name>pParam</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DS_BUF_EMPTY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>queryEnd</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>suid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>tsdbGetTableSchema</name><argument_list>(<argument><expr><name><name>inserter</name><operator>-&gt;</operator><name>pParam</name><operator>-&gt;</operator><name>readHandle</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><name><name>pInserterNode</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inserter</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyDataSinker</name><argument_list>(<argument><expr><operator>(</operator><name>SDataSinkHandle</name><operator>*</operator><operator>)</operator><name>inserter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>inserter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInserterNode</name><operator>-&gt;</operator><name>stableId</name></name> <operator>!=</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyDataSinker</name><argument_list>(<argument><expr><operator>(</operator><name>SDataSinkHandle</name><operator>*</operator><operator>)</operator><name>inserter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>inserter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_INVALID_TABLE_ID</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>pDataBlocks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inserter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>inserter</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyDataSinker</name><argument_list>(<argument><expr><operator>(</operator><name>SDataSinkHandle</name><operator>*</operator><operator>)</operator><name>inserter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>inserter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>inserter</name><operator>-&gt;</operator><name>pCols</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>pInserterNode</name><operator>-&gt;</operator><name>pCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pInserterNode-&gt;pCols</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>inserter</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inserter</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pHandle</name> <operator>=</operator> <name>inserter</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
