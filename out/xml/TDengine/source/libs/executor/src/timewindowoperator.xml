<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/timewindowoperator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tfill.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_FINAL_OP</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;isFinal)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEAULT_DELETE_MARK</name></cpp:macro> <cpp:value>(1000LL * 60LL * 60LL * 24LL * 365LL * 10LL);</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SSessionAggOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SOptrBasicInfo</name></type>     <name>binfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAggSupporter</name></type>      <name>aggSup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGroupResInfo</name></type>      <name>groupResInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWindowRowsSup</name></type>     <name>winSup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>reptScan</name></decl>;</decl_stmt>  <comment type="line">// next round scan</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>            <name>gap</name></decl>;</decl_stmt>       <comment type="line">// session window gap</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>tsSlotId</name></decl>;</decl_stmt>  <comment type="line">// primary timestamp slot id</comment>
  <decl_stmt><decl><type><name>STimeWindowAggSupp</name></type> <name>twAggSup</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSessionAggOperatorInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SStateWindowOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SOptrBasicInfo</name></type>     <name>binfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAggSupporter</name></type>      <name>aggSup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name></type>          <name>scalarSup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGroupResInfo</name></type>      <name>groupResInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWindowRowsSup</name></type>     <name>winSup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumn</name></type>            <name>stateCol</name></decl>;</decl_stmt>  <comment type="line">// start row index</comment>
  <decl_stmt><decl><type><name>bool</name></type>               <name>hasKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStateKeys</name></type>         <name>stateKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>tsSlotId</name></decl>;</decl_stmt>  <comment type="line">// primary timestamp column slot id</comment>
  <decl_stmt><decl><type><name>STimeWindowAggSupp</name></type> <name>twAggSup</name></decl>;</decl_stmt>
}</block></struct></type> <name>SStateWindowOperatorInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <name>SResultTsInterpType</name> <block>{
  <decl><name>RESULT_ROW_START_INTERP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>RESULT_ROW_END_INTERP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
}</block></enum></type> <name>SResultTsInterpType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SPullWindowInfo</name> <block>{
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>window</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>    <name>groupId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>calWin</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPullWindowInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SOpenWindowInfo</name> <block>{
  <decl_stmt><decl><type><name>SResultRowPosition</name></type> <name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>groupId</name></decl>;</decl_stmt>
}</block></struct></type> <name>SOpenWindowInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>extractTsCol</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SResultRowPosition</name></type> <name>addToOpenWindowList</name><parameter_list>(<parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>,
                                              <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>doCloseWindow</name><parameter_list>(<parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>TSKEY</name></type> <name>getStartTsKey</name><parameter_list>(<parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSKEY</name><modifier>*</modifier></type> <name>tsCols</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>tsCols</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>win</name><operator>-&gt;</operator><name>skey</name></name></expr> </then><else>: <expr><name><name>tsCols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setTimeWindowOutputBuf</name><parameter_list>(<parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>masterscan</name></decl></parameter>,
                                      <parameter><decl><type><name>SResultRow</name><modifier>*</modifier><modifier>*</modifier></type> <name>pResult</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>tableGroupId</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>,
                                      <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>rowEntryInfoOffset</name></decl></parameter>, <parameter><decl><type><name>SAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>,
                                      <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResultRow</name> <init>= <expr><call><name>doSetResultOutBufByKey</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name>TSDB_KEYSIZE</name></expr></argument>,
                                                  <argument><expr><name>masterscan</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pAggSup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pResultRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pResult</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set time window for current result</comment>
  <expr_stmt><expr><name><name>pResultRow</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>win</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pResult</name> <operator>=</operator> <name>pResultRow</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setResultRowInitCtx</name><argument_list>(<argument><expr><name>pResultRow</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name>rowEntryInfoOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>updateTimeWindowInfo</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>includeEndpoint</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>ts</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>delta</name> <init>= <expr><ternary><condition><expr><name>includeEndpoint</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name> <operator>-</operator> <name><name>pWin</name><operator>-&gt;</operator><name>skey</name></name> <operator>+</operator> <name>delta</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>            <comment type="line">// set the duration</comment>
  <expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>pWin</name><operator>-&gt;</operator><name>skey</name></name></expr>;</expr_stmt>          <comment type="line">// window start key</comment>
  <expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>  <comment type="line">// window end key</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doKeepTuple</name><parameter_list>(<parameter><decl><type><name>SWindowRowsSup</name><modifier>*</modifier></type> <name>pRowSup</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doKeepNewWindowStartInfo</name><parameter_list>(<parameter><decl><type><name>SWindowRowsSup</name><modifier>*</modifier></type> <name>pRowSup</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>tsList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>,
                                     <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>=</operator> <name>rowIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>rowIndex</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>getForwardStepsInBlock</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>__block_search_fn_t</name></type> <name>searchFn</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ekey</name></decl></parameter>,
                                                   <parameter><decl><type><name>int16_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>forwardRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>end</name> <init>= <expr><call><name>searchFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>numOfRows</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>forwardRows</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pData</name><index>[<expr><name>end</name> <operator>+</operator> <name>pos</name></expr>]</index></name> <operator>==</operator> <name>ekey</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>forwardRows</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>end</name> <init>= <expr><call><name>searchFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>numOfRows</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>forwardRows</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pData</name><index>[<expr><name>end</name> <operator>+</operator> <name>pos</name></expr>]</index></name> <operator>==</operator> <name>ekey</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>forwardRows</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">//    int32_t end = searchFn((char*)pData, pos + 1, ekey, order);</comment>
    <comment type="line">//    if (end &gt;= 0) {</comment>
    <comment type="line">//      forwardRows = pos - end;</comment>
    <comment type="line">//</comment>
    <comment type="line">//      if (pData[end] == ekey) {</comment>
    <comment type="line">//        forwardRows += 1;</comment>
    <comment type="line">//      }</comment>
    <comment type="line">//    }</comment>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>forwardRows</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>forwardRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>binarySearchForKey</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>midPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name> <operator>||</operator> <name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>  <name>keyList</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name>pValue</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>firstPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lastPos</name> <init>= <expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// find the first position which is smaller than the key</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name><name>keyList</name><index>[<expr><name>firstPos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>firstPos</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name><name>keyList</name><index>[<expr><name>lastPos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <name><name>keyList</name><index>[<expr><name>lastPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastPos</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>lastPos</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name>lastPos</name> <operator>-</operator> <name>firstPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>midPos</name> <operator>=</operator> <operator>(</operator><name>numOfRows</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>firstPos</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <name><name>keyList</name><index>[<expr><name>midPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>firstPos</name> <operator>=</operator> <name>midPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;</operator> <name><name>keyList</name><index>[<expr><name>midPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>midPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// find the first position which is bigger than the key</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;=</operator> <name><name>keyList</name><index>[<expr><name>firstPos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>firstPos</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name><name>keyList</name><index>[<expr><name>lastPos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;</operator> <name><name>keyList</name><index>[<expr><name>lastPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>lastPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastPos</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name>lastPos</name> <operator>-</operator> <name>firstPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>midPos</name> <operator>=</operator> <operator>(</operator><name>numOfRows</name> <operator>&gt;&gt;</operator> <literal type="number">1u</literal><operator>)</operator> <operator>+</operator> <name>firstPos</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <name><name>keyList</name><index>[<expr><name>midPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>midPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;</operator> <name><name>keyList</name><index>[<expr><name>midPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>firstPos</name> <operator>=</operator> <name>midPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>midPos</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getNumOfRowsInTimeWindow</name><parameter_list>(<parameter><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pDataBlockInfo</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>pPrimaryColumn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ekey</name></decl></parameter>,
                                 <parameter><decl><type><name>__block_search_fn_t</name></type> <name>searchFn</name></decl></parameter>, <parameter><decl><type><name>STableQueryInfo</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>startPos</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>startPos</name> <operator>&lt;</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><call><name>GET_FORWARD_DIRECTION_FACTOR</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ekey</name> <operator>&lt;</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>&amp;&amp;</operator> <name>pPrimaryColumn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>getForwardStepsInBlock</name><argument_list>(<argument><expr><name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>searchFn</name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>pPrimaryColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name><name>pPrimaryColumn</name><index>[<expr><name>startPos</name> <operator>+</operator> <operator>(</operator><name>num</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>startPos</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// desc</comment>
    <if_stmt><if>if <condition>(<expr><name>ekey</name> <operator>&gt;</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>&amp;&amp;</operator> <name>pPrimaryColumn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>getForwardStepsInBlock</name><argument_list>(<argument><expr><name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>searchFn</name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>pPrimaryColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name><name>pPrimaryColumn</name><index>[<expr><name>startPos</name> <operator>+</operator> <operator>(</operator><name>num</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>startPos</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getNextTimeWindow</name><parameter_list>(<parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>tw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>factor</name> <init>= <expr><call><name>GET_FORWARD_DIRECTION_FACTOR</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>!=</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>!=</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>skey</name></name> <operator>+=</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <name><name>tw</name><operator>-&gt;</operator><name>skey</name></name> <operator>+</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>key</name> <init>= <expr><name><name>tw</name><operator>-&gt;</operator><name>skey</name></name></expr></init></decl>, <decl><type ref="prev"/><name>interval</name> <init>= <expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// convert key to second</comment>
  <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>interval</name> <operator>*=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type>    <name>t</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>mon</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <name>interval</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>mon</name> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>mon</name> <operator>%</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>taosMktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000LL</literal></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mon</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>mon</name> <operator>+</operator> <name>interval</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>mon</name> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>mon</name> <operator>%</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>taosMktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000LL</literal></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>ekey</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getNextIntervalWindow</name><parameter_list>(<parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>tw</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>getNextTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doTimeWindowInterpolation</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pPrevValues</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>prevTs</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>prevRowIndex</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>curTs</name></decl></parameter>,
                               <parameter><decl><type><name>int32_t</name></type> <name>curRowIndex</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>windowKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsIntervalInterpoFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>start</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SFunctParam</name><modifier>*</modifier></type>     <name>pParam</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>pParam</name><operator>-&gt;</operator><name>pCol</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>curTs</name> <operator>!=</operator> <name>windowKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>v1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>prevRowIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pPrevValues</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>prevRowIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>curRowIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    if (functionId == FUNCTION_INTERP) {
      if (type == RESULT_ROW_START_INTERP) {
        pCtx[k].start.key = prevTs;
        pCtx[k].start.val = v1;

        pCtx[k].end.key = curTs;
        pCtx[k].end.val = v2;

        if (pColInfo-&gt;info.type == TSDB_DATA_TYPE_BINARY || pColInfo-&gt;info.type == TSDB_DATA_TYPE_NCHAR) {
          if (prevRowIndex == -1) {
            <comment type="line">//            pCtx[k].start.ptr = (char*)pRuntimeEnv-&gt;prevRow[index];</comment>
          } else {
            pCtx[k].start.ptr = (char*)pColInfo-&gt;pData + prevRowIndex * pColInfo-&gt;info.bytes;
          }

          pCtx[k].end.ptr = (char*)pColInfo-&gt;pData + curRowIndex * pColInfo-&gt;info.bytes;
        }
      }
    } else if (functionId == FUNCTION_TWA) {
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>SPoint</name></type> <name>point1</name> <init>= <expr><operator>(</operator><name>SPoint</name><operator>)</operator><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name>prevTs</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <operator>&amp;</operator><name>v1</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SPoint</name></type> <name>point2</name> <init>= <expr><operator>(</operator><name>SPoint</name><operator>)</operator><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name>curTs</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <operator>&amp;</operator><name>v2</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SPoint</name></type> <name>point</name> <init>= <expr><operator>(</operator><name>SPoint</name><operator>)</operator><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name>windowKey</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <operator>&amp;</operator><name>v</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>taosGetLinearInterpolationVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point2</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RESULT_ROW_START_INTERP</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>start</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>point</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>start</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>end</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>point</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>end</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setNotInterpoWindowKey</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RESULT_ROW_START_INTERP</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>start</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>end</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>setTimeWindowInterpolationStartTs</name><parameter_list>(<parameter><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                                              <parameter><decl><type><specifier>const</specifier> <name>TSKEY</name><modifier>*</modifier></type> <name>tsCols</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ascQuery</name> <init>= <expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>curTs</name> <init>= <expr><name><name>tsCols</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pTsKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>       <name>lastTs</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pTsKey</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// lastTs == INT64_MIN and pos == 0 means this is the first time window, interpolation is not needed.</comment>
  <comment type="line">// start exactly from this point, no need to do interpolation</comment>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>key</name> <init>= <expr><ternary><condition><expr><name>ascQuery</name></expr> ?</condition><then> <expr><name><name>win</name><operator>-&gt;</operator><name>skey</name></name></expr> </then><else>: <expr><name><name>win</name><operator>-&gt;</operator><name>ekey</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>curTs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setNotInterpoWindowKey</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>RESULT_ROW_START_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// it is the first time window, no need to do interpolation</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTsKey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setNotInterpoWindowKey</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>RESULT_ROW_START_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>prevTs</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>pos</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>lastTs</name></expr> </then><else>: <expr><name><name>tsCols</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doTimeWindowInterpolation</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>prevTs</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>curTs</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
                              <argument><expr><name>RESULT_ROW_START_INTERP</name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>setTimeWindowInterpolationEndTs</name><parameter_list>(<parameter><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>endRowIndex</name></decl></parameter>,
                                            <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSKEY</name><modifier>*</modifier></type> <name>tsCols</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>blockEkey</name></decl></parameter>,
                                            <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>order</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>actualEndKey</name> <init>= <expr><name><name>tsCols</name><index>[<expr><name>endRowIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>key</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>win</name><operator>-&gt;</operator><name>ekey</name></name></expr> </then><else>: <expr><name><name>win</name><operator>-&gt;</operator><name>skey</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <comment type="line">// not ended in current data block, do not invoke interpolation</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>&gt;</operator> <name>blockEkey</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>key</name> <operator>&lt;</operator> <name>blockEkey</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setNotInterpoWindowKey</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// there is actual end point of current time window, no interpolation needs</comment>
  <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>actualEndKey</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setNotInterpoWindowKey</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nextRowIndex</name> <init>= <expr><name>endRowIndex</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nextRowIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>nextKey</name> <init>= <expr><name><name>tsCols</name><index>[<expr><name>nextRowIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>doTimeWindowInterpolation</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>actualEndKey</name></expr></argument>, <argument><expr><name>endRowIndex</name></expr></argument>, <argument><expr><name>nextKey</name></expr></argument>, <argument><expr><name>nextRowIndex</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
                            <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>inCalSlidingWindow</name><parameter_list>(<parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>calStart</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>calEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>!=</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name> <operator>&lt;</operator> <name>calStart</name> <operator>||</operator> <name><name>pWin</name><operator>-&gt;</operator><name>skey</name></name> <operator>&gt;</operator> <name>calEnd</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>inSlidingWindow</name><parameter_list>(<parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>, <parameter><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>inCalSlidingWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>pWin</name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>calWin</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>calWin</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getNextQualifiedWindow</name><parameter_list>(<parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pNext</name></decl></parameter>, <parameter><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pDataBlockInfo</name></decl></parameter>,
                                      <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>primaryKeys</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>prevPosition</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ascQuery</name> <init>= <expr><operator>(</operator><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>precision</name> <init>= <expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getNextTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>pNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// next time window is not in current block</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>&amp;&amp;</operator> <name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name><name>pNext</name><operator>-&gt;</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>&amp;&amp;</operator> <name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inSlidingWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>pNext</name></expr></argument>, <argument><expr><name>pDataBlockInfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>skey</name> <init>= <expr><ternary><condition><expr><name>ascQuery</name></expr> ?</condition><then> <expr><name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name></expr> </then><else>: <expr><name><name>pNext</name><operator>-&gt;</operator><name>ekey</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>startPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// tumbling time window query, a special case of sliding time window query</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>==</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>&amp;&amp;</operator> <name>prevPosition</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>startPos</name> <operator>=</operator> <name>prevPosition</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>skey</name> <operator>&lt;=</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>&amp;&amp;</operator> <name>ascQuery</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>skey</name> <operator>&gt;=</operator> <name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ascQuery</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>startPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>startPos</name> <operator>=</operator> <call><name>binarySearchForKey</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>primaryKeys</name></expr></argument>, <argument><expr><name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>skey</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* interp query with fill should not skip time window */</comment>
  <comment type="line">//  if (pQueryAttr-&gt;pointInterpQuery &amp;&amp; pQueryAttr-&gt;fillType != TSDB_FILL_NONE) {</comment>
  <comment type="line">//    return startPos;</comment>
  <comment type="line">//  }</comment>

  <comment type="block">/*
   * This time window does not cover any data, try next time window,
   * this case may happen when the time window is too small
   */</comment>
  <if_stmt><if>if <condition>(<expr><name>primaryKeys</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ascQuery</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <name><name>pNext</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pDataBlockInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>&gt;=</operator> <name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ascQuery</name> <operator>&amp;&amp;</operator> <name><name>primaryKeys</name><index>[<expr><name>startPos</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pNext</name><operator>-&gt;</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSKEY</name></type> <name>next</name> <init>= <expr><name><name>primaryKeys</name><index>[<expr><name>startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <call><name>taosTimeTruncate</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pNext</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pNext</name><operator>-&gt;</operator><name>ekey</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>next</name> <operator>-</operator> <name><name>pNext</name><operator>-&gt;</operator><name>ekey</name></name> <operator>+</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name><operator>)</operator> <operator>*</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <name><name>pNext</name><operator>-&gt;</operator><name>ekey</name></name> <operator>-</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><name>ascQuery</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>primaryKeys</name><index>[<expr><name>startPos</name></expr>]</index></name> <operator>&lt;</operator> <name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSKEY</name></type> <name>next</name> <init>= <expr><name><name>primaryKeys</name><index>[<expr><name>startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <call><name>taosTimeTruncate</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pNext</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name> <operator>-</operator> <name>next</name> <operator>+</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name><operator>)</operator> <operator>*</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pNext</name><operator>-&gt;</operator><name>ekey</name></name> <operator>=</operator> <name><name>pNext</name><operator>-&gt;</operator><name>skey</name></name> <operator>+</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>startPos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isResultRowInterpolated</name><parameter_list>(<parameter><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>, <parameter><decl><type><name>SResultTsInterpType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pResult</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>RESULT_ROW_START_INTERP</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>RESULT_ROW_END_INTERP</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RESULT_ROW_START_INTERP</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pResult</name><operator>-&gt;</operator><name>startInterp</name></name> <operator>==</operator> <name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>pResult</name><operator>-&gt;</operator><name>endInterp</name></name> <operator>==</operator> <name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setResultRowInterpo</name><parameter_list>(<parameter><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>, <parameter><decl><type><name>SResultTsInterpType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pResult</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>RESULT_ROW_START_INTERP</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>RESULT_ROW_END_INTERP</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RESULT_ROW_START_INTERP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResult</name><operator>-&gt;</operator><name>startInterp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pResult</name><operator>-&gt;</operator><name>endInterp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doWindowBorderInterpolation</name><parameter_list>(<parameter><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>,
                                        <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>forwardRows</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    tscError("pBlock-&gt;pDataBlock == NULL");</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>tsCols</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pColInfo</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>   <name>done</name> <init>= <expr><call><name>isResultRowInterpolated</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>RESULT_ROW_START_INTERP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>  <comment type="line">// it is not interpolated, now start to generated the interpolated value</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>interp</name> <init>= <expr><call><name>setTimeWindowInterpolationStartTs</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>interp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setResultRowInterpo</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>RESULT_ROW_START_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>setNotInterpoWindowKey</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>RESULT_ROW_START_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// point interpolation does not require the end key time window interpolation.</comment>
  <comment type="line">//  if (pointInterpQuery) {</comment>
  <comment type="line">//    return;</comment>
  <comment type="line">//  }</comment>

  <comment type="line">// interpolation query does not generate the time window end interpolation</comment>
  <expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>isResultRowInterpolated</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>endRowIndex</name> <init>= <expr><name>startPos</name> <operator>+</operator> <name>forwardRows</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TSKEY</name></type> <name>endKey</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr> </then><else>: <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>  <name>interp</name> <init>= <expr><call><name>setTimeWindowInterpolationEndTs</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>endRowIndex</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>endKey</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>interp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setResultRowInterpo</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>setNotInterpoWindowKey</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>saveDataBlockLastRow</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pPrevKeys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pPrevKeys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumn</name><modifier>*</modifier></type> <name>pc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pCols</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pkey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pPrevKeys</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pkey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <break>break;</break>
    </block_content>}</block></for>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doInterpUnclosedTimeWindow</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperatorInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfExprs</name></decl></parameter>, <parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>,
                                       <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>scanFlag</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>tsCols</name></decl></parameter>, <parameter><decl><type><name>SResultRowPosition</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SIntervalAggOperatorInfo</name><operator>*</operator><operator>)</operator><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>startPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutput</name> <init>= <expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type>          <name>pn</name> <init>= <expr><call><name>tdListGetHead</name><argument_list>(<argument><expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>openWindow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SOpenWindowInfo</name><modifier>*</modifier></type>    <name>pOpenWin</name> <init>= <expr><operator>(</operator><name>SOpenWindowInfo</name><operator>*</operator><operator>)</operator><name><name>pn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>            <name>groupId</name> <init>= <expr><name><name>pOpenWin</name><operator>-&gt;</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SResultRowPosition</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><operator>&amp;</operator><name><name>pOpenWin</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pageId</name></name> <operator>==</operator> <name><name>p1</name><operator>-&gt;</operator><name>pageId</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name><name>p1</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pr</name> <init>= <expr><call><name>getResultRowByPos</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name><name>p1</name><operator>-&gt;</operator><name>offset</name></name> <operator>&amp;&amp;</operator> <name><name>pr</name><operator>-&gt;</operator><name>pageId</name></name> <operator>==</operator> <name><name>p1</name><operator>-&gt;</operator><name>pageId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>isResultRowInterpolated</name><argument_list>(<argument><expr><name>pr</name></expr></argument>, <argument><expr><name>RESULT_ROW_START_INTERP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
             <call><name>isResultRowInterpolated</name><argument_list>(<argument><expr><name>pr</name></expr></argument>, <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><call><name>tdListPopHead</name><argument_list>(<argument><expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>openWindow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STimeWindow</name></type> <name>w</name> <init>= <expr><name><name>pr</name><operator>-&gt;</operator><name>win</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>ret</name> <init>= <expr><call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>scanFlag</name> <operator>==</operator> <name>MAIN_SCAN</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>,
                                             <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>isResultRowInterpolated</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pTsKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>     <name>prevTs</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pTsKey</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>groupId</name> <operator>==</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doTimeWindowInterpolation</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>prevTs</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tsCols</name><index>[<expr><name>startPos</name></expr>]</index></name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name><name>w</name><operator>.</operator><name>ekey</name></name></expr></argument>,
                                <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>setResultRowInterpo</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setNotInterpoWindowKey</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfExprs</name></expr></argument>, <argument><expr><name>RESULT_ROW_START_INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>,
                     <argument><expr><name>numOfExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isResultRowInterpolated</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>closeResultRow</name><argument_list>(<argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><call><name>tdListPopHead</name><argument_list>(<argument><expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>openWindow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// the remains are can not be closed yet.</comment>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>__compare_fn_t</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>int32_t</name></type> <name>binarySearchCom</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>keyList</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>__compare_fn_t</name></type> <name>comparefn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>firstPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lastPos</name> <init>= <expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>midPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// find the first position which is smaller or equal than the key</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>comparefn</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>lastPos</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>comparefn</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>firstPos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>firstPos</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>comparefn</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>firstPos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>firstPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name>lastPos</name> <operator>-</operator> <name>firstPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>midPos</name> <operator>=</operator> <operator>(</operator><name>numOfRows</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>firstPos</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>comparefn</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>midPos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>midPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>comparefn</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>midPos</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>firstPos</name> <operator>=</operator> <name>midPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// find the first position which is bigger or equal than the key</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>comparefn</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>firstPos</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>firstPos</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>comparefn</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>lastPos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>comparefn</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>lastPos</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>lastPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastPos</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name>lastPos</name> <operator>-</operator> <name>firstPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>midPos</name> <operator>=</operator> <operator>(</operator><name>numOfRows</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>firstPos</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>comparefn</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>midPos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>midPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>comparefn</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>midPos</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>firstPos</name> <operator>=</operator> <name>midPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>midPos</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>__get_value_fn_t</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>int32_t</name></type> <name>binarySearch</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>keyList</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>__get_value_fn_t</name></type> <name>getValuefn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>firstPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lastPos</name> <init>= <expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>midPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// find the first position which is smaller or equal than the key</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <call><name>getValuefn</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>lastPos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <call><name>getValuefn</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>firstPos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>firstPos</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <call><name>getValuefn</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>firstPos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>firstPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name>lastPos</name> <operator>-</operator> <name>firstPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>midPos</name> <operator>=</operator> <operator>(</operator><name>numOfRows</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>firstPos</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <call><name>getValuefn</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>midPos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>midPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;</operator> <call><name>getValuefn</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>midPos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>firstPos</name> <operator>=</operator> <name>midPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// find the first position which is bigger or equal than the key</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;=</operator> <call><name>getValuefn</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>firstPos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>firstPos</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <call><name>getValuefn</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>lastPos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;</operator> <call><name>getValuefn</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>lastPos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>lastPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastPos</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name>lastPos</name> <operator>-</operator> <name>firstPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>midPos</name> <operator>=</operator> <operator>(</operator><name>numOfRows</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>firstPos</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <call><name>getValuefn</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>midPos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>midPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;</operator> <call><name>getValuefn</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>midPos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>firstPos</name> <operator>=</operator> <name>midPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>midPos</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>comparePullWinKey</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>          <name>res</name> <init>= <expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPullWindowInfo</name><modifier>*</modifier></type> <name>pos</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPullWindowInfo</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><name>SPullWindowInfo</name><operator>*</operator><operator>)</operator><name>pKey</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&gt;</operator> <name><name>pos</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pos</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pos</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>pos</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>savePullWindow</name><parameter_list>(<parameter><decl><type><name>SPullWindowInfo</name><modifier>*</modifier></type> <name>pPullInfo</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pPullWins</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pPullWins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><call><name>binarySearchCom</name><argument_list>(<argument><expr><name>pPullWins</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pPullInfo</name></expr></argument>, <argument><expr><name>TSDB_ORDER_DESC</name></expr></argument>, <argument><expr><name>comparePullWinKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>comparePullWinKey</name><argument_list>(<argument><expr><name>pPullInfo</name></expr></argument>, <argument><expr><name>pPullWins</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SPullWindowInfo</name><modifier>*</modifier></type> <name>pos</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pPullWins</name></expr></argument> ,<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pPullInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pPullInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>calWin</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>calWin</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pPullInfo</name><operator>-&gt;</operator><name>calWin</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>calWin</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>calWin</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pPullInfo</name><operator>-&gt;</operator><name>calWin</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayInsert</name><argument_list>(<argument><expr><name>pPullWins</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>pPullInfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>saveResult</name><parameter_list>(<parameter><decl><type><name>SResultWindowInfo</name></type> <name>winInfo</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStUpdated</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>tSimpleHashPut</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SResultWindowInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>saveWinResult</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pageId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUpdatedMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResKeyPos</name><modifier>*</modifier></type> <name>newPos</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SResKeyPos</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>newPos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>newPos</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newPos</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>SResultRowPosition</name><operator>)</operator><block>{<expr><operator>.</operator><name>pageId</name> <operator>=</operator> <name>pageId</name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name>offset</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>newPos</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>newPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>newPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>saveWinResultInfo</name><parameter_list>(<parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUpdatedMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>saveWinResult</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>removeResults</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pWins</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUpdatedMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>pW</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>tmp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><name>pW</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>tmp</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><name>pW</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>compareWinRes</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>res</name> <init>= <expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWinKey</name><modifier>*</modifier></type>    <name>pDataPos</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResKeyPos</name><modifier>*</modifier></type> <name>pRKey</name> <init>= <expr><operator>(</operator><name>SResKeyPos</name><operator>*</operator><operator>)</operator><name>pKey</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRKey</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&gt;</operator> <name><name>pDataPos</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRKey</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pDataPos</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pRKey</name><operator>-&gt;</operator><name>key</name></name> <operator>&gt;</operator> <name><name>pDataPos</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pRKey</name><operator>-&gt;</operator><name>key</name></name> <operator>&lt;</operator> <name><name>pDataPos</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition><block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>removeDeleteResults</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUpdatedMap</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDelWins</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pDelWins</name></expr></argument>, <argument><expr><name>winKeyCmprImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayRemoveDuplicate</name><argument_list>(<argument><expr><name>pDelWins</name></expr></argument>, <argument><expr><name>winKeyCmprImpl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>delSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDelWins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>delSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIte</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pIte</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SResKeyPos</name><modifier>*</modifier></type> <name>pResKey</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SResKeyPos</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pIte</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>index</name> <init>= <expr><call><name>binarySearchCom</name><argument_list>(<argument><expr><name>pDelWins</name></expr></argument>, <argument><expr><name>delSize</name></expr></argument>, <argument><expr><name>pResKey</name></expr></argument>, <argument><expr><name>TSDB_ORDER_DESC</name></expr></argument>, <argument><expr><name>compareWinRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>compareWinRes</name><argument_list>(<argument><expr><name>pResKey</name></expr></argument>, <argument><expr><name>pDelWins</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name>pDelWins</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>delSize</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDelWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isOverdue</name><parameter_list>(<parameter><decl><type><name>TSKEY</name></type> <name>ekey</name></decl></parameter>, <parameter><decl><type><name>STimeWindowAggSupp</name><modifier>*</modifier></type> <name>pTwSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTwSup</name><operator>-&gt;</operator><name>maxTs</name></name> <operator>==</operator> <name>INT64_MIN</name> <operator>||</operator> <name><name>pTwSup</name><operator>-&gt;</operator><name>maxTs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pTwSup</name><operator>-&gt;</operator><name>maxTs</name></name> <operator>!=</operator> <name>INT64_MIN</name> <operator>&amp;&amp;</operator> <name>ekey</name> <operator>&lt;</operator> <name><name>pTwSup</name><operator>-&gt;</operator><name>maxTs</name></name> <operator>-</operator> <name><name>pTwSup</name><operator>-&gt;</operator><name>waterMark</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isCloseWindow</name><parameter_list>(<parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>, <parameter><decl><type><name>STimeWindowAggSupp</name><modifier>*</modifier></type> <name>pTwSup</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isOverdue</name><argument_list>(<argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>pTwSup</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>needDeleteWindowBuf</name><parameter_list>(<parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>, <parameter><decl><type><name>STimeWindowAggSupp</name><modifier>*</modifier></type> <name>pTwSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pTwSup</name><operator>-&gt;</operator><name>maxTs</name></name> <operator>!=</operator> <name>INT64_MIN</name> <operator>&amp;&amp;</operator> <name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>pTwSup</name><operator>-&gt;</operator><name>maxTs</name></name> <operator>-</operator> <name><name>pTwSup</name><operator>-&gt;</operator><name>deleteMark</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hashIntervalAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperatorInfo</name></decl></parameter>, <parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                            <parameter><decl><type><name>int32_t</name></type> <name>scanFlag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SIntervalAggOperatorInfo</name><operator>*</operator><operator>)</operator><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>     <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>startPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfOutput</name> <init>= <expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type>    <name>tsCols</name> <init>= <expr><call><name>extractTsCol</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>    <name>tableGroupId</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>ascScan</name> <init>= <expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>       <name>ts</name> <init>= <expr><call><name>getStartTsKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>=
      <expr><call><name>getActiveTimeWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><operator>(</operator><name>scanFlag</name> <operator>==</operator> <name>MAIN_SCAN</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>,
                                       <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>ekey</name> <init>= <expr><ternary><condition><expr><name>ascScan</name></expr> ?</condition><then> <expr><name><name>win</name><operator>.</operator><name>ekey</name></name></expr> </then><else>: <expr><name><name>win</name><operator>.</operator><name>skey</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>forwardRows</name> <init>=
      <expr><call><name>getNumOfRowsInTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>, <argument><expr><name>binarySearchForKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>forwardRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// prev time window not interpolation yet.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SResultRowPosition</name></type> <name>pos</name> <init>= <expr><call><name>addToOpenWindowList</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doInterpUnclosedTimeWindow</name><argument_list>(<argument><expr><name>pOperatorInfo</name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// restore current time window</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><operator>(</operator><name>scanFlag</name> <operator>==</operator> <name>MAIN_SCAN</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>,
                                 <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// window start key interpolation</comment>
    <expr_stmt><expr><call><name>doWindowBorderInterpolation</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>forwardRows</name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>forwardRows</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>,
                   <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>doCloseWindow</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>nextWin</name> <init>= <expr><name>win</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>prevEndPos</name> <init>= <expr><name>forwardRows</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>startPos</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>startPos</name> <operator>=</operator> <call><name>getNextQualifiedWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>prevEndPos</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// null data, failed to allocate more memory buffer</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><operator>(</operator><name>scanFlag</name> <operator>==</operator> <name>MAIN_SCAN</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>,
                                          <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ekey</name> <operator>=</operator> <ternary><condition><expr><name>ascScan</name></expr> ?</condition><then> <expr><name><name>nextWin</name><operator>.</operator><name>ekey</name></name></expr> </then><else>: <expr><name><name>nextWin</name><operator>.</operator><name>skey</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>forwardRows</name> <operator>=</operator>
        <call><name>getNumOfRowsInTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>, <argument><expr><name>binarySearchForKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// window start(end) key interpolation</comment>
    <expr_stmt><expr><call><name>doWindowBorderInterpolation</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>forwardRows</name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO: add to open window? how to close the open windows after input blocks exhausted?</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    if ((ascScan &amp;&amp; ekey &lt;= pBlock-&gt;info.window.ekey) ||
        (!ascScan &amp;&amp; ekey &gt;= pBlock-&gt;info.window.skey)) {
      <comment type="line">// window start(end) key interpolation</comment>
      doWindowBorderInterpolation(pInfo, pBlock, pResult, &amp;nextWin, startPos, forwardRows, pSup);
    } else if (pInfo-&gt;timeWindowInterpo) {
      addToOpenWindowList(pResultRowInfo, pResult, tableGroupId);
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>forwardRows</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>,
                     <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doCloseWindow</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>saveDataBlockLastRow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInterpCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doCloseWindow</name><parameter_list>(<parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// current result is done in computing final results.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name> <operator>&amp;&amp;</operator> <call><name>isResultRowInterpolated</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>RESULT_ROW_END_INTERP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>closeResultRow</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><call><name>tdListPopHead</name><argument_list>(<argument><expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>openWindow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SResultRowPosition</name></type> <name>addToOpenWindowList</name><parameter_list>(<parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOpenWindowInfo</name></type> <name>openWin</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>openWin</name><operator>.</operator><name>pos</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <name><name>pResult</name><operator>-&gt;</operator><name>pageId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>openWin</name><operator>.</operator><name>pos</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>pResult</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>openWin</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pn</name> <init>= <expr><call><name>tdListGetTail</name><argument_list>(<argument><expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>openWindow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdListAppend</name><argument_list>(<argument><expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>openWindow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>openWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>openWin</name><operator>.</operator><name>pos</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SOpenWindowInfo</name><modifier>*</modifier></type> <name>px</name> <init>= <expr><operator>(</operator><name>SOpenWindowInfo</name><operator>*</operator><operator>)</operator><name><name>pn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>px</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pageId</name></name> <operator>!=</operator> <name><name>openWin</name><operator>.</operator><name>pos</name><operator>.</operator><name>pageId</name></name> <operator>||</operator> <name><name>px</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>offset</name></name> <operator>!=</operator> <name><name>openWin</name><operator>.</operator><name>pos</name><operator>.</operator><name>offset</name></name> <operator>||</operator> <name><name>px</name><operator>-&gt;</operator><name>groupId</name></name> <operator>!=</operator> <name><name>openWin</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdListAppend</name><argument_list>(<argument><expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>openWindow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>openWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>openWin</name><operator>.</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name><modifier>*</modifier></type> <name>extractTsCol</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>tsCols</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColDataInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tsCols</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColDataInfo</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>

    <comment type="line">// no data in primary ts</comment>
    <if_stmt><if>if <condition>(<expr><name><name>tsCols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tsCols</name><index>[<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tsCols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>tsCols</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doOpenIntervalAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>OPTR_IS_OPENED</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>scanFlag</name> <init>= <expr><name>MAIN_SCAN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>getTableScanInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scanFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>hashIntervalAgg</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>initGroupedResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>resultTsOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>OPTR_SET_OPENED</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>compareVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStateKeys</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doStateWindowAggImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SStateWindowOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>     <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStateColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateCol</name><operator>.</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>          <name>gid</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>masterScan</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutput</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>bytes</name> <init>= <expr><name><name>pStateColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tsSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>tsList</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SWindowRowsSup</name><modifier>*</modifier></type> <name>pRowSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>winSup</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>SColumnDataAgg</name></name><modifier>*</modifier></type> <name>pAgg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pAgg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateCol</name><operator>.</operator><name>slotId</name></name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pStateColInfoData</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>pAgg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pStateColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>gid</name> <operator>!=</operator> <name><name>pRowSup</name><operator>-&gt;</operator><name>groupId</name></name> <operator>||</operator> <operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>hasKey</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// todo extract method</comment>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>varDataCopy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasKey</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>doKeepNewWindowStartInfo</name><argument_list>(<argument><expr><name>pRowSup</name></expr></argument>, <argument><expr><name>tsList</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doKeepTuple</name><argument_list>(<argument><expr><name>pRowSup</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>compareVal</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doKeepTuple</name><argument_list>(<argument><expr><name>pRowSup</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pRowSup</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// a new state window started</comment>
      <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

      <comment type="line">// keep the time window for the closed time window.</comment>
      <decl_stmt><decl><type><name>STimeWindow</name></type> <name>window</name> <init>= <expr><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>pRowSup</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window</name></expr></argument>, <argument><expr><name>masterScan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>,
                                           <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>  <comment type="line">// null data, too many state code</comment>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>,
                       <argument><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// here we start a new session window</comment>
      <expr_stmt><expr><call><name>doKeepNewWindowStartInfo</name><argument_list>(<argument><expr><name>pRowSup</name></expr></argument>, <argument><expr><name>tsList</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doKeepTuple</name><argument_list>(<argument><expr><name>pRowSup</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// todo extract method</comment>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>varDataCopy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><name>masterScan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>,
                                       <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>  <comment type="line">// null data, too many state code</comment>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>,
                   <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>openStateWindowAggOptr</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>OPTR_IS_OPENED</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStateWindowOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>            <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>order</name> <init>= <expr><name>TSDB_ORDER_ASC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tsSlotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// there is an scalar expression that needs to be calculated right before apply the group aggregation.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pCtx</name></name></expr></argument>,
                                              <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doStateWindowAggImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initGroupedResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doStateWindowAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStateWindowOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>            <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type>           <name>pBInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>_openFn</name></name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doBuildResultDatablock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>hasRemain</name> <init>= <expr><call><name>hasRemainResults</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasRemain</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doBuildIntervalResult</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>            <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>_openFn</name></name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doBuildResultDatablock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>hasRemain</name> <init>= <expr><call><name>hasRemainResults</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasRemain</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>size_t</name></type> <name>rows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name>rows</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pBlock</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setInverFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>EStreamType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_INVERT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fmSetInvertFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fpSet</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>STREAM_NORMAL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fmSetNormalFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fpSet</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doClearWindowImpl</name><parameter_list>(<parameter><decl><type><name>SResultRowPosition</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pResultBuf</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type>     <name>pResult</name> <init>= <expr><call><name>getResultRowByPos</name><argument_list>(<argument><expr><name>pResultBuf</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>resultInfo</name> <operator>=</operator> <call><name>getResultEntryInfo</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>SResultRowEntryInfo</name></name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>resultInfo</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fmIsWindowPseudoColumnFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>fpSet</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>bufPage</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name>pResultBuf</name></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>pageId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>bufPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name>pResultBuf</name></expr></argument>, <argument><expr><name>bufPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>doDeleteWindow</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWinKey</name></type>                      <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSimpleHashRemove</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamStateDel</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doDeleteWindows</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pUpWins</name></decl></parameter>,
                            <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUpdatedMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>             <name>pStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>                       <name>startTsCols</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pStartTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>             <name>pEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>                       <name>endTsCols</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pEndTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>             <name>pCalStTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>                       <name>calStTsCols</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pCalStTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>             <name>pCalEnTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>                       <name>calEnTsCols</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pCalEnTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>             <name>pGpCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>                    <name>pGpDatas</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pGpCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SResultRowInfo</name></type> <name>dumyInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dumyInfo</name><operator>.</operator><name>cur</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>startTsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>endTsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>getActiveTimeWindow</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dumyInfo</name></expr></argument>, <argument><expr><name><name>startTsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inCalSlidingWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name><name>calStTsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>calEnTsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>getNextTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>winGpId</name> <init>= <expr><name><name>pGpDatas</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type>     <name>res</name> <init>= <expr><call><name>doDeleteWindow</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name>winGpId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SWinKey</name></type>  <name>winRes</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>win</name><operator>.</operator><name>skey</name></name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>winGpId</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pUpWins</name> <operator>&amp;&amp;</operator> <name>res</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pUpWins</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>pUpdatedMap</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winRes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>tmp</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winRes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>getNextTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&lt;=</operator> <name><name>endTsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>;</do>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getAllIntervalWindow</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pHashMap</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>resWins</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pIte</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pIte</name> <operator>=</operator> <call><name>tSimpleHashIterate</name><argument_list>(<argument><expr><name>pHashMap</name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>key</name> <init>= <expr><call><name>tSimpleHashGetKey</name><argument_list>(<argument><expr><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>keyLen</name> <operator>==</operator> <call><name>GET_RES_WINDOW_KEY_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type>               <name>ts</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SResultRowPosition</name><modifier>*</modifier></type> <name>pPos</name> <init>= <expr><operator>(</operator><name>SResultRowPosition</name><operator>*</operator><operator>)</operator><name>pIte</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><call><name>saveWinResult</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>pPos</name><operator>-&gt;</operator><name>pageId</name></name></expr></argument>, <argument><expr><name><name>pPos</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>resWins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>compareWinKey</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>  <name>res</name> <init>= <expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>pDataPos</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>pWKey</name> <init>= <expr><operator>(</operator><name>SWinKey</name><operator>*</operator><operator>)</operator><name>pKey</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWKey</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&gt;</operator> <name><name>pDataPos</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWKey</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pDataPos</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>pDataPos</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pDataPos</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>closeStreamIntervalWindow</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pHashMap</name></decl></parameter>, <parameter><decl><type><name>STimeWindowAggSupp</name><modifier>*</modifier></type> <name>pTwSup</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>,
                                         <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pPullDataMap</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>closeWins</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDelWins</name></decl></parameter>,
                                         <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===close interval window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>                        <name>pIte</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>                       <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                      <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                      <name>delSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDelWins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pIte</name> <operator>=</operator> <call><name>tSimpleHashIterate</name><argument_list>(<argument><expr><name>pHashMap</name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>key</name> <init>= <expr><call><name>tSimpleHashGetKey</name><argument_list>(<argument><expr><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>pWinKey</name> <init>= <expr><operator>(</operator><name>SWinKey</name><operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>delSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><call><name>binarySearchCom</name><argument_list>(<argument><expr><name>pDelWins</name></expr></argument>, <argument><expr><name>delSize</name></expr></argument>, <argument><expr><name>pWinKey</name></expr></argument>, <argument><expr><name>TSDB_ORDER_DESC</name></expr></argument>, <argument><expr><name>compareWinKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>compareWinKey</name><argument_list>(<argument><expr><name>pWinKey</name></expr></argument>, <argument><expr><name>pDelWins</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name>pDelWins</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>delSize</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDelWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>chIds</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pPullDataMap</name></expr></argument>, <argument><expr><name>pWinKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>skey</name> <operator>=</operator> <name><name>pWinKey</name><operator>-&gt;</operator><name>ts</name></name></expr>,
        <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isCloseWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name>pTwSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>chIds</name> <operator>&amp;&amp;</operator> <name>pPullDataMap</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>chAy</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name><operator>*</operator><operator>*</operator><operator>)</operator><name>chIds</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>chAy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===window %"</literal> <name>PRId64</name> <literal type="string">" wait child size:%d"</literal></expr></argument>, <argument><expr><name><name>pWinKey</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===window %"</literal> <name>PRId64</name> <literal type="string">" wait child id:%d"</literal></expr></argument>, <argument><expr><name><name>pWinKey</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>chAy</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pPullDataMap</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===close window %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pWinKey</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTwSup</name><operator>-&gt;</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>saveWinResultInfo</name><argument_list>(<argument><expr><name><name>pWinKey</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pWinKey</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>closeWins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tSimpleHashIterateRemove</name><argument_list>(<argument><expr><name>pHashMap</name></expr></argument>, <argument><expr><name>pWinKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STimeWindow</name></type> <name>getFinalTimeWindow</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>w</name> <init>= <expr><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>w</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>w</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deleteIntervalDiscBuf</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pPullDataMap</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>,
                                  <parameter><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>tw</name> <init>= <expr><call><name>getFinalTimeWindow</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWinKey</name></type>     <name>next</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>tw</name><operator>.</operator><name>ekey</name></name> <operator>&lt;</operator> <name>mark</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateSeekKeyNext</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>streamStateGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>chIds</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pPullDataMap</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>chIds</name> <operator>&amp;&amp;</operator> <name>pPullDataMap</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>chAy</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name><operator>*</operator><operator>*</operator><operator>)</operator><name>chIds</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>chAy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===window %"</literal> <name>PRId64</name> <literal type="string">" wait child size:%d"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===window %"</literal> <name>PRId64</name> <literal type="string">" wait child id:%d"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>chAy</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===delete window %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>codeDel</name> <init>= <expr><call><name>streamStateDel</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>codeDel</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateGetFirst</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===stream state first key: empty-empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tw</name> <operator>=</operator> <call><name>getFinalTimeWindow</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="line">// for debug</comment>
  <if_stmt><if>if <condition>(<expr><name>qDebugFlag</name> <operator>&amp;</operator> <name>DEBUG_DEBUG</name> <operator>&amp;&amp;</operator> <name>mark</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateGetCur</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>streamStateCurPrev</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SWinKey</name></type> <name>tmpKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>STimeWindow</name></type> <name>tw</name> <init>= <expr><call><name>getFinalTimeWindow</name><argument_list>(<argument><expr><name><name>tmpKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===error stream state first key:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">",%"</literal> <name>PRId64</name> <literal type="string">",mark %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>tw</name><operator>.</operator><name>skey</name></name></expr></argument>,
               <argument><expr><name><name>tw</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>tmpKey</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>STimeWindow</name></type> <name>tw</name> <init>= <expr><call><name>getFinalTimeWindow</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===stream state first key:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">",%"</literal> <name>PRId64</name> <literal type="string">",mark %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>tw</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>tw</name><operator>.</operator><name>ekey</name></name></expr></argument>,
               <argument><expr><name><name>key</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>STimeWindow</name></type> <name>tw</name> <init>= <expr><call><name>getFinalTimeWindow</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===stream state first key:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">",%"</literal> <name>PRId64</name> <literal type="string">",mark %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>tw</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>tw</name><operator>.</operator><name>ekey</name></name></expr></argument>,
             <argument><expr><name><name>key</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>closeChildIntervalWindow</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>maxTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>               <name>pChildOp</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pChInfo</name> <init>= <expr><name><name>pChildOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>, <argument><expr><name>maxTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>closeStreamIntervalWindow</name><argument_list>(<argument><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pChInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pChInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doBuildDeleteResult</name><parameter_list>(<parameter><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pWins</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>index</name></decl></parameter>,
                                <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>index</name> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <operator>*</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>index</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>pWin</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>tbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamStateGetParName</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tbname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>appendOneRowToStreamSpecialBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>parTbName</name><index>[<expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>TSDB_TABLE_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>parTbName</name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parTbName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>appendOneRowToStreamSpecialBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>parTbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyStateWindowOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateWindowOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SStateWindowOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupGroupResInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeItem</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><operator>(</operator><name>SGroupKeys</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyIntervalOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SIntervalAggOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdListFree</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name><operator>.</operator><name>openWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInterpCols</name></name> <operator>=</operator> <call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInterpCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name></expr></argument>, <argument><expr><name>freeItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cleanupGroupResInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyStreamFinalIntervalOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SStreamIntervalOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// it should be empty.</comment>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullWins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pChildOp</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>destroyOperatorInfo</name><argument_list>(<argument><expr><name>pChildOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pPhyNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupGroupResInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>allInvertible</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pFCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name><name>pFCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>fmIsInvertible</name><argument_list>(<argument><expr><name><name>pFCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>timeWindowinterpNeeded</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// the primary timestamp column</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>needed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fmIsIntervalInterpoFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>needed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>needed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInterpCols</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGroupKeys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content>  <comment type="line">// ts column</comment>
      <decl_stmt><decl><type><name>SColumn</name></type> <name>c</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>colId</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>slotId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInterpCols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SGroupKeys</name></type> <name>key</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>  <comment type="line">// to denote no value is assigned yet</comment>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fmIsIntervalInterpoFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SFunctParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><operator>&amp;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SColumn</name></type> <name>c</name> <init>= <expr><operator>*</operator><name><name>pParam</name><operator>-&gt;</operator><name>pCol</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInterpCols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SGroupKeys</name></type> <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>needed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initIntervalDownStream</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SAggSupporter</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>,
                            <parameter><decl><type><name>STimeWindowAggSupp</name><modifier>*</modifier></type> <name>pTwSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>downstream</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>!=</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>initIntervalDownStream</name><argument_list>(<argument><expr><name><name>downstream</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>pTwSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><name><name>downstream</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>parentType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>windowSup</name><operator>.</operator><name>pIntervalAggSup</name></name> <operator>=</operator> <name>pSup</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pScanInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name> <operator>=</operator> <call><name>updateInfoInitP</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name><name>pTwSup</name><operator>-&gt;</operator><name>waterMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <operator>*</operator><name>pInterval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>twAggSup</name></name> <operator>=</operator> <operator>*</operator><name>pTwSup</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initStreamFunciton</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfExpr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfExpr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<comment type="line">//    pCtx[i].isStream = true;</comment>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createIntervalOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>,
                                          <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIntervalAggOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>            <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>keyBufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>initAggSup</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>keyBufSize</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SInterval</name></type> <name>interval</name> <init>= <expr><block>{<expr><operator>.</operator><name>interval</name> <operator>=</operator> <name><name>pPhyNode</name><operator>-&gt;</operator><name>interval</name></name></expr>,
                        <expr><operator>.</operator><name>sliding</name> <operator>=</operator> <name><name>pPhyNode</name><operator>-&gt;</operator><name>sliding</name></name></expr>,
                        <expr><operator>.</operator><name>intervalUnit</name> <operator>=</operator> <name><name>pPhyNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>,
                        <expr><operator>.</operator><name>slidingUnit</name> <operator>=</operator> <name><name>pPhyNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>,
                        <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pPhyNode</name><operator>-&gt;</operator><name>offset</name></name></expr>,
                        <expr><operator>.</operator><name>precision</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STimeWindowAggSupp</name></type> <name>as</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>waterMark</name> <operator>=</operator> <name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>watermark</name></name></expr>,
      <expr><operator>.</operator><name>calTrigger</name> <operator>=</operator> <name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>triggerType</name></name></expr>,
      <expr><operator>.</operator><name>maxTs</name> <operator>=</operator> <name>INT64_MIN</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>as</name><operator>.</operator><name>calTrigger</name></name> <operator>!=</operator> <name>STREAM_TRIGGER_MAX_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>inputTsOrder</name></name> <operator>==</operator> <name>ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><name>TSDB_ORDER_ASC</name></expr> </then><else>: <expr><name>TSDB_ORDER_DESC</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>resultTsOrder</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>outputTsOrder</name></name> <operator>==</operator> <name>ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><name>TSDB_ORDER_ASC</name></expr> </then><else>: <expr><name>TSDB_ORDER_DESC</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name> <operator>=</operator> <name>as</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>mergeResultBlock</name></name> <operator>=</operator> <name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>mergeDataBlock</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfScalar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pScalarExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></argument>, <argument><expr><name>pScalarExprInfo</name></expr></argument>, <argument><expr><name>numOfScalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initExecTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name> <operator>=</operator> <call><name>timeWindowinterpNeeded</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name><operator>.</operator><name>openWindow</name></name> <operator>=</operator> <call><name>tdListNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOpenWindowInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name><operator>.</operator><name>openWindow</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initResultRowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"TimeIntervalAggOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>,
                  <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>doOpenIntervalAgg</name></expr></argument>, <argument><expr><name>doBuildIntervalResult</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyIntervalOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyIntervalOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo handle multiple timeline cases. assume no timeline interweaving</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>doSessionWindowAggImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>     <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tsSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>masterScan</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutput</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>gid</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>gap</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>gap</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>reptScan</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>reptScan</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>winSup</name><operator>.</operator><name>prevTs</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SWindowRowsSup</name><modifier>*</modifier></type> <name>pRowSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>winSup</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// In case of ascending or descending order scan data, only one time window needs to be kepted for each table.</comment>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>tsList</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>gid</name> <operator>!=</operator> <name><name>pRowSup</name><operator>-&gt;</operator><name>groupId</name></name> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>winSup</name><operator>.</operator><name>prevTs</name></name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doKeepNewWindowStartInfo</name><argument_list>(<argument><expr><name>pRowSup</name></expr></argument>, <argument><expr><name>tsList</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doKeepTuple</name><argument_list>(<argument><expr><name>pRowSup</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>tsList</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>pRowSup</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tsList</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>pRowSup</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>&lt;=</operator> <name>gap</name><operator>)</operator><operator>)</operator> <operator>||</operator>
               <operator>(</operator><operator>(</operator><name><name>pRowSup</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>-</operator> <name><name>tsList</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pRowSup</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>-</operator> <name><name>tsList</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <name>gap</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// The gap is less than the threshold, so it belongs to current session window that has been opened already.</comment>
      <expr_stmt><expr><call><name>doKeepTuple</name><argument_list>(<argument><expr><name>pRowSup</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pRowSup</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// start a new session window</comment>
      <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

      <comment type="line">// keep the time window for the closed time window.</comment>
      <decl_stmt><decl><type><name>STimeWindow</name></type> <name>window</name> <init>= <expr><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>pRowSup</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window</name></expr></argument>, <argument><expr><name>masterScan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>,
                                           <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>  <comment type="line">// null data, too many state code</comment>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// pInfo-&gt;numOfRows data belong to the current session window</comment>
      <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>,
                       <argument><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// here we start a new session window</comment>
      <expr_stmt><expr><call><name>doKeepNewWindowStartInfo</name><argument_list>(<argument><expr><name>pRowSup</name></expr></argument>, <argument><expr><name>tsList</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doKeepTuple</name><argument_list>(<argument><expr><name>pRowSup</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><name>masterScan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>,
                                       <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>  <comment type="line">// null data, too many state code</comment>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowSup</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pRowSup</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>,
                   <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doSessionWindowAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type>          <name>pBInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>               <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_RES_TO_RETURN</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doBuildResultDatablock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>bool</name></type> <name>hasRemain</name> <init>= <expr><call><name>hasRemainResults</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasRemain</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>order</name> <init>= <expr><name>TSDB_ORDER_ASC</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tsSlotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>doSessionWindowAggImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>

  <comment type="line">// restore the value</comment>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initGroupedResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doBuildResultDatablock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>hasRemain</name> <init>= <expr><call><name>hasRemainResults</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasRemain</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createStatewindowOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SStateWinodwPhysiNode</name><modifier>*</modifier></type> <name>pStateNode</name></decl></parameter>,
                                             <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateWindowOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateWindowOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>            <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>tsSlotId</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pColNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name><name>pStateNode</name><operator>-&gt;</operator><name>pStateKey</name></name><operator>)</operator><operator>-&gt;</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfScalarExpr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pScalarExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfScalarExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>, <argument><expr><name>pScalarExprInfo</name></expr></argument>, <argument><expr><name>numOfScalarExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateCol</name></name> <operator>=</operator> <call><name>extractColumnFromColumnNode</name><argument_list>(<argument><expr><name>pColNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>stateCol</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>stateCol</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateCol</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateKey</name><operator>.</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>keyBufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>keyBufSize</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initResultRowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name> <operator>=</operator>
      <operator>(</operator><name>STimeWindowAggSupp</name><operator>)</operator><block>{<expr><operator>.</operator><name>waterMark</name> <operator>=</operator> <name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>watermark</name></name></expr>, <expr><operator>.</operator><name>calTrigger</name> <operator>=</operator> <name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>triggerType</name></name></expr>}</block></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initExecTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tsSlotId</name></name> <operator>=</operator> <name>tsSlotId</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"StateWindowOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_STATE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>,
                  <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>openStateWindowAggOptr</name></expr></argument>, <argument><expr><name>doStateWindowAgg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyStateWindowOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyStateWindowOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroySWindowOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SSessionAggOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cleanupAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupGroupResInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createSessionAggOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SSessionWinodwPhysiNode</name><modifier>*</modifier></type> <name>pSessionNode</name></decl></parameter>,
                                            <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionAggOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>           <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>keyBufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type>   <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>keyBufSize</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>waterMark</name></name> <operator>=</operator> <name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>watermark</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>triggerType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>gap</name></name> <operator>=</operator> <name><name>pSessionNode</name><operator>-&gt;</operator><name>gap</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initResultRowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initExecTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tsSlotId</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <name>pResBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>winSup</name><operator>.</operator><name>prevTs</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>reptScan</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"SessionWindowAggOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_SESSION</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>,
                  <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doSessionWindowAgg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroySWindowOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name> <operator>=</operator> <name>pTaskInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>destroySWindowOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>compactFunctions</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>,
                      <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTimeWindowData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>fmIsWindowPseudoColumnFunc</name><argument_list>(<argument><expr><name><name>pDestCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTimeWindowData</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntryInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDestCtx</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>p</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pEntryInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name></type>      <name>idata</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>idata</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>idata</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>idata</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SScalarParam</name></type> <name>out</name> <init>= <expr><block>{<expr><operator>.</operator><name>columnData</name> <operator>=</operator> <operator>&amp;</operator><name>idata</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SScalarParam</name></type> <name>tw</name> <init>= <expr><block>{<expr><operator>.</operator><name>numOfRows</name> <operator>=</operator> <literal type="number">5</literal></expr>, <expr><operator>.</operator><name>columnData</name> <operator>=</operator> <name>pTimeWindowData</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pDestCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>sfp</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>tw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>functionNeedToExecute</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDestCtx</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pDestCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>fpSet</name><operator>.</operator><name>combine</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>pDestCtx</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>fpSet</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDestCtx</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSourceCtx</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s apply functions error, code: %s"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hasIntervalWindow</name><parameter_list>(<parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <call><name>streamStateGet</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebuildIntervalWindow</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pWinArray</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUpdatedMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>               <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                      <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pWinArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                      <name>numOfOutput</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                   <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWinKey</name><modifier>*</modifier></type>    <name>pWinRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pWinArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pCurResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STimeWindow</name></type> <name>parentWin</name> <init>= <expr><call><name>getFinalTimeWindow</name><argument_list>(<argument><expr><name><name>pWinRes</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isDeletedStreamWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parentWin</name></expr></argument>, <argument><expr><name><name>pWinRes</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfChildren</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfChildren</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>               <name>pChildOp</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pChInfo</name> <init>= <expr><name><name>pChildOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                   <name>pChildSup</name> <init>= <expr><operator>&amp;</operator><name><name>pChildOp</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasIntervalWindow</name><argument_list>(<argument><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>pWinRes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>setOutputBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parentWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCurResult</name></expr></argument>, <argument><expr><name><name>pWinRes</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>,
                                    <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name>pCurResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pChResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setOutputBuf</name><argument_list>(<argument><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parentWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pChResult</name></expr></argument>, <argument><expr><name><name>pWinRes</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pChildSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pChildSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>,
                   <argument><expr><name><name>pChildSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pChInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parentWin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>compactFunctions</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pChildSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>releaseOutputBuf</name><argument_list>(<argument><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>pWinRes</name></expr></argument>, <argument><expr><name>pChResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pUpdatedMap</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>saveWinResultInfo</name><argument_list>(<argument><expr><name><name>pCurResult</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pWinRes</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>saveOutputBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>pWinRes</name></expr></argument>, <argument><expr><name>pCurResult</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>resultRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>releaseOutputBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>pWinRes</name></expr></argument>, <argument><expr><name>pCurResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isDeletedWindow</name><parameter_list>(<parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SAggSupporter</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>SET_RES_WINDOW_KEY</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SResultRowPosition</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><operator>(</operator><name>SResultRowPosition</name><operator>*</operator><operator>)</operator><call><name>tSimpleHashGet</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>,
                                                               <argument><expr><call><name>GET_RES_WINDOW_KEY_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>p1</name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isDeletedStreamWindow</name><parameter_list>(<parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>STimeWindowAggSupp</name><modifier>*</modifier></type> <name>pTwSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>pTwSup</name><operator>-&gt;</operator><name>maxTs</name></name> <operator>-</operator> <name><name>pTwSup</name><operator>-&gt;</operator><name>deleteMark</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>pWin</name><operator>-&gt;</operator><name>skey</name></name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>streamStateGet</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getNexWindowPos</name><parameter_list>(<parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>tsCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>eKey</name></decl></parameter>,
                        <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pNextWin</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>forwardRows</name> <init>=
      <expr><call><name>getNumOfRowsInTimeWindow</name><argument_list>(<argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>eKey</name></expr></argument>, <argument><expr><name>binarySearchForKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>prevEndPos</name> <init>= <expr><name>forwardRows</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>startPos</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>getNextQualifiedWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>pNextWin</name></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>prevEndPos</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addPullWindow</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pMap</name></decl></parameter>, <parameter><decl><type><name>SWinKey</name><modifier>*</modifier></type> <name>pWinRes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>childIds</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>childIds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><name>pWinRes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>childIds</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getChildIndex</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>childId</name></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearStreamIntervalOperator</name><parameter_list>(<parameter><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tSimpleHashClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>clearDiskbasedBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initResultRowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>currentPageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamStateClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearSpecialDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doBuildPullDataBlock</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pIndex</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>clearSpecialDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>pIndex</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>pIndex</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>&lt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartTs</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndTs</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGroupId</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalStartTs</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalEndTs</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>pIndex</name><operator>)</operator> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>(</operator><operator>*</operator><name>pIndex</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SPullWindowInfo</name><modifier>*</modifier></type> <name>pWin</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>pIndex</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pStartTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pEndTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pGroupId</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCalStartTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>calWin</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCalEndTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pWin</name><operator>-&gt;</operator><name>calWin</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pIndex</name><operator>)</operator> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>processPullOver</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pMap</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>tsData</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pStartCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>tsEndData</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pEndCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGroupCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>groupIdData</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pGroupCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>chId</name> <init>= <expr><call><name>getChildIndex</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>winTs</name> <init>= <expr><name><name>tsData</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>winTs</name> <operator>&lt;</operator> <name><name>tsEndData</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SWinKey</name></type> <name>winRes</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>winTs</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name><name>groupIdData</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>chIds</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winRes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>chIds</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>chArray</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name><operator>*</operator><operator>*</operator><operator>)</operator><name>chIds</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><call><name>taosArraySearchIdx</name><argument_list>(<argument><expr><name>chArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chId</name></expr></argument>, <argument><expr><name>compareInt32Val</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===window %"</literal> <name>PRId64</name> <literal type="string">" delete child id %d"</literal></expr></argument>, <argument><expr><name><name>winRes</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>chId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name>chArray</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>chArray</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// pull data is over</comment>
            <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>chArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winRes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>winTs</name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name>winTs</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addRetriveWindow</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>wins</name></decl></parameter>, <parameter><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>wins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWinKey</name><modifier>*</modifier></type>    <name>winKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>wins</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STimeWindow</name></type> <name>nextWin</name> <init>= <expr><call><name>getFinalTimeWindow</name><argument_list>(<argument><expr><name><name>winKey</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>needDeleteWindowBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>ignoreExpiredData</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>chIds</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataMap</name></name></expr></argument>, <argument><expr><name>winKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>chIds</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SPullWindowInfo</name></type> <name>pull</name> <init>= <expr><block>{<expr><operator>.</operator><name>window</name> <operator>=</operator> <name>nextWin</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name><name>winKey</name><operator>-&gt;</operator><name>groupId</name></name></expr>, <expr><operator>.</operator><name><name>calWin</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>nextWin</name><operator>.</operator><name>skey</name></name></expr>, <expr><operator>.</operator><name><name>calWin</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>nextWin</name><operator>.</operator><name>skey</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <comment type="line">// add pull data request</comment>
        <if_stmt><if>if <condition>(<expr><call><name>savePullWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pull</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullWins</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>size1</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>addPullWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataMap</name></name></expr></argument>, <argument><expr><name>winKey</name></expr></argument>, <argument><expr><name>size1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===prepare retrive for delete %"</literal> <name>PRId64</name> <literal type="string">", size:%d"</literal></expr></argument>, <argument><expr><name><name>winKey</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>size1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearFunctionContext</name><parameter_list>(<parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>saveHandle</name><operator>.</operator><name>currentPage</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doBuildResult</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SGroupResInfo</name><modifier>*</modifier></type> <name>pGroupResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// set output datablock version</comment>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasRemainResults</name><argument_list>(<argument><expr><name>pGroupResInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// clear the existed group id</comment>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>buildDataBlockFromGroupRes</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pGroupResInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doStreamIntervalAggImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperatorInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSDataBlock</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>,
                                    <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pUpdatedMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SStreamIntervalOperatorInfo</name><operator>*</operator><operator>)</operator><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>  <name>pTaskInfo</name> <init>= <expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>      <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>numOfOutput</name> <init>= <expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>          <name>tsCols</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type>     <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>forwardRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColDataInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tsCols</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColDataInfo</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>startPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>       <name>ts</name> <init>= <expr><call><name>getStartTsKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>nextWin</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nextWin</name> <operator>=</operator> <call><name>getFinalTimeWindow</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>nextWin</name> <operator>=</operator> <call><name>getActiveTimeWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>isClosed</name> <init>= <expr><call><name>isCloseWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>ignoreExpiredData</name></name> <operator>&amp;&amp;</operator> <name>isClosed</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>inSlidingWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>startPos</name> <operator>=</operator> <call><name>getNexWindowPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name><name>nextWin</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>isClosed</name> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type>    <name>ignore</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SWinKey</name></type> <name>winRes</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>nextWin</name><operator>.</operator><name>skey</name></name></expr>,
          <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>,
      }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>chIds</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winRes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isDeletedStreamWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>chIds</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SPullWindowInfo</name></type> <name>pull</name> <init>= <expr><block>{<expr><operator>.</operator><name>window</name> <operator>=</operator> <name>nextWin</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>, <expr><operator>.</operator><name><name>calWin</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>nextWin</name><operator>.</operator><name>skey</name></name></expr>, <expr><operator>.</operator><name><name>calWin</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>nextWin</name><operator>.</operator><name>skey</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <comment type="line">// add pull data request</comment>
        <if_stmt><if>if <condition>(<expr><call><name>savePullWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pull</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullWins</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>addPullWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winRes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===prepare retrive %"</literal> <name>PRId64</name> <literal type="string">", size:%d"</literal></expr></argument>, <argument><expr><name><name>winRes</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>chArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>chId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>chIds</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>chArray</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>chIds</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>chId</name> <operator>=</operator> <call><name>getChildIndex</name><argument_list>(<argument><expr><name>pSDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>taosArraySearchIdx</name><argument_list>(<argument><expr><name>chArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chId</name></expr></argument>, <argument><expr><name>compareInt32Val</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_PULL_DATA</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>ignore</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>ignore</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>startPos</name> <operator>=</operator> <call><name>getNexWindowPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name><name>nextWin</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>setOutputBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>,
                                <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>forwardRows</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>forwardRows</name> <operator>=</operator> <call><name>getNumOfRowsInTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name><name>nextWin</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>binarySearchForKey</name></expr></argument>,
                                             <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name> <operator>&amp;&amp;</operator> <name>pUpdatedMap</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>saveWinResultInfo</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>pResult</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>,
          <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>,
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tSimpleHashPut</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>forwardRows</name></expr></argument>,
                     <argument><expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SWinKey</name></type> <name>key</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>nextWin</name><operator>.</operator><name>skey</name></name></expr>,
        <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>groupId</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>saveOutputBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>resultRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseOutputBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>delKey</name><operator>.</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>key</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>delKey</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>prevEndPos</name> <init>= <expr><operator>(</operator><name>forwardRows</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>step</name> <operator>+</operator> <name>startPos</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>startPos</name> <operator>=</operator>
        <call><name>getNextQualifiedWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>prevEndPos</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doStreamFinalIntervalAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>               <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>          <name>maxTs</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>          <name>minTs</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"interval status %d %s"</literal></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final"</literal></expr> </then><else>: <expr><literal type="string">"interval semi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_RES_TO_RETURN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doBuildPullDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullWins</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pullIndex</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// process the rest of the data</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final"</literal></expr> </then><else>: <expr><literal type="string">"interval semi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doBuildDeleteResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>delIndex</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// process the rest of the data</comment>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final"</literal></expr> </then><else>: <expr><literal type="string">"interval semi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doBuildResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final"</literal></expr> </then><else>: <expr><literal type="string">"interval semi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>clearFunctionContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// semi interval operator clear disk buffer</comment>
      <expr_stmt><expr><call><name>clearStreamIntervalOperator</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===clear semi operator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>deleteIntervalDiscBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataMap</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>delKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamStateCommit</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doBuildDeleteResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>delIndex</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// process the rest of the data</comment>
        <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final"</literal></expr> </then><else>: <expr><literal type="string">"interval semi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>doBuildResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final"</literal></expr> </then><else>: <expr><literal type="string">"interval semi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>    <name>pUpdated</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>  <name>pUpdatedMap</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===return data:%s. recv datablock num:%"</literal> <name>PRIu64</name></expr></argument> , <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final"</literal></expr> </then><else>: <expr><literal type="string">"interval semi"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfDatapack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfDatapack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfDatapack</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final recv"</literal></expr> </then><else>: <expr><literal type="string">"interval semi recv"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>STREAM_INVERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_NORMAL</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_PULL_DATA</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_DATA</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name> <operator>||</operator>
               <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_CLEAR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>delWins</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>doDeleteWindows</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>delWins</name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type>                      <name>childIndex</name> <init>= <expr><call><name>getChildIndex</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>               <name>pChildOp</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name>childIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pChildInfo</name> <init>= <expr><name><name>pChildOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                   <name>pChildSup</name> <init>= <expr><operator>&amp;</operator><name><name>pChildOp</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doDeleteWindows</name><argument_list>(<argument><expr><name>pChildOp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pChildInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rebuildIntervalWindow</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>delWins</name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRetriveWindow</name><argument_list>(<argument><expr><name>delWins</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayAddAll</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>, <argument><expr><name>delWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>delWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>removeResults</name><argument_list>(<argument><expr><name>delWins</name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayAddAll</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>, <argument><expr><name>delWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>delWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_GET_ALL</name> <operator>&amp;&amp;</operator> <call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>getAllIntervalWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_RETRIEVE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doDeleteWindows</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_PULL_OVER</name> <operator>&amp;&amp;</operator> <call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>processPullOver</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doStreamIntervalAggImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>chIndex</name> <init>= <expr><call><name>getChildIndex</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// if chIndex + 1 - size &gt; 0, add new child</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chIndex</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pChildOp</name> <init>= <expr><call><name>createStreamFinalIntervalOperatorInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPhyNode</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pChildOp</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pTmpInfo</name> <init>= <expr><name><name>pChildOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pTmpInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pChildOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===add child, id:%d"</literal></expr></argument>, <argument><expr><name>chIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>               <name>pChildOp</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name>chIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pChInfo</name> <init>= <expr><name><name>pChildOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pChildOp</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doStreamIntervalAggImpl</name><argument_list>(<argument><expr><name>pChildOp</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>maxTs</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>maxTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxTs</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>maxTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>minTs</name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>minTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>removeDeleteResults</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>, <argument><expr><name>maxTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>minTs</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>minTs</name></name></expr></argument>, <argument><expr><name>minTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>closeStreamIntervalWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>,
                              <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataMap</name></name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>closeChildIntervalWindow</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>watermark</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIte</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pIte</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pUpdated</name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pUpdated</name></expr></argument>, <argument><expr><name>resultrowComparAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initMultiResInfoFromArrayList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>doBuildPullDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullWins</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pullIndex</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// process the rest of the data</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final"</literal></expr> </then><else>: <expr><literal type="string">"interval semi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doBuildDeleteResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>delIndex</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// process the rest of the data</comment>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final"</literal></expr> </then><else>: <expr><literal type="string">"interval semi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doBuildResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"interval final"</literal></expr> </then><else>: <expr><literal type="string">"interval semi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>getDeleteMark</name><parameter_list>(<parameter><decl><type><name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pIntervalPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>deleteMark</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEAULT_DELETE_MARK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>deleteMark</name> <init>= <expr><call><name>TMAX</name><argument_list>(<argument><expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>deleteMark</name></name></expr></argument>,<argument><expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>deleteMark</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>deleteMark</name></expr></argument>, <argument><expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>deleteMark</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createStreamFinalIntervalOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>,
                                                     <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfChild</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalPhysiNode</name><modifier>*</modifier></type>          <name>pIntervalPhyNode</name> <init>= <expr><operator>(</operator><name>SIntervalPhysiNode</name><operator>*</operator><operator>)</operator><name>pPhyNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamIntervalOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>               <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name> <operator>=</operator> <name>pTaskInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <operator>(</operator><name>SInterval</name><operator>)</operator><block>{<expr><operator>.</operator><name>interval</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>interval</name></name></expr>,
                                <expr><operator>.</operator><name>sliding</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>sliding</name></name></expr>,
                                <expr><operator>.</operator><name>intervalUnit</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>,
                                <expr><operator>.</operator><name>slidingUnit</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>,
                                <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>offset</name></name></expr>,
                                <expr><operator>.</operator><name>precision</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindowAggSupp</name><operator>)</operator><block>{
      <expr><operator>.</operator><name>waterMark</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>watermark</name></name></expr>,
      <expr><operator>.</operator><name>calTrigger</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>triggerType</name></name></expr>,
      <expr><operator>.</operator><name>maxTs</name> <operator>=</operator> <name>INT64_MIN</name></expr>,
      <expr><operator>.</operator><name>minTs</name> <operator>=</operator> <name>INT64_MAX</name></expr>,
      <expr><operator>.</operator><name>deleteMark</name> <operator>=</operator> <call><name>getDeleteMark</name><argument_list>(<argument><expr><name>pIntervalPhyNode</name></expr></argument>)</argument_list></call></expr>,
      <expr><operator>.</operator><name>deleteMarkSaved</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>calTriggerSaved</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  }</block></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>!=</operator> <name>STREAM_TRIGGER_MAX_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>keyBufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfScalar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pScalarExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></argument>, <argument><expr><name>pScalarExprInfo</name></expr></argument>, <argument><expr><name>numOfScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type>   <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>keyBufSize</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initStreamFunciton</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfCols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initExecTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamStateSetNumber</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initResultRowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfChild</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfChild</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfChild</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pChildOp</name> <init>= <expr><call><name>createStreamFinalIntervalOperatorInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pChildOp</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pChInfo</name> <init>= <expr><name><name>pChildOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pChildOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>streamStateSetNumber</name><argument_list>(<argument><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPhyNode</name></name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"StreamFinalIntervalOperator"</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// semi interval operator does not catch result</comment>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"StreamSemiIntervalOperator"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>currentPageId</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>numOfChild</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullWins</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPullWindowInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pullIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataMap</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_RETRIEVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ignoreExpiredData</name></name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>igExpired</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_DELETE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>delIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>delKey</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>delKey</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfDatapack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>=</operator> <name><name>pPhyNode</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>blocking</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_NOT_OPENED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>doStreamFinalIntervalAgg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyStreamFinalIntervalOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>initIntervalDownStream</name><argument_list>(<argument><expr><name>downstream</name></expr></argument>, <argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>destroyStreamFinalIntervalOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyStreamAggSupporter</name><parameter_list>(<parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tSimpleHashCleanup</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pResultRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyDiskbasedBuf</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pResultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pScanBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pDummyCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyStreamSessionAggOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SStreamSessionAggOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyStreamAggSupporter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pChild</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>destroyOperatorInfo</name><argument_list>(<argument><expr><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pWinBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>initBasicInfoEx</name><parameter_list>(<parameter><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type> <name>pBasicInfo</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>, <parameter><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>,
                        <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResultBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><name>pBasicInfo</name></expr></argument>, <argument><expr><name>pResultBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initExprSupp</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initStreamFunciton</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>saveHandle</name><operator>.</operator><name>pBuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfCols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initDummyFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDummy</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nums</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pDummy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name> <operator>=</operator> <name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initDownStream</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tsColIndex</name></decl></parameter>,
                    <parameter><decl><type><name>STimeWindowAggSupp</name><modifier>*</modifier></type> <name>pTwSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>downstream</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_PARTITION</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><name><name>downstream</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>tsColIndex</name></name> <operator>=</operator> <name>tsColIndex</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>downstream</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>!=</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>initDownStream</name><argument_list>(<argument><expr><name><name>downstream</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>tsColIndex</name></expr></argument>, <argument><expr><name>pTwSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><name><name>downstream</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>windowSup</name></name> <operator>=</operator> <operator>(</operator><name>SWindowSupporter</name><operator>)</operator><block>{<expr><operator>.</operator><name>pStreamAggSup</name> <operator>=</operator> <name>pAggSup</name></expr>, <expr><operator>.</operator><name>gap</name> <operator>=</operator> <name><name>pAggSup</name><operator>-&gt;</operator><name>gap</name></name></expr>, <expr><operator>.</operator><name>parentType</name> <operator>=</operator> <name>type</name></expr>}</block></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pScanInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name> <operator>=</operator> <call><name>updateInfoInit</name><argument_list>(<argument><expr><literal type="number">60000</literal></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name><name>pTwSup</name><operator>-&gt;</operator><name>waterMark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>twAggSup</name></name> <operator>=</operator> <operator>*</operator><name>pTwSup</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>initStreamAggSupporter</name><parameter_list>(<parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>gap</name></decl></parameter>,
                               <parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keySize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>keyType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>resultRowSize</name></name> <operator>=</operator> <name>keySize</name> <operator>+</operator> <call><name>getResultRowSize</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pScanBlock</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>gap</name></name> <operator>=</operator> <name>gap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>stateKeySize</name></name> <operator>=</operator> <name>keySize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>stateKeyType</name></name> <operator>=</operator> <name>keyType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pDummyCtx</name></name> <operator>=</operator> <operator>(</operator><name>SqlFunctionCtx</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SqlFunctionCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSup</name><operator>-&gt;</operator><name>pDummyCtx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initDummyFunction</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pDummyCtx</name></name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pState</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>pSup</name><operator>-&gt;</operator><name>pState</name></name><operator>)</operator> <operator>=</operator> <operator>*</operator><name>pState</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamStateSetNumber</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pResultRows</name></name> <operator>=</operator> <call><name>tSimpleHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>pageSize</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pageSize</name> <operator>&lt;</operator> <name><name>pSup</name><operator>-&gt;</operator><name>resultRowSize</name></name> <operator>*</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pageSize</name> <operator>&lt;&lt;=</operator> <literal type="number">1u</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <comment type="line">// at least four pages need to be in buffer</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufSize</name> <init>= <expr><literal type="number">4096</literal> <operator>*</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>bufSize</name> <operator>&lt;=</operator> <name>pageSize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bufSize</name> <operator>=</operator> <name>pageSize</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osTempSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_AVAIL_DISK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Init stream agg supporter failed since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createDiskbasedBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSup</name><operator>-&gt;</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>saveHandle</name><operator>.</operator><name>pBuf</name></name> <operator>=</operator> <name><name>pSup</name><operator>-&gt;</operator><name>pResultBuf</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isInTimeWindow</name><parameter_list>(<parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>gap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>+</operator> <name>gap</name> <operator>&gt;=</operator> <name><name>pWin</name><operator>-&gt;</operator><name>skey</name></name> <operator>&amp;&amp;</operator> <name>ts</name> <operator>-</operator> <name>gap</name> <operator>&lt;=</operator> <name><name>pWin</name><operator>-&gt;</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isInWindow</name><parameter_list>(<parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pWinInfo</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>gap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>isInTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getCurSessionWindow</name><parameter_list>(<parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>startTs</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>endTs</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>,
                         <parameter><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pKey</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name>startTs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pKey</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name>endTs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pKey</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>streamStateSessionGetKeyByRange</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_SESSION_WIN_KEY_INVALID</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isInvalidSessionWin</name><parameter_list>(<parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pWinInfo</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>setSessionOutputBuf</name><parameter_list>(<parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>startTs</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>endTs</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>,
                         <parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pCurWin</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name>startTs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name>endTs</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><name><name>pAggSup</name><operator>-&gt;</operator><name>resultRowSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>streamStateSessionAddIfNotExist</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>gap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCurWin</name><operator>-&gt;</operator><name>pOutputBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>isOutput</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name>startTs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name>endTs</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getSessionWinBuf</name><parameter_list>(<parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>, <parameter><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>, <parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pWinInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWinInfo</name><operator>-&gt;</operator><name>pOutputBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>streamStateCurNext</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>saveDeleteInfo</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pWins</name></decl></parameter>, <parameter><decl><type><name>SSessionKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// key.win.ekey = key.win.skey;</comment>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>saveDeleteRes</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStDelete</name></decl></parameter>, <parameter><decl><type><name>SSessionKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashPut</name><argument_list>(<argument><expr><name>pStDelete</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>removeSessionResult</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pHashMap</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pResMap</name></decl></parameter>, <parameter><decl><type><name>SSessionKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashRemove</name><argument_list>(<argument><expr><name>pHashMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashRemove</name><argument_list>(<argument><expr><name>pResMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getSessionHashKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSessionKey</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>pHashKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pHashKey</name> <operator>=</operator> <operator>*</operator><name>pKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashKey</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>removeSessionResults</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pHashMap</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pWins</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tSimpleHashGetSize</name><argument_list>(<argument><expr><name>pHashMap</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>pWin</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pWin</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SSessionKey</name></type> <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getSessionHashKey</name><argument_list>(<argument><expr><name>pWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tSimpleHashRemove</name><argument_list>(<argument><expr><name>pHashMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>updateSessionWindowInfo</name><parameter_list>(<parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pWinInfo</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>pStartTs</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>pEndTs</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>,
                                <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>gap</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pResultRows</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStUpdated</name></decl></parameter>,
                                <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStDeleted</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isInWindow</name><argument_list>(<argument><expr><name>pWinInfo</name></expr></argument>, <argument><expr><name><name>pStartTs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>pEndTs</name> <operator>||</operator> <operator>!</operator><call><name>isInWindow</name><argument_list>(<argument><expr><name>pWinInfo</name></expr></argument>, <argument><expr><name><name>pEndTs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>i</name> <operator>-</operator> <name>start</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pStartTs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pStDeleted</name> <operator>&amp;&amp;</operator> <name><name>pWinInfo</name><operator>-&gt;</operator><name>isOutput</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>saveDeleteRes</name><argument_list>(<argument><expr><name>pStDeleted</name></expr></argument>, <argument><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>removeSessionResult</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>pResultRows</name></expr></argument>, <argument><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>pStartTs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pStartTs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pEndTs</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pEndTs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>rows</name> <operator>-</operator> <name>start</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initSessionOutputBuf</name><parameter_list>(<parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pWinInfo</name></decl></parameter>, <parameter><decl><type><name>SResultRow</name><modifier>*</modifier><modifier>*</modifier></type> <name>pResult</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>,
                                    <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>rowEntryInfoOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pResult</name> <operator>=</operator> <operator>(</operator><name>SResultRow</name><operator>*</operator><operator>)</operator><name><name>pWinInfo</name><operator>-&gt;</operator><name>pOutputBuf</name></name></expr>;</expr_stmt>
  <comment type="line">// set time window for current result</comment>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pResult</name><operator>)</operator><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setResultRowInitCtx</name><argument_list>(<argument><expr><operator>*</operator><name>pResult</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name>rowEntryInfoOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doOneWindowAggImpl</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTimeWindowData</name></decl></parameter>, <parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pCurWin</name></decl></parameter>, <parameter><decl><type><name>SResultRow</name><modifier>*</modifier><modifier>*</modifier></type> <name>pResult</name></decl></parameter>,
                                  <parameter><decl><type><name>int32_t</name></type> <name>startIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>winRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOutput</name></decl></parameter>,
                                  <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>     <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>initSessionOutputBuf</name><argument_list>(<argument><expr><name>pCurWin</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>pResult</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><name>pTimeWindowData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>pTimeWindowData</name></expr></argument>, <argument><expr><name>startIndex</name></expr></argument>, <argument><expr><name>winRows</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>numOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>doDeleteSessionWindow</name><parameter_list>(<parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>, <parameter><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>streamStateSessionDel</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSessionKey</name></type> <name>hashKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getSessionHashKey</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hashKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashRemove</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hashKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setSessionWinOutputInfo</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStUpdated</name></decl></parameter>, <parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pWinInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><call><name>tSimpleHashGet</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVal</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pWin</name> <init>= <expr><name>pVal</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>isOutput</name></name> <operator>=</operator> <name><name>pWin</name><operator>-&gt;</operator><name>isOutput</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>getNextSessionWinInfo</name><parameter_list>(<parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStUpdated</name></decl></parameter>, <parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pCurWin</name></decl></parameter>,
                                       <parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pNextWin</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateSessionSeekKeyNext</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pNextWin</name><operator>-&gt;</operator><name>isOutput</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setSessionWinOutputInfo</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>pNextWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pNextWin</name><operator>-&gt;</operator><name>sessionWin</name></name> <operator>=</operator> <name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNextWin</name><operator>-&gt;</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNextWin</name><operator>-&gt;</operator><name>pOutputBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_SESSION_WIN_INVALID</name><argument_list>(<argument><expr><operator>*</operator><name>pNextWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compactSessionWindow</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pCurWin</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStUpdated</name></decl></parameter>,
                                 <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStDeleted</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                     <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>                 <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type>                    <name>pCurResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                        <name>numOfOutput</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type>           <name>pAggSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initSessionOutputBuf</name><argument_list>(<argument><expr><name>pCurWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCurResult</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Just look for the window behind StartIndex</comment>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SResultWindowInfo</name></type> <name>winInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type>  <name>pCur</name> <init>= <expr><call><name>getNextSessionWinInfo</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>pCurWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_SESSION_WIN</name><argument_list>(<argument><expr><name>winInfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isInWindow</name><argument_list>(<argument><expr><name>pCurWin</name></expr></argument>, <argument><expr><name><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>gap</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pWinResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>initSessionOutputBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pWinResult</name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pDummyCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCurWin</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>compactFunctions</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pDummyCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tSimpleHashRemove</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>winInfo</name><operator>.</operator><name>isOutput</name></name> <operator>&amp;&amp;</operator> <name>pStDeleted</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>saveDeleteRes</name><argument_list>(<argument><expr><name>pStDeleted</name></expr></argument>, <argument><expr><name><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>removeSessionResult</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><name><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doDeleteSessionWindow</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>saveSessionOutputBuf</name><parameter_list>(<parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>, <parameter><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pWinInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>saveSessionDiscBuf</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>pOutputBuf</name></name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>resultRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doStreamSessionAggImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSDataBlock</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStUpdated</name></decl></parameter>,
                                   <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStDeleted</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>hasEndTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>                 <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                        <name>numOfOutput</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>                       <name>groupId</name> <init>= <expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>                        <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type>                    <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                        <name>rows</name> <init>= <expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                        <name>winRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>startTsCols</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pStartTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndTsCol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasEndTs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pEndTsCol</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>endTsIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pEndTsCol</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>               <name>endTsCols</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pEndTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>ignoreExpiredData</name></name> <operator>&amp;&amp;</operator> <call><name>isOverdue</name><argument_list>(<argument><expr><name><name>endTsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SResultWindowInfo</name></type> <name>winInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setSessionOutputBuf</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><name><name>startTsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>endTsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSessionWinOutputInfo</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>winRows</name> <operator>=</operator> <call><name>updateSessionWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>, <argument><expr><name>startTsCols</name></expr></argument>, <argument><expr><name>endTsCols</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>gap</name></name></expr></argument>,
                                      <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>pStDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// coverity scan error</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>winInfo</name><operator>.</operator><name>pOutputBuf</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doOneWindowAggImpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>winRows</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>,
                              <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>compactSessionWindow</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>pStDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>saveSessionOutputBuf</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name> <operator>&amp;&amp;</operator> <name>pStUpdated</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>saveResult</name><argument_list>(<argument><expr><name>winInfo</name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSessionKey</name></type> <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>getSessionHashKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tSimpleHashPut</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SResultWindowInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>winRows</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>deleteWindow</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pWinInfos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>FDelete</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pWinInfos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pWinInfos</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name>pWinInfos</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doDeleteTimeWindows</name><parameter_list>(<parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>startDatas</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pStartTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>           <name>endDatas</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name><name>pEndTsCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGroupCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>        <name>gpDatas</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pGroupCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSessionKey</name></type> <name>curWin</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>getCurSessionWindow</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><name><name>startDatas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>endDatas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>gpDatas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_INVALID_SESSION_WIN_KEY</name><argument_list>(<argument><expr><name>curWin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>doDeleteSessionWindow</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>saveDeleteInfo</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>curWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>sessionKeyCompareAsc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pKey1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pKey2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>pWin1</name> <init>= <expr><operator>(</operator><name>SSessionKey</name><operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>pWin2</name> <init>= <expr><operator>(</operator><name>SSessionKey</name><operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWin1</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&lt;</operator> <name><name>pWin2</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>copyUpdateResult</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStUpdated</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pUpdated</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pIte</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pIte</name> <operator>=</operator> <call><name>tSimpleHashIterate</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>tSimpleHashGetKey</name><argument_list>(<argument><expr><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>keyLen</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pUpdated</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pUpdated</name></expr></argument>, <argument><expr><name>sessionKeyCompareAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doBuildDeleteDataBlock</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOp</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStDeleted</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>Ite</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>tSimpleHashGetSize</name><argument_list>(<argument><expr><name>pStDeleted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>Ite</name><operator>)</operator> <operator>=</operator> <call><name>tSimpleHashIterate</name><argument_list>(<argument><expr><name>pStDeleted</name></expr></argument>, <argument><expr><operator>*</operator><name>Ite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SSessionKey</name><modifier>*</modifier></type>     <name>res</name> <init>= <expr><call><name>tSimpleHashGetKey</name><argument_list>(<argument><expr><operator>*</operator><name>Ite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pStartTsCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pEndTsCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pUidCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGpCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pGpCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalStCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCalStCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCalEdCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCalEdCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTableCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>TABLE_NAME_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>tbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamStateGetParName</name><argument_list>(<argument><expr><name><name>pOp</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tbname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pTableCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>parTbName</name><index>[<expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>TSDB_TABLE_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>parTbName</name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parTbName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pTableCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>parTbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>Ite</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tSimpleHashClear</name><argument_list>(<argument><expr><name>pStDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebuildSessionWindow</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pWinArray</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStUpdated</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                     <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>                 <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                        <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pWinArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type>           <name>pAggSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                        <name>numOfOutput</name> <init>= <expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                        <name>numOfChildren</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSessionKey</name><modifier>*</modifier></type>      <name>pWinKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pWinArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>           <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SResultWindowInfo</name></type> <name>parentWin</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfChildren</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>                 <name>pChild</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pChInfo</name> <init>= <expr><name><name>pChild</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type>           <name>pChAggSup</name> <init>= <expr><operator>&amp;</operator><name><name>pChInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSessionKey</name></type>                    <name>chWinKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>getSessionHashKey</name><argument_list>(<argument><expr><name>pWinKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chWinKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateSessionSeekKeyCurrentNext</name><argument_list>(<argument><expr><name><name>pChAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chWinKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type>      <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type>      <name>pChResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SResultWindowInfo</name></type> <name>childWin</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>childWin</name><operator>.</operator><name>sessionWin</name></name> <operator>=</operator> <operator>*</operator><name>pWinKey</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getSessionWinBuf</name><argument_list>(<argument><expr><name>pChAggSup</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>childWin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name> <operator>&amp;&amp;</operator> <name><name>pWinKey</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <name><name>childWin</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&amp;&amp;</operator>
            <name><name>childWin</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&lt;=</operator> <name><name>pWinKey</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setSessionOutputBuf</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><name><name>pWinKey</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pWinKey</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pWinKey</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parentWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initSessionOutputBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parentWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parentWin</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>initSessionOutputBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>childWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pChResult</name></expr></argument>, <argument><expr><name><name>pChild</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>,
                               <argument><expr><name><name>pChild</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>compactFunctions</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pChild</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>compactSessionWindow</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parentWin</name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>saveResult</name><argument_list>(<argument><expr><name>parentWin</name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>saveSessionOutputBuf</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parentWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>closeSessionWindow</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pHashMap</name></decl></parameter>, <parameter><decl><type><name>STimeWindowAggSupp</name><modifier>*</modifier></type> <name>pTwSup</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pClosed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pIte</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pIte</name> <operator>=</operator> <call><name>tSimpleHashIterate</name><argument_list>(<argument><expr><name>pHashMap</name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pWinInfo</name> <init>= <expr><name>pIte</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isCloseWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWinInfo</name><operator>-&gt;</operator><name>sessionWin</name><operator>.</operator><name>win</name></name></expr></argument>, <argument><expr><name>pTwSup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTwSup</name><operator>-&gt;</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name> <operator>&amp;&amp;</operator> <name>pClosed</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>saveResult</name><argument_list>(<argument><expr><operator>*</operator><name>pWinInfo</name></expr></argument>, <argument><expr><name>pClosed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>tSimpleHashGetKey</name><argument_list>(<argument><expr><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tSimpleHashIterateRemove</name><argument_list>(<argument><expr><name>pHashMap</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>closeChildSessionWindow</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>maxTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>                 <name>pChildOp</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pChInfo</name> <init>= <expr><name><name>pChildOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>, <argument><expr><name>maxTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>closeSessionWindow</name><argument_list>(<argument><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>streamAggSup</name><operator>.</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pChInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getAllSessionWindow</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pHashMap</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStUpdated</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pIte</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pIte</name> <operator>=</operator> <call><name>tSimpleHashIterate</name><argument_list>(<argument><expr><name>pHashMap</name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SResultWindowInfo</name><modifier>*</modifier></type> <name>pWinInfo</name> <init>= <expr><name>pIte</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>saveResult</name><argument_list>(<argument><expr><operator>*</operator><name>pWinInfo</name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copyDeleteWindowInfo</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pResWins</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStDeleted</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pResWins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSessionKey</name><modifier>*</modifier></type> <name>pWinKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pResWins</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pWinKey</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SSessionKey</name></type> <name>winInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getSessionHashKey</name><argument_list>(<argument><expr><name>pWinKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tSimpleHashPut</name><argument_list>(<argument><expr><name>pStDeleted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initGroupResInfoFromArrayList</name><parameter_list>(<parameter><decl><type><name>SGroupResInfo</name><modifier>*</modifier></type> <name>pGroupResInfo</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArrayList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name> <operator>=</operator> <name>pArrayList</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;=</operator> <call><name>getNumOfTotalRes</name><argument_list>(<argument><expr><name>pGroupResInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doBuildSessionResult</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SStreamState</name><modifier>*</modifier></type> <name>pState</name></decl></parameter>, <parameter><decl><type><name>SGroupResInfo</name><modifier>*</modifier></type> <name>pGroupResInfo</name></decl></parameter>,
                          <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// set output datablock version</comment>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasRemainResults</name><argument_list>(<argument><expr><name>pGroupResInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// clear the existed group id</comment>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>buildSessionResultDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pState</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pGroupResInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doStreamSessionAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                     <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type>                <name>pBInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>                          <name>maxTs</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type>           <name>pAggSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_RES_TO_RETURN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doBuildDeleteDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pDelIterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"final session"</literal></expr> </then><else>: <expr><literal type="string">"single session"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>doBuildSessionResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"final session"</literal></expr> </then><else>: <expr><literal type="string">"single session"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>_hash_fn_t</name></type>     <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSHashObj</name><modifier>*</modifier></type>     <name>pStUpdated</name> <init>= <expr><call><name>tSimpleHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pUpdated</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// SResKeyPos</comment>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"final session recv"</literal></expr> </then><else>: <expr><literal type="string">"single session recv"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_DATA</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name> <operator>||</operator>
        <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_CLEAR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pWins</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// gap must be 0</comment>
      <expr_stmt><expr><call><name>doDeleteTimeWindows</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>removeSessionResults</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type>                        <name>childIndex</name> <init>= <expr><call><name>getChildIndex</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>                 <name>pChildOp</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name>childIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pChildInfo</name> <init>= <expr><name><name>pChildOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// gap must be 0</comment>
        <expr_stmt><expr><call><name>doDeleteTimeWindows</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pChildInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rebuildSessionWindow</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pWins</name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>copyDeleteWindowInfo</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_GET_ALL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>getAllSessionWindow</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doStreamSessionAggImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name></expr></argument>, <argument><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>chIndex</name> <init>= <expr><call><name>getChildIndex</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// if chIndex + 1 - size &gt; 0, add new child</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chIndex</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pChildOp</name> <init>=
            <expr><call><name>createStreamFinalSessionAggOperatorInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPhyNode</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pChildOp</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pChildOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pChildOp</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name>chIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pChildOp</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doStreamSessionAggImpl</name><argument_list>(<argument><expr><name>pChildOp</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>maxTs</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>maxTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxTs</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>maxTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>watermark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>, <argument><expr><name>maxTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// restore the value</comment>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>closeSessionWindow</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closeChildSessionWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>copyUpdateResult</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>removeSessionResults</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashCleanup</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initGroupResInfoFromArrayList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  char* pBuf = streamStateSessionDump(pAggSup-&gt;pState);
  qDebug("===stream===final session%s", pBuf);
  taosMemoryFree(pBuf);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>doBuildDeleteDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pDelIterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"final session"</literal></expr> </then><else>: <expr><literal type="string">"single session"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doBuildSessionResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"final session"</literal></expr> </then><else>: <expr><literal type="string">"single session"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createStreamSessionAggOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>,
                                                  <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSessionWinodwPhysiNode</name><modifier>*</modifier></type>       <name>pSessionNode</name> <init>= <expr><operator>(</operator><name>SSessionWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pPhyNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                        <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                        <name>code</name> <init>= <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamSessionAggOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>                 <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name> <operator>=</operator> <name>pTaskInfo</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfScalar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pScalarExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></argument>, <argument><expr><name>pScalarExprInfo</name></expr></argument>, <argument><expr><name>numOfScalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type>   <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initBasicInfoEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initStreamAggSupporter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name><name>pSessionNode</name><operator>-&gt;</operator><name>gap</name></name></expr></argument>,
                                <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindowAggSupp</name><operator>)</operator><block>{
      <expr><operator>.</operator><name>waterMark</name> <operator>=</operator> <name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>watermark</name></name></expr>,
      <expr><operator>.</operator><name>calTrigger</name> <operator>=</operator> <name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>triggerType</name></name></expr>,
      <expr><operator>.</operator><name>maxTs</name> <operator>=</operator> <name>INT64_MIN</name></expr>,
      <expr><operator>.</operator><name>minTs</name> <operator>=</operator> <name>INT64_MAX</name></expr>,
  }</block></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initExecTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTsEnd</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>endTsIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTsEnd</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <name>pResBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name> <operator>=</operator> <call><name>tSimpleHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelIterator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_DELETE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPhyNode</name></name> <operator>=</operator> <name>pPhyNode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ignoreExpiredData</name></name> <operator>=</operator> <name><name>pSessionNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>igExpired</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"StreamSessionWindowAggOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SESSION</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                  <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doStreamSessionAgg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyStreamSessionAggOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>downstream</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>initDownStream</name><argument_list>(<argument><expr><name>downstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyStreamSessionAggOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearStreamSessionOperator</name><parameter_list>(<parameter><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tSimpleHashClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name><operator>.</operator><name>pResultRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamStateSessionClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name><operator>.</operator><name>pState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doStreamSessionSemiAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type>                <name>pBInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>                          <name>maxTs</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                     <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type>           <name>pAggSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <block>{<block_content>
    <expr_stmt><expr><call><name>doBuildSessionResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="string">"semi session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doBuildDeleteDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pDelIterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><literal type="string">"semi session delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_RES_TO_RETURN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>clearFunctionContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// semi interval operator clear disk buffer</comment>
      <expr_stmt><expr><call><name>clearStreamSessionOperator</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>_hash_fn_t</name></type>     <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSHashObj</name><modifier>*</modifier></type>     <name>pStUpdated</name> <init>= <expr><call><name>tSimpleHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pUpdated</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>clearSpecialDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="string">"semi session recv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_DATA</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name> <operator>||</operator>
        <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_CLEAR</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// gap must be 0</comment>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pWins</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>doDeleteTimeWindows</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>removeSessionResults</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyDeleteWindowInfo</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_GET_ALL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>getAllSessionWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name><operator>.</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doStreamSessionAggImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxTs</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>, <argument><expr><name>maxTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>watermark</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>copyUpdateResult</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>removeSessionResults</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashCleanup</name><argument_list>(<argument><expr><name>pStUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initGroupResInfoFromArrayList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  char* pBuf = streamStateSessionDump(pAggSup-&gt;pState);
  qDebug("===stream===semi session%s", pBuf);
  taosMemoryFree(pBuf);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>doBuildSessionResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="string">"semi session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doBuildDeleteDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pStDeleted</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pDelIterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><literal type="string">"semi session delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>clearFunctionContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// semi interval operator clear disk buffer</comment>
  <expr_stmt><expr><call><name>clearStreamSessionOperator</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createStreamFinalSessionAggOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>,
                                                       <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfChild</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name> <init>= <expr><call><name>createStreamSessionAggOperatorInfo</name><argument_list>(<argument><expr><name>downstream</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <operator>(</operator><name><name>pPhyNode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name><operator>)</operator></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>isFinal</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"StreamSessionFinalAggOperator"</literal></expr> </then><else>: <expr><literal type="string">"StreamSessionSemiAggOperator"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUpdateRes</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doStreamSessionSemiAgg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                           <argument><expr><name>destroyStreamSessionAggOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>=</operator> <name><name>pPhyNode</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfChild</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfChild</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfChild</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pChildOp</name> <init>= <expr><call><name>createStreamFinalSessionAggOperatorInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pChildOp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SStreamSessionAggOperatorInfo</name><modifier>*</modifier></type> <name>pChInfo</name> <init>= <expr><name><name>pChildOp</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>streamStateSetNumber</name><argument_list>(<argument><expr><name><name>pChInfo</name><operator>-&gt;</operator><name>streamAggSup</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pChildOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_FINAL_OP</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>numOfChild</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>=</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyStreamSessionAggOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyStreamStateOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SStreamStateAggOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyStreamAggSupporter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupGroupResInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pChild</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>destroyOperatorInfo</name><argument_list>(<argument><expr><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSeDeleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isTsInWindow</name><parameter_list>(<parameter><decl><type><name>SStateWindowInfo</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <name>ts</name> <operator>&amp;&amp;</operator> <name>ts</name> <operator>&lt;=</operator> <name><name>pWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isEqualStateKey</name><parameter_list>(<parameter><decl><type><name>SStateWindowInfo</name><modifier>*</modifier></type> <name>pWin</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pKeyData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>pKeyData</name> <operator>&amp;&amp;</operator> <call><name>compareVal</name><argument_list>(<argument><expr><name>pKeyData</name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>pStateKey</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>compareStateKey</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateKeys</name><modifier>*</modifier></type> <name>stateKey</name> <init>= <expr><operator>(</operator><name>SStateKeys</name><operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>stateKey</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStateKeys</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><call><name>compareVal</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stateKey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setStateOutputBuf</name><parameter_list>(<parameter><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pKeyData</name></decl></parameter>,
                       <parameter><decl><type><name>SStateWindowInfo</name><modifier>*</modifier></type> <name>pCurWin</name></decl></parameter>, <parameter><decl><type><name>SStateWindowInfo</name><modifier>*</modifier></type> <name>pNextWin</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><name><name>pAggSup</name><operator>-&gt;</operator><name>resultRowSize</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>streamStateStateAddIfNotExist</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCurWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><name>pKeyData</name></expr></argument>, <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>stateKeySize</name></name></expr></argument>,
                                    <argument><expr><name>compareStateKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCurWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>pOutputBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>pStateKey</name></name> <operator>=</operator>
      <operator>(</operator><name>SStateKeys</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pCurWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>pOutputBuf</name></name> <operator>+</operator> <operator>(</operator><name><name>pAggSup</name><operator>-&gt;</operator><name>resultRowSize</name></name> <operator>-</operator> <name><name>pAggSup</name><operator>-&gt;</operator><name>stateKeySize</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>pStateKey</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pAggSup</name><operator>-&gt;</operator><name>stateKeySize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStateKeys</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>pStateKey</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pAggSup</name><operator>-&gt;</operator><name>stateKeyType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>pStateKey</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pCurWin</name><operator>-&gt;</operator><name>pStateKey</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStateKeys</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>pStateKey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>isOutput</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>stateKeyType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>varDataCopy</name><argument_list>(<argument><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>pStateKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>pKeyData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>pStateKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>pKeyData</name></expr></argument>, <argument><expr><name><name>pCurWin</name><operator>-&gt;</operator><name>pStateKey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pNextWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name></name> <operator>=</operator> <name><name>pCurWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNextWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>pOutputBuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SStreamStateCur</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><call><name>streamStateSessionSeekKeyNext</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCurWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamStateSessionGetKVByCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNextWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_SESSION_WIN_INVALID</name><argument_list>(<argument><expr><name><name>pNextWin</name><operator>-&gt;</operator><name>winInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>streamStateFreeCur</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>updateStateWindowInfo</name><parameter_list>(<parameter><decl><type><name>SStateWindowInfo</name><modifier>*</modifier></type> <name>pWinInfo</name></decl></parameter>, <parameter><decl><type><name>SStateWindowInfo</name><modifier>*</modifier></type> <name>pNextWin</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>pTs</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>,
                              <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pKeyCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>allEqual</name></decl></parameter>,
                              <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pResultRows</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pSeUpdated</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pSeDeleted</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>allEqual</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pKeyData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pKeyCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isTsInWindow</name><argument_list>(<argument><expr><name>pWinInfo</name></expr></argument>, <argument><expr><name><name>pTs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>isEqualStateKey</name><argument_list>(<argument><expr><name>pWinInfo</name></expr></argument>, <argument><expr><name>pKeyData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VALID_SESSION_WIN</name><argument_list>(<argument><expr><name><name>pNextWin</name><operator>-&gt;</operator><name>winInfo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <comment type="line">// ts belongs to the next window</comment>
          <if_stmt><if>if <condition>(<expr><name><name>pTs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>pNextWin</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>i</name> <operator>-</operator> <name>start</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>i</name> <operator>-</operator> <name>start</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pTs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pSeDeleted</name> <operator>&amp;&amp;</operator> <name><name>pWinInfo</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>isOutput</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>saveDeleteRes</name><argument_list>(<argument><expr><name>pSeDeleted</name></expr></argument>, <argument><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>removeSessionResult</name><argument_list>(<argument><expr><name>pSeUpdated</name></expr></argument>, <argument><expr><name>pResultRows</name></expr></argument>, <argument><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>pTs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pWinInfo</name><operator>-&gt;</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pTs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEqualStateKey</name><argument_list>(<argument><expr><name>pWinInfo</name></expr></argument>, <argument><expr><name>pKeyData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>allEqual</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>rows</name> <operator>-</operator> <name>start</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doStreamStateAggImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSDataBlock</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pSeUpdated</name></decl></parameter>,
                                 <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pStDeleted</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>               <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamStateAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                      <name>numOfOutput</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>                     <name>groupId</name> <init>= <expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>                      <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>                       <name>tsCols</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type>                  <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                      <name>winRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColDataInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tsCols</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColDataInfo</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SStreamAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>rows</name> <init>= <expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pScanBlock</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pKeyColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateCol</name><operator>.</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>winRows</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>ignoreExpiredData</name></name> <operator>&amp;&amp;</operator> <call><name>isOverdue</name><argument_list>(<argument><expr><name><name>tsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>pKeyData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pKeyColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>winIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>             <name>allEqual</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SStateWindowInfo</name></type> <name>curWin</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SStateWindowInfo</name></type> <name>nextWin</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setStateOutputBuf</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><name><name>tsCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>pKeyData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSessionWinOutputInfo</name><argument_list>(<argument><expr><name>pSeUpdated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curWin</name><operator>.</operator><name>winInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>winRows</name> <operator>=</operator> <call><name>updateStateWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>pKeyColInfo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allEqual</name></expr></argument>,
                                    <argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><name>pSeUpdated</name></expr></argument>, <argument><expr><name>pStDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allEqual</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>appendOneRowToStreamSpecialBlock</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pScanBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curWin</name><operator>.</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>,
                                       <argument><expr><operator>&amp;</operator><name><name>curWin</name><operator>.</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name><operator>.</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tSimpleHashRemove</name><argument_list>(<argument><expr><name>pSeUpdated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curWin</name><operator>.</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doDeleteSessionWindow</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curWin</name><operator>.</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>releaseOutputBuf</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>SResultRow</name><operator>*</operator><operator>)</operator><name><name>curWin</name><operator>.</operator><name>winInfo</name><operator>.</operator><name>pOutputBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doOneWindowAggImpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curWin</name><operator>.</operator><name>winInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>winRows</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>,
                              <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>saveSessionOutputBuf</name><argument_list>(<argument><expr><name>pAggSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curWin</name><operator>.</operator><name>winInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_AT_ONCE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>saveResult</name><argument_list>(<argument><expr><name><name>curWin</name><operator>.</operator><name>winInfo</name></name></expr></argument>, <argument><expr><name>pSeUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>calTrigger</name></name> <operator>==</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSessionKey</name></type> <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>getSessionHashKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curWin</name><operator>.</operator><name>winInfo</name><operator>.</operator><name>sessionWin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tSimpleHashPut</name><argument_list>(<argument><expr><name><name>pAggSup</name><operator>-&gt;</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curWin</name><operator>.</operator><name>winInfo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SResultWindowInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doStreamStateAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                   <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamStateAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type>              <name>pBInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>                      <name>maxTs</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_RES_TO_RETURN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doBuildDeleteDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSeDeleted</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pDelIterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><literal type="string">"single state delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doBuildSessionResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="string">"single state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>_hash_fn_t</name></type>     <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSHashObj</name><modifier>*</modifier></type>     <name>pSeUpdated</name> <init>= <expr><call><name>tSimpleHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pUpdated</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="string">"single state recv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_DATA</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name> <operator>||</operator>
        <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_CLEAR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pWins</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSessionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>doDeleteTimeWindows</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>removeSessionResults</name><argument_list>(<argument><expr><name>pSeUpdated</name></expr></argument>, <argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyDeleteWindowInfo</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSeDeleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pWins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_GET_ALL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>getAllSessionWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name><operator>.</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><name>pSeUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doStreamStateAggImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pSeUpdated</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSeDeleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxTs</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>maxTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>, <argument><expr><name>maxTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// restore the value</comment>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>closeSessionWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name><operator>.</operator><name>pResultRows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>, <argument><expr><name>pSeUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>copyUpdateResult</name><argument_list>(<argument><expr><name>pSeUpdated</name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>removeSessionResults</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSeDeleted</name></name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSimpleHashCleanup</name><argument_list>(<argument><expr><name>pSeUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initGroupResInfoFromArrayList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  char* pBuf = streamStateSessionDump(pInfo-&gt;streamAggSup.pState);
  qDebug("===stream===final session%s", pBuf);
  taosMemoryFree(pBuf);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>doBuildDeleteDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSeDeleted</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pDelIterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><literal type="string">"single state delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doBuildSessionResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="string">"single state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pBInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createStreamStateAggOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>,
                                                <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamStateWinodwPhysiNode</name><modifier>*</modifier></type> <name>pStateNode</name> <init>= <expr><operator>(</operator><name>SStreamStateWinodwPhysiNode</name><operator>*</operator><operator>)</operator><name>pPhyNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                      <name>tsSlotId</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type>                 <name>pColNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><name><name>pStateNode</name><operator>-&gt;</operator><name>pStateKey</name></name><operator>)</operator><operator>-&gt;</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                      <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStreamStateAggOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamStateAggOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>               <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stateCol</name></name> <operator>=</operator> <call><name>extractColumnFromColumnNode</name><argument_list>(<argument><expr><name>pColNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfScalar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pScalarExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></argument>, <argument><expr><name>pScalarExprInfo</name></expr></argument>, <argument><expr><name>numOfScalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindowAggSupp</name><operator>)</operator><block>{
      <expr><operator>.</operator><name>waterMark</name> <operator>=</operator> <name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>watermark</name></name></expr>,
      <expr><operator>.</operator><name>calTrigger</name> <operator>=</operator> <name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>triggerType</name></name></expr>,
      <expr><operator>.</operator><name>maxTs</name> <operator>=</operator> <name>INT64_MIN</name></expr>,
      <expr><operator>.</operator><name>minTs</name> <operator>=</operator> <name>INT64_MAX</name></expr>,
  }</block></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initExecTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>   <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type>   <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initBasicInfoEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>keySize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStateKeys</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>type</name> <init>= <expr><name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initStreamAggSupporter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>,
                                <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name> <operator>=</operator> <name>tsSlotId</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSeDeleted</name></name> <operator>=</operator> <call><name>tSimpleHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelIterator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_DELETE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ignoreExpiredData</name></name> <operator>=</operator> <name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>igExpired</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"StreamStateAggOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_STATE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>,
                  <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doStreamStateAgg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyStreamStateOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initDownStream</name><argument_list>(<argument><expr><name>downstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>streamAggSup</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>operatorType</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>destroyStreamStateOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyMAIOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergeAlignedIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>miaInfo</name> <init>= <expr><operator>(</operator><name>SMergeAlignedIntervalAggOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>destroyIntervalOperatorInfo</name><argument_list>(<argument><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SResultRow</name><modifier>*</modifier></type> <name>doSetSingleOutputTupleBuf</name><parameter_list>(<parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>, <parameter><decl><type><name>SAggSupporter</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><call><name>getNewResultRow</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSup</name><operator>-&gt;</operator><name>currentPageId</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>resultRowSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <operator>(</operator><name>SResultRowPosition</name><operator>)</operator><block>{<expr><operator>.</operator><name>pageId</name> <operator>=</operator> <name><name>pResult</name><operator>-&gt;</operator><name>pageId</name></name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pResult</name><operator>-&gt;</operator><name>offset</name></name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>pResult</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setSingleOutputTupleBuf</name><parameter_list>(<parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>SResultRow</name><modifier>*</modifier><modifier>*</modifier></type> <name>pResult</name></decl></parameter>,
                                       <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSup</name></decl></parameter>, <parameter><decl><type><name>SAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pResult</name> <operator>=</operator> <call><name>doSetSingleOutputTupleBuf</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>pAggSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set time window for current result</comment>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pResult</name><operator>)</operator><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>win</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setResultRowInitCtx</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pResult</name><operator>)</operator></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doMergeAlignedIntervalAggImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperatorInfo</name></decl></parameter>, <parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>,
                                          <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResultBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergeAlignedIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>miaInfo</name> <init>= <expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type>             <name>iaInfo</name> <init>= <expr><name><name>miaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>     <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SInterval</name><modifier>*</modifier></type>     <name>pInterval</name> <init>= <expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>startPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>tsCols</name> <init>= <expr><call><name>extractTsCol</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>iaInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>ts</name> <init>= <expr><call><name>getStartTsKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// there is an result exists</comment>
  <if_stmt><if>if <condition>(<expr><name><name>miaInfo</name><operator>-&gt;</operator><name>curTs</name></name> <operator>!=</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>!=</operator> <name><name>miaInfo</name><operator>-&gt;</operator><name>curTs</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>finalizeResultRows</name><argument_list>(<argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pResultBlock</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>resetResultRow</name><argument_list>(<argument><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>pResultRow</name></name></expr></argument>, <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>resultRowSize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SResultRow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>curTs</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>curTs</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>miaInfo</name><operator>-&gt;</operator><name>curTs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>setSingleOutputTupleBuf</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>pResultRow</name></name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name><name>miaInfo</name><operator>-&gt;</operator><name>pResultRow</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>currPos</name> <init>= <expr><name>startPos</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>currWin</name> <init>= <expr><name>win</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>++</operator><name>currPos</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>tsCols</name><index>[<expr><name>currPos</name></expr>]</index></name> <operator>==</operator> <name><name>miaInfo</name><operator>-&gt;</operator><name>curTs</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>currWin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>currPos</name> <operator>-</operator> <name>startPos</name></expr></argument>,
                     <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>finalizeResultRows</name><argument_list>(<argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pResultBlock</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>resetResultRow</name><argument_list>(<argument><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>pResultRow</name></name></expr></argument>, <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>resultRowSize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SResultRow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>curTs</name></name> <operator>=</operator> <name><name>tsCols</name><index>[<expr><name>currPos</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>currWin</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>miaInfo</name><operator>-&gt;</operator><name>curTs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>currWin</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>currWin</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>startPos</name> <operator>=</operator> <name>currPos</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setSingleOutputTupleBuf</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>pResultRow</name></name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name><name>miaInfo</name><operator>-&gt;</operator><name>pResultRow</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>curTs</name></name> <operator>=</operator> <name><name>currWin</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>currWin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>currPos</name> <operator>-</operator> <name>startPos</name></expr></argument>,
                   <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupAfterGroupResultGen</name><parameter_list>(<parameter><decl><type><name>SMergeAlignedIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pMiaInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pMiaInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>curTs</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doMergeAlignedIntervalAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMergeAlignedIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pMiaInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type>             <name>pIaInfo</name> <init>= <expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>      <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>    <name>pRes</name> <init>= <expr><name><name>pIaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pIaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>  <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>scanFlag</name> <init>= <expr><name>MAIN_SCAN</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>prefetchedBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pBlock</name> <operator>=</operator> <call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pBlock</name> <operator>=</operator> <name><name>pMiaInfo</name><operator>-&gt;</operator><name>prefetchedBlock</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>prefetchedBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// no data exists, all query processing is done</comment>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// close last unclosed time window</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>curTs</name></name> <operator>!=</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>finalizeResultRows</name><argument_list>(<argument><expr><name><name>pIaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>resetResultRow</name><argument_list>(<argument><expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>pResultRow</name></name></expr></argument>, <argument><expr><name><name>pIaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>resultRowSize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SResultRow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanupAfterGroupResultGen</name><argument_list>(<argument><expr><name>pMiaInfo</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>!=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pMiaInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>!=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// if there are unclosed time window, close it firstly.</comment>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>curTs</name></name> <operator>!=</operator> <name>INT64_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finalizeResultRows</name><argument_list>(<argument><expr><name><name>pIaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>resetResultRow</name><argument_list>(<argument><expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>pResultRow</name></name></expr></argument>, <argument><expr><name><name>pIaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>resultRowSize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SResultRow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>prefetchedBlock</name></name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanupAfterGroupResultGen</name><argument_list>(<argument><expr><name>pMiaInfo</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// continue</comment>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pMiaInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>getTableScanInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scanFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pIaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doMergeAlignedIntervalAggImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>mergeAlignedIntervalAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMergeAlignedIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pMiaInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type>             <name>iaInfo</name> <init>= <expr><name><name>pMiaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><name><name>iaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>iaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>mergeResultBlock</name></name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>threshold</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>doMergeAlignedIntervalAgg</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>doMergeAlignedIntervalAgg</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>rows</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>rows</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pRes</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createMergeAlignedIntervalOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SMergeAlignedIntervalPhysiNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>,
                                                      <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergeAlignedIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>miaInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMergeAlignedIntervalAggOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>                        <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>miaInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIntervalAggOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>miaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SInterval</name></type> <name>interval</name> <init>= <expr><block>{<expr><operator>.</operator><name>interval</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>interval</name></name></expr>,
                        <expr><operator>.</operator><name>sliding</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>sliding</name></name></expr>,
                        <expr><operator>.</operator><name>intervalUnit</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>,
                        <expr><operator>.</operator><name>slidingUnit</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>,
                        <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>offset</name></name></expr>,
                        <expr><operator>.</operator><name>precision</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>iaInfo</name> <init>= <expr><name><name>miaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>curTs</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>mergeResultBlock</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>mergeDataBlock</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>keyBufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>keyBufSize</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initExecTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name> <operator>=</operator> <call><name>timeWindowinterpNeeded</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>iaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iaInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name><operator>.</operator><name>openWindow</name></name> <operator>=</operator> <call><name>tdListNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOpenWindowInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initResultRowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"TimeMergeAlignedIntervalAggOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name></expr></argument>,
                  <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>miaInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>mergeAlignedIntervalAgg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyMAIOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>destroyMAIOperatorInfo</name><argument_list>(<argument><expr><name>miaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//=====================================================================================================================</comment>
<comment type="line">// merge interval operator</comment>
<typedef>typedef <type><struct>struct <name>SMergeIntervalAggOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name></type> <name>intervalAggOperatorInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SList</name><modifier>*</modifier></type>                   <name>groupIntervals</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SListIter</name></type>                <name>groupIntervalsIter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                     <name>hasGroupId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>                 <name>groupId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>             <name>prefetchedBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                     <name>inputBlocksFinished</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMergeIntervalAggOperatorInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SGroupTimeWindow</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type>    <name>groupId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>window</name></decl>;</decl_stmt>
}</block></struct></type> <name>SGroupTimeWindow</name>;</typedef>

<function><type><name>void</name></type> <name>destroyMergeIntervalOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergeIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>miaInfo</name> <init>= <expr><operator>(</operator><name>SMergeIntervalAggOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdListFree</name><argument_list>(<argument><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>groupIntervals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyIntervalOperatorInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>finalizeWindowResult</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperatorInfo</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>tableGroupId</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>win</name></decl></parameter>,
                                    <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResultBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergeIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>miaInfo</name> <init>= <expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type>      <name>iaInfo</name> <init>= <expr><operator>&amp;</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>                 <name>pTaskInfo</name> <init>= <expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                           <name>ascScan</name> <init>= <expr><operator>(</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                     <name>pExprSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SET_RES_WINDOW_KEY</name><argument_list>(<argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name>TSDB_KEYSIZE</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SResultRowPosition</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><operator>(</operator><name>SResultRowPosition</name><operator>*</operator><operator>)</operator><call><name>tSimpleHashGet</name><argument_list>(
      <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><call><name>GET_RES_WINDOW_KEY_LEN</name><argument_list>(<argument><expr><name>TSDB_KEYSIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>p1</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  finalizeResultRows(iaInfo-&gt;aggSup.pResultBuf, p1, pResultBlock, pTaskInfo);</comment>
  <expr_stmt><expr><call><name>tSimpleHashRemove</name><argument_list>(<argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><call><name>GET_RES_WINDOW_KEY_LEN</name><argument_list>(<argument><expr><name>TSDB_KEYSIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>outputPrevIntervalResult</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperatorInfo</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>tableGroupId</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResultBlock</name></decl></parameter>,
                                        <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>newWin</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergeIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>miaInfo</name> <init>= <expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type>      <name>iaInfo</name> <init>= <expr><operator>&amp;</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                           <name>ascScan</name> <init>= <expr><operator>(</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SGroupTimeWindow</name></type> <name>groupTimeWindow</name> <init>= <expr><block>{<expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>tableGroupId</name></expr>, <expr><operator>.</operator><name>window</name> <operator>=</operator> <operator>*</operator><name>newWin</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdListAppend</name><argument_list>(<argument><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>groupIntervals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupTimeWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SListIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdListInitIter</name><argument_list>(<argument><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>groupIntervals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>TD_LIST_FORWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>listNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>listNode</name> <operator>=</operator> <call><name>tdListNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SGroupTimeWindow</name><modifier>*</modifier></type> <name>prevGrpWin</name> <init>= <expr><operator>(</operator><name>SGroupTimeWindow</name><operator>*</operator><operator>)</operator><name><name>listNode</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>prevGrpWin</name><operator>-&gt;</operator><name>groupId</name></name> <operator>!=</operator> <name>tableGroupId</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>prevWin</name> <init>= <expr><operator>&amp;</operator><name><name>prevGrpWin</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ascScan</name> <operator>&amp;&amp;</operator> <name><name>newWin</name><operator>-&gt;</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>prevWin</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>ascScan</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>newWin</name><operator>-&gt;</operator><name>skey</name></name> <operator>&lt;</operator> <name><name>prevWin</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">//      finalizeWindowResult(pOperatorInfo, tableGroupId, prevWin, pResultBlock);</comment>
      <expr_stmt><expr><call><name>tdListPopNode</name><argument_list>(<argument><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>groupIntervals</name></name></expr></argument>, <argument><expr><name>listNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doMergeIntervalAggImpl</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperatorInfo</name></decl></parameter>, <parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                                   <parameter><decl><type><name>int32_t</name></type> <name>scanFlag</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResultBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergeIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>miaInfo</name> <init>= <expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type>      <name>iaInfo</name> <init>= <expr><operator>&amp;</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>     <name>pExprSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperatorInfo</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>startPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfOutput</name> <init>= <expr><name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type>    <name>tsCols</name> <init>= <expr><call><name>extractTsCol</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>iaInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>    <name>tableGroupId</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>ascScan</name> <init>= <expr><operator>(</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>       <name>blockStartTs</name> <init>= <expr><call><name>getStartTsKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><call><name>getActiveTimeWindow</name><argument_list>(<argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>blockStartTs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>,
                                        <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>=
      <expr><call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><operator>(</operator><name>scanFlag</name> <operator>==</operator> <name>MAIN_SCAN</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>,
                             <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>ekey</name> <init>= <expr><ternary><condition><expr><name>ascScan</name></expr> ?</condition><then> <expr><name><name>win</name><operator>.</operator><name>ekey</name></name></expr> </then><else>: <expr><name><name>win</name><operator>.</operator><name>skey</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>forwardRows</name> <init>=
      <expr><call><name>getNumOfRowsInTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>, <argument><expr><name>binarySearchForKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>forwardRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// prev time window not interpolation yet.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>iaInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SResultRowPosition</name></type> <name>pos</name> <init>= <expr><call><name>addToOpenWindowList</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doInterpUnclosedTimeWindow</name><argument_list>(<argument><expr><name>pOperatorInfo</name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// restore current time window</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><operator>(</operator><name>scanFlag</name> <operator>==</operator> <name>MAIN_SCAN</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>,
                                 <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// window start key interpolation</comment>
    <expr_stmt><expr><call><name>doWindowBorderInterpolation</name><argument_list>(<argument><expr><name>iaInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>forwardRows</name></expr></argument>, <argument><expr><name>pExprSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>forwardRows</name></expr></argument>,
                   <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doCloseWindow</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>iaInfo</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// output previous interval results after this interval (&amp;win) is closed</comment>
  <expr_stmt><expr><call><name>outputPrevIntervalResult</name><argument_list>(<argument><expr><name>pOperatorInfo</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>, <argument><expr><name>pResultBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>nextWin</name> <init>= <expr><name>win</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>prevEndPos</name> <init>= <expr><name>forwardRows</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>startPos</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>startPos</name> <operator>=</operator>
        <call><name>getNextQualifiedWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>prevEndPos</name></expr></argument>, <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// null data, failed to allocate more memory buffer</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
        <expr><call><name>setTimeWindowOutputBuf</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><operator>(</operator><name>scanFlag</name> <operator>==</operator> <name>MAIN_SCAN</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResult</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>,
                               <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>rowEntryInfoOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name>pResult</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ekey</name> <operator>=</operator> <ternary><condition><expr><name>ascScan</name></expr> ?</condition><then> <expr><name><name>nextWin</name><operator>.</operator><name>ekey</name></name></expr> </then><else>: <expr><name><name>nextWin</name><operator>.</operator><name>skey</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>forwardRows</name> <operator>=</operator>
        <call><name>getNumOfRowsInTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>tsCols</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>, <argument><expr><name>binarySearchForKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// window start(end) key interpolation</comment>
    <expr_stmt><expr><call><name>doWindowBorderInterpolation</name><argument_list>(<argument><expr><name>iaInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>forwardRows</name></expr></argument>, <argument><expr><name>pExprSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>updateTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>forwardRows</name></expr></argument>,
                     <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doCloseWindow</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><name>iaInfo</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// output previous interval results after this interval (&amp;nextWin) is closed</comment>
    <expr_stmt><expr><call><name>outputPrevIntervalResult</name><argument_list>(<argument><expr><name>pOperatorInfo</name></expr></argument>, <argument><expr><name>tableGroupId</name></expr></argument>, <argument><expr><name>pResultBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>iaInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>saveDataBlockLastRow</name><argument_list>(<argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>pPrevValues</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>pInterpCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doMergeIntervalAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMergeIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>miaInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type>      <name>iaInfo</name> <init>= <expr><operator>&amp;</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                     <name>pExpSupp</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><name><name>iaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>inputBlocksFinished</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>        <name>scanFlag</name> <init>= <expr><name>MAIN_SCAN</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>miaInfo</name><operator>-&gt;</operator><name>prefetchedBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pBlock</name> <operator>=</operator> <call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pBlock</name> <operator>=</operator> <name><name>miaInfo</name><operator>-&gt;</operator><name>prefetchedBlock</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>prefetchedBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdListInitIter</name><argument_list>(<argument><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>groupIntervals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>groupIntervalsIter</name></name></expr></argument>, <argument><expr><name>TD_LIST_FORWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>inputBlocksFinished</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>hasGroupId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>hasGroupId</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>miaInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>!=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>miaInfo</name><operator>-&gt;</operator><name>prefetchedBlock</name></name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>getTableScanInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scanFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pExpSupp</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>iaInfo</name><operator>-&gt;</operator><name>inputOrder</name></name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doMergeIntervalAggImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iaInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>threshold</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>miaInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>miaInfo</name><operator>-&gt;</operator><name>inputBlocksFinished</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>listNode</name> <init>= <expr><call><name>tdListNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>miaInfo</name><operator>-&gt;</operator><name>groupIntervalsIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>listNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SGroupTimeWindow</name><modifier>*</modifier></type> <name>grpWin</name> <init>= <expr><operator>(</operator><name>SGroupTimeWindow</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>listNode</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <comment type="line">//      finalizeWindowResult(pOperator, grpWin-&gt;groupId, &amp;grpWin-&gt;window, pRes);</comment>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>grpWin</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>rows</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>rows</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pRes</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createMergeIntervalOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SMergeIntervalPhysiNode</name><modifier>*</modifier></type> <name>pIntervalPhyNode</name></decl></parameter>,
                                               <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergeIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pMergeIntervalInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMergeIntervalAggOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>                 <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMergeIntervalInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInterval</name></type> <name>interval</name> <init>= <expr><block>{<expr><operator>.</operator><name>interval</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>interval</name></name></expr>,
                        <expr><operator>.</operator><name>sliding</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>sliding</name></name></expr>,
                        <expr><operator>.</operator><name>intervalUnit</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>,
                        <expr><operator>.</operator><name>slidingUnit</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>,
                        <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>offset</name></name></expr>,
                        <expr><operator>.</operator><name>precision</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pMergeIntervalInfo</name><operator>-&gt;</operator><name>groupIntervals</name></name> <operator>=</operator> <call><name>tdListNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGroupTimeWindow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SIntervalAggOperatorInfo</name><modifier>*</modifier></type> <name>pIntervalInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pMergeIntervalInfo</name><operator>-&gt;</operator><name>intervalAggOperatorInfo</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>inputOrder</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>mergeResultBlock</name></name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>mergeDataBlock</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSupp</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>keyBufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initAggSup</name><argument_list>(<argument><expr><name>pExprSupp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>keyBufSize</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initExecTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name> <operator>=</operator> <call><name>timeWindowinterpNeeded</name><argument_list>(<argument><expr><name><name>pExprSupp</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>pIntervalInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>timeWindowInterpo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name><operator>.</operator><name>openWindow</name></name> <operator>=</operator> <call><name>tdListNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOpenWindowInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name><operator>.</operator><name>openWindow</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initResultRowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIntervalInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"TimeMergeIntervalAggOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_INTERVAL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                  <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pMergeIntervalInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doMergeIntervalAgg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyMergeIntervalOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pMergeIntervalInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyMergeIntervalOperatorInfo</name><argument_list>(<argument><expr><name>pMergeIntervalInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doStreamIntervalAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>               <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>                      <name>maxTs</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>                      <name>minTs</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>                   <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_RES_TO_RETURN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doBuildDeleteResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>delIndex</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><literal type="string">"single interval delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doBuildResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="string">"single interval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>deleteIntervalDiscBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>deleteMark</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>,
                          <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>delKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamStateCommit</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>    <name>pUpdated</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// SResKeyPos</comment>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>  <name>pUpdatedMap</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===return data:single interval. recv datablock num:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfDatapack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfDatapack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfDatapack</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="string">"single interval recv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_DATA</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name> <operator>||</operator>
        <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_CLEAR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doDeleteWindows</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_GET_ALL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>getAllIntervalWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_NORMAL</name> <operator>&amp;&amp;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// set input version</comment>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSup</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// The timewindow that overlaps the timestamps of the input pBlock need to be recalculated and return to the</comment>
    <comment type="line">// caller. Note that all the time window are not close till now.</comment>
    <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>invertible</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setInverFunction</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>maxTs</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>maxTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>minTs</name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>minTs</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>doStreamIntervalAggImpl</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>maxTs</name></name></expr></argument>, <argument><expr><name>maxTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>minTs</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>minTs</name></name></expr></argument>, <argument><expr><name>minTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>removeDeleteResults</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closeStreamIntervalWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pUpdatedMap</name></expr></argument>,
                            <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIte</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pIte</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pUpdated</name></expr></argument>, <argument><expr><name>pIte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pUpdated</name></expr></argument>, <argument><expr><name>resultrowComparAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initMultiResInfoFromArrayList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name>pUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pUpdatedMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>doBuildDeleteResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>delIndex</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><literal type="string">"single interval delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doBuildResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="string">"single interval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createStreamIntervalOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>,
                                                <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamIntervalOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamIntervalOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>               <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SStreamIntervalPhysiNode</name><modifier>*</modifier></type> <name>pIntervalPhyNode</name> <init>= <expr><operator>(</operator><name>SStreamIntervalPhysiNode</name><operator>*</operator><operator>)</operator><name>pPhyNode</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfCols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SInterval</name></type>    <name>interval</name> <init>= <expr><block>{
         <expr><operator>.</operator><name>interval</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>interval</name></name></expr>,
         <expr><operator>.</operator><name>sliding</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>sliding</name></name></expr>,
         <expr><operator>.</operator><name>intervalUnit</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>,
         <expr><operator>.</operator><name>slidingUnit</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>,
         <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>offset</name></name></expr>,
         <expr><operator>.</operator><name>precision</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STimeWindowAggSupp</name></type> <name>twAggSupp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>waterMark</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>watermark</name></name></expr>,
      <expr><operator>.</operator><name>calTrigger</name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>triggerType</name></name></expr>,
      <expr><operator>.</operator><name>maxTs</name> <operator>=</operator> <name>INT64_MIN</name></expr>,
      <expr><operator>.</operator><name>minTs</name> <operator>=</operator> <name>INT64_MAX</name></expr>,
      <expr><operator>.</operator><name>deleteMark</name> <operator>=</operator> <call><name>getDeleteMark</name><argument_list>(<argument><expr><name>pIntervalPhyNode</name></expr></argument>)</argument_list></call></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>twAggSupp</name><operator>.</operator><name>calTrigger</name></name> <operator>!=</operator> <name>STREAM_TRIGGER_MAX_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name> <operator>=</operator> <name>pTaskInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name> <operator>=</operator> <name>twAggSupp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ignoreExpiredData</name></name> <operator>=</operator> <name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>igExpired</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initStreamFunciton</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initExecTimeWindowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name><operator>.</operator><name>timeWindowData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>primaryTsIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>keyBufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initAggSup</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>keyBufSize</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfScalar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pScalarExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pIntervalPhyNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSupp</name></name></expr></argument>, <argument><expr><name>pScalarExprInfo</name></expr></argument>, <argument><expr><name>numOfScalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>invertible</name></name> <operator>=</operator> <call><name>allInvertible</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>invertible</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelWins</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWinKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>delIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_DELETE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initResultRowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamStateSetNumber</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPhyNode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// create new child</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataMap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullWins</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// SPullWindowInfo</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pullIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPullDataRes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pChildren</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>delKey</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>delKey</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfDatapack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"StreamIntervalOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>,
                  <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doStreamIntervalAgg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>destroyStreamFinalIntervalOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initIntervalDownStream</name><argument_list>(<argument><expr><name>downstream</name></expr></argument>, <argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>twAggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>destroyStreamFinalIntervalOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

</unit>
