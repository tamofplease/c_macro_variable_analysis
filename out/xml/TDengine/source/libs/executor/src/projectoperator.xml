<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/projectoperator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SProjectOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SOptrBasicInfo</name></type> <name>binfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAggSupporter</name></type>  <name>aggSup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pPseudoColInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLimitInfo</name></type>     <name>limitInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>mergeDataBlocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>   <name>pFinalRes</name></decl>;</decl_stmt>
}</block></struct></type> <name>SProjectOperatorInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SIndefOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SOptrBasicInfo</name></type> <name>binfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAggSupporter</name></type>  <name>aggSup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pPseudoColInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name></type>      <name>scalarSup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>       <name>groupId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>   <name>pNextGroupRes</name></decl>;</decl_stmt>
}</block></struct></type> <name>SIndefOperatorInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doGenerateSourceData</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doProjectOperation</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doApplyIndefinitFunction</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SArray</name><modifier>*</modifier></type>      <name>setRowTsColumnOutputInfo</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setFunctionResultOutput</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SAggSupporter</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stage</name></decl></parameter>,
                                    <parameter><decl><type><name>int32_t</name></type> <name>numOfExprs</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyProjectOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>param</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SProjectOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SProjectOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPseudoColInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyIndefinitOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndefOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SIndefOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPseudoColInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createProjectOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SProjectPhysiNode</name><modifier>*</modifier></type> <name>pProjPhyNode</name></decl></parameter>,
                                         <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SProjectOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SProjectOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>        <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name> <operator>=</operator> <name>pTaskInfo</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pProjPhyNode</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pProjPhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initLimitInfo</name><argument_list>(<argument><expr><name><name>pProjPhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>, <argument><expr><name><name>pProjPhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <name>pResBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name> <operator>=</operator> <call><name>createOneDataBlock</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>mergeDataBlocks</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_STREAM</name><operator>)</operator></expr>?</condition><then> <expr><name>false</name></expr></then><else>:<expr><name><name>pProjPhyNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr></else></ternary></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>keyBufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Make sure the size of SSDataBlock will never exceed the size of 2MB.</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>TWOMB</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>*</operator> <name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name> <operator>&gt;</operator> <name>TWOMB</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name>TWOMB</name> <operator>/</operator> <name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>keyBufSize</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setFunctionResultOutput</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pProjPhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPseudoColInfo</name></name> <operator>=</operator> <call><name>setRowTsColumnOutputInfo</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"ProjectOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_PROJECT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doProjectOperation</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>destroyProjectOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>destroyProjectOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>discardGroupDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SLimitInfo</name><modifier>*</modifier></type> <name>pLimitInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainGroupOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// it is the first group</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>==</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
      <return>return <expr><name>PROJECT_RETRIEVE_CONTINUE</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>!=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// now it is the data from a new group</comment>
      <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainGroupOffset</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>

      <comment type="line">// ignore data block in current group</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainGroupOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>PROJECT_RETRIEVE_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// set current group id of the project operator</comment>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>PROJECT_RETRIEVE_DONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setInfoForNewGroup</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SLimitInfo</name><modifier>*</modifier></type> <name>pLimitInfo</name></decl></parameter>, <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// remainGroupOffset == 0</comment>
  <comment type="line">// here check for a new group data, we need to handle the data of the previous group.</comment>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainGroupOffset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainGroupOffset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>!=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputGroups</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>&lt;=</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputGroups</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>PROJECT_RETRIEVE_DONE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// reset the value for a new group data</comment>
    <comment type="line">// existing rows that belongs to previous group.</comment>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>=</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>PROJECT_RETRIEVE_DONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doIngroupLimitOffset</name><parameter_list>(<parameter><decl><type><name>SLimitInfo</name><modifier>*</modifier></type> <name>pLimitInfo</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                                    <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// set current group id</comment>
  <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>-=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PROJECT_RETRIEVE_CONTINUE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&amp;&amp;</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataTrimFirstNRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// check for the limitation in each group</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>limit</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputRows</name></name> <operator>+</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>keepRows</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>limit</name></name> <operator>-</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputRows</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataKeepFirstNRows</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>keepRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO: optimize it later when partition by + limit</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>currentGroupId</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>&lt;=</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputGroups</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>numOfOutputRows</name></name> <operator>+=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <return>return <expr><name>PROJECT_RETRIEVE_DONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>doProjectOperation</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SProjectOperatorInfo</name><modifier>*</modifier></type> <name>pProjectInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type>       <name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pProjectInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>   <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pFinalRes</name> <init>= <expr><name><name>pProjectInfo</name><operator>-&gt;</operator><name>pFinalRes</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pFinalRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pReq</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_OPENED</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_QUEUE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_OPENED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"projection in queue model, set status open and return null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>order</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>scanFlag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLimitInfo</name><modifier>*</modifier></type>    <name>pLimitInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pProjectInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>downstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>doGenerateSourceData</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// The downstream exec may change the value of the newgroup, so use a local variable instead.</comment>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_QUEUE</name> <operator>&amp;&amp;</operator> <name><name>pFinalRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_OPENED</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_RECV</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"set op close, exec %d, status %d rows %d"</literal></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name></expr></argument>,
               <argument><expr><name><name>pFinalRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>execModel</name></name> <operator>==</operator> <name>OPTR_EXEC_MODEL_QUEUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"set status recv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_EXEC_RECV</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// for stream interval</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_RETRIEVE</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name> <operator>||</operator>
          <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_DATA</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// printDataBlock1(pBlock, "project1");</comment>
        <return>return <expr><name>pBlock</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>status</name> <init>= <expr><call><name>discardGroupDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pLimitInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>PROJECT_RETRIEVE_CONTINUE</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>setInfoForNewGroup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pLimitInfo</name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getTableScanInfo</name><argument_list>(<argument><expr><name>downstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scanFlag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>,
                                   <argument><expr><name><name>pProjectInfo</name><operator>-&gt;</operator><name>pPseudoColInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>doIngroupLimitOffset</name><argument_list>(<argument><expr><name>pLimitInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>PROJECT_RETRIEVE_CONTINUE</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name><name>pProjectInfo</name><operator>-&gt;</operator><name>mergeDataBlocks</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pFinalRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pFinalRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>

        <comment type="line">// continue merge data, ignore the group id</comment>
        <expr_stmt><expr><call><name>blockDataMerge</name><argument_list>(<argument><expr><name>pFinalRes</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pFinalRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+</operator> <name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&lt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>threshold</name></name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// do apply filter</comment>
      <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pFinalRes</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// when apply the limit/offset for each group, pRes-&gt;info.rows may be 0, due to limit constraint.</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pFinalRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"project return %d rows, status %d"</literal></expr></argument>, <argument><expr><name><name>pFinalRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// do apply filter</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// no results generated</comment>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><ternary><condition><expr><name><name>pProjectInfo</name><operator>-&gt;</operator><name>mergeDataBlocks</name></name></expr> ?</condition><then> <expr><name>pFinalRes</name></expr> </then><else>: <expr><name>pRes</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// printDataBlock1(p, "project");</comment>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createIndefinitOutputOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>,
                                                 <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndefOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIndefOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>      <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name> <operator>=</operator> <name>pTaskInfo</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIndefRowsFuncPhysiNode</name><modifier>*</modifier></type> <name>pPhyNode</name> <init>= <expr><operator>(</operator><name>SIndefRowsFuncPhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfExpr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pSExpr</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>, <argument><expr><name>pSExpr</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>keyBufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Make sure the size of SSDataBlock will never exceed the size of 2MB.</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>TWOMB</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>*</operator> <name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name> <operator>&gt;</operator> <name>TWOMB</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name>TWOMB</name> <operator>/</operator> <name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initAggSup</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfExpr</name></expr></argument>, <argument><expr><name>keyBufSize</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setFunctionResultOutput</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>numOfExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pPhyNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <name>pResBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPseudoColInfo</name></name> <operator>=</operator> <call><name>setRowTsColumnOutputInfo</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>numOfExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"IndefinitOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_INDEF_ROWS_FUNC</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doApplyIndefinitFunction</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyIndefinitOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>destroyIndefinitOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doHandleDataBlock</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>,
                              <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>order</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>scanFlag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIndefOperatorInfo</name><modifier>*</modifier></type> <name>pIndefInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type>     <name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pIndefInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>          <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getTableScanInfo</name><argument_list>(<argument><expr><name>downstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scanFlag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// there is an scalar expression that needs to be calculated before apply the group aggregation.</comment>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pScalarSup</name> <init>= <expr><operator>&amp;</operator><name><name>pIndefInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pScalarSup</name><operator>-&gt;</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pScalarSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pScalarSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pScalarSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>,
                                 <argument><expr><name><name>pIndefInfo</name><operator>-&gt;</operator><name>pPseudoColInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>,
                               <argument><expr><name><name>pIndefInfo</name><operator>-&gt;</operator><name>pPseudoColInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>doApplyIndefinitFunction</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndefOperatorInfo</name><modifier>*</modifier></type> <name>pIndefInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type>     <name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pIndefInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>          <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// here we need to handle the existsed group results</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pIndefInfo</name><operator>-&gt;</operator><name>pNextGroupRes</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// todo extract method</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><operator>&amp;</operator><name><name>pSup</name><operator>-&gt;</operator><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>doHandleDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name><name>pIndefInfo</name><operator>-&gt;</operator><name>pNextGroupRes</name></name></expr></argument>, <argument><expr><name>downstream</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIndefInfo</name><operator>-&gt;</operator><name>pNextGroupRes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&lt;</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>threshold</name></name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// The downstream exec may change the value of the newgroup, so use a local variable instead.</comment>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pIndefInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pIndefInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>  <comment type="line">// this is the initial group result</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pIndefInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>!=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// reset output buffer and computing status</comment>
            <expr_stmt><expr><name><name>pIndefInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pIndefInfo</name><operator>-&gt;</operator><name>pNextGroupRes</name></name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>doHandleDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>downstream</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>threshold</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>rows</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>size_t</name></type> <name>rows</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name>rows</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initCtxOutputBuffer</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>SResultRowEntryInfo</name></name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isRowEntryInitialized</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>fmIsPseudoColumnFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>functionId</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
        <call><name>fmIsScalarFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name><name>fpSet</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>resultInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * The start of each column SResultRowEntryInfo is denote by RowCellInfoOffset.
 * Note that in case of top/bottom query, the whole multiple rows of result is treated as only one row of results.
 * +------------+-----------------result column 1------------+------------------result column 2-----------+
 * | SResultRow | SResultRowEntryInfo | intermediate buffer1 | SResultRowEntryInfo | intermediate buffer 2|
 * +------------+--------------------------------------------+--------------------------------------------+
 *           offset[0]                                  offset[1]                                   offset[2]
 */</comment>
<comment type="line">// TODO refactor: some function move away</comment>
<function><type><name>void</name></type> <name>setFunctionResultOutput</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SAggSupporter</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stage</name></decl></parameter>,
                             <parameter><decl><type><name>int32_t</name></type> <name>numOfExprs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>  <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>        <name>rowEntryInfoOffset</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>rowEntryInfoOffset</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>resultRowInfo</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initResultRowInfo</name><argument_list>(<argument><expr><name>pResultRowInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>     <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>groupId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pRow</name> <init>= <expr><call><name>doSetResultOutBufByKey</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
                                            <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pSup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfExprs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>SResultRowEntryInfo</name></name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>getResultEntryInfo</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rowEntryInfoOffset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cleanupResultRowEntry</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>resultInfo</name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scanFlag</name> <operator>=</operator> <name>stage</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>initCtxOutputBuffer</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>numOfExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>setRowTsColumnOutputInfo</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>fmIsPseudoColumnFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pList</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>doGenerateSourceData</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SProjectOperatorInfo</name><modifier>*</modifier></type> <name>pProjectInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>   <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><name><name>pProjectInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><name><name>pSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>outputSlotId</name> <init>= <expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>outputSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>nType</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NULL</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>taosVariantGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>param</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*int32_t status = */</comment> <expr_stmt><expr><call><name>doIngroupLimitOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pProjectInfo</name><operator>-&gt;</operator><name>limitInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pRes</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setPseudoOutputColInfo</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pPseudoList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>pPseudoList</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pPseudoList</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pOutput</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>projectApplyFunctions</name><parameter_list>(<parameter><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>,
                              <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pPseudoList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setPseudoOutputColInfo</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pPseudoList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pSrcBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>outputSlotId</name> <init>= <expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>outputSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>nType</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NULL</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>taosVariantGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>param</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pResult</name> <operator>!=</operator> <name>pSrcBlock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// if the source equals to the destination, it is to create a new column as the result of scalar</comment>
  <comment type="line">// function or some operators.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>createNewColModel</name> <init>= <expr><operator>(</operator><name>pResult</name> <operator>==</operator> <name>pSrcBlock</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>createNewColModel</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>               <name>outputSlotId</name> <init>= <expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type>       <name>pfCtx</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInputData</name> <init>= <expr><operator>&amp;</operator><name><name>pfCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>  <comment type="line">// it is a project query</comment>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>outputSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>createNewColModel</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataMergeCol</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><name><name>pInputData</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                        <argument><expr><name><name>pInputData</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name><name>pInputData</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pInputData</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pResult</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name><name>pInputData</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>outputSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><ternary><condition><expr><name>createNewColModel</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>nType</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NULL</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosVariantGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>param</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_OPERATOR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBlockList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSrcBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pResColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>outputSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name></type>  <name>idata</name> <init>= <expr><block>{<expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pResColData</name><operator>-&gt;</operator><name>info</name></name></expr>, <expr><operator>.</operator><name>hasNull</name> <operator>=</operator> <name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SScalarParam</name></type> <name>dest</name> <init>= <expr><block>{<expr><operator>.</operator><name>columnData</name> <operator>=</operator> <operator>&amp;</operator><name>idata</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>scalarCalculate</name><argument_list>(<argument><expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>_optrRoot</name><operator>.</operator><name>pRootNode</name></name></expr></argument>, <argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>startOffset</name> <init>= <expr><ternary><condition><expr><name>createNewColModel</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>colDataMergeCol</name><argument_list>(<argument><expr><name>pResColData</name></expr></argument>, <argument><expr><name>startOffset</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idata</name></expr></argument>, <argument><expr><name><name>dest</name><operator>.</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>numOfRows</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_FUNCTION</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// _rowts/_c0, not tbname column</comment>
      <if_stmt><if>if <condition>(<expr><call><name>fmIsPseudoColumnFunc</name><argument_list>(<argument><expr><name><name>pfCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>fmIsScanPseudoColumnFunc</name><argument_list>(<argument><expr><name><name>pfCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// do nothing</comment>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fmIsIndefiniteRowsFunc</name><argument_list>(<argument><expr><name><name>pfCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pfCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pfCtx</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>pfCtx</name></expr></argument>, <argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pfCtx</name><operator>-&gt;</operator><name>pOutput</name></name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>outputSlotId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pfCtx</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <ternary><condition><expr><name>createNewColModel</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></else></ternary></expr>;</expr_stmt>  <comment type="line">// set the start offset</comment>

        <comment type="line">// set the timestamp(_rowts) output buffer</comment>
        <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pPseudoList</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>outputColIndex</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pPseudoList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pfCtx</name><operator>-&gt;</operator><name>pTsOutput</name></name> <operator>=</operator> <operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><index>[<expr><operator>*</operator><name>outputColIndex</name></expr>]</index></name><operator>.</operator><name>pOutput</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// link pDstBlock to set selectivity value</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pfCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pfCtx</name><operator>-&gt;</operator><name>pDstBlock</name></name> <operator>=</operator> <name>pResult</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name><name>pfCtx</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>pfCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fmIsAggFunc</name><argument_list>(<argument><expr><name><name>pfCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// selective value output should be set during corresponding function execution</comment>
        <if_stmt><if>if <condition>(<expr><call><name>fmIsSelectValueFunc</name><argument_list>(<argument><expr><name><name>pfCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// _group_key function for "partition by tbname" + csum(col_name) query</comment>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pOutput</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>outputSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pfCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// todo handle the json tag</comment>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>f</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pInput</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInput</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+</operator> <name>f</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBlockList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSrcBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pResColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>outputSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SColumnInfoData</name></type>  <name>idata</name> <init>= <expr><block>{<expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pResColData</name><operator>-&gt;</operator><name>info</name></name></expr>, <expr><operator>.</operator><name>hasNull</name> <operator>=</operator> <name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SScalarParam</name></type> <name>dest</name> <init>= <expr><block>{<expr><operator>.</operator><name>columnData</name> <operator>=</operator> <operator>&amp;</operator><name>idata</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>scalarCalculate</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pExpr</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>pFunctNode</name></name></expr></argument>, <argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>startOffset</name> <init>= <expr><ternary><condition><expr><name>createNewColModel</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataMergeCol</name><argument_list>(<argument><expr><name>pResColData</name></expr></argument>, <argument><expr><name>startOffset</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idata</name></expr></argument>, <argument><expr><name><name>dest</name><operator>.</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>numOfRows</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OPS_NOT_SUPPORT</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>createNewColModel</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResult</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
