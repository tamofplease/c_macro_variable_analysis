<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/timesliceoperator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tfill.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>STimeSliceOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>         <name>pRes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type>          <name>win</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SInterval</name></type>            <name>interval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>              <name>current</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>              <name>pPrevRow</name></decl>;</decl_stmt>     <comment type="line">// SArray&lt;SGroupValue&gt;</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>              <name>pNextRow</name></decl>;</decl_stmt>     <comment type="line">// SArray&lt;SGroupValue&gt;</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>              <name>pLinearInfo</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SFillLinearInfo&gt;</comment>
  <decl_stmt><decl><type><name>bool</name></type>                 <name>isPrevRowSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                 <name>isNextRowSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>fillType</name></decl>;</decl_stmt>      <comment type="line">// fill type</comment>
  <decl_stmt><decl><type><name>SColumn</name></type>              <name>tsCol</name></decl>;</decl_stmt>         <comment type="line">// primary timestamp column</comment>
  <decl_stmt><decl><type><name>SExprSupp</name></type>            <name>scalarSup</name></decl>;</decl_stmt>     <comment type="line">// scalar calculation</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>SFillColInfo</name></name><modifier>*</modifier></type> <name>pFillColInfo</name></decl>;</decl_stmt>  <comment type="line">// fill column info</comment>
}</block></struct></type> <name>STimeSliceOperatorInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>destroyTimeSliceOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doKeepPrevRows</name><parameter_list>(<parameter><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pSliceInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pkey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>pPrevRow</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>isPrevRowSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doKeepNextRows</name><parameter_list>(<parameter><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pSliceInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pkey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>pNextRow</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>isNextRowSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doKeepLinearInfo</name><parameter_list>(<parameter><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pSliceInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>tsCol</name><operator>.</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFillLinearInfo</name><modifier>*</modifier></type> <name>pLinearInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_MATHABLE_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// null value is represented by using key = INT64_MIN for now.</comment>
    <comment type="line">// TODO: optimize to ignore null values for linear interpolation.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pLinearInfo</name><operator>-&gt;</operator><name>isStartSet</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

        <expr_stmt><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>key</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pTsCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>isStartSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pLinearInfo</name><operator>-&gt;</operator><name>isEndSet</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pTsCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>isEndSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>pLinearInfo</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pTsCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>genInterpolationResult</name><parameter_list>(<parameter><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pSliceInfo</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSup</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>beforeTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>rows</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// todo set the correct primary timestamp column</comment>

  <comment type="line">// output the result</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasInterp</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pExprSup</name><operator>-&gt;</operator><name>pExprInfo</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>          <name>dstSlot</name> <init>= <expr><name><name>pExprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>dstSlot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name><name>pExprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>srcSlot</name> <init>= <expr><name><name>pExprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>fillType</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_FILL_NULL</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_FILL_SET_VALUE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>pVar</name> <init>= <expr><operator>&amp;</operator><name><name>pSliceInfo</name><operator>-&gt;</operator><name>pFillColInfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fillVal</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_FILL_LINEAR</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>SFillLinearInfo</name><modifier>*</modifier></type> <name>pLinearInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name></expr></argument>, <argument><expr><name>srcSlot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SPoint</name></type> <name>start</name> <init>= <expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SPoint</name></type> <name>end</name> <init>= <expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>end</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SPoint</name></type> <name>current</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// do not interpolate before ts range, only increate pSliceInfo-&gt;current</comment>
        <if_stmt><if>if <condition>(<expr><name>beforeTs</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pLinearInfo</name><operator>-&gt;</operator><name>isEndSet</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pLinearInfo</name><operator>-&gt;</operator><name>isStartSet</name></name> <operator>||</operator> <operator>!</operator><name><name>pLinearInfo</name><operator>-&gt;</operator><name>isEndSet</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>hasInterp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>start</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>INT64_MIN</name> <operator>||</operator> <name><name>end</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>current</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosGetLinearInterpolationVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current</name></expr></argument>, <argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name><name>pLinearInfo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>current</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>current</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_FILL_PREV</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSliceInfo</name><operator>-&gt;</operator><name>isPrevRowSet</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>hasInterp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pkey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>pPrevRow</name></name></expr></argument>, <argument><expr><name>srcSlot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_FILL_NEXT</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSliceInfo</name><operator>-&gt;</operator><name>isNextRowSet</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>hasInterp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pkey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>pNextRow</name></name></expr></argument>, <argument><expr><name>srcSlot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_FILL_NONE</name></expr>:</case>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>hasInterp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>hasInterp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addCurrentRowToResult</name><parameter_list>(<parameter><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pSliceInfo</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSup</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name></decl></parameter>,
                                  <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pExprSup</name><operator>-&gt;</operator><name>pExprInfo</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>          <name>dstSlot</name> <init>= <expr><name><name>pExprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>dstSlot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name><name>pExprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type>          <name>srcSlot</name> <init>= <expr><name><name>pExprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>srcSlot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initPrevRowsKeeper</name><parameter_list>(<parameter><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevRow</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevRow</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGroupKeys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevRow</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SGroupKeys</name></type> <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevRow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isPrevRowSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initNextRowsKeeper</name><parameter_list>(<parameter><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pNextRow</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pNextRow</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGroupKeys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pNextRow</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SGroupKeys</name></type> <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pNextRow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isNextRowSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initFillLinearInfo</name><parameter_list>(<parameter><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFillLinearInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SFillLinearInfo</name></type> <name>linearInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>linearInfo</name><operator>.</operator><name>start</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>linearInfo</name><operator>.</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>linearInfo</name><operator>.</operator><name>start</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>linearInfo</name><operator>.</operator><name>end</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>linearInfo</name><operator>.</operator><name>isStartSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>linearInfo</name><operator>.</operator><name>isEndSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>linearInfo</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>linearInfo</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linearInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initKeeperInfo</name><parameter_list>(<parameter><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initPrevRowsKeeper</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initNextRowsKeeper</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initFillLinearInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doTimeslice</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pSliceInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>            <name>pResBlock</name> <init>= <expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>              <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>        <name>order</name> <init>= <expr><name>TSDB_ORDER_ASC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SInterval</name><modifier>*</modifier></type>     <name>pInterval</name> <init>= <expr><operator>&amp;</operator><name><name>pSliceInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initKeeperInfo</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>MAIN_SCAN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>tsCol</name><operator>.</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pTsCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addCurrentRowToResult</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>doKeepPrevRows</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doKeepLinearInfo</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator>
            <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// in case of interpolation window starts and ends between two datapoints, fill(prev) need to interpolate</comment>
        <expr_stmt><expr><call><name>doKeepPrevRows</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doKeepLinearInfo</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">// in case of interpolation window starts and ends between two datapoints, fill(next) need to interpolate</comment>
          <expr_stmt><expr><call><name>doKeepNextRows</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int64_t</name></type> <name>nextTs</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pTsCol</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>nextTs</name> <operator>&gt;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name>nextTs</name> <operator>&amp;&amp;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;=</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>genInterpolationResult</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>fillType</name></name> <operator>==</operator> <name>TSDB_FILL_LINEAR</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator>
                    <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if <condition>(<expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// ignore current row, and do nothing</comment>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// it is the last row of current block</comment>
          <expr_stmt><expr><call><name>doKeepPrevRows</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// ts &gt; pSliceInfo-&gt;current</comment>
        <comment type="line">// in case of interpolation window starts and ends between two datapoints, fill(next) need to interpolate</comment>
        <expr_stmt><expr><call><name>doKeepNextRows</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doKeepLinearInfo</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name>ts</name> <operator>&amp;&amp;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;=</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>genInterpolationResult</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>fillType</name></name> <operator>==</operator> <name>TSDB_FILL_LINEAR</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator>
                <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <comment type="line">// add current row if timestamp match</comment>
        <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&amp;&amp;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;=</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>addCurrentRowToResult</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator>
              <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>doKeepPrevRows</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>

  <comment type="line">// check if need to interpolate after last datablock</comment>
  <comment type="line">// except for fill(next), fill(linear)</comment>
  <while>while <condition>(<expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;=</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&amp;&amp;</operator> <name><name>pSliceInfo</name><operator>-&gt;</operator><name>fillType</name></name> <operator>!=</operator> <name>TSDB_FILL_NEXT</name> <operator>&amp;&amp;</operator>
         <name><name>pSliceInfo</name><operator>-&gt;</operator><name>fillType</name></name> <operator>!=</operator> <name>TSDB_FILL_LINEAR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>genInterpolationResult</name><argument_list>(<argument><expr><name>pSliceInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator>
        <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pSliceInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// restore the value</comment>
  <expr_stmt><expr><call><name>setTaskStatus</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></argument>, <argument><expr><name>TASK_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_EXEC_DONE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pResBlock</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createTimeSliceOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STimeSliceOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>          <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOperator</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SInterpFuncPhysiNode</name><modifier>*</modifier></type> <name>pInterpPhyNode</name> <init>= <expr><operator>(</operator><name>SInterpFuncPhysiNode</name><operator>*</operator><operator>)</operator><name>pPhyNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name><modifier>*</modifier></type>            <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfExprs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pInterpPhyNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfExprs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>initExprSupp</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfExprs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInterpPhyNode</name><operator>-&gt;</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pScalarExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pInterpPhyNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>, <argument><expr><name>pScalarExprInfo</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tsCol</name></name> <operator>=</operator> <call><name>extractColumnFromColumnNode</name><argument_list>(<argument><expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pInterpPhyNode</name><operator>-&gt;</operator><name>pTimeSeries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>fillType</name></name> <operator>=</operator> <call><name>convertFillType</name><argument_list>(<argument><expr><name><name>pInterpPhyNode</name><operator>-&gt;</operator><name>fillMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillColInfo</name></name> <operator>=</operator> <call><name>createFillColInfo</name><argument_list>(<argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfExprs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name><name>pInterpPhyNode</name><operator>-&gt;</operator><name>pFillValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPhyNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <name><name>pInterpPhyNode</name><operator>-&gt;</operator><name>timeRange</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>interval</name></name> <operator>=</operator> <name><name>pInterpPhyNode</name><operator>-&gt;</operator><name>interval</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>downstream</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>==</operator> <name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><operator>(</operator><name>STableScanInfo</name><operator>*</operator><operator>)</operator><name><name>downstream</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>twindows</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>win</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>cond</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TIMEWINDOW_RANGE_EXTERNAL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"TimeSliceOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_INTERP_FUNC</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>,
                  <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doTimeslice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyTimeSliceOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

  <label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyTimeSliceOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeSliceOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>STimeSliceOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevRow</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevRow</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPrevRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pNextRow</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pNextRow</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pNextRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFillLinearInfo</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pLinearInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pFillColInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
