<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/groupoperator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttypes.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SGroupbyOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SOptrBasicInfo</name></type> <name>binfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAggSupporter</name></type>  <name>aggSup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pGroupCols</name></decl>;</decl_stmt>     <comment type="line">// group by columns, SArray&lt;SColumn&gt;</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pGroupColVals</name></decl>;</decl_stmt>  <comment type="line">// current group column values, SArray&lt;SGroupKeys&gt;</comment>
  <decl_stmt><decl><type><name>bool</name></type>           <name>isInit</name></decl>;</decl_stmt>         <comment type="line">// denote if current val is initialized or not</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>          <name>keyBuf</name></decl>;</decl_stmt>         <comment type="line">// group by keys for hash</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>groupKeyLen</name></decl>;</decl_stmt>    <comment type="line">// total group by column width</comment>
  <decl_stmt><decl><type><name>SGroupResInfo</name></type>  <name>groupResInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprSupp</name></type>      <name>scalarSup</name></decl>;</decl_stmt>
}</block></struct></type> <name>SGroupbyOperatorInfo</name>;</typedef>

<comment type="line">// The sort in partition may be needed later.</comment>
<typedef>typedef <type><struct>struct <name>SPartitionOperatorInfo</name> <block>{
  <decl_stmt><decl><type><name>SOptrBasicInfo</name></type> <name>binfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pGroupCols</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pGroupColVals</name></decl>;</decl_stmt>  <comment type="line">// current group column values, SArray&lt;SGroupKeys&gt;</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>          <name>keyBuf</name></decl>;</decl_stmt>         <comment type="line">// group by keys for hash</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>groupKeyLen</name></decl>;</decl_stmt>    <comment type="line">// total group by column width</comment>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>      <name>pGroupSet</name></decl>;</decl_stmt>      <comment type="line">// quick locate the window object for each result</comment>

  <decl_stmt><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl>;</decl_stmt>              <comment type="line">// query result buffer based on blocked-wised disk file</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>rowCapacity</name></decl>;</decl_stmt>       <comment type="line">// maximum number of rows for each buffer page</comment>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>       <name>columnOffset</name></decl>;</decl_stmt>      <comment type="line">// start position for each column data</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>sortedGroupArray</name></decl>;</decl_stmt>  <comment type="line">// SDataGroupInfo sorted by group id</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>groupIndex</name></decl>;</decl_stmt>        <comment type="line">// group index</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>pageIndex</name></decl>;</decl_stmt>         <comment type="line">// page index of current group</comment>
  <decl_stmt><decl><type><name>SExprSupp</name></type>      <name>scalarSup</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPartitionOperatorInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type>    <name>getCurrentDataGroupInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SDataGroupInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pGroupInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>setupColumnOffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowCapacity</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>setGroupResultOutputBuf</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type> <name>binfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>,
                                        <parameter><decl><type><name>int16_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SArray</name><modifier>*</modifier></type>  <name>extractColumnInfo</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeGroupKey</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><operator>(</operator><name>SGroupKeys</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyGroupOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupbyOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SGroupbyOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><name>freeGroupKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cleanupGroupResInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initGroupOptrInfo</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pGroupColVals</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>keyBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pGroupColList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pGroupColVals</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGroupKeys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pGroupColVals</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfGroupCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pGroupColList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfGroupCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumn</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumn</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pGroupColList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>keyLen</name><operator>)</operator> <operator>+=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>  <comment type="line">// actual data + null_flag</comment>

    <decl_stmt><decl><type><name>SGroupKeys</name></type> <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pGroupColVals</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nullFlagSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfGroupCols</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>keyLen</name><operator>)</operator> <operator>+=</operator> <name>nullFlagSize</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>keyBuf</name><operator>)</operator> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>keyLen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>keyBuf</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>groupKeyCompare</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pGroupCols</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pGroupColVals</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>,
                            <parameter><decl><type><name>int32_t</name></type> <name>numOfGroupCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type> <name>pColAgg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfGroupCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumn</name><modifier>*</modifier></type>         <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pGroupCols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pColAgg</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name><index>[<expr><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr>]</index></name></expr>;</expr_stmt>  <comment type="line">// TODO is agg data matched?</comment>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pColAgg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pkey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pGroupColVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>&amp;&amp;</operator> <name>isNull</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>isNull</name> <operator>||</operator> <name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pkey</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recordNewGroupKeys</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pGroupCols</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pGroupColVals</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type> <name>pColAgg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfGroupCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pGroupCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfGroupCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumn</name><modifier>*</modifier></type>         <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pGroupCols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pColAgg</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name><index>[<expr><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr>]</index></name></expr>;</expr_stmt>  <comment type="line">// TODO is agg data matched?</comment>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pkey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pGroupColVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pColAgg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pkey</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_JSON_IN_GROUP_ERROR</name></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pkey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildGroupKeys</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pGroupColVals</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pKey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfGroupCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pGroupColVals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>isNull</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pKey</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pKey</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfGroupCols</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfGroupCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pkey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pGroupColVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pkey</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>isNull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>isNull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pkey</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>dataLen</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>varDataCopy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pkey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name><name>pkey</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>pStart</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pKey</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// assign the group keys or user input constant values if required</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>doAssignGroupKeys</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>totalRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// select count(*),key from t group by key.</comment>
      <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntryInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>input</name><operator>.</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <comment type="line">// todo OPT all/all not NULL</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pEntryInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>varDataCopy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// it is a NULL value</comment>
        <expr_stmt><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doHashGroupbyAgg</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>        <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGroupbyOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>numOfGroupCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">//  if (type == TSDB_DATA_TYPE_FLOAT || type == TSDB_DATA_TYPE_DOUBLE) {</comment>
  <comment type="line">// qError("QInfo:0x%"PRIx64" group by not supported on double/float columns, abort", GET_TASKID(pRuntimeEnv));</comment>
  <comment type="line">//    return;</comment>
  <comment type="line">//  }</comment>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// Compare with the previous row of this column, and do not set the output buffer again if they are identical.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>isInit</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>recordNewGroupKeys</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>  <comment type="line">// group by json error</comment>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isInit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>equal</name> <init>= <expr><call><name>groupKeyCompare</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>numOfGroupCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>equal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// The first row of a new block does not belongs to the previous existed group</comment>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>recordNewGroupKeys</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>  <comment type="line">// group by json error</comment>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>buildGroupKeys</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>setGroupResultOutputBuf</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>,
                                          <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>  <comment type="line">// null data, too many state code</comment>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>rowIndex</name> <init>= <expr><name>j</name> <operator>-</operator> <name>num</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>,
                                    <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// assign the group keys or user input constant values if required</comment>
    <expr_stmt><expr><call><name>doAssignGroupKeys</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>recordNewGroupKeys</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>buildGroupKeys</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>setGroupResultOutputBuf</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>,
                                          <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>rowIndex</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <name>num</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>applyAggFunctionOnPartialTuples</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>,
                                    <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doAssignGroupKeys</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>buildGroupResultDataBlock</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupbyOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doBuildResultDatablock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasRemainResults</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pRes</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>hashGroupbyAggregate</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SGroupbyOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_RES_TO_RETURN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildGroupResultDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>order</name> <init>= <expr><name>TSDB_ORDER_ASC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>scanFlag</name> <init>= <expr><name>MAIN_SCAN</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>        <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getTableScanInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scanFlag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// the pDataBlock are always the same one, no need to call this again</comment>
    <expr_stmt><expr><call><name>setInputDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>scanFlag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// there is an scalar expression that needs to be calculated right before apply the group aggregation.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pCtx</name></name></expr></argument>,
                                              <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doHashGroupbyAgg</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if(pOperator-&gt;fpSet.encodeResultRow){
    char *result = NULL;
    int32_t length = 0;
    pOperator-&gt;fpSet.encodeResultRow(pOperator, &amp;result, &amp;length);
    SAggSupporter* pSup = &amp;pInfo-&gt;aggSup;
    taosHashClear(pSup-&gt;pResultRowHashTable);
    pInfo-&gt;binfo.resultRowInfo.size = 0;
    pOperator-&gt;fpSet.decodeResultRow(pOperator, result);
    if(result){
      taosMemoryFree(result);
    }
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>initGroupedResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupResInfo</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name><operator>.</operator><name>pResultRowHashTable</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>buildGroupResultDataBlock</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createGroupOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SAggPhysiNode</name><modifier>*</modifier></type> <name>pAggNode</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupbyOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGroupbyOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>        <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfScalarExpr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pScalarExprInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pAggNode</name><operator>-&gt;</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pScalarExprInfo</name> <operator>=</operator> <call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfScalarExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name> <operator>=</operator> <call><name>extractColumnInfo</name><argument_list>(<argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>, <argument><expr><name>pScalarExprInfo</name></expr></argument>, <argument><expr><name>numOfScalarExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initGroupOptrInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupKeyLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr></argument>, <argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initAggSup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aggSup</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupKeyLen</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pAggNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initResultRowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>resultRowInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"GroupbyAggOperator"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>hashGroupbyAggregate</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyGroupOperatorInfo</name></expr></argument>,
                                         <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyGroupOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doHashPartition</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>recordNewGroupKeys</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>buildGroupKeys</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SDataGroupInfo</name><modifier>*</modifier></type> <name>pGroupInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>           <name>pPage</name> <init>= <expr><call><name>getCurrentDataGroupInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pGroupInfo</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pGroupInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// group id</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pGroupInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pGroupInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <call><name>calcGroupId</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// number of rows</comment>
    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>rows</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pPage</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>    <name>slotId</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>startOffset</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>columnOffset</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>columnLen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>  <name>contentLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>offset</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pPage</name> <operator>+</operator> <name>startOffset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>columnLen</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pPage</name> <operator>+</operator> <name>startOffset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>rowCapacity</name></name><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>columnLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>offset</name><index>[<expr><operator>(</operator><operator>*</operator><name>rows</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>contentLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>offset</name><index>[<expr><operator>*</operator><name>rows</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>columnLen</name><operator>)</operator></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>src</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>columnLen</name><operator>)</operator></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>data</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>columnLen</name><operator>)</operator> <operator>+</operator> <name>dataLen</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pPage</name><operator>)</operator></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>contentLen</name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>offset</name><index>[<expr><operator>*</operator><name>rows</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>columnLen</name><operator>)</operator></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>columnLen</name><operator>)</operator></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>data</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>columnLen</name><operator>)</operator> <operator>+</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pPage</name><operator>)</operator></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>contentLen</name> <operator>=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>bitmap</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pPage</name> <operator>+</operator> <name>startOffset</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>columnLen</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pPage</name> <operator>+</operator> <name>startOffset</name> <operator>+</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowCapacity</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>columnLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>rows</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>columnLen</name><operator>)</operator></expr></argument>, <argument><expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>data</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>columnLen</name><operator>)</operator> <operator>+</operator> <name>bytes</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pPage</name><operator>)</operator> <operator>&lt;=</operator> <call><name>getBufPageSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>contentLen</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>columnLen</name><operator>)</operator> <operator>+=</operator> <name>contentLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>columnLen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>rows</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>getCurrentDataGroupInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SDataGroupInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pGroupInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataGroupInfo</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pPage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// it is a new group</comment>
    <decl_stmt><decl><type><name>SDataGroupInfo</name></type> <name>gi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>gi</name><operator>.</operator><name>pPageList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataGroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>pageId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <call><name>getNewBufPage</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pPageList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pPage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>curId</name> <init>= <expr><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pPageList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pPage</name> <operator>=</operator> <call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>rows</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pPage</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rows</name> <operator>&gt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>rowCapacity</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// release buffer</comment>
      <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// add a new page for current group</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>pageId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPage</name> <operator>=</operator> <call><name>getNewBufPage</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pPageList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getBufPageSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pGroupInfo</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>pPage</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>calcGroupId</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>T_MD5_CTX</name></type> <name>context</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tMD5Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMD5Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMD5Final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// NOTE: only extract the initial 8 bytes of the final MD5 digest</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>digest</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name><modifier>*</modifier></type> <name>setupColumnOffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowCapacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>   <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>offset</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
              <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>  <comment type="line">// the number of rows in current page, ref to SSDataBlock paged serialization format</comment>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>payloadLen</name> <init>= <expr><name>bytes</name> <operator>*</operator> <name>rowCapacity</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// offset segment + content length + payload</comment>
      <expr_stmt><expr><name><name>offset</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rowCapacity</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>payloadLen</name> <operator>+</operator> <name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// bitmap + content length + payload</comment>
      <expr_stmt><expr><name><name>offset</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>rowCapacity</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>payloadLen</name> <operator>+</operator> <name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearPartitionOperator</name><parameter_list>(<parameter><decl><type><name>SPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortedGroupArray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataGroupInfo</name><modifier>*</modifier></type> <name>pGp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortedGroupArray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pGp</name><operator>-&gt;</operator><name>pPageList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortedGroupArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>clearDiskbasedBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareDataGroupInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>group1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>group2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataGroupInfo</name><modifier>*</modifier></type> <name>pGroupInfo1</name> <init>= <expr><name>group1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDataGroupInfo</name><modifier>*</modifier></type> <name>pGroupInfo2</name> <init>= <expr><name>group2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pGroupInfo1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>==</operator> <name><name>pGroupInfo2</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pGroupInfo1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pGroupInfo2</name><operator>-&gt;</operator><name>groupId</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>buildPartitionResult</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataGroupInfo</name><modifier>*</modifier></type> <name>pGroupInfo</name> <init>=
      <expr><ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupIndex</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortedGroupArray</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupIndex</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupIndex</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pageIndex</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pGroupInfo</name><operator>-&gt;</operator><name>pPageList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// try next group data</comment>
    <expr_stmt><expr><operator>++</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupIndex</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupIndex</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortedGroupArray</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>clearPartitionOperator</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pGroupInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortedGroupArray</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pageIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pageId</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pGroupInfo</name><operator>-&gt;</operator><name>pPageList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pageIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>page</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowCapacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataFromBuf1</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowCapacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pageIndex</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pGroupInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>hashPartition</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>            <name>pRes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_RES_TO_RETURN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>buildPartitionResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>        <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// there is an scalar expression that needs to be calculated right before apply the group aggregation.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pCtx</name></name></expr></argument>,
                                              <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doHashPartition</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>  <comment type="line">// group by json error</comment>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>groupArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataGroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pGroupIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pGroupIter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataGroupInfo</name><modifier>*</modifier></type> <name>pGroupInfo</name> <init>= <expr><name>pGroupIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>groupArray</name></expr></argument>, <argument><expr><name>pGroupInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pGroupIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name></expr></argument>, <argument><expr><name>pGroupIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>groupArray</name></expr></argument>, <argument><expr><name>compareDataGroupInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortedGroupArray</name></name> <operator>=</operator> <name>groupArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_RES_TO_RETURN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>buildPartitionResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyPartitionOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SPartitionOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SGroupKeys</name></type> <name>key</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SGroupKeys</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortedGroupArray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataGroupInfo</name><modifier>*</modifier></type> <name>pGp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortedGroupArray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pGp</name><operator>-&gt;</operator><name>pPageList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sortedGroupArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pGroupIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pGroupIter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataGroupInfo</name><modifier>*</modifier></type> <name>pGroupInfo</name> <init>= <expr><name>pGroupIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pGroupInfo</name><operator>-&gt;</operator><name>pPageList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pGroupIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name></expr></argument>, <argument><expr><name>pGroupIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>columnOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyDiskbasedBuf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createPartitionOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SPartitionPhysiNode</name><modifier>*</modifier></type> <name>pPartNode</name></decl></parameter>,
                                           <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPartitionOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>          <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name> <operator>=</operator> <call><name>extractPartitionColInfo</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>pPartitionKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPartNode</name><operator>-&gt;</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo1</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>, <argument><expr><name>pExprInfo1</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupSet</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>defaultPgsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>defaultBufsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>getBufferPgSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defaultPgsz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defaultBufsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osTempSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_AVAIL_DISK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Create partition operator info failed since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createDiskbasedBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>defaultPgsz</name></expr></argument>, <argument><expr><name>defaultBufsz</name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowCapacity</name></name> <operator>=</operator> <call><name>blockDataGetCapacityInRow</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><call><name>getBufPageSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>columnOffset</name></name> <operator>=</operator> <call><name>setupColumnOffset</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowCapacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initGroupOptrInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>groupKeyLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"PartitionOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_PARTITION</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>,
                  <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>=</operator> <name>pExprInfo</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>hashPartition</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyPartitionOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyPartitionOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>setGroupResultOutputBuf</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>, <parameter><decl><type><name>SOptrBasicInfo</name><modifier>*</modifier></type> <name>binfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>,
                                <parameter><decl><type><name>int16_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SAggSupporter</name><modifier>*</modifier></type> <name>pAggSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>  <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name> <init>= <expr><operator>&amp;</operator><name><name>binfo</name><operator>-&gt;</operator><name>resultRowInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pCtx</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResultRow</name> <init>=
      <expr><call><name>doSetResultOutBufByKey</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>pResultRowInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pAggSup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pResultRow</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setResultRowInitCtx</name><argument_list>(<argument><expr><name>pResultRow</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>rowEntryInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>calGroupIdByData</name><parameter_list>(<parameter><decl><type><name>SPartitionBySupporter</name><modifier>*</modifier></type> <name>pParSup</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExprSup</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
        <expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name><name>pExprSup</name><operator>-&gt;</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calaculate group id error, code:%d"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>recordNewGroupKeys</name><argument_list>(<argument><expr><name><name>pParSup</name><operator>-&gt;</operator><name>pGroupCols</name></name></expr></argument>, <argument><expr><name><name>pParSup</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>rowId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name> <init>= <expr><call><name>buildGroupKeys</name><argument_list>(<argument><expr><name><name>pParSup</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name><name>pParSup</name><operator>-&gt;</operator><name>pGroupColVals</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><call><name>calcGroupId</name><argument_list>(<argument><expr><name><name>pParSup</name><operator>-&gt;</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>groupId</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hasRemainPartion</name><parameter_list>(<parameter><decl><type><name>SStreamPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>parIte</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>buildStreamPartitionResult</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>                  <name>pDest</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>hasRemainPartion</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SPartitionDataInfo</name><modifier>*</modifier></type> <name>pParInfo</name> <init>= <expr><operator>(</operator><name>SPartitionDataInfo</name><operator>*</operator><operator>)</operator><name><name>pInfo</name><operator>-&gt;</operator><name>parIte</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>rows</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pParInfo</name><operator>-&gt;</operator><name>rowIds</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInputDataBlock</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rowIndex</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pParInfo</name><operator>-&gt;</operator><name>rowIds</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDestCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDest</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type>             <name>isNull</name> <init>= <expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pSrcCol</name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>pSrcData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrcCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDestCol</name></expr></argument>, <argument><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>pSrcData</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>tbnameCalSup</name><operator>.</operator><name>numOfExprs</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>tbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>streamStateGetParName</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pParInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pTmpBlock</name> <init>= <expr><call><name>blockCopyOneRow</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name> <operator>=</operator> <name>TSDB_TABLE_NAME_LEN</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>data</name> <init>= <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tbnameCalSup</name><operator>.</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>pTmpBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tbnameCalSup</name><operator>.</operator><name>pCtx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>colDataGetVarData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// TODO check tbname validity</comment>
        <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>!=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="block">/*pDest-&gt;info.parTbName[len + 1] = 0;*/</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pParInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&amp;&amp;</operator> <name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>streamStatePutParName</name><argument_list>(<argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>streamInfo</name><operator>.</operator><name>pState</name></name></expr></argument>, <argument><expr><name><name>pParInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/*printf("\n\n set name %s\n\n", pDest-&gt;info.parTbName);*/</comment>
        <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pTmpBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pParInfo</name><operator>-&gt;</operator><name>rowIds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParInfo</name><operator>-&gt;</operator><name>rowIds</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tsColIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pParInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>parIte</name></name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartitions</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>parIte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>, <argument><expr><literal type="string">"stream partitionby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDest</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doStreamHashPartitionImpl</name><parameter_list>(<parameter><decl><type><name>SStreamPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInputDataBlock</name></name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>recordNewGroupKeys</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>pGroupCols</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>             <name>keyLen</name> <init>= <expr><call><name>buildGroupKeys</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>pGroupColVals</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SPartitionDataInfo</name><modifier>*</modifier></type> <name>pParData</name> <init>=
        <expr><operator>(</operator><name>SPartitionDataInfo</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartitions</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pParData</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pParData</name><operator>-&gt;</operator><name>rowIds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SPartitionDataInfo</name></type> <name>newParData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>newParData</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <call><name>calcGroupId</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newParData</name><operator>.</operator><name>rowIds</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>newParData</name><operator>.</operator><name>rowIds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartitions</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>keyBuf</name></name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newParData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPartitionDataInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doStreamHashPartition</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>                <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasRemainPartion</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildStreamPartitionResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>        <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pDownstream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInputDataBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>downstream</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getNextFn</name></name><argument_list>(<argument><expr><name>downstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="string">"stream partitionby recv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>STREAM_NORMAL</name></expr>:</case>
      <case>case <expr><name>STREAM_PULL_DATA</name></expr>:</case>
      <case>case <expr><name>STREAM_INVALID</name></expr>:</case>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>STREAM_DELETE_DATA</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>copyDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STREAM_DELETE_RESULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printDataBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>, <argument><expr><literal type="string">"stream partitionby delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr>;</return>
      </block_content>}</block> <break>break;</break>
      <default>default:</default>
        <return>return <expr><name>pBlock</name></expr>;</return>
    </block_content>}</block></switch>

    <comment type="line">// there is an scalar expression that needs to be calculated right before apply the group aggregation.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pExprInfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>projectApplyFunctions</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pExprInfo</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>pCtx</name></name></expr></argument>,
                                              <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name><operator>.</operator><name>numOfExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartitions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doStreamHashPartitionImpl</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>openCost</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>parIte</name></name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartitions</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>buildStreamPartitionResult</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyStreamPartitionOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SStreamPartitionOperatorInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanupBasicInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>pGroupCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>pGroupColVals</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SGroupKeys</name></type> <name>key</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SGroupKeys</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>pGroupColVals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>keyBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tbnameCalSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tagCalSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartitions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initParDownStream</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SPartitionBySupporter</name><modifier>*</modifier></type> <name>pParSup</name></decl></parameter>, <parameter><decl><type><name>SExprSupp</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>downstream</name><operator>-&gt;</operator><name>operatorType</name></name> <operator>!=</operator> <name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SStreamScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><name><name>downstream</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>partitionSup</name></name> <operator>=</operator> <operator>*</operator><name>pParSup</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pPartScalarSup</name></name> <operator>=</operator> <name>pExpr</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pScanInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pUpdateInfo</name></name> <operator>=</operator> <call><name>updateInfoInit</name><argument_list>(<argument><expr><literal type="number">60000</literal></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createStreamPartitionOperatorInfo</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>downstream</name></decl></parameter>, <parameter><decl><type><name>SStreamPartitionPhysiNode</name><modifier>*</modifier></type> <name>pPartNode</name></decl></parameter>,
                                                 <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamPartitionOperatorInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamPartitionOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>                <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>pGroupCols</name></name> <operator>=</operator> <call><name>extractPartitionColInfo</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>part</name><operator>.</operator><name>pPartitionKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPartNode</name><operator>-&gt;</operator><name>part</name><operator>.</operator><name>pExprs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pCalExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>part</name><operator>.</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>, <argument><expr><name>pCalExprInfo</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPartNode</name><operator>-&gt;</operator><name>pSubtable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pSubTableExpr</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExprInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pSubTableExpr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tbnameCalSup</name><operator>.</operator><name>pExprInfo</name></name> <operator>=</operator> <name>pSubTableExpr</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createExprFromOneNode</name><argument_list>(<argument><expr><name>pSubTableExpr</name></expr></argument>, <argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tbnameCalSup</name></name></expr></argument>, <argument><expr><name>pSubTableExpr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPartNode</name><operator>-&gt;</operator><name>pTags</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfTags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pTagExpr</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfTags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTagExpr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tagCalSup</name></name></expr></argument>, <argument><expr><name>pTagExpr</name></expr></argument>, <argument><expr><name>numOfTags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initGroupOptrInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>pGroupColVals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>keyBuf</name></name></expr></argument>,
                           <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>pGroupCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name><operator>.</operator><name>needCalc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>part</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>binfo</name><operator>.</operator><name>pRes</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>parIte</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pInputDataBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>_hash_fn_t</name></type> <name>hashFn</name> <init>= <expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pPartitions</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>hashFn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tsColIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pDelRes</name></name> <operator>=</operator> <call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_DELETE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>part</name><operator>.</operator><name>pTargets</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"StreamPartitionOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_PARTITION</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>,
                  <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name></name> <operator>=</operator> <name>pExprInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doStreamHashPartition</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>destroyStreamPartitionOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initParDownStream</name><argument_list>(<argument><expr><name>downstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>partitionSup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>scalarSup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendDownstream</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>downstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyStreamPartitionOperatorInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>extractColumnInfo</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfCols</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pColNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SColumn</name></type> <name>c</name> <init>= <expr><call><name>extractColumnFromColumnNode</name><argument_list>(<argument><expr><name>pColNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumn</name></type>     <name>c</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>slotId</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>colId</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pValNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pValNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>pValNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pValNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pList</name></expr>;</return>
</block_content>}</block></function>
</unit>
