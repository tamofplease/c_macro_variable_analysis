<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/executil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompression.h"</cpp:file></cpp:include>

<comment type="line">// If the numOfOutputGroups is 1, the data blocks that belongs to different groups will be provided randomly</comment>
<comment type="line">// The numOfOutputGroups is specified by physical plan. and will not be affect by numOfGroups</comment>
<struct>struct <name>STableListInfo</name> <block>{
  <decl_stmt><decl><type><name>bool</name></type>      <name>oneTableForEachGroup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfOuputGroups</name></decl>;</decl_stmt>  <comment type="line">// the data block will be generated one by one</comment>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>  <name>groupOffset</name></decl>;</decl_stmt>       <comment type="line">// keep the offset value for each group in the tableList</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>pTableList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>map</name></decl>;</decl_stmt>  <comment type="line">// speedup acquire the tableQueryInfo by table uid</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>suid</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>tagFilterAssist</name> <block>{
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>colHash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>cInfoList</name></decl>;</decl_stmt>
}</block></struct></type> <name>tagFilterAssist</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>removeInvalidTable</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>uids</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>tags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>optimizeTbnameInCond</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>metaHandle</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>tags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>optimizeTbnameInCondImpl</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>metaHandle</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableList</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>metaHandle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pScanNode</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>,
                            <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagIndexCond</name></decl></parameter>, <parameter><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pListInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>getLimit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pLimit</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>NULL</name> <operator>==</operator> <name>pLimit</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>SLimitNode</name><operator>*</operator><operator>)</operator><name>pLimit</name><operator>)</operator><operator>-&gt;</operator><name>limit</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>getOffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pLimit</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>NULL</name> <operator>==</operator> <name>pLimit</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>SLimitNode</name><operator>*</operator><operator>)</operator><name>pLimit</name><operator>)</operator><operator>-&gt;</operator><name>offset</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>initResultRowInfo</name><parameter_list>(<parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>closeResultRow</name><parameter_list>(<parameter><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResultRow</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pResultRow</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>resetResultRow</name><parameter_list>(<parameter><decl><type><name>SResultRow</name><modifier>*</modifier></type> <name>pResultRow</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>entrySize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pResultRow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultRow</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultRow</name><operator>-&gt;</operator><name>endInterp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultRow</name><operator>-&gt;</operator><name>startInterp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>entrySize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pResultRow</name><operator>-&gt;</operator><name>pEntryInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>entrySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// TODO refactor: use macro</comment>
<function><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>getResultEntryInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SResultRow</name><modifier>*</modifier></type> <name>pRow</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>offset</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SResultRowEntryInfo</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pRow</name><operator>-&gt;</operator><name>pEntryInfo</name></name> <operator>+</operator> <name><name>offset</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>getResultRowSize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowSize</name> <init>= <expr><operator>(</operator><name>numOfOutput</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SResultRowEntryInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SResultRow</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>resDataInfo</name><operator>.</operator><name>interBufSize</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <operator>(</operator><name>numOfOutput</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <comment type="line">// expand rowSize to mark if col is null for top/bottom result(saveTupleData)</comment>
  <return>return <expr><name>rowSize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanupGroupResInfo</name><parameter_list>(<parameter><decl><type><name>SGroupResInfo</name><modifier>*</modifier></type> <name>pGroupResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pGroupResInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SResKeyPos</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name> <operator>=</operator> <call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>resultrowComparAsc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResKeyPos</name><modifier>*</modifier></type> <name>pp1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SResKeyPos</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResKeyPos</name><modifier>*</modifier></type> <name>pp2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SResKeyPos</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pp1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>==</operator> <name><name>pp2</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pts1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pp1</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pts2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pp2</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>pts1</name> <operator>==</operator> <name>pts2</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><ternary><condition><expr><name>pts1</name> <operator>&lt;</operator> <name>pts2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name><name>pp1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pp2</name><operator>-&gt;</operator><name>groupId</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>resultrowComparDesc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>resultrowComparAsc</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>initGroupedResultInfo</name><parameter_list>(<parameter><decl><type><name>SGroupResInfo</name><modifier>*</modifier></type> <name>pGroupResInfo</name></decl></parameter>, <parameter><decl><type><name>SSHashObj</name><modifier>*</modifier></type> <name>pHashmap</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// extract the result rows information from the hash map</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// todo avoid repeated malloc memory</comment>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pData</name> <operator>=</operator> <call><name>tSimpleHashIterate</name><argument_list>(<argument><expr><name>pHashmap</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>tSimpleHashGetKey</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SResKeyPos</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>keyLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SResultRowPosition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SResultRowPosition</name><operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>keyLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name> <operator>||</operator> <name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>fn</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><name>resultrowComparAsc</name></expr> </then><else>: <expr><name>resultrowComparDesc</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>size</name> <init>= <expr><name>POINTER_BYTES</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;=</operator> <call><name>getNumOfTotalRes</name><argument_list>(<argument><expr><name>pGroupResInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initMultiResInfoFromArrayList</name><parameter_list>(<parameter><decl><type><name>SGroupResInfo</name><modifier>*</modifier></type> <name>pGroupResInfo</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArrayList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name> <operator>=</operator> <name>pArrayList</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;=</operator> <call><name>getNumOfTotalRes</name><argument_list>(<argument><expr><name>pGroupResInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hasRemainResults</name><parameter_list>(<parameter><decl><type><name>SGroupResInfo</name><modifier>*</modifier></type> <name>pGroupResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getNumOfTotalRes</name><parameter_list>(<parameter><decl><type><name>SGroupResInfo</name><modifier>*</modifier></type> <name>pGroupResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pGroupResInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pGroupResInfo</name><operator>-&gt;</operator><name>pRows</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>createSortInfo</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNodeList</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfCols</name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>numOfCols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockOrderInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>pList</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SOrderByExprNode</name><modifier>*</modifier></type> <name>pSortKey</name> <init>= <expr><operator>(</operator><name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SBlockOrderInfo</name></type>   <name>bi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>bi</name><operator>.</operator><name>order</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pSortKey</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><name>TSDB_ORDER_ASC</name></expr> </then><else>: <expr><name>TSDB_ORDER_DESC</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bi</name><operator>.</operator><name>nullFirst</name></name> <operator>=</operator> <operator>(</operator><name><name>pSortKey</name><operator>-&gt;</operator><name>nullOrder</name></name> <operator>==</operator> <name>NULL_ORDER_FIRST</name><operator>)</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pColNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pSortKey</name><operator>-&gt;</operator><name>pExpr</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>bi</name><operator>.</operator><name>slotId</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pList</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>createDataBlockFromDescNode</name><parameter_list>(<parameter><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>blockId</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STREAM_INVALID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>calWin</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindow</name><operator>)</operator><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>INT64_MIN</name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>watermark</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSlotDescNode</name><modifier>*</modifier></type>  <name>pDescNode</name> <init>= <expr><operator>(</operator><name>SSlotDescNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>idata</name> <init>=
        <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name><name>pDescNode</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pDescNode</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>pDescNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>idata</name><operator>.</operator><name>info</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>pDescNode</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>idata</name><operator>.</operator><name>info</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pDescNode</name><operator>-&gt;</operator><name>dataType</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EDealRes</name></type> <name>doTranslateTagExpr</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaReader</name><modifier>*</modifier></type> <name>mr</name> <init>= <expr><operator>(</operator><name>SMetaReader</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pSColumnNode</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pSColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STagVal</name></type> <name>tagVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tagVal</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><name>pSColumnNode</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>metaGetTableTagVal</name><argument_list>(<argument><expr><name><name>mr</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>, <argument><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>STag</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>tagVal</name><operator>.</operator><name>nData</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>nodesSetValueNodeValue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_FUNCTION</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFuncNode</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFuncNode</name><operator>-&gt;</operator><name>funcType</name></name> <operator>==</operator> <name>FUNCTION_TYPE_TBNAME</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pFuncNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>mr</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>mr</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>isQualifiedTable</name><parameter_list>(<parameter><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>metaHandle</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pQualified</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pQualified</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCondTmp</name> <init>= <expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pTagCond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>nodesRewriteExprPostOrder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTagCondTmp</name></expr></argument>, <argument><expr><name>doTranslateTagExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scalarCalculateConstants</name><argument_list>(<argument><expr><name>pTagCondTmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pTagCondTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pQualified</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pNew</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pQualified</name> <operator>=</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>getColumn</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pSColumnNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pNode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pSColumnNode</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pNode</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_FUNCTION</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pNode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFuncNode</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>pNode</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFuncNode</name><operator>-&gt;</operator><name>funcType</name></name> <operator>==</operator> <name>FUNCTION_TYPE_TBNAME</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pSColumnNode</name> <operator>=</operator> <operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSColumnNode</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>colType</name></name> <operator>=</operator> <name>COLUMN_TYPE_TBNAME</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>TSDB_TABLE_FNAME_LEN</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSColumnNode</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>tagFilterAssist</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><name>tagFilterAssist</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>            <name>data</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>colHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSColumnNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>colHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSColumnNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pNode</name><operator>)</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>slotId</name></name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfo</name></type> <name>cInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>colId</name> <operator>=</operator> <name><name>pSColumnNode</name><operator>-&gt;</operator><name>colId</name></name></expr>,
                         <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pSColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>,
                         <expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pSColumnNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAG_FILTER_DEBUG</name></expr></cpp:if>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter build column info, slotId:%d, colId:%d, type:%d"</literal></expr></argument>, <argument><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>, <argument><expr><name><name>cInfo</name><operator>.</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>cInfo</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>cInfoList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>col</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>slotId</name></name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createResultData</name><parameter_list>(<parameter><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name><modifier>*</modifier></type> <name>pParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumnData</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pColumnData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pColumnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>colInfoDataEnsureCapacity</name><argument_list>(<argument><expr><name>pColumnData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pColumnData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>columnData</name></name> <operator>=</operator> <name>pColumnData</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>colAlloced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SColumnInfoData</name><modifier>*</modifier></type> <name>getColInfoResult</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>metaHandle</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>uidList</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>pBlockList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>    <name>tags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SScalarParam</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>tagFilterAssist</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>colHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>colHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>cInfoList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>cInfoList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>nodesRewriteExprPostOrder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTagCond</name></expr></argument>, <argument><expr><name>getColumn</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pResBlock</name> <operator>=</operator> <call><name>createDataBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pResBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>cInfoList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>colInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>colInfo</name><operator>.</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SColumnInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>cInfoList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//  int64_t stt = taosGetTimestampUs();</comment>
  <expr_stmt><expr><name>tags</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>filter</name> <init>= <expr><call><name>optimizeTbnameInCond</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uidList</name></expr></argument>, <argument><expr><name>pTagCond</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableTags</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uidList</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get table tags from meta, reason:%s, suid:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>suid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>removeInvalidTable</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>uid</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// tbname</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>metaGetTableNameByUid</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAG_FILTER_DEBUG</name></expr></cpp:if>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter uid:%ld, tbname:%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>tag</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>STagVal</name></type> <name>tagVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>tagVal</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>metaGetTableTagVal</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>nTag</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>tagVal</name><operator>.</operator><name>nData</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAG_FILTER_DEBUG</name></expr></cpp:if>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter varch:%s"</literal></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAG_FILTER_DEBUG</name></expr></cpp:if>
          <if_stmt><if>if <condition>(<expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter int:%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter double:%f"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>

  <comment type="line">//  int64_t st1 = taosGetTimestampUs();</comment>
  <comment type="line">//  qDebug("generate tag block rows:%d, cost:%ld us", rows, st1-st);</comment>

  <expr_stmt><expr><name>pBlockList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataType</name></type> <name>type</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>, <expr><operator>.</operator><name>bytes</name> <operator>=</operator> sizeof<operator>(</operator><name>bool</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createResultData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to create result, reason:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scalarCalculate</name><argument_list>(<argument><expr><name>pTagCond</name></expr></argument>, <argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to calculate scalar, reason:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="line">//  int64_t st2 = taosGetTimestampUs();</comment>
  <comment type="line">//  qDebug("calculate tag block rows:%d, cost:%ld us", rows, st2-st1);</comment>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>colHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>cInfoList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>output</name><operator>.</operator><name>columnData</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>releaseColInfoData</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCol</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>col</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><name>pCol</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getColInfoResultForGroupby</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>metaHandle</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pTableListInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>pBlockList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>    <name>tags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>uidList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>        <name>keyBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>groupData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>tagFilterAssist</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>colHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>colHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>cInfoList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>cInfoList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>group</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesRewriteExprPostOrder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>, <argument><expr><name>getColumn</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>REPLACE_NODE</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name>pResBlock</name> <operator>=</operator> <call><name>createDataBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pResBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>cInfoList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>colInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>colInfo</name><operator>.</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SColumnInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>cInfoList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>uidList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pkeyInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkeyInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//  int64_t stt = taosGetTimestampUs();</comment>
  <expr_stmt><expr><name>tags</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableTags</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>uidList</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  int64_t stt1 = taosGetTimestampUs();</comment>
  <comment type="line">//  qDebug("generate tag meta rows:%d, cost:%ld us", rows, stt1-stt);</comment>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  int64_t st = taosGetTimestampUs();</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>uid</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// tbname</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>metaGetTableNameByUid</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAG_FILTER_DEBUG</name></expr></cpp:if>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter uid:%ld, tbname:%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>tag</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>STagVal</name></type> <name>tagVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>tagVal</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>metaGetTableTagVal</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>nTag</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>tagVal</name><operator>.</operator><name>nData</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAG_FILTER_DEBUG</name></expr></cpp:if>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter varch:%s"</literal></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAG_FILTER_DEBUG</name></expr></cpp:if>
          <if_stmt><if>if <condition>(<expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter int:%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter double:%f"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>

  <comment type="line">//  int64_t st1 = taosGetTimestampUs();</comment>
  <comment type="line">//  qDebug("generate tag block rows:%d, cost:%ld us", rows, st1-st);</comment>

  <expr_stmt><expr><name>pBlockList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>groupData</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>group</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SScalarParam</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case>
        <break>break;</break>
      <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case>
      <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
      <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>expNode</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createResultData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>expNode</name><operator>-&gt;</operator><name>resType</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <default>default:</default>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OPS_NOT_SUPPORT</name></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type>     <name>pSColumnNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSColumnNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>colDataAssign</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>columnData</name></name></expr></argument>, <argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scalarCalculate</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>releaseColInfoData</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>groupData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>.</operator><name>columnData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>node</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>node</argument>, <argument>group</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>keyLen</name> <operator>+=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nullFlagSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>keyLen</name> <operator>+=</operator> <name>nullFlagSize</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>keyBuf</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>keyBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>info</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>isNull</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>keyBuf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>keyBuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>groupData</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>groupData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>isNull</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>isNull</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_QRY_JSON_IN_GROUP_ERROR</name></expr>;</expr_stmt>
            <goto>goto <name>end</name>;</goto>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>tTagIsJsonNull</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>isNull</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name><name>pValue</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>pStart</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>keyBuf</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <call><name>calcGroupId</name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//  int64_t st2 = taosGetTimestampUs();</comment>
  <comment type="line">//  qDebug("calculate tag block rows:%d, cost:%ld us", rows, st2-st1);</comment>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>colHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>cInfoList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pBlockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>groupData</name></expr></argument>, <argument><expr><name>releaseColInfoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nameComparFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName1</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName2</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pName1</name></expr></argument>, <argument><expr><name>pName2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SArray</name><modifier>*</modifier></type> <name>getTableNameList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeListNode</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>len</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pList</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SListCell</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><name><name>pList</name><operator>-&gt;</operator><name>pNodeList</name><operator>-&gt;</operator><name>pHead</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTbList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pList</name><operator>-&gt;</operator><name>pNodeList</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>valueNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>valueNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfTables</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// order the name</comment>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>, <argument><expr><name>nameComparFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// remove the duplicates</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pNewList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pNewList</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTables</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name>pNewList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>nameInOldList</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>, <argument><expr><operator>*</operator><name>nameInOldList</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pNewList</name></expr></argument>, <argument><expr><name>nameInOldList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pNewList</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tableUidCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>u1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>u2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>u1</name> <operator>==</operator> <name>u2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><name>u1</name> <operator>&lt;</operator> <name>u2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>optimizeTbnameInCond</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>metaHandle</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>tags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_OPERATOR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>optimizeTbnameInCondImpl</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaGetTableTagsByUids</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>removeInvalidTable</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_LOGIC_CONDITION</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>cond</name><operator>)</operator><operator>-&gt;</operator><name>condType</name> <operator>!=</operator> <name>LOGIC_COND_TYPE_AND</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>                 <name>hasTbnameCond</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>cond</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type>           <name>pList</name> <init>= <expr><operator>(</operator><name>SNodeList</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SListCell</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><name><name>pList</name><operator>-&gt;</operator><name>pHead</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cell</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>optimizeTbnameInCondImpl</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>hasTbnameCond</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>tableUidCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayRemoveDuplicate</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>tableUidCompare</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>hasTbnameCond</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>metaGetTableTagsByUids</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>removeInvalidTable</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * handle invalid uid
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>removeInvalidTable</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>uids</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>tags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>uids</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>validUid</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>uids</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>uids</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>uid</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>uids</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>validUid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArraySwap</name><argument_list>(<argument><expr><name>uids</name></expr></argument>, <argument><expr><name>validUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>validUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>optimizeTbnameInCondImpl</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>metaHandle</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pTagCond</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_OPERATOR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pTagCond</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>opType</name></name> <operator>!=</operator> <name>OP_TYPE_IN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_COLUMN</name> <operator>&amp;&amp;</operator>
       <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>-&gt;</operator><name>colType</name> <operator>==</operator> <name>COLUMN_TYPE_TBNAME</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_NODE_LIST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pList</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>pTbList</name> <init>= <expr><call><name>getTableNameList</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfTables</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>uHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>    <name>listlen</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// len &gt; 0 means there already have uids</comment>
    <if_stmt><if>if <condition>(<expr><name>listlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>uHash</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>listlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>uid</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>uHash</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTables</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>metaGetTableUidByName</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>ETableType</name></type> <name>tbType</name> <init>= <expr><name>TSDB_TABLE_MAX</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>metaGetTableTypeByName</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbType</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tbType</name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>uHash</name> <operator>||</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>uHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>uHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>qWarn</name><argument_list>(<argument><expr><literal type="string">"failed to get tableIds from by table name: %s, reason: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>uHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>genTagFilterDigest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>, <parameter><decl><type><name>T_MD5_CTX</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTagCond</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>payload</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesNodeToMsg</name><argument_list>(<argument><expr><name>pTagCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tMD5Init</name><argument_list>(<argument><expr><name>pContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMD5Update</name><argument_list>(<argument><expr><name>pContext</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>payload</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMD5Final</name><argument_list>(<argument><expr><name>pContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doFilterByTagCond</name><parameter_list>(<parameter><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pListInfo</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>metaHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTagCond</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>getColInfoResult</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name><name>pListInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>pTagCond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to getColInfoResult, code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pColInfoData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name><modifier>*</modifier></type>   <name>pResult</name> <init>= <expr><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>pColInfoData</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>uid</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"tagfilter get uid:%"</literal> <name>PRId64</name> <literal type="string">", res:%d"</literal></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>, <argument><expr><name><name>pResult</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pResult</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>taosArraySwap</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getTableList</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>metaHandle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pScanNode</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagIndexCond</name></decl></parameter>,
                     <parameter><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pListInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfTables</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tableUid</name> <init>= <expr><name><name>pScanNode</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pListInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pScanNode</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pScanNode</name><operator>-&gt;</operator><name>tableType</name></name> <operator>!=</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>metaIsTableExist</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name>tableUid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doFilterByTagCond</name><argument_list>(<argument><expr><name>pListInfo</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>pTagCond</name></expr></argument>, <argument><expr><name>metaHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// try to retrieve the result from meta cache</comment>
    <decl_stmt><decl><type><name>T_MD5_CTX</name></type> <name>context</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>genTagFilterDigest</name><argument_list>(<argument><expr><name>pTagCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>acquired</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>metaGetCachedTableUidList</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name><name>pScanNode</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>digest</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>digest</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acquired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>acquired</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"retrieve table uid list from cache, numOfTables:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTagCond</name></expr>)</condition> <block>{<block_content>  <comment type="line">// no tag condition exists, let's fetch all tables of this super table</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pTagIndexCond</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>vnodeGetCtbIdList</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>pScanNode</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// failed to find the result in the cache, let try to calculate the results</comment>
      <if_stmt><if>if <condition>(<expr><name>pTagIndexCond</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SIndexMetaArg</name></type> <name>metaArg</name> <init>= <expr><block>{
            <expr><operator>.</operator><name>metaEx</name> <operator>=</operator> <name>metaHandle</name></expr>, <expr><operator>.</operator><name>idx</name> <operator>=</operator> <call><name>tsdbGetIdx</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>ivtIdx</name> <operator>=</operator> <call><name>tsdbGetIvtIdx</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>suid</name> <operator>=</operator> <name>tableUid</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SIdxFltStatus</name></type> <name>status</name> <init>= <expr><name>SFLT_NOT_INDEX</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doFilterTag</name><argument_list>(<argument><expr><name>pTagIndexCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaArg</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>status</name> <operator>==</operator> <name>SFLT_NOT_INDEX</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get tableIds from index, reason:%s, suid:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tableUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TDB_CODE_SUCCESS</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doFilterByTagCond</name><argument_list>(<argument><expr><name>pListInfo</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>pTagCond</name></expr></argument>, <argument><expr><name>metaHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// let's add the filter results into meta-cache</comment>
    <expr_stmt><expr><name>numOfTables</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>numOfTables</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>pPayload</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pPayload</name> <operator>=</operator> <name>numOfTables</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>numOfTables</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pPayload</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfTables</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>metaUidFilterCachePut</name><argument_list>(<argument><expr><name>metaHandle</name></expr></argument>, <argument><expr><name><name>pScanNode</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>digest</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>digest</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pPayload</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_end</name>:</label>
  <expr_stmt><expr><name>numOfTables</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTables</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableKeyInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qTrace</name><argument_list>(<argument><expr><literal type="string">"tagfilter get uid:%"</literal> <name>PRIu64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>getTableTagsBufLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>pGroups</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>node</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>node</argument>, <argument>pGroups</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>keyLen</name> <operator>+=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name>keyLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pGroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>keyLen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getGroupIdFromTagsVal</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroupNode</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>keyBuf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pGroupId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// table not exist</comment>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>groupNew</name> <init>= <expr><call><name>nodesCloneList</name><argument_list>(<argument><expr><name>pGroupNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>nodesRewriteExprsPostOrder</name><argument_list>(<argument><expr><name>groupNew</name></expr></argument>, <argument><expr><name>doTranslateTagExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>isNull</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>keyBuf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>keyBuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pGroupNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>groupNew</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pNew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>scalarCalculateConstants</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>REPLACE_NODE</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>groupNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pNew</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name> <operator>||</operator> <name><name>pValue</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>isNull</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>isNull</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_JSON_IN_GROUP_ERROR</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>groupNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>terrno</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>pStart</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>keyBuf</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pGroupId</name> <operator>=</operator> <call><name>calcGroupId</name><argument_list>(<argument><expr><name>keyBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>groupNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>extractPartitionColInfo</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNodeList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfCols</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pColNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// todo extract method</comment>
    <decl_stmt><decl><type><name>SColumn</name></type> <name>c</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>slotId</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>colId</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pList</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>extractColMatchInfo</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>, <parameter><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pOutputNodeList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfOutputCols</name></decl></parameter>,
                            <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SColMatchInfo</name><modifier>*</modifier></type> <name>pMatchInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfCols</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pMatchInfo</name><operator>-&gt;</operator><name>matchType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColMatchItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pColNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SColMatchItem</name></type> <name>c</name> <init>= <expr><block>{<expr><operator>.</operator><name>needOutput</name> <operator>=</operator> <name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>colId</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>srcSlotId</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>.</operator><name>dstSlotId</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// set the output flag for each column in SColMatchInfo, according to the</comment>
  <expr_stmt><expr><operator>*</operator><name>numOfOutputCols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pOutputNodeList</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSlotDescNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SSlotDescNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pOutputNodeList</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// todo: add reserve flag check</comment>
    <comment type="line">// it is a column reserved for the arithmetic expression calculation</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name> <operator>&gt;=</operator> <name>numOfCols</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfOutputCols</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SColMatchItem</name><modifier>*</modifier></type> <name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>dstSlotId</name></name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfOutputCols</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// select distinct tbname from stb where tbname='abc';</comment>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>needOutput</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pMatchInfo</name><operator>-&gt;</operator><name>pList</name></name> <operator>=</operator> <name>pList</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SResSchema</name></type> <name>createResSchema</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>slotId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResSchema</name></type> <name>s</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>slotId</name></name> <operator>=</operator> <name>slotId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SColumn</name><modifier>*</modifier></type> <name>createColumn</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>blockId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>slotId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pType</name></decl></parameter>, <parameter><decl><type><name>EColumnType</name></type> <name>colType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumn</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCol</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name> <operator>=</operator> <name>slotId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name>colId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>dataBlockId</name></name> <operator>=</operator> <name>blockId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>colType</name></name> <operator>=</operator> <name>colType</name></expr>;</expr_stmt>
  <return>return <expr><name>pCol</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>createExprFromOneNode</name><parameter_list>(<parameter><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExp</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>slotId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tExprNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// it is a project query, or group by column</comment>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>=</operator> <name>QUERY_NODE_COLUMN</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pColNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFunctParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>numOfParams</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pType</name> <init>= <expr><operator>&amp;</operator><name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name></name> <operator>=</operator>
        <call><name>createResSchema</name><argument_list>(<argument><expr><name><name>pType</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>pColNode</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pCol</name> <operator>=</operator>
        <call><name>createColumn</name><argument_list>(<argument><expr><name><name>pColNode</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name><name>pColNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>, <argument><expr><name><name>pColNode</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name>pType</name></expr></argument>, <argument><expr><name><name>pColNode</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNC_PARAM_TYPE_COLUMN</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>=</operator> <name>QUERY_NODE_VALUE</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFunctParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>numOfParams</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pType</name> <init>= <expr><operator>&amp;</operator><name><name>pValNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name></name> <operator>=</operator>
        <call><name>createResSchema</name><argument_list>(<argument><expr><name><name>pType</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>pValNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNC_PARAM_TYPE_VALUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesValueNodeToVariant</name><argument_list>(<argument><expr><name>pValNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>QUERY_NODE_FUNCTION</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>=</operator> <name>QUERY_NODE_FUNCTION</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFuncNode</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pType</name> <init>= <expr><operator>&amp;</operator><name><name>pFuncNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name></name> <operator>=</operator>
        <call><name>createResSchema</name><argument_list>(<argument><expr><name><name>pType</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>pFuncNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>tExprNode</name><modifier>*</modifier></type> <name>pExprNode</name> <init>= <expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pExprNode</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name><name>pFuncNode</name><operator>-&gt;</operator><name>funcId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExprNode</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>pFunctNode</name></name> <operator>=</operator> <name>pFuncNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExprNode</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>functionType</name></name> <operator>=</operator> <name><name>pFuncNode</name><operator>-&gt;</operator><name>funcType</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pExprNode</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>functionName</name></name></expr></argument>, <argument><expr><name><name>pFuncNode</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pExprNode</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <comment type="line">// todo refactor: add the parameter for tbname function</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><literal type="string">"tbname"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pFuncNode</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pExprNode</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>functionName</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
        <name><name>pExprNode</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>functionName</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pFuncNode</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFuncNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>  <comment type="line">// todo handle error</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><name><name>pFuncNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParam</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFuncNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfParam</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFunctParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>numOfParams</name></name> <operator>=</operator> <name>numOfParam</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfParam</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFuncNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pcn</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNC_PARAM_TYPE_COLUMN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pCol</name> <operator>=</operator>
            <call><name>createColumn</name><argument_list>(<argument><expr><name><name>pcn</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name><name>pcn</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>, <argument><expr><name><name>pcn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pcn</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></argument>, <argument><expr><name><name>pcn</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pvn</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNC_PARAM_TYPE_VALUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesValueNodeToVariant</name><argument_list>(<argument><expr><name>pvn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>QUERY_NODE_OPERATOR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>=</operator> <name>QUERY_NODE_OPERATOR</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOpNode</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFunctParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>numOfParams</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pType</name> <init>= <expr><operator>&amp;</operator><name><name>pOpNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name></name> <operator>=</operator>
        <call><name>createResSchema</name><argument_list>(<argument><expr><name><name>pType</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>pOpNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>_optrRoot</name><operator>.</operator><name>pRootNode</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>QUERY_NODE_CASE_WHEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>=</operator> <name>QUERY_NODE_OPERATOR</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SCaseWhenNode</name><modifier>*</modifier></type> <name>pCaseNode</name> <init>= <expr><operator>(</operator><name>SCaseWhenNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFunctParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>numOfParams</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pType</name> <init>= <expr><operator>&amp;</operator><name><name>pCaseNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name></name> <operator>=</operator>
        <call><name>createResSchema</name><argument_list>(<argument><expr><name><name>pType</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><name><name>pType</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>pCaseNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pExp</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>_optrRoot</name><operator>.</operator><name>pRootNode</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>createExprFromTargetNode</name><parameter_list>(<parameter><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExp</name></decl></parameter>, <parameter><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>pTargetNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>createExprFromOneNode</name><argument_list>(<argument><expr><name>pExp</name></expr></argument>, <argument><expr><name><name>pTargetNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name><name>pTargetNode</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SExprInfo</name><modifier>*</modifier></type> <name>createExprInfo</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroupKeys</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfExprs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfFuncs</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfGroupKeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pGroupKeys</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfGroupKeys</name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pGroupKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>numOfExprs</name> <operator>=</operator> <name>numOfFuncs</name> <operator>+</operator> <name>numOfGroupKeys</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>numOfExprs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprs</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>*</operator><name>numOfExprs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExprInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>*</operator><name>numOfExprs</name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>pTargetNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>numOfFuncs</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pTargetNode</name> <operator>=</operator> <operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pTargetNode</name> <operator>=</operator> <operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pGroupKeys</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>numOfFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExp</name> <init>= <expr><operator>&amp;</operator><name><name>pExprs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>createExprFromTargetNode</name><argument_list>(<argument><expr><name>pExp</name></expr></argument>, <argument><expr><name>pTargetNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pExprs</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// set the output buffer for the selectivity + tag query</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setSelectValueColumnInfo</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type>  <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier><modifier>*</modifier></type> <name>pValCtx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pValCtx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name> <init>= <expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>functionName</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><literal type="string">"_select_value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><literal type="string">"_group_key"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pValCtx</name><index>[<expr><name>num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fmIsSelectFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>functionId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>pCtx</name></name> <operator>=</operator> <name>pValCtx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pValCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>createSqlFunctionCtx</name><parameter_list>(<parameter><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfOutput</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>rowEntryInfoOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pFuncCtx</name> <init>= <expr><operator>(</operator><name>SqlFunctionCtx</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SqlFunctionCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFuncCtx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>rowEntryInfoOffset</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfOutput</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rowEntryInfoOffset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pFuncCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><operator>&amp;</operator><name><name>pExprInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SExprBasicInfo</name><modifier>*</modifier></type> <name>pFunct</name> <init>= <expr><operator>&amp;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><operator>&amp;</operator><name><name>pFuncCtx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>functionId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name></name> <operator>=</operator> <name>pExpr</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_FUNCTION</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SFuncExecEnv</name></type> <name>env</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>functionId</name></name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>pFunctNode</name><operator>-&gt;</operator><name>funcId</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>fmIsAggFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>fmIsIndefiniteRowsFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>isUdaf</name> <init>= <expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isUdaf</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>fmGetFuncExecFuncs</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>fpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>udfName</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>pFunctNode</name><operator>-&gt;</operator><name>functionName</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fmGetUdafExecFuncs</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>fpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>pCtx</name><operator>-&gt;</operator><name>fpSet</name><operator>.</operator><name>getEnv</name></name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>pFunctNode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>fmGetScalarFuncExecFuncs</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>functionId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>sfp</name><operator>.</operator><name>getEnv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>pCtx</name><operator>-&gt;</operator><name>sfp</name><operator>.</operator><name>getEnv</name></name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>_function</name><operator>.</operator><name>pFunctNode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>resDataInfo</name><operator>.</operator><name>interBufSize</name></name> <operator>=</operator> <name><name>env</name><operator>.</operator><name>calcMemSize</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_COLUMN</name> <operator>||</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_OPERATOR</name> <operator>||</operator>
               <name><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// for simple column, the result buffer needs to hold at least one element.</comment>
      <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>resDataInfo</name><operator>.</operator><name>interBufSize</name></name> <operator>=</operator> <name><name>pFunct</name><operator>-&gt;</operator><name>resSchema</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>numOfInputCols</name></name> <operator>=</operator> <name><name>pFunct</name><operator>-&gt;</operator><name>numOfParams</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pFunct</name><operator>-&gt;</operator><name>numOfParams</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>pColumnDataAgg</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pFunct</name><operator>-&gt;</operator><name>numOfParams</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pTsOutput</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>resDataInfo</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pFunct</name><operator>-&gt;</operator><name>resSchema</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>resDataInfo</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pFunct</name><operator>-&gt;</operator><name>resSchema</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>numOfParams</name></name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>numOfParams</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name><name>pFunct</name><operator>-&gt;</operator><name>pParam</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>saveHandle</name><operator>.</operator><name>currentPage</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>rowEntryInfoOffset</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>rowEntryInfoOffset</name><operator>)</operator><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SResultRowEntryInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
                                         <name><name>pFuncCtx</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>resDataInfo</name><operator>.</operator><name>interBufSize</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>setSelectValueColumnInfo</name><argument_list>(<argument><expr><name>pFuncCtx</name></expr></argument>, <argument><expr><name>numOfOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pFuncCtx</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// NOTE: sources columns are more than the destination SSDatablock columns.</comment>
<comment type="line">// doFilter in table scan needs every column even its output is false</comment>
<function><type><name>void</name></type> <name>relocateColumnData</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pColMatchInfo</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pCols</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>outputEveryColumn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfSrcCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>numOfSrcCols</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pColMatchInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pCols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColMatchItem</name><modifier>*</modifier></type>   <name>pmInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pColMatchInfo</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name> <operator>==</operator> <name><name>pmInfo</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pmInfo</name><operator>-&gt;</operator><name>dstSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name> <operator>&lt;</operator> <name><name>pmInfo</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>SInterval</name></type> <name>extractIntervalInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pTableScanNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInterval</name></type> <name>interval</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>interval</name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>interval</name></name></expr>,
      <expr><operator>.</operator><name>sliding</name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>sliding</name></name></expr>,
      <expr><operator>.</operator><name>intervalUnit</name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>,
      <expr><operator>.</operator><name>slidingUnit</name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>,
      <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>offset</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>interval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SColumn</name></type> <name>extractColumnFromColumnNode</name><parameter_list>(<parameter><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pColNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumn</name></type> <name>c</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>c</name><operator>.</operator><name>slotId</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>.</operator><name>colId</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>initQueryTableDataCond</name><parameter_list>(<parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pTableScanNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>TSDB_ORDER_ASC</name></expr> </then><else>: <expr><name>TSDB_ORDER_DESC</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// TODO: get it from stable scan node</comment>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name></name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>scanRange</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TIMEWINDOW_RANGE_CONTAINED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>startVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>endVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pTableScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanCols</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pColNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pExpr</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColNode</name><operator>-&gt;</operator><name>colType</name></name> <operator>==</operator> <name>COLUMN_TYPE_TAG</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>colId</name> <operator>=</operator> <name><name>pColNode</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanupQueryTableDataCond</name><parameter_list>(<parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>convertFillType</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name>TSDB_FILL_NONE</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FILL_MODE_PREV</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_FILL_PREV</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FILL_MODE_NONE</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_FILL_NONE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FILL_MODE_NULL</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_FILL_NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FILL_MODE_NEXT</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_FILL_NEXT</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FILL_MODE_VALUE</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_FILL_SET_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FILL_MODE_LINEAR</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_FILL_LINEAR</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_FILL_NONE</name></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getInitialStartTimeWindow</name><parameter_list>(<parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ascQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ascQuery</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>getAlignQueryTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// the start position of the first time window in the endpoint that spreads beyond the queried last timestamp</comment>
    <expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>getAlignQueryTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>key</name> <init>= <expr><name><name>w</name><operator>-&gt;</operator><name>skey</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>key</name> <operator>&lt;</operator> <name>ts</name></expr>)</condition> <block>{<block_content>  <comment type="line">// moving towards end</comment>
      <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>skey</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STimeWindow</name></type> <name>doCalculateTimeWindow</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>w</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>w</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <call><name>taosTimeTruncate</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>w</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>w</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STimeWindow</name></type> <name>getFirstQualifiedTimeWindow</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWindow</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>factor</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><operator>*</operator><name>pWindow</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>save</name> <init>= <expr><name>win</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <name>ts</name> <operator>&amp;&amp;</operator> <name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&gt;=</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>save</name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name>factor</name> <operator>*</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>factor</name> <operator>*</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>save</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// get the correct time window according to the handled timestamp</comment>
<comment type="line">// todo refactor</comment>
<function><type><name>STimeWindow</name></type> <name>getActiveTimeWindow</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SResultRowInfo</name><modifier>*</modifier></type> <name>pResultRowInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>,
                                <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>w</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>pageId</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// the first window, from the previous stored value</comment>
    <expr_stmt><expr><call><name>getInitialStartTimeWindow</name><argument_list>(<argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>w</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><name>w</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>getResultRowByPos</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pResultRowInfo</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>win</name></expr>;</expr_stmt>

  <comment type="line">// in case of typical time window, we can calculate time window directly.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name>ts</name> <operator>||</operator> <name><name>w</name><operator>.</operator><name>ekey</name></name> <operator>&lt;</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>doCalculateTimeWindow</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>!=</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// it is an sliding window query, in which sliding value is not equalled to</comment>
    <comment type="line">// interval value, and we need to find the first qualified time window.</comment>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>getFirstQualifiedTimeWindow</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>pInterval</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>w</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hasLimitOffsetInfo</name><parameter_list>(<parameter><decl><type><name>SLimitInfo</name><modifier>*</modifier></type> <name>pLimitInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>limit</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name><operator>.</operator><name>offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>limit</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
          <name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name><operator>.</operator><name>offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initLimitInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pLimit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pSLimit</name></decl></parameter>, <parameter><decl><type><name>SLimitInfo</name><modifier>*</modifier></type> <name>pLimitInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLimit</name></type> <name>limit</name> <init>= <expr><block>{<expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>getLimit</name><argument_list>(<argument><expr><name>pLimit</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <macro><name>getOffset</name><argument_list>(<argument>pLimit</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLimit</name></type> <name>slimit</name> <init>= <expr><block>{<expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>getLimit</name><argument_list>(<argument><expr><name>pSLimit</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <macro><name>getOffset</name><argument_list>(<argument>pSLimit</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>slimit</name></name> <operator>=</operator> <name>slimit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainOffset</name></name> <operator>=</operator> <name><name>limit</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLimitInfo</name><operator>-&gt;</operator><name>remainGroupOffset</name></name> <operator>=</operator> <name><name>slimit</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>tableListGetSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableListInfo</name><modifier>*</modifier></type> <name>pTableList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>tableListGetSuid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableListInfo</name><modifier>*</modifier></type> <name>pTableList</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pTableList</name><operator>-&gt;</operator><name>suid</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>tableListGetInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableListInfo</name><modifier>*</modifier></type> <name>pTableList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>getTableGroupId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableListInfo</name><modifier>*</modifier></type> <name>pTableList</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>tableUid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>slot</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableUid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tableUid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>map</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>slot</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pKeyInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><operator>*</operator><name>slot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pKeyInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name>tableUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>pKeyInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TODO handle the group offset info, fix it, the rule of group output will be broken by this function</comment>
<function><type><name>int32_t</name></type> <name>tableListAddTableInfo</name><parameter_list>(<parameter><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pTableList</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>gid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTableList</name><operator>-&gt;</operator><name>map</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTableList</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableKeyInfo</name></type> <name>keyInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>uid</name></expr>, <expr><operator>.</operator><name>groupId</name> <operator>=</operator> <name>gid</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>slot</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>slot</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"uid:%"</literal> <name>PRIu64</name> <literal type="string">", groupId:%"</literal> <name>PRIu64</name> <literal type="string">" added into table list, slot:%d, total:%d"</literal></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>slot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tableListGetGroupList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableListInfo</name><modifier>*</modifier></type> <name>pTableList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ordinalGroupIndex</name></decl></parameter>, <parameter><decl><type><name>STableKeyInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pKeyInfo</name></decl></parameter>,
                              <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>total</name> <init>= <expr><call><name>tableListGetOutputGroups</name><argument_list>(<argument><expr><name>pTableList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ordinalGroupIndex</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ordinalGroupIndex</name> <operator>&gt;=</operator> <name>total</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// here handle two special cases:</comment>
  <comment type="line">// 1. only one group exists, and 2. one table exists for each group.</comment>
  <if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>tableListGetSize</name><argument_list>(<argument><expr><name>pTableList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pKeyInfo</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>total</name> <operator>==</operator> <call><name>tableListGetSize</name><argument_list>(<argument><expr><name>pTableList</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pKeyInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>ordinalGroupIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><name><name>pTableList</name><operator>-&gt;</operator><name>groupOffset</name><index>[<expr><name>ordinalGroupIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ordinalGroupIndex</name> <operator>&lt;</operator> <name>total</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>pTableList</name><operator>-&gt;</operator><name>groupOffset</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pTableList</name><operator>-&gt;</operator><name>groupOffset</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>total</name> <operator>-</operator> <name><name>pTableList</name><operator>-&gt;</operator><name>groupOffset</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pKeyInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableList</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tableListGetOutputGroups</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableListInfo</name><modifier>*</modifier></type> <name>pTableList</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pTableList</name><operator>-&gt;</operator><name>numOfOuputGroups</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>oneTableForEachGroup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STableListInfo</name><modifier>*</modifier></type> <name>pTableList</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pTableList</name><operator>-&gt;</operator><name>oneTableForEachGroup</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>STableListInfo</name><modifier>*</modifier></type> <name>tableListCreate</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pListInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableListInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pListInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pListInfo</name><operator>-&gt;</operator><name>pTableList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableKeyInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pListInfo</name><operator>-&gt;</operator><name>pTableList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pListInfo</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pListInfo</name><operator>-&gt;</operator><name>map</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pListInfo</name><operator>-&gt;</operator><name>numOfOuputGroups</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>pListInfo</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>tableListDestroy</name><argument_list>(<argument><expr><name>pListInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>tableListDestroy</name><parameter_list>(<parameter><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pTableListInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTableListInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name> <operator>=</operator> <call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>groupOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTableListInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tableListClear</name><parameter_list>(<parameter><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pTableListInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTableListInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>groupOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>numOfOuputGroups</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>oneTableForEachGroup</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>orderbyGroupIdComparFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pInfo1</name> <init>= <expr><operator>(</operator><name>STableKeyInfo</name><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pInfo2</name> <init>= <expr><operator>(</operator><name>STableKeyInfo</name><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>==</operator> <name><name>pInfo2</name><operator>-&gt;</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name><name>pInfo1</name><operator>-&gt;</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pInfo2</name><operator>-&gt;</operator><name>groupId</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sortTableGroup</name><parameter_list>(<parameter><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pTableListInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>orderbyGroupIdComparFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>       <name>gid</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name> <operator>!=</operator> <name>gid</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>numOfOuputGroups</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>groupOffset</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pTableListInfo</name><operator>-&gt;</operator><name>numOfOuputGroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>groupOffset</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>groupOffset</name></name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pTableListInfo</name><operator>-&gt;</operator><name>numOfOuputGroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildGroupIdMapForAllTables</name><parameter_list>(<parameter><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pTableListInfo</name></decl></parameter>, <parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>group</name></decl></parameter>,
                                    <parameter><decl><type><name>bool</name></type> <name>groupSort</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>map</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type>   <name>groupByTbname</name> <init>= <expr><call><name>groupbyTbname</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfTables</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>groupByTbname</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTables</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>info</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>groupId</name></name> <operator>=</operator> <ternary><condition><expr><name>groupByTbname</name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>uid</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>oneTableForEachGroup</name></name> <operator>=</operator> <name>groupByTbname</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>groupSort</name> <operator>&amp;&amp;</operator> <name>groupByTbname</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>orderbyGroupIdComparFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>numOfOuputGroups</name></name> <operator>=</operator> <name>numOfTables</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>numOfOuputGroups</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getColInfoResultForGroupby</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>pTableListInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>groupSort</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sortTableGroup</name><argument_list>(<argument><expr><name>pTableListInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// add all table entry in the hash map</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>createScanTableListInfo</name><parameter_list>(<parameter><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pScanNode</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroupTags</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>groupSort</name></decl></parameter>, <parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>,
                                <parameter><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pTableListInfo</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagCond</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTagIndexCond</name></decl></parameter>,
                                <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idStr</name> <init>= <expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid handle, in creating operator tree, %s"</literal></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>getTableList</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><name>pScanNode</name></expr></argument>, <argument><expr><name>pTagCond</name></expr></argument>, <argument><expr><name>pTagIndexCond</name></expr></argument>, <argument><expr><name>pTableListInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to getTableList, code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTables</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTableListInfo</name><operator>-&gt;</operator><name>numOfOuputGroups</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st1</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>extractListTime</name></name> <operator>=</operator> <operator>(</operator><name>st1</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"extract queried table list completed, %d tables, elapsed time:%.2f ms %s"</literal></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>,
         <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>extractListTime</name></name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfTables</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"no table qualified for query, %s"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildGroupIdMapForAllTables</name><argument_list>(<argument><expr><name>pTableListInfo</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>pGroupTags</name></expr></argument>, <argument><expr><name>groupSort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>groupIdMapTime</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st1</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"generate group id map completed, elapsed time:%.2f ms %s"</literal></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>groupIdMapTime</name></name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>printDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pBlock</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"===stream===printDataBlock: Block is Null or Empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>dumpBlockData</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
