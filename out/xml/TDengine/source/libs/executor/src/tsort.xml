<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/tsort.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlosertree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tpagedbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<struct>struct <name>STupleHandle</name> <block>{
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>rowIndex</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>SSortHandle</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>pageSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>numOfPages</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pSortInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pOrderedSource</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>loops</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>       <name>sortElapsed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>startTs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>       <name>totalElapsed</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>           <name>sourceId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>      <name>pDataBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsortComparParam</name></type> <name>cmpParam</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>numOfCompletedSources</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>              <name>opened</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type>       <name>idStr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>              <name>inMemSort</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>              <name>needAdjust</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STupleHandle</name></type>      <name>tupleHandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>             <name>param</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>beforeFp</name>)<parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>_sort_fetch_block_fn_t</name></type>  <name>fetchfp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>_sort_merge_compar_fn_t</name></type> <name>comparFn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pMergeTree</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>msortComparFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pLeft</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>tsortGetSortedDataBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSortHandle</name><modifier>*</modifier></type> <name>pSortHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>createOneDataBlock</name><argument_list>(<argument><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *
 * @param type
 * @return
 */</comment>
<function><type><name>SSortHandle</name><modifier>*</modifier></type> <name>tsortCreateSortHandle</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pSortInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pageSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfPages</name></decl></parameter>,
                                   <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pSortHandle</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSortHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>=</operator> <name>pageSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>=</operator> <name>numOfPages</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pSortInfo</name></name> <operator>=</operator> <name>pSortInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>loops</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>createOneDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>orderInfo</name></name> <operator>=</operator> <name>pSortInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>cmpGroupId</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortSetComparFp</name><argument_list>(<argument><expr><name>pSortHandle</name></expr></argument>, <argument><expr><name>msortComparFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>idstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>idStr</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pSortHandle</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sortComparCleanup</name><parameter_list>(<parameter><decl><type><name>SMsortComparParam</name><modifier>*</modifier></type> <name>cmpParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// NOTICE: pSource may be, if it is SORT_MULTISOURCE_MERGE</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cmpParam</name><operator>-&gt;</operator><name>numOfSources</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><name><name>cmpParam</name><operator>-&gt;</operator><name>pSources</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>cmpParam</name><operator>-&gt;</operator><name>numOfSources</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsortClearOrderdSource</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pOrderedSource</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pOrderedSource</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pOrderedSource</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pSource</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// release pageIdList</comment>
    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pSource</name><operator>)</operator><operator>-&gt;</operator><name>pageIdList</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pSource</name><operator>)</operator><operator>-&gt;</operator><name>pageIdList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pSource</name><operator>)</operator><operator>-&gt;</operator><name>param</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><operator>(</operator><operator>*</operator><name>pSource</name><operator>)</operator><operator>-&gt;</operator><name>onlyRef</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pSource</name><operator>)</operator><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>pOrderedSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsortDestroySortHandle</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pSortHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSortHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsortClose</name><argument_list>(<argument><expr><name>pSortHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pMergeTree</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tMergeTreeDestroy</name><argument_list>(<argument><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>destroyDiskbasedBuf</name><argument_list>(<argument><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsortClearOrderdSource</name><argument_list>(<argument><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pSortHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsortAddSource</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pSortHandle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pSource</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pSortHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doAddNewExternalMemSource</name><parameter_list>(<parameter><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pAllSources</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                                         <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>sourceId</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pPageIdList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSortSource</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSource</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pPageIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>pageIdList</name></name> <operator>=</operator> <name>pPageIdList</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pAllSources</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>sourceId</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowSize</name> <init>= <expr><call><name>blockDataGetSerialRowSize</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// The value of numOfRows must be greater than 0, which is guaranteed by the previous memory allocation</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>=
      <expr><operator>(</operator><call><name>getBufPageSize</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>blockDataGetSerialMetaSize</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <name>rowSize</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doAddToBuf</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osTempSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_AVAIL_DISK</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Add to buf failed since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createDiskbasedBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>*</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>,
                                      <argument><expr><literal type="string">"doAddToBuf"</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dBufSetPrintInfo</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pPageIdList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>stop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataSplitRows</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stop</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>blockDataExtractBlock</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pPageIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>pageId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pPage</name> <init>= <expr><call><name>getNewBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pPage</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pPageIdList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>blockDataGetSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <call><name>getBufPageSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>blockDataToBuf</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>stop</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createOneDataBlock</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>doAddNewExternalMemSource</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>sourceId</name></name></expr></argument>, <argument><expr><name>pPageIdList</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setCurrentSourceDone</name><parameter_list>(<parameter><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>pSource</name></decl></parameter>, <parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>pHandle</name><operator>-&gt;</operator><name>numOfCompletedSources</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sortComparInit</name><parameter_list>(<parameter><decl><type><name>SMsortComparParam</name><modifier>*</modifier></type> <name>pParam</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pSources</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>startIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>endIndex</name></decl></parameter>,
                              <parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>pSources</name></name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pSources</name></expr></argument>, <argument><expr><name>startIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>numOfSources</name></name> <operator>=</operator> <operator>(</operator><name>endIndex</name> <operator>-</operator> <name>startIndex</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// multi-pass internal merge sort is required</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osTempSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_NO_AVAIL_DISK</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"Sort compare init failed since %s, %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createDiskbasedBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>*</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>,
                              <argument><expr><literal type="string">"sortComparInit"</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dBufSetPrintInfo</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SORT_SINGLESOURCE_SORT</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pParam</name><operator>-&gt;</operator><name>numOfSources</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>pSources</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <comment type="line">// set current source is done</comment>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pageIdList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setCurrentSourceDone</name><argument_list>(<argument><expr><name>pSource</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pPgId</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pageIdList</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pageIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pPage</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pPgId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataFromBuf</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"start init for the multiway merge sort, %s"</literal></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pParam</name><operator>-&gt;</operator><name>numOfSources</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>pSources</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name> <operator>=</operator> <call><name><name>pHandle</name><operator>-&gt;</operator><name>fetchfp</name></name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// set current source is done</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setCurrentSourceDone</name><argument_list>(<argument><expr><name>pSource</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>et</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"init for merge sort completed, elapsed time:%.2f ms, %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>appendOneRowToDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pSource</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>             <name>isNull</name> <init>= <expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pSrcColInfo</name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>*</operator><name>rowIndex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrcColInfo</name></expr></argument>, <argument><expr><operator>*</operator><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>rowIndex</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>adjustMergeTreeForNextTuple</name><parameter_list>(<parameter><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>pSource</name></decl></parameter>, <parameter><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name></decl></parameter>, <parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>,
                                           <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfCompleted</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/*
   * load a new SDataBlock into memory of a given intermediate data-set source,
   * since it's last record in buffer has been chosen to be processed, as the winner of loser-tree
   */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name> <operator>&gt;=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SORT_SINGLESOURCE_SORT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>pageIndex</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pSource</name><operator>-&gt;</operator><name>pageIndex</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pageIdList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfCompleted</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>pageIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pPgId</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pageIdList</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pageIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pPage</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pPgId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataFromBuf</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name> <operator>=</operator> <call><name><name>pHandle</name><operator>-&gt;</operator><name>fetchfp</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSortSource</name><operator>*</operator><operator>)</operator><name>pSource</name><operator>)</operator><operator>-&gt;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfCompleted</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * Adjust loser tree otherwise, according to new candidate data
   * if the loser tree is rebuild completed, we do not need to adjust
   */</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>leafNodeIndex</name> <init>= <expr><call><name>tMergeTreeGetAdjustIndex</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG_VIEW</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"before adjust:\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMergeTreePrint</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>tMergeTreeAdjust</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name>leafNodeIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG_VIEW</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nafter adjust:\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMergeTreePrint</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>getSortedBlockDataInner</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SMsortComparParam</name><modifier>*</modifier></type> <name>cmpParam</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cmpParam</name><operator>-&gt;</operator><name>numOfSources</name></name> <operator>==</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>numOfCompletedSources</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><call><name>tMergeTreeGetChosenIndex</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>cmpParam</name><operator>)</operator><operator>.</operator><name>pSources</name></name><index>[<expr><name>index</name></expr>]</index></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendOneRowToDataBlock</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>adjustMergeTreeForNextTuple</name><argument_list>(<argument><expr><name>pSource</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>numOfCompletedSources</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>msortComparFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pLeft</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>pLeftIdx</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pLeft</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>pRightIdx</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pRight</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMsortComparParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><operator>(</operator><name>SMsortComparParam</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>orderInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>pLeftSource</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>pSources</name><index>[<expr><name>pLeftIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>pRightSource</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>pSources</name><index>[<expr><name>pRightIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// this input is exhausted, set the special value to denote this</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pLeftSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRightSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pLeftBlock</name> <init>= <expr><name><name>pLeftSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pRightBlock</name> <init>= <expr><name><name>pRightSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pParam</name><operator>-&gt;</operator><name>cmpGroupId</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pLeftBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>!=</operator> <name><name>pRightBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><ternary><condition><expr><name><name>pLeftBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>&lt;</operator> <name><name>pRightBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockOrderInfo</name><modifier>*</modifier></type> <name>pOrder</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pLeftColInfoData</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name><name>pLeftBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pOrder</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>leftNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pLeftColInfoData</name><operator>-&gt;</operator><name>hasNull</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pLeftBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>leftNull</name> <operator>=</operator> <call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pLeftColInfoData</name></expr></argument>, <argument><expr><name><name>pLeftSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>leftNull</name> <operator>=</operator>
            <call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pLeftColInfoData</name></expr></argument>, <argument><expr><name><name>pLeftBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pLeftSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name></expr></argument>, <argument><expr><name><name>pLeftBlock</name><operator>-&gt;</operator><name>pBlockAgg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pRightColInfoData</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name><name>pRightBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pOrder</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>             <name>rightNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRightColInfoData</name><operator>-&gt;</operator><name>hasNull</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pRightBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rightNull</name> <operator>=</operator> <call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pRightColInfoData</name></expr></argument>, <argument><expr><name><name>pRightSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rightNull</name> <operator>=</operator> <call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pRightColInfoData</name></expr></argument>, <argument><expr><name><name>pRightBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pRightSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name></expr></argument>,
                                  <argument><expr><name><name>pRightBlock</name><operator>-&gt;</operator><name>pBlockAgg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>leftNull</name> <operator>&amp;&amp;</operator> <name>rightNull</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>  <comment type="line">// continue to next slot</comment>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>rightNull</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><ternary><condition><expr><name><name>pOrder</name><operator>-&gt;</operator><name>nullFirst</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>leftNull</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><ternary><condition><expr><name><name>pOrder</name><operator>-&gt;</operator><name>nullFirst</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>left1</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pLeftColInfoData</name></expr></argument>, <argument><expr><name><name>pLeftSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>right1</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pRightColInfoData</name></expr></argument>, <argument><expr><name><name>pRightSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>fn</name> <init>= <expr><call><name>getKeyComparFunc</name><argument_list>(<argument><expr><name><name>pLeftColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pOrder</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fn</name><argument_list>(<argument><expr><name>left1</name></expr></argument>, <argument><expr><name>right1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doInternalMergeSort</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfSources</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfSources</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Calculate the I/O counts to complete the data sort.</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>sortPass</name> <init>= <expr><call><name>floorl</name><argument_list>(<argument><expr><call><name>log2</name><argument_list>(<argument><expr><name>numOfSources</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log2</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>numOfPages</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>totalElapsed</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>startTs</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>sortPass</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr> ?</condition><then> <expr><call><name>getTotalBufSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s %d rounds mergesort required to complete the sort, first-round sorted data size:%"</literal> <name>PRIzu</name>
           <literal type="string">", sort elapsed:%"</literal> <name>PRId64</name> <literal type="string">", total elapsed:%"</literal> <name>PRId64</name></expr></argument>,
           <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>sortPass</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>sortElapsed</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>totalElapsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s ordered source:%"</literal> <name>PRIzu</name> <literal type="string">", available buf:%d, no need internal sort"</literal></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>, <argument><expr><name>numOfSources</name></expr></argument>,
           <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>numOfPages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><call><name>blockDataGetCapacityInRow</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// the initial pass + sortPass + final mergePass</comment>
  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>loops</name></name> <operator>=</operator> <name>sortPass</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfSorted</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>sortPass</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pResList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfInputSources</name> <init>= <expr><name><name>pHandle</name><operator>-&gt;</operator><name>numOfPages</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>sortGroup</name> <init>= <expr><operator>(</operator><name>numOfSorted</name> <operator>+</operator> <name>numOfInputSources</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>numOfInputSources</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Only *numOfInputSources* can be loaded into buffer to perform the external sort.</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sortGroup</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>sourceId</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>numOfInputSources</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>numOfSorted</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <name>numOfSorted</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>numOfSources</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>i</name> <operator>*</operator> <name>numOfInputSources</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>sortComparInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>numOfInputSources</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator>
          <call><name>tMergeTreeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>numOfSources</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>comparFn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pPageIdList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><call><name>getSortedBlockDataInner</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name></name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pDataBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>pageId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pPage</name> <init>= <expr><call><name>getNewBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pPage</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pPageIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>terrno</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pPageIdList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>=
            <expr><call><name>blockDataGetSize</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <call><name>getBufPageSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>blockDataToBuf</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>

      <expr_stmt><expr><call><name>sortComparCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tMergeTreeDestroy</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>numOfCompletedSources</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createOneDataBlock</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doAddNewExternalMemSource</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pResList</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>sourceId</name></name></expr></argument>, <argument><expr><name>pPageIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>tsortClearOrderdSource</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayAddAll</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>, <argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfSorted</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>el</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>totalElapsed</name></name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SDiskbasedBufStatis</name></type> <name>statis</name> <init>= <expr><call><name>getDBufStatis</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s %d round mergesort, elapsed:%"</literal> <name>PRId64</name> <literal type="string">" readDisk:%.2f Kb, flushDisk:%.2f Kb"</literal></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>el</name></expr></argument>,
           <argument><expr><name><name>statis</name><operator>.</operator><name>loadBytes</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>, <argument><expr><name><name>statis</name><operator>.</operator><name>flushBytes</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SORT_MULTISOURCE_MERGE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SORT_SINGLESOURCE_SORT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>comparFn</name></name> <operator>=</operator> <name>msortComparFn</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>numOfSources</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// get sort page size</comment>
<function><type><name>int32_t</name></type> <name>getProperSortPageSize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>rowSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pgSize</name> <init>= <expr><name>rowSize</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <call><name>blockDataGetSerialMetaSize</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pgSize</name> <operator>&lt;</operator> <name>DEFAULT_PAGESIZE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>DEFAULT_PAGESIZE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pgSize</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createInitialSources</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sortBufSize</name> <init>= <expr><name><name>pHandle</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>*</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pageSize</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SORT_SINGLESOURCE_SORT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>source</name> <init>= <expr><operator>*</operator><name>pSource</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pSource</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>tsortClearOrderdSource</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name><name>pHandle</name><operator>-&gt;</operator><name>fetchfp</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>=</operator> <call><name>getProperSortPageSize</name><argument_list>(<argument><expr><call><name>blockDataGetRowSize</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// todo, number of pages are set according to the total available sort buffer</comment>
        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sortBufSize</name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>numOfPages</name></name> <operator>*</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pageSize</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>createOneDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>beforeFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>pHandle</name><operator>-&gt;</operator><name>beforeFp</name></name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataMerge</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>param</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>onlyRef</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>blockDataGetSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>sortBufSize</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Perform the in-memory sort and then flush data in the buffer into disk.</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataSort</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pSortInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>param</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>onlyRef</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>el</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>p</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>sortElapsed</name></name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>doAddToBuf</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>param</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>onlyRef</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>blockDataGetSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Perform the in-memory sort and then flush data in the buffer into disk.</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataSort</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pSortInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>el</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>p</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>sortElapsed</name></name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>

      <comment type="line">// All sorted data can fit in memory, external memory sort is not needed. Return to directly</comment>
      <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>sortBufSize</name> <operator>&amp;&amp;</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>numOfSources</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>inMemSort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>loops</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>tupleHandle</name><operator>.</operator><name>rowIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>tupleHandle</name><operator>.</operator><name>pBlock</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>doAddToBuf</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsortOpen</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>opened</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>fetchfp</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>comparFn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>opened</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createInitialSources</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// do internal sort</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doInternalMergeSort</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfSources</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfSources</name> <operator>&lt;=</operator> <call><name>getNumOfInMemBufPages</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfSources</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sortComparInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pOrderedSource</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numOfSources</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>tMergeTreeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>numOfSources</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>comparFn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsortClose</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// do nothing</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsortSetFetchRawDataFp</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>_sort_fetch_block_fn_t</name></type> <name>fetchFp</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fp</name>)<parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                               <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>fetchfp</name></name> <operator>=</operator> <name>fetchFp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>beforeFp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsortSetComparFp</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>_sort_merge_compar_fn_t</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>comparFn</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsortSetCompareGroupId</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compareGroupId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>cmpGroupId</name></name> <operator>=</operator> <name>compareGroupId</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STupleHandle</name><modifier>*</modifier></type> <name>tsortNextTuple</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>numOfSources</name></name> <operator>==</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>numOfCompletedSources</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// All the data are hold in the buffer, no external sort is invoked.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>inMemSort</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>tupleHandle</name><operator>.</operator><name>rowIndex</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>tupleHandle</name><operator>.</operator><name>rowIndex</name></name> <operator>==</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>numOfCompletedSources</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>tupleHandle</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>index</name> <init>= <expr><call><name>tMergeTreeGetChosenIndex</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSortSource</name><modifier>*</modifier></type> <name>pSource</name> <init>= <expr><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>pSources</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>needAdjust</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>adjustMergeTreeForNextTuple</name><argument_list>(<argument><expr><name>pSource</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>numOfCompletedSources</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>numOfSources</name></name> <operator>==</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>numOfCompletedSources</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Get the adjusted value after the loser tree is updated.</comment>
  <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>tMergeTreeGetChosenIndex</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pSource</name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>cmpParam</name><operator>.</operator><name>pSources</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>tupleHandle</name><operator>.</operator><name>rowIndex</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>tupleHandle</name><operator>.</operator><name>pBlock</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>pBlock</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>needAdjust</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSource</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>rowIndex</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <return>return <expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>tupleHandle</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tsortIsNullVal</name><parameter_list>(<parameter><decl><type><name>STupleHandle</name><modifier>*</modifier></type> <name>pVHandle</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pVHandle</name><operator>-&gt;</operator><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>colIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfoSrc</name></expr></argument>, <argument><expr><name><name>pVHandle</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>tsortGetValue</name><parameter_list>(<parameter><decl><type><name>STupleHandle</name><modifier>*</modifier></type> <name>pVHandle</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name><name>pVHandle</name><operator>-&gt;</operator><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>colIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pColInfo</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name><name>pVHandle</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>tsortGetGroupId</name><parameter_list>(<parameter><decl><type><name>STupleHandle</name><modifier>*</modifier></type> <name>pVHandle</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pVHandle</name><operator>-&gt;</operator><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>SSortExecInfo</name></type> <name>tsortGetSortExecInfo</name><parameter_list>(<parameter><decl><type><name>SSortHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortExecInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>sortMethod</name></name> <operator>=</operator> <name>SORT_QSORT_T</name></expr>;</expr_stmt> <comment type="line">// by default</comment>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>sortBuffer</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">1048576</literal></expr>;</expr_stmt>  <comment type="line">// 2mb by default</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>sortBuffer</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>*</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>numOfPages</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>sortMethod</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pHandle</name><operator>-&gt;</operator><name>inMemSort</name></name></expr> ?</condition><then> <expr><name>SORT_QSORT_T</name></expr> </then><else>: <expr><name>SORT_SPILLED_MERGE_SORT_T</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>loops</name></name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>loops</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SDiskbasedBufStatis</name></type> <name>st</name> <init>= <expr><call><name>getDBufStatis</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>writeBytes</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>flushBytes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>readBytes</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>loadBytes</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>
</unit>
