<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/tlinearhash.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlinearhash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tpagedbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LHASH_CAP_RATIO</name></cpp:macro> <cpp:value>0.85</cpp:value></cpp:define>

<comment type="line">// Always located in memory</comment>
<typedef>typedef <type><struct>struct <name>SLHashBucket</name> <block>{
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pPageIdList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name></decl>;</decl_stmt>  <comment type="line">// the number of element in this entry</comment>
}</block></struct></type> <name>SLHashBucket</name>;</typedef>

<struct>struct <name>SLHashObj</name> <block>{
  <decl_stmt><decl><type><name>SDiskbasedBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type>     <name>hashFn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLHashBucket</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBucket</name></decl>;</decl_stmt>  <comment type="line">// entry list</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>tuplesPerPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>numOfAlloc</name></decl>;</decl_stmt>    <comment type="line">// number of allocated bucket ptr slot</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>bits</name></decl>;</decl_stmt>          <comment type="line">// the number of bits used in hash</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>numOfBuckets</name></decl>;</decl_stmt>  <comment type="line">// the number of buckets</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>size</name></decl>;</decl_stmt>          <comment type="line">// the number of total items</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/**
 * the data struct for each hash node
 * +-----------+-------+--------+
 * | SLHashNode|  key  |  data  |
 * +-----------+-------+--------+
 */</comment>
<typedef>typedef <type><struct>struct <name>SLHashNode</name> <block>{
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>keyLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>dataLen</name></decl>;</decl_stmt>
}</block></struct></type> <name>SLHashNode</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LHASH_NODE_KEY</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(((char*)(_n)) + sizeof(SLHashNode))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LHASH_NODE_DATA</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char*)(_n) + sizeof(SLHashNode) + ((SLHashNode*)(_n))-&gt;keyLen)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LHASH_NODE_LEN</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(sizeof(SLHashNode) + ((SLHashNode*)(_n))-&gt;keyLen + ((SLHashNode*)(_n))-&gt;dataLen)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>doAddNewBucket</name><parameter_list>(<parameter><decl><type><name>SLHashObj</name><modifier>*</modifier></type> <name>pHashObj</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doGetBucketIdFromHashVal</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>hashv</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>hashv</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ul</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doGetAlternativeBucketId</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>bucketId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfBuckets</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><name>bucketId</name> <operator>-</operator> <operator>(</operator><literal type="number">1ul</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;</operator> <name>numOfBuckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doGetRelatedSplitBucketId</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>bucketId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>splitBucketId</name> <init>= <expr><operator>(</operator><literal type="number">1ul</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>^</operator> <name>bucketId</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>splitBucketId</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doCopyObject</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>p</name> <operator>=</operator> <name>keyLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>p</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>keyLen</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doAddToBucket</name><parameter_list>(<parameter><decl><type><name>SLHashObj</name><modifier>*</modifier></type> <name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>SLHashBucket</name><modifier>*</modifier></type> <name>pBucket</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keyLen</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>pageId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>pPage</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pPage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// put to current buf page</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nodeSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLHashNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>keyLen</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nodeSize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <call><name>getBufPageSize</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name>nodeSize</name> <operator>&gt;</operator> <call><name>getBufPageSize</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// allocate the overflow buffer page to hold this k/v.</comment>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>newPageId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>pNewPage</name> <init>= <expr><call><name>getNewBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newPageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pNewPage</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newPageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>doCopyObject</name><argument_list>(<argument><expr><name><name>pNewPage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNewPage</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nodeSize</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pNewPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pNewPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pPage</name> <operator>+</operator> <name><name>pPage</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doCopyObject</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>num</name></name> <operator>+=</operator> <name>nodeSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <comment type="line">//  printf("===&gt; add to bucket:0x%x, num:%d, key:%d\n", index, pBucket-&gt;size, *(int*) key);</comment>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doRemoveFromBucket</name><parameter_list>(<parameter><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>pPage</name></decl></parameter>, <parameter><decl><type><name>SLHashNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SLHashBucket</name><modifier>*</modifier></type> <name>pBucket</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pPage</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pNode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>GET_LHASH_NODE_LEN</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pNode</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pEnd</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pPage</name> <operator>+</operator> <name><name>pPage</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>pEnd</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>num</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// this page is empty, could be recycle in the future.</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doTrimBucketPages</name><parameter_list>(<parameter><decl><type><name>SLHashObj</name><modifier>*</modifier></type> <name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>SLHashBucket</name><modifier>*</modifier></type> <name>pBucket</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfPages</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfPages</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>   <name>firstPage</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>pFirst</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>firstPage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>   <name>pageId</name> <init>= <expr><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>pLast</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pLast</name><operator>-&gt;</operator><name>num</name></name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <comment type="line">// this is empty</comment>
    <expr_stmt><expr><call><name>dBufSetBufPageRecycled</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>, <argument><expr><name>numOfPages</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>pStart</name> <init>= <expr><name><name>pLast</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nodeSize</name> <init>= <expr><call><name>GET_LHASH_NODE_LEN</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pFirst</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name>nodeSize</name> <operator>&lt;</operator> <call><name>getBufPageSize</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pFirst</name><operator>)</operator> <operator>+</operator> <name><name>pFirst</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SLHashNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLHashNode</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>doCopyObject</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>GET_LHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>, <argument><expr><call><name>GET_LHASH_NODE_DATA</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pFirst</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pLast</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name>nodeSize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pFirst</name><operator>-&gt;</operator><name>num</name></name> <operator>+=</operator> <name>nodeSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pLast</name><operator>-&gt;</operator><name>num</name></name> <operator>-=</operator> <name>nodeSize</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>nodeSize</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pLast</name><operator>-&gt;</operator><name>num</name></name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <comment type="line">// this is empty</comment>
        <expr_stmt><expr><call><name>dBufSetBufPageRecycled</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>, <argument><expr><name>numOfPages</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>nodeSize</name> <operator>=</operator> <call><name>GET_LHASH_NODE_LEN</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// move to the front of pLast page</comment>
      <if_stmt><if>if <condition>(<expr><name>pStart</name> <operator>!=</operator> <name><name>pLast</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pLast</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pLast</name><operator>)</operator> <operator>+</operator> <name><name>pLast</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>pStart</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doAddNewBucket</name><parameter_list>(<parameter><decl><type><name>SLHashObj</name><modifier>*</modifier></type> <name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>numOfAlloc</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>newLen</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfAlloc</name></name> <operator>*</operator> <literal type="number">1.25</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>newLen</name> <operator>==</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>numOfAlloc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>newLen</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name> <operator>*</operator> <name>newLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>POINTER_BYTES</name> <operator>*</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newLen</name> <operator>-</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name></name> <operator>=</operator> <operator>(</operator><name>SLHashBucket</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfAlloc</name></name> <operator>=</operator> <name>newLen</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SLHashBucket</name><modifier>*</modifier></type> <name>pBucket</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLHashBucket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name><index>[<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr>]</index></name> <operator>=</operator> <name>pBucket</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>pageId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>getNewBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <comment type="line">//  printf("---------------add new bucket, id:0x%x, total:%d\n", pHashObj-&gt;numOfBuckets - 1, pHashObj-&gt;numOfBuckets);</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLHashObj</name><modifier>*</modifier></type> <name>tHashInit</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>inMemPages</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pageSize</name></decl></parameter>, <parameter><decl><type><name>_hash_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfTuplePerPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLHashObj</name><modifier>*</modifier></type> <name>pHashObj</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLHashObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHashObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osTempSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_AVAIL_DISK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tHash Init failed since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createDiskbasedBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>, <argument><expr><name>inMemPages</name> <operator>*</operator> <name>pageSize</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// disable compress when flushing to disk</comment>
  <expr_stmt><expr><call><name>setBufPageCompressOnDisk</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block" format="doxygen">/**
   * The number of bits in the hash value, which is used to decide the exact bucket where the object should be located
   * in. The initial value is 0.
   */</comment>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFn</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>tuplesPerPage</name></name> <operator>=</operator> <name>numOfTuplePerPage</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfAlloc</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>  <comment type="line">// initial allocated array list</comment>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfAlloc</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doAddNewBucket</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyDiskbasedBuf</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pHashObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>tHashCleanup</name><parameter_list>(<parameter><decl><type><name>SLHashObj</name><modifier>*</modifier></type> <name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>destroyDiskbasedBuf</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pPageIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tHashPut</name><parameter_list>(<parameter><decl><type><name>SLHashObj</name><modifier>*</modifier></type> <name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pHashObj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SLHashBucket</name><modifier>*</modifier></type> <name>pBucket</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doAddToBucket</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pBucket</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>hashVal</name> <init>= <expr><call><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><call><name>doGetBucketIdFromHashVal</name><argument_list>(<argument><expr><name>hashVal</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>newBucketId</name> <init>= <expr><call><name>doGetAlternativeBucketId</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">//      printf("bucketId: 0x%x not exists, put it into 0x%x instead\n", v, newBucketId);</comment>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>newBucketId</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SLHashBucket</name><modifier>*</modifier></type> <name>pBucket</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><call><name>doAddToBucket</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pBucket</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// Too many records, needs to bucket split</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name> <operator>*</operator> <name>LHASH_CAP_RATIO</name> <operator>*</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>tuplesPerPage</name></name><operator>)</operator> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>newBucketId</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doAddNewBucket</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfBits</name> <init>= <expr><call><name>ceil</name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfBits</name> <operator>&gt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">//      printf("extend the bits from %d to %d, new bucket:%d\n", pHashObj-&gt;bits, numOfBits, newBucketId);</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfBits</name> <operator>==</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>numOfBits</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>splitBucketId</name> <init>= <expr><call><name>doGetRelatedSplitBucketId</name><argument_list>(<argument><expr><name>newBucketId</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// load all data in this bucket and check if the data needs to relocated into the new bucket</comment>
    <decl_stmt><decl><type><name>SLHashBucket</name><modifier>*</modifier></type> <name>pBucket</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name><index>[<expr><name>splitBucketId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <comment type="line">//    printf("split %d items' bucket:0x%x to new bucket:0x%x\n", pBucket-&gt;size, splitBucketId, newBucketId);</comment>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type>    <name>pageId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>pStart</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SLHashNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLHashNode</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>k</name> <init>= <expr><call><name>GET_LHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>hashv</name> <init>= <expr><call><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFn</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>v1</name> <init>= <expr><call><name>doGetBucketIdFromHashVal</name><argument_list>(<argument><expr><name>hashv</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>v1</name> <operator>!=</operator> <name>splitBucketId</name></expr>)</condition> <block>{<block_content>  <comment type="line">// place it into the new bucket</comment>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>v1</name> <operator>==</operator> <name>newBucketId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line">//          printf("move key:%d to 0x%x bucket, remain items:%d\n", *(int32_t*)k, v1, pBucket-&gt;size - 1);</comment>

          <decl_stmt><decl><type><name>SLHashBucket</name><modifier>*</modifier></type> <name>pNewBucket</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name><index>[<expr><name>newBucketId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>doAddToBucket</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pNewBucket</name></expr></argument>, <argument><expr><name>newBucketId</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GET_LHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>,
                        <argument><expr><call><name>GET_LHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>doRemoveFromBucket</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <comment type="line">//          printf("check key:%d, located into: %d, skip it\n", *(int*) k, v1);</comment>

          <decl_stmt><decl><type><name>int32_t</name></type> <name>nodeSize</name> <init>= <expr><call><name>GET_LHASH_NODE_LEN</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>nodeSize</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>doTrimBucketPages</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>pBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>tHashGet</name><parameter_list>(<parameter><decl><type><name>SLHashObj</name><modifier>*</modifier></type> <name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pHashObj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>keyLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>hashv</name> <init>= <expr><call><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bucketId</name> <init>= <expr><call><name>doGetBucketIdFromHashVal</name><argument_list>(<argument><expr><name>hashv</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>bucketId</name> <operator>&gt;=</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bucketId</name> <operator>=</operator> <call><name>doGetAlternativeBucketId</name><argument_list>(<argument><expr><name>bucketId</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SLHashBucket</name><modifier>*</modifier></type> <name>pBucket</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBucket</name><index>[<expr><name>bucketId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>pageId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pPageIdList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pStart</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SLHashNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLHashNode</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>k</name> <init>= <expr><call><name>GET_LHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>==</operator> <name>keyLen</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>GET_LHASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>GET_LHASH_NODE_LEN</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tHashRemove</name><parameter_list>(<parameter><decl><type><name>SLHashObj</name><modifier>*</modifier></type> <name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tHashPrint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SLHashObj</name><modifier>*</modifier></type> <name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"==================== linear hash ====================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"total bucket:%d, size:%"</literal> <name>PRId64</name> <literal type="string">", ratio:%.2f\n"</literal></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>LHASH_CAP_RATIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dBufSetPrintInfo</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>LINEAR_HASH_DATA</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>numOfBuckets</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <comment type="line">//      printf("bucket: 0x%x, obj:%d, page:%d\n", i, pHashObj-&gt;pBucket[i]-&gt;size,</comment>
      <comment type="line">//             (int)taosArrayGetSize(pHashObj-&gt;pBucket[i]-&gt;pPageIdList));</comment>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>dBufPrintStatis</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
