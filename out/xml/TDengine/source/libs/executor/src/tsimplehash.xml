<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/tsimplehash.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsimplehash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHASH_DEFAULT_LOAD_FACTOR</name></cpp:macro> <cpp:value>0.75</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_MAX_CAPACITY</name></cpp:macro>         <cpp:value>(1024 * 1024 * 16L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHASH_NEED_RESIZE</name><parameter_list>(<parameter><type><name>_h</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>((_h)-&gt;size &gt;= (_h)-&gt;capacity * SHASH_DEFAULT_LOAD_FACTOR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SHASH_NODE_KEY</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>, <parameter><type><name>_dl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char *)(_n) + sizeof(SHNode) + (_dl))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SHASH_NODE_DATA</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>((char *)(_n) + sizeof(SHNode))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_INDEX</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) &amp; ((c)-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_HASH_NODE</name><parameter_list>(<parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro>   \
  <cpp:value>do {                       \
    taosMemoryFreeClear(_n); \
  } while (0);</cpp:value></cpp:define>

<struct>struct <name>SSHashObj</name> <block>{
  <decl_stmt><decl><type><name>SHNode</name>    <modifier>*</modifier><modifier>*</modifier></type><name>hashList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>capacity</name></decl>;</decl_stmt>  <comment type="line">// number of slots</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>size</name></decl>;</decl_stmt>      <comment type="line">// number of elements in hash table</comment>
  <decl_stmt><decl><type><name>_hash_fn_t</name></type>  <name>hashFp</name></decl>;</decl_stmt>    <comment type="line">// hash function</comment>
  <decl_stmt><decl><type><name>_equal_fn_t</name></type> <name>equalFp</name></decl>;</decl_stmt>   <comment type="line">// equal function</comment>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>taosHashCapacity</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>length</name> <operator>&lt;</operator> <name>HASH_MAX_CAPACITY</name></expr> ?</condition><then> <expr><name>length</name></expr> </then><else>: <expr><name>HASH_MAX_CAPACITY</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1u</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSHashObj</name> <modifier>*</modifier></type><name>tSimpleHashInit</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>_hash_fn_t</name></type> <name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fn</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>capacity</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>capacity</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name> <init>= <expr><operator>(</operator><name>SSHashObj</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSHashObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHashObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// the max slots is not defined by user</comment>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <call><name>taosHashCapacity</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>equalFp</name></name> <operator>=</operator> <name>memcmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFp</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name> <operator>=</operator> <operator>(</operator><name>SHNode</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pHashObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tSimpleHashGetSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHashObj</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SHNode</name> <modifier>*</modifier></type><name>doCreateHashNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hashVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNewNode</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>keyLen</name> <operator>+</operator> <name>dataLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNewNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <name>keyLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GET_SHASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNewNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GET_SHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNewNode</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pNewNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tSimpleHashTableResize</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SHASH_NEED_RESIZE</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>newCapacity</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1u</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>newCapacity</name> <operator>&gt;</operator> <name>HASH_MAX_CAPACITY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"current capacity:%"</literal> <name>PRIzu</name> <literal type="string">", maximum capacity:%"</literal> <name>PRId32</name> <literal type="string">", no resize applied due to limitation is reached"</literal></expr></argument>,
           <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>HASH_MAX_CAPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pNewEntryList</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name> <operator>*</operator> <name>newCapacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNewEntryList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uWarn</name><argument_list>(<argument><expr><literal type="string">"hash resize failed due to out of memory, capacity remain:%zu"</literal></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>inc</name> <init>= <expr><name>newCapacity</name> <operator>-</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pNewEntryList</name> <operator>+</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <name>POINTER_BYTES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name> <operator>=</operator> <name>pNewEntryList</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>newCapacity</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNode</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pPrev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>GET_SHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashVal</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFp</name></name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>newIdx</name> <init>= <expr><call><name>HASH_INDEX</name><argument_list>(<argument><expr><name>hashVal</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>newIdx</name> <operator>!=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pPrev</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pPrev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>newIdx</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>newIdx</name></expr>]</index></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pPrev</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>et</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">//  uDebug("hash table resize completed, new capacity:%d, load factor:%f, elapsed time:%fms",</comment>
  <comment type="line">//  (int32_t)pHashObj-&gt;capacity,</comment>
  <comment type="line">//         ((double)pHashObj-&gt;size) / pHashObj-&gt;capacity, (et - st) / 1000.0);</comment>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tSimpleHashPut</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHashObj</name> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashVal</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFp</name></name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// need the resize process, write lock applied</comment>
  <if_stmt><if>if <condition>(<expr><call><name>SHASH_NEED_RESIZE</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tSimpleHashTableResize</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>slot</name> <init>= <expr><call><name>HASH_INDEX</name><argument_list>(<argument><expr><name>hashVal</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNode</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNewNode</name> <init>= <expr><call><name>doCreateHashNode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>hashVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNewNode</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>pNewNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>keyLen</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>equalFp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><call><name>GET_SHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call><operator>,</operator> <name>key</name><operator>,</operator> <name>keyLen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNode</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNewNode</name> <init>= <expr><call><name>doCreateHashNode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>hashVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNewNode</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pNewNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>pNewNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>  <comment type="line">// update data</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GET_SHASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>SHNode</name> <modifier>*</modifier></type><name>doSearchInEntryList</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>GET_SHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>keyLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>==</operator> <name>keyLen</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>equalFp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>p</name><operator>,</operator> <name>key</name><operator>,</operator> <name>keyLen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>pNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>taosHashTableEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tSimpleHashGetSize</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tSimpleHashGet</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHashObj</name> <operator>||</operator> <call><name>taosHashTableEmpty</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashVal</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFp</name></name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>slot</name> <init>= <expr><call><name>HASH_INDEX</name><argument_list>(<argument><expr><name>hashVal</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>doSearchInEntryList</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>GET_SHASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tSimpleHashRemove</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_FAILED</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHashObj</name> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashVal</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFp</name></name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>slot</name> <init>= <expr><call><name>HASH_INDEX</name><argument_list>(<argument><expr><name>hashVal</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pPrev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>equalFp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><call><name>GET_SHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call><operator>,</operator> <name>key</name><operator>,</operator> <name>keyLen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pPrev</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pPrev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>FREE_HASH_NODE</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pPrev</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tSimpleHashIterateRemove</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHashObj</name> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashVal</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pHashObj</name><operator>-&gt;</operator><name>hashFp</name></name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>slot</name> <init>= <expr><call><name>HASH_INDEX</name><argument_list>(<argument><expr><name>hashVal</name></expr></argument>, <argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pPrev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>equalFp</name></name><operator>)</operator><operator>)</operator><operator>(</operator><call><name>GET_SHASH_NODE_KEY</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call><operator>,</operator> <name>key</name><operator>,</operator> <name>keyLen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pPrev</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pPrev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pIter</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GET_SHASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pIter</name> <operator>=</operator> <ternary><condition><expr><name>pPrev</name></expr> ?</condition><then> <expr><call><name>GET_SHASH_NODE_DATA</name><argument_list>(<argument><expr><name>pPrev</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>FREE_HASH_NODE</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pPrev</name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tSimpleHashClear</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHashObj</name> <operator>||</operator> <call><name>taosHashTableEmpty</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNode</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name>pNode</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FREE_HASH_NODE</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tSimpleHashCleanup</name><parameter_list>(<parameter><decl><type><name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHashObj</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSimpleHashClear</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>tSimpleHashGetMemSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHashObj</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHNode</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>tSimpleHashGetSize</name><argument_list>(<argument><expr><name>pHashObj</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSHashObj</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tSimpleHashIterate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSHashObj</name> <modifier>*</modifier></type><name>pHashObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pHashObj</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>iter</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNode</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>iter</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <return>return <expr><call><name>GET_SHASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SHNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>SHNode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>GET_SHASH_NODE_DATA</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>iter</name><operator>)</operator></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>iter</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pHashObj</name><operator>-&gt;</operator><name>hashList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pNode</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>iter</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <return>return <expr><call><name>GET_SHASH_NODE_DATA</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
