<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/sysscanoperator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnode.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>__optSysFilter</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dtype</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>__sys_filte</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>__sys_check</name>)<parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>cond</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>SSTabFltArg</name> <block>{
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pVnode</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSTabFltArg</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SSysTableIndex</name> <block>{
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>init</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>uids</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lastIdx</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSysTableIndex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SSysTableScanInfo</name> <block>{
  <decl_stmt><decl><type><name>SRetrieveMetaTableRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRetrieveTableReq</name></type>      <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEpSet</name></type>                 <name>epSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tsem_t</name></type>                 <name>ready</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SReadHandle</name></type>            <name>readHandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                <name>accountId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type>            <name>pUser</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                   <name>sysInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                   <name>showRewrite</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>                 <name>pCondition</name></decl>;</decl_stmt>  <comment type="line">// db_name filter condition, to discard data that are not in current database</comment>
  <decl_stmt><decl><type><name>SMTbCursor</name><modifier>*</modifier></type>            <name>pCur</name></decl>;</decl_stmt>        <comment type="line">// cursor for iterate the local table meta store.</comment>
  <decl_stmt><decl><type><name>SSysTableIndex</name><modifier>*</modifier></type>        <name>pIdx</name></decl>;</decl_stmt>        <comment type="line">// idx for local table meta</comment>
  <decl_stmt><decl><type><name>SColMatchInfo</name></type>          <name>matchInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>                  <name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>           <name>pRes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>                <name>numOfBlocks</name></decl>;</decl_stmt>  <comment type="line">// extract basic running information.</comment>
  <decl_stmt><decl><type><name>SLoadRemoteDataInfo</name></type>    <name>loadInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSysTableScanInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__sys_check</name></type> <name>chkFunc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__sys_filte</name></type> <name>fltFunc</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSTabFltFuncDef</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MergeIndex</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>MergeIndex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SBlockDistInfo</name> <block>{
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pHandle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SReadHandle</name></type>  <name>readHandle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>     <name>uid</name></decl>;</decl_stmt>  <comment type="line">// table uid</comment>
}</block></struct></type> <name>SBlockDistInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__Comm</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__DBName</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__VgroupId</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__TableName</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__CreateTime</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__Ncolumn</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__Ttl</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__STableName</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__Uid</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__Type</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysFilte__DbName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysFilte__VgroupId</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysFilte__TableName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysFilte__CreateTime</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysFilte__Ncolumn</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysFilte__Ttl</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysFilte__STableName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysFilte__Uid</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysFilte__Type</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>SSTabFltFuncDef</name></type> <name><name>filterDict</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"table_name"</literal></expr>, <expr><operator>.</operator><name>chkFunc</name> <operator>=</operator> <name>sysChkFilter__TableName</name></expr>, <expr><operator>.</operator><name>fltFunc</name> <operator>=</operator> <name>sysFilte__TableName</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"db_name"</literal></expr>, <expr><operator>.</operator><name>chkFunc</name> <operator>=</operator> <name>sysChkFilter__DBName</name></expr>, <expr><operator>.</operator><name>fltFunc</name> <operator>=</operator> <name>sysFilte__DbName</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"create_time"</literal></expr>, <expr><operator>.</operator><name>chkFunc</name> <operator>=</operator> <name>sysChkFilter__CreateTime</name></expr>, <expr><operator>.</operator><name>fltFunc</name> <operator>=</operator> <name>sysFilte__CreateTime</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"columns"</literal></expr>, <expr><operator>.</operator><name>chkFunc</name> <operator>=</operator> <name>sysChkFilter__Ncolumn</name></expr>, <expr><operator>.</operator><name>fltFunc</name> <operator>=</operator> <name>sysFilte__Ncolumn</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ttl"</literal></expr>, <expr><operator>.</operator><name>chkFunc</name> <operator>=</operator> <name>sysChkFilter__Ttl</name></expr>, <expr><operator>.</operator><name>fltFunc</name> <operator>=</operator> <name>sysFilte__Ttl</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"stable_name"</literal></expr>, <expr><operator>.</operator><name>chkFunc</name> <operator>=</operator> <name>sysChkFilter__STableName</name></expr>, <expr><operator>.</operator><name>fltFunc</name> <operator>=</operator> <name>sysFilte__STableName</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vgroup_id"</literal></expr>, <expr><operator>.</operator><name>chkFunc</name> <operator>=</operator> <name>sysChkFilter__VgroupId</name></expr>, <expr><operator>.</operator><name>fltFunc</name> <operator>=</operator> <name>sysFilte__VgroupId</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"uid"</literal></expr>, <expr><operator>.</operator><name>chkFunc</name> <operator>=</operator> <name>sysChkFilter__Uid</name></expr>, <expr><operator>.</operator><name>fltFunc</name> <operator>=</operator> <name>sysFilte__Uid</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"type"</literal></expr>, <expr><operator>.</operator><name>chkFunc</name> <operator>=</operator> <name>sysChkFilter__Type</name></expr>, <expr><operator>.</operator><name>fltFunc</name> <operator>=</operator> <name>sysFilte__Type</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTAB_FILTER_DICT_SIZE</name></cpp:macro> <cpp:value>(sizeof(filterDict) / sizeof(filterDict[0]))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildDbTableInfoBlock</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>sysInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSysTableMeta</name><modifier>*</modifier></type> <name>pSysDbTableMeta</name></decl></parameter>,
                                     <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>SYSTABLE_IDX_COLUMN</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"table_name"</literal></expr>, <expr><literal type="string">"db_name"</literal></expr>,     <expr><literal type="string">"create_time"</literal></expr>,      <expr><literal type="string">"columns"</literal></expr>,
                                      <expr><literal type="string">"ttl"</literal></expr>,        <expr><literal type="string">"stable_name"</literal></expr>, <expr><literal type="string">"vgroup_id', 'uid"</literal></expr>, <expr><literal type="string">"type"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>SYSTABLE_SPECIAL_COL</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"db_name"</literal></expr>, <expr><literal type="string">"vgroup_id"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildSysDbTableInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>buildInfoSchemaTableMetaBlock</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>tableName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>destroySysScanOperator</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>loadSysTableCallback</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doFilterResult</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>SFilterInfo</name><modifier>*</modifier></type> <name>pFilterInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>__optSysFilter</name></type> <name>optSysGetFilterFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>reverse</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysTableUserTagsFillOneTableTags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SMetaReader</name><modifier>*</modifier></type> <name>smrSuperTable</name></decl></parameter>,
                                                <parameter><decl><type><name>SMetaReader</name><modifier>*</modifier></type> <name>smrChildTable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tableName</name></decl></parameter>,
                                                <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pNumOfRows</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>dataBlock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>relocateAndFilterSysTagsScanResult</name><parameter_list>(<parameter><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>dataBlock</name></decl></parameter>,
                                               <parameter><decl><type><name>SFilterInfo</name><modifier>*</modifier></type> <name>pFilterInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>sysFilte__DbName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pVnode</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSTabFltArg</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pVnode</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vnodeGetInfo</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>sn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>  <name><name>dbname</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>           <name>reverse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__optSysFilter</name></type> <name>func</name> <init>= <expr><call><name>optSysGetFilterFunc</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reverse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sysFilte__VgroupId</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pVnode</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSTabFltArg</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pVnode</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>vgId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vnodeGetInfo</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>reverse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__optSysFilter</name></type> <name>func</name> <init>= <expr><call><name>optSysGetFilterFunc</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reverse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vgId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sysFilte__TableName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSTabFltArg</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pMeta</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>reverse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__optSysFilter</name></type> <name>func</name> <init>= <expr><call><name>optSysGetFilterFunc</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reverse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaFltParam</name></type> <name>param</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>cid</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>,
      <expr><operator>.</operator><name>val</name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr>,
      <expr><operator>.</operator><name>reverse</name> <operator>=</operator> <name>reverse</name></expr>,
      <expr><operator>.</operator><name>filterFunc</name> <operator>=</operator> <name>func</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sysFilte__CreateTime</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSTabFltArg</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pMeta</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>reverse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__optSysFilter</name></type> <name>func</name> <init>= <expr><call><name>optSysGetFilterFunc</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reverse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaFltParam</name></type> <name>param</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>cid</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>,
      <expr><operator>.</operator><name>val</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr>,
      <expr><operator>.</operator><name>reverse</name> <operator>=</operator> <name>reverse</name></expr>,
      <expr><operator>.</operator><name>filterFunc</name> <operator>=</operator> <name>func</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>metaFilterCreateTime</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sysFilte__Ncolumn</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSTabFltArg</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pMeta</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>reverse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__optSysFilter</name></type> <name>func</name> <init>= <expr><call><name>optSysGetFilterFunc</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reverse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sysFilte__Ttl</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSTabFltArg</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pMeta</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>reverse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__optSysFilter</name></type> <name>func</name> <init>= <expr><call><name>optSysGetFilterFunc</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reverse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sysFilte__STableName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSTabFltArg</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pMeta</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>reverse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__optSysFilter</name></type> <name>func</name> <init>= <expr><call><name>optSysGetFilterFunc</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reverse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sysFilte__Uid</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSTabFltArg</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pMeta</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>reverse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__optSysFilter</name></type> <name>func</name> <init>= <expr><call><name>optSysGetFilterFunc</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reverse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sysFilte__Type</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSTabFltArg</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pMeta</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>reverse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__optSysFilter</name></type> <name>func</name> <init>= <expr><call><name>optSysGetFilterFunc</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reverse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>optSysDoCompare</name><parameter_list>(<parameter><decl><type><name>__compar_fn_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>comparType</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cmp</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>comparType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OP_TYPE_LOWER_THAN</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_TYPE_LOWER_EQUAL</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_GREATER_THAN</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_GREATER_EQUAL</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OP_TYPE_EQUAL</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>optSysFilterFuncImpl__LowerThan</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dtype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>func</name> <init>= <expr><call><name>getComparFunc</name><argument_list>(<argument><expr><name>dtype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>optSysDoCompare</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>OP_TYPE_LOWER_THAN</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>optSysFilterFuncImpl__LowerEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dtype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>func</name> <init>= <expr><call><name>getComparFunc</name><argument_list>(<argument><expr><name>dtype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>optSysDoCompare</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>OP_TYPE_LOWER_EQUAL</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>optSysFilterFuncImpl__GreaterThan</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dtype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>func</name> <init>= <expr><call><name>getComparFunc</name><argument_list>(<argument><expr><name>dtype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>optSysDoCompare</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>OP_TYPE_GREATER_THAN</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>optSysFilterFuncImpl__GreaterEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dtype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>func</name> <init>= <expr><call><name>getComparFunc</name><argument_list>(<argument><expr><name>dtype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>optSysDoCompare</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>OP_TYPE_GREATER_EQUAL</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>optSysFilterFuncImpl__Equal</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dtype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>func</name> <init>= <expr><call><name>getComparFunc</name><argument_list>(<argument><expr><name>dtype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>optSysDoCompare</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>OP_TYPE_EQUAL</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>optSysFilterFuncImpl__NoEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dtype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>func</name> <init>= <expr><call><name>getComparFunc</name><argument_list>(<argument><expr><name>dtype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>optSysDoCompare</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>OP_TYPE_NOT_EQUAL</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>optSysTabFilte</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>optSysTabFilteImpl</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>optSysCheckOper</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOpear</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>optSysMergeRslt</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>mRslt</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>rslt</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>__optSysFilter</name></type> <name>optSysGetFilterFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>reverse</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>OP_TYPE_LOWER_EQUAL</name> <operator>||</operator> <name>ctype</name> <operator>==</operator> <name>OP_TYPE_LOWER_THAN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>reverse</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>OP_TYPE_LOWER_THAN</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>optSysFilterFuncImpl__LowerThan</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>OP_TYPE_LOWER_EQUAL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>optSysFilterFuncImpl__LowerEqual</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>OP_TYPE_GREATER_THAN</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>optSysFilterFuncImpl__GreaterThan</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>OP_TYPE_GREATER_EQUAL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>optSysFilterFuncImpl__GreaterEqual</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>OP_TYPE_EQUAL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>optSysFilterFuncImpl__Equal</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>OP_TYPE_NOT_EQUAL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>optSysFilterFuncImpl__NoEqual</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sysTableIsOperatorCondOnOneTable</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>condTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pCond</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>opType</name></name> <operator>==</operator> <name>OP_TYPE_EQUAL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_COLUMN</name> <operator>&amp;&amp;</operator>
        <call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>nodesGetNameFromColumnNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"table_name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <call><name>nodeType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>||</operator> <name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARCHAR</name> <operator>||</operator>
          <name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>condTable</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sysTableIsCondOnOneTable</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>condTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCond</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_LOGIC_CONDITION</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>pCond</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>LOGIC_COND_TYPE_AND</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>condType</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <macro><name>FOREACH</name><argument_list>(<argument>pChild</argument>, <argument>node-&gt;pParameterList</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pChild</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sysTableIsOperatorCondOnOneTable</name><argument_list>(<argument><expr><name>pChild</name></expr></argument>, <argument><expr><name>condTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_OPERATOR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sysTableIsOperatorCondOnOneTable</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>, <argument><expr><name>condTable</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>sysTableScanUserTags</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>     <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>dataBlock</name> <init>= <expr><call><name>buildInfoSchemaTableMetaBlock</name><argument_list>(<argument><expr><name>TSDB_INS_TABLE_TAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>vgId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vnodeGetInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>sn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>  <name><name>dbname</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>condTableName</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <comment type="line">// optimize when sql like where table_name='tablename' and xxx.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondition</name></name> <operator>&amp;&amp;</operator> <call><name>sysTableIsCondOnOneTable</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondition</name></name></expr></argument>, <argument><expr><name>condTableName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tableName</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>condTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SMetaReader</name></type> <name>smrChildTable</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrChildTable</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>metaGetTableEntryByName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrChildTable</name></expr></argument>, <argument><expr><name>condTableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// terrno has been set by metaGetTableEntryByName, therefore, return directly</comment>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrChildTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>smrChildTable</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrChildTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SMetaReader</name></type> <name>smrSuperTable</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrSuperTable</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name>META_READER_NOLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrSuperTable</name></expr></argument>, <argument><expr><name><name>smrChildTable</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// terrno has been set by metaGetTableEntryByUid</comment>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrSuperTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrChildTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sysTableUserTagsFillOneTableTags</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smrSuperTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smrChildTable</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfRows</name></expr></argument>, <argument><expr><name>dataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrSuperTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrChildTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>relocateAndFilterSysTagsScanResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <call><name>metaOpenTbCursor</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>metaTbCursorNext</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>tableName</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SMetaReader</name></type> <name>smrSuperTable</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrSuperTable</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrSuperTable</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get super table meta, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrSuperTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaCloseTbCursor</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sysTableUserTagsFillOneTableTags</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smrSuperTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name></name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfRows</name></expr></argument>, <argument><expr><name>dataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smrSuperTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>relocateAndFilterSysTagsScanResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>relocateAndFilterSysTagsScanResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaCloseTbCursor</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>relocateAndFilterSysTagsScanResult</name><parameter_list>(<parameter><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>dataBlock</name></decl></parameter>,
                                        <parameter><decl><type><name>SFilterInfo</name><modifier>*</modifier></type> <name>pFilterInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>relocateColumnData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doFilterResult</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>pFilterInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>convertTagDataToStr</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%.5f"</literal></expr></argument>, <argument><expr><call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%.9f"</literal></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>bufSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name>bufSize</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>bufSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysTableUserTagsFillOneTableTags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SMetaReader</name><modifier>*</modifier></type> <name>smrSuperTable</name></decl></parameter>,
                                                <parameter><decl><type><name>SMetaReader</name><modifier>*</modifier></type> <name>smrChildTable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tableName</name></decl></parameter>,
                                                <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pNumOfRows</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>dataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>stableName</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>stableName</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>smrSuperTable</name><operator>)</operator><operator>.</operator><name><name>me</name><operator>.</operator><name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><operator>*</operator><name>pNumOfRows</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTags</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>smrSuperTable</name><operator>)</operator><operator>.</operator><name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>nCols</name></name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTags</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// table name</comment>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// database name</comment>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// super table name</comment>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>stableName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// tag name</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tagName</name><index>[<expr><name>TSDB_COL_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>smrSuperTable</name><operator>)</operator><operator>.</operator><name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name></name><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>tagName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// tag type</comment>
    <decl_stmt><decl><type><name>int8_t</name></type> <name>tagType</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>smrSuperTable</name><operator>)</operator><operator>.</operator><name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name></name><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tagTypeStr</name><index>[<expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>tagTypeLen</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>tagTypeStr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>tagType</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tagType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tagTypeLen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>tagTypeStr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tagTypeLen</name></expr></argument>, <argument><expr><literal type="string">"(%d)"</literal></expr></argument>,
                            <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>smrSuperTable</name><operator>)</operator><operator>.</operator><name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name></name><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>bytes</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tagType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tagTypeLen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(
          <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>tagTypeStr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tagTypeLen</name></expr></argument>, <argument><expr><literal type="string">"(%d)"</literal></expr></argument>,
          <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>smrSuperTable</name><operator>)</operator><operator>.</operator><name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name></name><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>bytes</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>tagTypeStr</name></expr></argument>, <argument><expr><name>tagTypeLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>tagTypeStr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STagVal</name></type> <name>tagVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tagVal</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>smrSuperTable</name><operator>)</operator><operator>.</operator><name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name></name><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>colId</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>tagData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>tagLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>tagType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tagData</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>smrChildTable</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>exist</name> <init>= <expr><call><name>tTagGet</name><argument_list>(<argument><expr><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name><name>smrChildTable</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>exist</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>tagType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>tagData</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>tagVal</name><operator>.</operator><name>pData</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>tagLen</name> <operator>=</operator> <name><name>tagVal</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>tagData</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>tagLen</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>tagType</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tagVarChar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tagData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>tagType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tagJson</name> <init>= <expr><call><name>parseTagDatatoJson</name><argument_list>(<argument><expr><name>tagData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tagVarChar</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tagJson</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>tagVarChar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tagJson</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tagJson</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>tagVarChar</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tagJson</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tagJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>bufSize</name> <init>= <expr><ternary><condition><expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>tagType</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>tagLen</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator></expr>
                                                    </then><else>: <expr><operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>DBL_MANT_DIG</name> <operator>-</operator> <name>DBL_MIN_EXP</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tagVarChar</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>convertTagDataToStr</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>tagVarChar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tagType</name></expr></argument>, <argument><expr><name>tagData</name></expr></argument>, <argument><expr><name>tagLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>tagVarChar</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>tagVarChar</name></expr></argument>,
                  <argument><expr><operator>(</operator><name>tagData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tagType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>&amp;&amp;</operator> <call><name>tTagIsJsonNull</name><argument_list>(<argument><expr><name>tagData</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tagVarChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>numOfRows</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>pNumOfRows</name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>buildInfoSchemaTableMetaBlock</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>               <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSysTableMeta</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getInfosDbMeta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pMeta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMeta</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>colNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>colInfoData</name> <init>=
        <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name><name>pMeta</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>pMeta</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildDbTableInfoBlock</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>sysInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSysTableMeta</name><modifier>*</modifier></type> <name>pSysDbTableMeta</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>n</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SSysTableMeta</name><modifier>*</modifier></type> <name>pm</name> <init>= <expr><operator>&amp;</operator><name><name>pSysDbTableMeta</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sysInfo</name> <operator>&amp;&amp;</operator> <name><name>pm</name><operator>-&gt;</operator><name>sysInfo</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>pm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// database name</comment>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create time</comment>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// number of columns</comment>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pm</name><operator>-&gt;</operator><name>colNum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"SYSTEM_TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildSysDbTableInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>buildInfoSchemaTableMetaBlock</name><argument_list>(<argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type>               <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSysTableMeta</name><modifier>*</modifier></type> <name>pSysDbTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>getInfosDbMeta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pSysDbTableMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <call><name>buildDbTableInfoBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSysDbTableMeta</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>getPerfDbMeta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pSysDbTableMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <call><name>buildDbTableInfoBlock</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSysDbTableMeta</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>relocateColumnData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>sysTableBuildUserTablesByUids</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>     <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSysTableIndex</name><modifier>*</modifier></type> <name>pIdx</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIdx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>vgId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vnodeGetInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>sn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>  <name><name>dbname</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>buildInfoSchemaTableMetaBlock</name><argument_list>(<argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>n</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pIdx</name><operator>-&gt;</operator><name>lastIdx</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>uids</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name><modifier>*</modifier></type> <name>uid</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>uids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// table name</comment>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// database name</comment>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// vgId</comment>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vgId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>tableType</name> <init>= <expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tableType</name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// create time</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>ctime</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr1</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name>META_READER_NOLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>suid</name> <init>= <expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr1</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get super table meta, cname:%s, suid:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>,
               <argument><expr><name>suid</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mr1</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// super table name</comment>
      <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>mr1</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// table comment</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>comment</name><index>[<expr><name>TSDB_TB_COMMENT_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>comment</name><index>[<expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// uid</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// ttl</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>ttlDays</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"CHILD_TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tableType</name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// create time</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>ctime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// number of columns</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// super table name</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// table comment</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>comment</name><index>[<expr><name>TSDB_TB_COMMENT_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>comment</name><index>[<expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// uid</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// ttl</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>ttlDays</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"NORMAL_TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// impl later</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>numOfRows</name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>relocateColumnData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doFilterResult</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>relocateColumnData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFilterResult</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>uids</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>lastIdx</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>sysTableBuildUserTables</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <call><name>metaOpenTbCursor</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>vgId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vnodeGetInfo</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>sn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>  <name><name>dbname</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>buildInfoSchemaTableMetaBlock</name><argument_list>(<argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>n</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>metaTbCursorNext</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// table name</comment>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// database name</comment>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// vgId</comment>
    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vgId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>tableType</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tableType</name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// create time</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>ctime</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name>META_READER_NOLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get super table meta, cname:%s, suid:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>,
               <argument><expr><name>suid</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaCloseTbCursor</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// number of columns</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// super table name</comment>
      <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// table comment</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>comment</name><index>[<expr><name>TSDB_TB_COMMENT_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>comment</name><index>[<expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// uid</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// ttl</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>ttlDays</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"CHILD_TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tableType</name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// create time</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>ctime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// number of columns</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// super table name</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// table comment</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>comment</name><index>[<expr><name>TSDB_TB_COMMENT_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>comment</name><index>[<expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// uid</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// ttl</comment>
      <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>ttlDays</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"NORMAL_TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pColInfoData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>numOfRows</name> <operator>&gt;=</operator> <name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>relocateColumnData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doFilterResult</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>relocateColumnData</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFilterResult</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// todo temporarily free the cursor here, the true reason why the free is not valid needs to be found</comment>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaCloseTbCursor</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>sysTableScanUserTables</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>     <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCondition</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondition</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// the retrieve is executed on the mnode, so return tables that belongs to the information schema database.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>mnd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildSysDbTableInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFilterResult</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setOperatorCompleted</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pCondition</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pIdx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSTabFltArg</name></type> <name>arg</name> <init>= <expr><block>{<expr><operator>.</operator><name>pMeta</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr>, <expr><operator>.</operator><name>pVnode</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>vnode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SSysTableIndex</name><modifier>*</modifier></type> <name>idx</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSysTableIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>uids</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>lastIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIdx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>  <comment type="line">// set idx arg</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>flt</name> <init>= <expr><call><name>optSysTabFilte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>pCondition</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>uids</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>flt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><call><name>sysTableBuildUserTablesByUids</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr><name>blk</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flt</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s failed to get sys table info by idx, empty result"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">// not idx</comment>
          <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s failed to get sys table info by idx, scan sys table one by one"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pCondition</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pIdx</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>init</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><call><name>sysTableBuildUserTablesByUids</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>blk</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>sysTableBuildUserTables</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>sysTableScanUserSTables</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>     <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_EXEC_DONE</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getSysTableDbNameColId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// if (0 == strcmp(TSDB_INS_TABLE_INDEXES, pTable)) {</comment>
  <comment type="line">//   return 1;</comment>
  <comment type="line">// }</comment>
  <return>return <expr><name>TSDB_INS_USER_STABLES_DBNAME_COLID</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>getDBNameFromConditionWalker</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ENodeType</name></type> <name>nType</name> <init>= <expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>nType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>OP_TYPE_EQUAL</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>opType</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pContext</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pContext</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_COLUMN</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pContext</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>getSysTableDbNameColId</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pContext</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pContext</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pContext</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>       <name>dbName</name> <init>= <expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>pContext</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pContext</name> <operator>+</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_END</name></expr>;</return>  <comment type="line">// stop walk</comment>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getDBNameFromCondition</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCondition</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCondition</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesWalkExpr</name><argument_list>(<argument><expr><name>pCondition</name></expr></argument>, <argument><expr><name>getDBNameFromConditionWalker</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doSysTableScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// build message and send to mnode to fetch the content of system tables.</comment>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>     <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>dbName</name><index>[<expr><name>TSDB_DB_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>showRewrite</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>getDBNameFromCondition</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondition</name></name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>accountId</name></name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sysTableScanUserTables</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TAGS</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sysTableScanUserTags</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_STABLES</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>&amp;&amp;</operator>
             <call><name>IS_SYS_DBNAME</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sysTableScanUserSTables</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// load the meta from mnode of the given epset</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>startTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>tb</name></name></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>tb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSRetrieveTableReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>buf1</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tSerializeSRetrieveTableReq</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// send the fetch remote task result reques</comment>
      <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pMsgSendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMsgSendInfo</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"%s prepare message %d failed"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>msgType</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_DNODE_VARIABLES</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TDMT_DND_SYSTABLE_RETRIEVE</name></expr>
                                                                                </then><else>: <expr><name>TDMT_MND_SYSTABLE_RETRIEVE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>pOperator</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>buf1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>loadSysTableCallback</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>queryId</name></name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
          <expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>pMsgCb</name><operator>-&gt;</operator><name>clientRpc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s load meta data from mnode failed, totalRows:%"</literal> <name>PRIu64</name> <literal type="string">", code:%s"</literal></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SRetrieveMetaTableRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>showId</name></name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>completed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_EXEC_DONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s load meta data from mnode completed, rowsOfSource:%d, totalRows:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name><operator>.</operator><name>totalRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name><name>pRsp</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>extractDataBlockFromFetchRsp</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>updateLoadRemoteInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>loadInfo</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>, <argument><expr><name>startTs</name></expr></argument>, <argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// todo log the filter info</comment>
      <expr_stmt><expr><call><name>doFilterResult</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createSysTableScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>readHandle</name></decl></parameter>, <parameter><decl><type><name>SSystemTableScanPhysiNode</name><modifier>*</modifier></type> <name>pScanPhyNode</name></decl></parameter>,
                                              <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pUser</name></decl></parameter>, <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSysTableScanInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>     <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type>     <name>pScanNode</name> <init>= <expr><operator>&amp;</operator><name><name>pScanPhyNode</name><operator>-&gt;</operator><name>scan</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDescNode</name> <init>= <expr><name><name>pScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>extractColMatchInfo</name><argument_list>(<argument><expr><name><name>pScanNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>, <argument><expr><name>pDescNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>COL_MATCH_FROM_COL_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>accountId</name></name> <operator>=</operator> <name><name>pScanPhyNode</name><operator>-&gt;</operator><name>accountId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUser</name></name> <operator>=</operator> <call><name>taosMemoryStrDup</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sysInfo</name></name> <operator>=</operator> <name><name>pScanPhyNode</name><operator>-&gt;</operator><name>sysInfo</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name><name>pScanPhyNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name>pDescNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCondition</name></name> <operator>=</operator> <name><name>pScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>filterInitFromNode</name><argument_list>(<argument><expr><name><name>pScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pFilterInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initResultSizeInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name><name>pOperator</name><operator>-&gt;</operator><name>resultInfo</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tNameAssign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pScanNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
      <call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TAGS</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SReadHandle</name><operator>*</operator><operator>)</operator><name>readHandle</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name><name>pScanPhyNode</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SReadHandle</name><operator>*</operator><operator>)</operator><name>readHandle</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"SysTableScanOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_SYSTABLE_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>OP_NOT_OPENED</name></expr></argument>,
                  <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>numOfExprs</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator> <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doSysTableScan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroySysScanOperator</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

  <label><name>_error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroySysScanOperator</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroySysScanOperator</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SSysTableScanInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
      <call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TAGS</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaCloseTbCursor</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIdx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>uids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pIdx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>matchInfo</name><operator>.</operator><name>pList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>loadSysTableCallback</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>     <name>operator</name><init>=<expr><operator>(</operator><name>SOperatorInfo</name><operator>*</operator><operator>)</operator> <name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSysTableScanInfo</name><modifier>*</modifier></type> <name>pScanResInfo</name> <init>= <expr><operator>(</operator><name>SSysTableScanInfo</name><operator>*</operator><operator>)</operator><name><name>operator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pScanResInfo</name><operator>-&gt;</operator><name>pRsp</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SRetrieveMetaTableRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><name><name>pScanResInfo</name><operator>-&gt;</operator><name>pRsp</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>useconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>compLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>operator</name><operator>-&gt;</operator><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pScanResInfo</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>doFilterResult</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>SFilterInfo</name><modifier>*</modifier></type> <name>pFilterInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFilterInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pDataBlock</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doFilter</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>pFilterInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pDataBlock</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__Comm</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl</comment>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EOperatorType</name></type>  <name>opType</name> <init>= <expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>opType</name> <operator>!=</operator> <name>OP_TYPE_EQUAL</name> <operator>&amp;&amp;</operator> <name>opType</name> <operator>!=</operator> <name>OP_TYPE_LOWER_EQUAL</name> <operator>&amp;&amp;</operator> <name>opType</name> <operator>!=</operator> <name>OP_TYPE_LOWER_THAN</name> <operator>&amp;&amp;</operator>
      <name>opType</name> <operator>!=</operator> <name>OP_TYPE_GREATER_EQUAL</name> <operator>&amp;&amp;</operator> <name>opType</name> <operator>!=</operator> <name>OP_TYPE_GREATER_THAN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__DBName</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name> <operator>!=</operator> <name>OP_TYPE_EQUAL</name> <operator>&amp;&amp;</operator> <name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name> <operator>!=</operator> <name>OP_TYPE_NOT_EQUAL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__VgroupId</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sysChkFilter__Comm</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__TableName</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sysChkFilter__Comm</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__CreateTime</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sysChkFilter__Comm</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__Ncolumn</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sysChkFilter__Comm</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__Ttl</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sysChkFilter__Comm</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__STableName</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sysChkFilter__Comm</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__Uid</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sysChkFilter__Comm</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sysChkFilter__Type</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>    <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sysChkFilter__Comm</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>optSysTabFilteImpl</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>optSysCheckOper</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>cond</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SYSTAB_FILTER_DICT_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>filterDict</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>SYSTAB_FILTER_DICT_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>filterDict</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>chkFunc</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name><name>filterDict</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>fltFunc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>optSysCheckOper</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pOpear</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pOpear</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_OPERATOR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>pOpear</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name> <operator>&lt;</operator> <name>OP_TYPE_GREATER_THAN</name> <operator>||</operator> <name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name> <operator>&gt;</operator> <name>OP_TYPE_NOT_EQUAL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_COLUMN</name> <operator>||</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int</name></type> <name>optSysBinarySearch</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>m</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>e</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name>s</name> <operator>+</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>k</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>e</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>optSysIntersection</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>MergeIndex</name><modifier>*</modifier></type> <name>mi</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MergeIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>base</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tgt</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>     <name>has</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>oth</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>     <name>mid</name> <init>= <expr><call><name>optSysBinarySearch</name><argument_list>(<argument><expr><name>oth</name></expr></argument>, <argument><expr><name><name>mi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>idx</name></expr></argument>, <argument><expr><name><name>mi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tgt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>mid</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mid</name> <operator>&lt;</operator> <name><name>mi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>oth</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>has</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>val</name> <operator>==</operator> <name>tgt</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>idx</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>has</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>has</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tableUidCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>u1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>u2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>u1</name> <operator>==</operator> <name>u2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>u1</name> <operator>&lt;</operator> <name>u2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>optSysMergeRslt</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>mRslt</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>rslt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO, find comm mem from mRslt</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>mRslt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>arslt</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>mRslt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>arslt</name></expr></argument>, <argument><expr><name>tableUidCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>optSysIntersection</name><argument_list>(<argument><expr><name>mRslt</name></expr></argument>, <argument><expr><name>rslt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>optSysSpecialColumn</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>cond</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type>   <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SYSTABLE_SPECIAL_COL</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>SYSTABLE_SPECIAL_COL</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>SYSTABLE_SPECIAL_COL</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>optSysTabFilte</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_OPERATOR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>optSysTabFilteImpl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name>cond</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type>   <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><literal type="string">"create_time"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_LOGIC_CONDITION</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>cond</name><operator>)</operator><operator>-&gt;</operator><name>condType</name> <operator>!=</operator> <name>LOGIC_COND_TYPE_AND</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SLogicConditionNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SLogicConditionNode</name><operator>*</operator><operator>)</operator><name>cond</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type>           <name>pList</name> <init>= <expr><operator>(</operator><name>SNodeList</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>hasIdx</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>hasRslt</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>mRslt</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SListCell</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><name><name>pList</name><operator>-&gt;</operator><name>pHead</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cell</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>aRslt</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>optSysTabFilteImpl</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><name>aRslt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// has index</comment>
      <expr_stmt><expr><name>hasIdx</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>optSysSpecialColumn</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>mRslt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aRslt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// db_name/vgroup not result</comment>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>aRslt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// current vg</comment>
      <expr_stmt><expr><name>hasIdx</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hasRslt</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>aRslt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>aRslt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>hasRslt</name> <operator>&amp;&amp;</operator> <name>hasIdx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>optSysMergeRslt</name><argument_list>(<argument><expr><name>mRslt</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>mRslt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>aRslt</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>mRslt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>aRslt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>mRslt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasRslt</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasRslt</name> <operator>&amp;&amp;</operator> <name>hasIdx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>pList</name><operator>-&gt;</operator><name>pHead</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cell</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><name><name>cell</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type>   <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><literal type="string">"create_time"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>cell</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doGetTableRowSize</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>rowLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rowLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get table meta, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>rowLen</name><operator>)</operator> <operator>+=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name> <init>= <expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get table meta, uid:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>rowLen</name><operator>)</operator> <operator>+=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>rowLen</name><operator>)</operator> <operator>+=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doBlockInfoScan</name><parameter_list>(<parameter><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>pOperator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>OP_EXEC_DONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SBlockDistInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type>  <name>pTaskInfo</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>pTaskInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableBlockDistInfo</name></type> <name>blockDistInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>minRows</name> <operator>=</operator> <name>INT_MAX</name></expr>, <expr><operator>.</operator><name>maxRows</name> <operator>=</operator> <name>INT_MIN</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><call><name>doGetTableRowSize</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>readHandle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
                                               <argument><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>blockDistInfo</name><operator>.</operator><name>rowSize</name></name></expr></argument>, <argument><expr><call><name>GET_TASKID</name><argument_list>(<argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>T_LONG_JMP</name><argument_list>(<argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbGetFileBlocksDistInfo</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockDistInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blockDistInfo</name><operator>.</operator><name>numOfInmemRows</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>tsdbGetNumOfRowsInMemTable</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name><operator>.</operator><name>pExprInfo</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>tSerializeBlockDistInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockDistInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeBlockDistInfo</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockDistInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>OP_EXEC_DONE</name></expr>;</expr_stmt>
  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyBlockDistScanOperatorInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockDistInfo</name><modifier>*</modifier></type> <name>pDistInfo</name> <init>= <expr><operator>(</operator><name>SBlockDistInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initTableblockDistQueryCond</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryTableDataCond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindow</name><operator>)</operator><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name>INT64_MIN</name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TIMEWINDOW_RANGE_CONTAINED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>startVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>endVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SOperatorInfo</name><modifier>*</modifier></type> <name>createDataBlockInfoScanOperator</name><parameter_list>(<parameter><decl><type><name>SReadHandle</name><modifier>*</modifier></type> <name>readHandle</name></decl></parameter>, <parameter><decl><type><name>SBlockDistScanPhysiNode</name><modifier>*</modifier></type> <name>pBlockScanNode</name></decl></parameter>,
                                               <parameter><decl><type><name>SExecTaskInfo</name><modifier>*</modifier></type> <name>pTaskInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBlockDistInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockDistInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SOperatorInfo</name><modifier>*</modifier></type>  <name>pOperator</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOperatorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pOperator</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name> <operator>=</operator> <call><name>createDataBlockFromDescNode</name><argument_list>(<argument><expr><name><name>pBlockScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>SQueryTableDataCond</name></type> <name>cond</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><call><name>initTableblockDistQueryCond</name><argument_list>(<argument><expr><name><name>pBlockScanNode</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STableListInfo</name><modifier>*</modifier></type> <name>pTableListInfo</name> <init>= <expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>pTableInfoList</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>num</name> <init>= <expr><call><name>tableListGetSize</name><argument_list>(<argument><expr><name>pTableListInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>           <name>pList</name> <init>= <expr><call><name>tableListGetInfo</name><argument_list>(<argument><expr><name>pTableListInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReaderOpen</name><argument_list>(<argument><expr><name><name>readHandle</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name><name>pTaskInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanupQueryTableDataCond</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>readHandle</name></name> <operator>=</operator> <operator>*</operator><name>readHandle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pBlockScanNode</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><call><name>createExprInfo</name><argument_list>(<argument><expr><name><name>pBlockScanNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>initExprSupp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOperator</name><operator>-&gt;</operator><name>exprSupp</name></name></expr></argument>, <argument><expr><name>pExprInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setOperatorInfo</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>, <argument><expr><literal type="string">"DataBlockDistScanOperator"</literal></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_BLOCK_DIST_SCAN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                  <argument><expr><name>OP_NOT_OPENED</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>pTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOperator</name><operator>-&gt;</operator><name>fpSet</name></name> <operator>=</operator>
      <call><name>createOperatorFpSet</name><argument_list>(<argument><expr><name>optrDummyOpenFn</name></expr></argument>, <argument><expr><name>doBlockInfoScan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>destroyBlockDistScanOperatorInfo</name></expr></argument>, <argument><expr><name>optrDefaultBufFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pOperator</name></expr>;</return>

<label><name>_error</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function></unit>
