<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/executor/src/tfill.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taosdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttypes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executorInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tfill.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_IS_ASC_FILL</name><parameter_list>(<parameter><type><name>_f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_f)-&gt;order == TSDB_ORDER_ASC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_INTERPOLATION</name><parameter_list>(<parameter><type><name>_v1</name></type></parameter>, <parameter><type><name>_v2</name></type></parameter>, <parameter><type><name>_k1</name></type></parameter>, <parameter><type><name>_k2</name></type></parameter>, <parameter><type><name>_k</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>((_v1) + ((_v2) - (_v1)) * (((double)(_k)) - ((double)(_k1))) / (((double)(_k2)) - ((double)(_k1))))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>doSetVal</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstColInfoData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setNullRow</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type>    <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>dstSlotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>dstSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>notFillCol</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>filled</name> <init>= <expr><call><name>fillIfWindowPseudoColumn</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>pDstColInfo</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>filled</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SRowVal</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>  <comment type="line">// prev has been set value</comment>
          </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// otherwise, use the value in the next row</comment>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doSetVal</name><argument_list>(<argument><expr><name>pDstColInfo</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDstColInfo</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doSetUserSpecifiedValue</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>, <parameter><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>pVar</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>currentKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>currentKey</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// varchar/nchar data</comment>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// fill windows pseudo column, _wstart, _wend, _wduration and return true, otherwise return false</comment>
<function><type><name>bool</name></type> <name>fillIfWindowPseudoColumn</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstColInfoData</name></decl></parameter>,
                              <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pCol</name><operator>-&gt;</operator><name>notFillCol</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name> <operator>==</operator> <name>QUERY_NODE_COLUMN</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>numOfParams</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>colType</name></name> <operator>==</operator> <name>COLUMN_TYPE_WINDOW_START</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>colType</name></name> <operator>==</operator> <name>COLUMN_TYPE_WINDOW_END</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO: include endpoint</comment>
      <decl_stmt><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type>    <name>windowEnd</name> <init>=
          <expr><call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>windowEnd</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pCol</name><operator>-&gt;</operator><name>colType</name></name> <operator>==</operator> <name>COLUMN_TYPE_WINDOW_DURATION</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO: include endpoint</comment>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doFillOneRow</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>,
                         <parameter><decl><type><name>bool</name></type> <name>outOfBound</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPoint</name></type>  <name>point1</name></decl>, <decl><type ref="prev"/><name>point2</name></decl>, <decl><type ref="prev"/><name>point</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><call><name>GET_FORWARD_DIRECTION_FACTOR</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// set the primary timestamp column value</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// set the other values</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_PREV</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><ternary><condition><expr><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr> </then><else>: <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type>             <name>filled</name> <init>= <expr><call><name>fillIfWindowPseudoColumn</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>pDstColInfoData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>filled</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doSetVal</name><argument_list>(<argument><expr><name>pDstColInfoData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_NEXT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><ternary><condition><expr><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr> </then><else>: <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <comment type="line">// todo  refactor: start from 0 not 1</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type>    <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type>             <name>filled</name> <init>= <expr><call><name>fillIfWindowPseudoColumn</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>pDstColInfoData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>filled</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doSetVal</name><argument_list>(<argument><expr><name>pDstColInfoData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_LINEAR</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO : linear interpolation supports NULL value</comment>
    <if_stmt><if>if <condition>(<expr><name>outOfBound</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setNullRow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type>          <name>dstSlotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>dstSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int16_t</name></type>          <name>type</name> <init>= <expr><name><name>pDstCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>notFillCol</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>bool</name></type> <name>filled</name> <init>= <expr><call><name>fillIfWindowPseudoColumn</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>filled</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>p</name> <init>= <expr><ternary><condition><expr><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr> </then><else>: <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>doSetVal</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>||</operator> <name><name>pKey</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>tsSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>int64_t</name></type> <name>prevTs</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pKey1</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>srcSlotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>srcSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrcCol</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name>point1</name> <operator>=</operator> <operator>(</operator><name>SPoint</name><operator>)</operator><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name>prevTs</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr>}</block></expr>;</expr_stmt>
          <expr_stmt><expr><name>point2</name> <operator>=</operator> <operator>(</operator><name>SPoint</name><operator>)</operator><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <name>data</name></expr>}</block></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>int64_t</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>point</name> <operator>=</operator> <operator>(</operator><name>SPoint</name><operator>)</operator><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <operator>&amp;</operator><name>out</name></expr>}</block></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosGetLinearInterpolationVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point2</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// fill with NULL</comment>
    <expr_stmt><expr><call><name>setNullRow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// fill with user specified value for each column</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>notFillCol</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>filled</name> <init>= <expr><call><name>fillIfWindowPseudoColumn</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>filled</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>p</name> <init>= <expr><ternary><condition><expr><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr> </then><else>: <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>doSetVal</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>pVar</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fillVal</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doSetUserSpecifiedValue</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pVar</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <comment type="line">//  setTagsValue(pFillInfo, data, index);</comment>
  <decl_stmt><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>=</operator>
      <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doSetVal</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pKey</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initBeforeAfterDataBuf</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SGroupKeys</name></type>  <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SResSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pCol</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>saveColData</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>rowBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>columnIndex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isNull</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copyCurrentRowIntoBuf</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>SRowVal</name><modifier>*</modifier></type> <name>pRowVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>srcTsSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRowVal</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pTsCol</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>rowIndex</name></expr>]</index></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pExpr</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>nodeType</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>QUERY_NODE_COLUMN</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>QUERY_NODE_OPERATOR</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>QUERY_NODE_FUNCTION</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>srcSlotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>srcSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>bool</name></type>  <name>isNull</name> <init>= <expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pSrcCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrcCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>saveColData</name><argument_list>(<argument><expr><name><name>pRowVal</name><operator>-&gt;</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>fillResultImpl</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>outputRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>srcTsSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><call><name>GET_FORWARD_DIRECTION_FACTOR</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>ascFill</name> <init>= <expr><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  ASSERT(ascFill &amp;&amp; (pFillInfo-&gt;currentKey &gt;= pFillInfo-&gt;start) || (!ascFill &amp;&amp; (pFillInfo-&gt;currentKey &lt;= pFillInfo-&gt;start)));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <while>while <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>&lt;</operator> <name>outputRows</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pTsCol</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></expr></init></decl>;</decl_stmt>

    <comment type="line">// set the next value for interpolation</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>&lt;</operator> <name>ts</name> <operator>&amp;&amp;</operator> <name>ascFill</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>&gt;</operator> <name>ts</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ascFill</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>copyCurrentRowIntoBuf</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>&lt;</operator> <name>ts</name> <operator>&amp;&amp;</operator> <name>ascFill</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>&gt;</operator> <name>ts</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ascFill</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
        <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>&lt;</operator> <name>outputRows</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// fill the gap between two input rows</comment>
      <while>while <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>&lt;</operator> <name>ts</name> <operator>&amp;&amp;</operator> <name>ascFill</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>&gt;</operator> <name>ts</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ascFill</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
             <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>&lt;</operator> <name>outputRows</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>doFillOneRow</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>

      <comment type="line">// output buffer is full, abort</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>==</operator> <name>outputRows</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfTotal</name></name> <operator>+=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name></expr>;</expr_stmt>
        <return>return <expr><name>outputRows</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>==</operator> <name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_NEXT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>nextRowIndex</name> <init>= <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>copyCurrentRowIntoBuf</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>nextRowIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// copy rows to dst buffer</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>dstSlotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>dstSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>dstSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>saveColData</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>srcTsSlotId</name></name> <operator>==</operator> <name>dstSlotId</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>key</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>src</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// the value is null</comment>
          <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// i &gt; 0 and data is null , do interpolation</comment>
            <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_PREV</name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>p</name> <init>= <expr><ternary><condition><expr><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr> </then><else>: <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>doSetVal</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_LINEAR</name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>saveColData</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// todo:</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_NULL</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_NEXT</name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>p</name> <init>= <expr><ternary><condition><expr><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr> </then><else>: <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>doSetVal</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <decl_stmt><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>pVar</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fillVal</name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>doSetUserSpecifiedValue</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pVar</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>

      <comment type="line">// set the tag value for final result</comment>
      <decl_stmt><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>=</operator>
          <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>||</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>&gt;=</operator> <name>outputRows</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfTotal</name></name> <operator>+=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>saveColData</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>rowBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>columnIndex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>rowBuf</name></expr></argument>, <argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pKey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pKey</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>appendFilledResult</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>resultCapacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/*
   * These data are generated according to fill strategy, since the current timestamp is out of the time window of
   * real result set. Note that we need to keep the direct previous result rows, to generated the filled data.
   */</comment>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>&lt;</operator> <name>resultCapacity</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doFillOneRow</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfTotal</name></name> <operator>+=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>==</operator> <name>resultCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>resultCapacity</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosNumOfRemainRows</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfRows</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>SFillInfo</name></name><modifier>*</modifier></type> <name>taosCreateFillInfo</name><parameter_list>(<parameter><decl><type><name>TSKEY</name></type> <name>skey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfFillCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfNotFillCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>,
                                     <parameter><decl><type><name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fillType</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SFillColInfo</name></name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>,
                                     <parameter><decl><type><name>int32_t</name></type> <name>primaryTsSlotId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>fillType</name> <operator>==</operator> <name>TSDB_FILL_NONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFillInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFillInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>srcTsSlotId</name></name> <operator>=</operator> <name>primaryTsSlotId</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfNotFillCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pCol</name><index>[<expr><name>i</name> <operator>+</operator> <name>numOfFillCols</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>srcSlotId</name> <init>= <expr><call><name>GET_DEST_SLOT_ID</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>srcSlotId</name> <operator>==</operator> <name>primaryTsSlotId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>tsSlotId</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>numOfFillCols</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosResetFillInfo</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>fillType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FILL_MODE_NONE</name></expr>:</case>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_FILL_NONE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FILL_MODE_PREV</name></expr>:</case>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_FILL_PREV</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FILL_MODE_NULL</name></expr>:</case>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_FILL_NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FILL_MODE_LINEAR</name></expr>:</case>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_FILL_LINEAR</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FILL_MODE_NEXT</name></expr>:</case>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_FILL_NEXT</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FILL_MODE_VALUE</name></expr>:</case>
      <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_FILL_SET_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>

  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>fillType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name></name> <operator>=</operator> <name>pCol</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name>numOfFillCols</name> <operator>+</operator> <name>numOfNotFillCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <operator>*</operator><name>pInterval</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGroupKeys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGroupKeys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initBeforeAfterDataBuf</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pFillInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosResetFillInfo</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>startTimestamp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>startTimestamp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>=</operator> <name>startTimestamp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>startTimestamp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfTotal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosDestroyFillInfo</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFillInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>pRowVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SGroupKeys</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>pRowVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//  for (int32_t i = 0; i &lt; pFillInfo-&gt;numOfTags; ++i) {</comment>
  <comment type="line">//    taosMemoryFreeClear(pFillInfo-&gt;pTags[i].tagVal);</comment>
  <comment type="line">//  }</comment>

  <comment type="line">// free pFillCol</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pCol</name><operator>-&gt;</operator><name>notFillCol</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>fillVal</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARBINARY</name> <operator>||</operator> <name><name>pCol</name><operator>-&gt;</operator><name>fillVal</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARCHAR</name> <operator>||</operator>
            <name><name>pCol</name><operator>-&gt;</operator><name>fillVal</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>||</operator> <name><name>pCol</name><operator>-&gt;</operator><name>fillVal</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>fillVal</name><operator>.</operator><name>pz</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>fillVal</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>fillVal</name><operator>.</operator><name>pz</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pFillCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosFillSetStartInfo</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>endKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_FILL_NONE</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>endKey</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>taosTimeTruncate</name><argument_list>(<argument><expr><name>endKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosFillSetInputDataBlock</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pSrcBlock</name></name> <operator>=</operator> <operator>(</operator><name>SSDataBlock</name><operator>*</operator><operator>)</operator><name>pInput</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosFillHasMoreResults</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>remain</name> <init>= <expr><call><name>taosNumOfRemainRows</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>ascFill</name> <init>= <expr><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfTotal</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <operator>(</operator><operator>(</operator><operator>(</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ascFill</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ascFill</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>getNumOfResultsAfterFillGap</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>getNumOfResultsAfterFillGap</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ekey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxNumOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>srcTsSlotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>tsList</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>numOfRows</name> <init>= <expr><call><name>taosNumOfRemainRows</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>ekey1</name> <init>= <expr><name>ekey</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfRes</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// still fill gap within current data block, not generating data after the result set.</comment>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>lastKey</name> <init>= <expr><name><name>tsList</name><index>[<expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>numOfRes</name> <operator>=</operator> <call><name>taosTimeCountInterval</name><argument_list>(<argument><expr><name>lastKey</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>,
                                     <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfRes</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>numOfRes</name> <operator>&gt;=</operator> <name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// reach the end of data</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ekey1</name> <operator>&lt;</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>&amp;&amp;</operator> <call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>ekey1</name> <operator>&gt;=</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FILL_IS_ASC_FILL</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>numOfRes</name> <operator>=</operator> <call><name>taosTimeCountInterval</name><argument_list>(<argument><expr><name>ekey1</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>sliding</name></name></expr></argument>,
                                     <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>interval</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfRes</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name>numOfRes</name> <operator>&gt;</operator> <name>maxNumOfRows</name><operator>)</operator></expr> ?</condition><then> <expr><name>maxNumOfRows</name></expr> </then><else>: <expr><name>numOfRes</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetLinearInterpolationVal</name><parameter_list>(<parameter><decl><type><name>SPoint</name><modifier>*</modifier></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>outputType</name></decl></parameter>, <parameter><decl><type><name>SPoint</name><modifier>*</modifier></type> <name>point1</name></decl></parameter>, <parameter><decl><type><name>SPoint</name><modifier>*</modifier></type> <name>point2</name></decl></parameter>,
                                      <parameter><decl><type><name>int32_t</name></type> <name>inputType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>v1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>inputType</name></expr></argument>, <argument><expr><name><name>point1</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>inputType</name></expr></argument>, <argument><expr><name><name>point2</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><call><name>DO_INTERPOLATION</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name><name>point1</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>point2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>point</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SET_TYPED_DATA</name><argument_list>(<argument><expr><name><name>point</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>outputType</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosFillResultDataBlock</name><parameter_list>(<parameter><decl><type><name>SFillInfo</name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>remain</name> <init>= <expr><call><name>taosNumOfRemainRows</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfRes</name> <init>= <expr><call><name>getNumOfResultsAfterFillGap</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>numOfRes</name> <operator>&lt;=</operator> <name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// no data existed for fill operation now, append result according to the fill strategy</comment>
  <if_stmt><if>if <condition>(<expr><name>remain</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>appendFilledResult</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>numOfRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fillResultImpl</name><argument_list>(<argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>numOfRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>numOfRes</name> <operator>==</operator> <name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"fill:%p, generated fill result, src block:%d, index:%d, brange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">", currentKey:%"</literal> <name>PRId64</name>
         <literal type="string">", current : % d, total : % d, %s"</literal></expr></argument>,
         <argument><expr><name>pFillInfo</name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>currentKey</name></name></expr></argument>,
         <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfCurrent</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>numOfTotal</name></name></expr></argument>, <argument><expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>numOfRes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>getFillInfoStart</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SFillInfo</name></name><modifier>*</modifier></type> <name>pFillInfo</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pFillInfo</name><operator>-&gt;</operator><name>start</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>createFillColInfo</name><parameter_list>(<parameter><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExpr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfFillExpr</name></decl></parameter>, <parameter><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pNotFillExpr</name></decl></parameter>,
                                <parameter><decl><type><name>int32_t</name></type> <name>numOfNoFillExpr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>SNodeListNode</name></name><modifier>*</modifier></type> <name>pValNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillColInfo</name><modifier>*</modifier></type> <name>pFillCol</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfFillExpr</name> <operator>+</operator> <name>numOfNoFillExpr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFillColInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFillCol</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>pValNode</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pValNode</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfFillExpr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pExpr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pExpr</name> <operator>=</operator> <name>pExprInfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>notFillCol</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="line">// todo refactor</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// if the user specified value is less than the column, alway use the last one as the fill value</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>len</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pv</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pValNode</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>nodesValueNodeToVariant</name><argument_list>(<argument><expr><name>pv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFillCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fillVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfNoFillExpr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprInfo</name><modifier>*</modifier></type> <name>pExprInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pNotFillExpr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pFillCol</name><index>[<expr><name>i</name> <operator>+</operator> <name>numOfFillExpr</name></expr>]</index></name><operator>.</operator><name>pExpr</name> <operator>=</operator> <name>pExprInfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFillCol</name><index>[<expr><name>i</name> <operator>+</operator> <name>numOfFillExpr</name></expr>]</index></name><operator>.</operator><name>notFillCol</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pFillCol</name></expr>;</return>
</block_content>}</block></function>
</unit>
