<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexFst.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstAutomation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tchecksum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcoding.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>fstPackDeltaIn</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>wrt</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>nodeAddr</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>transAddr</name></decl></parameter>,
                                        <parameter><decl><type><name>uint8_t</name></type> <name>nBytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CompiledAddr</name></type> <name>deltaAddr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>transAddr</name> <operator>==</operator> <name>EMPTY_ADDRESS</name><operator>)</operator></expr> ?</condition><then> <expr><name>EMPTY_ADDRESS</name></expr> </then><else>: <expr><name>nodeAddr</name> <operator>-</operator> <name>transAddr</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>idxFilePackUintIn</name><argument_list>(<argument><expr><name>wrt</name></expr></argument>, <argument><expr><name>deltaAddr</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>uint8_t</name></type> <name>fstPackDelta</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>wrt</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>nodeAddr</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>transAddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>nBytes</name> <init>= <expr><call><name>packDeltaSize</name><argument_list>(<argument><expr><name>nodeAddr</name></expr></argument>, <argument><expr><name>transAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstPackDeltaIn</name><argument_list>(<argument><expr><name>wrt</name></expr></argument>, <argument><expr><name>nodeAddr</name></expr></argument>, <argument><expr><name>transAddr</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nBytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>fstUnFinishedNodesCreate</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>nodes</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstUnFinishedNodes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nodes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstBuilderNodeUnfinished</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstUnFinishedNodesPushEmpty</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nodes</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <name>FORCE_INLINE</name></type> <name>unFinishedNodeDestroyElem</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>elem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><operator>(</operator><name>FstBuilderNodeUnfinished</name><operator>*</operator><operator>)</operator><name>elem</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstBuilderNodeDestroy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstUnFinishedNodesDestroy</name><parameter_list>(<parameter><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>nodes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>nodes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>unFinishedNodeDestroyElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fstUnFinishedNodesPushEmpty</name><parameter_list>(<parameter><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>nodes</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isFinal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstBuilderNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>isFinal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>trans</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstTransition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name></type> <name>un</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>node</name></expr>, <expr><operator>.</operator><name>last</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>un</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>fstUnFinishedNodesPopRoot</name><parameter_list>(<parameter><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>nodes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>un</name> <init>= <expr><call><name>taosArrayPop</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>un</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>un</name><operator>-&gt;</operator><name>node</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>fstUnFinishedNodesPopFreeze</name><parameter_list>(<parameter><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>nodes</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>un</name> <init>= <expr><call><name>taosArrayPop</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstBuilderNodeUnfinishedLastCompiled</name><argument_list>(<argument><expr><name>un</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// taosMemoryFree(un-&gt;last); // TODO add func FstLastTransitionFree()</comment>
  <comment type="line">// un-&gt;last = NULL;</comment>
  <return>return <expr><name><name>un</name><operator>-&gt;</operator><name>node</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>fstUnFinishedNodesPopEmpty</name><parameter_list>(<parameter><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>nodes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>un</name> <init>= <expr><call><name>taosArrayPop</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>un</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>un</name><operator>-&gt;</operator><name>node</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstUnFinishedNodesSetRootOutput</name><parameter_list>(<parameter><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>nodes</name></decl></parameter>, <parameter><decl><type><name>Output</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>un</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>un</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>un</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
  <comment type="line">// un-&gt;node-&gt;trans       = NULL;</comment>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstUnFinishedNodesTopLastFreeze</name><parameter_list>(<parameter><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>nodes</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>un</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstBuilderNodeUnfinishedLastCompiled</name><argument_list>(<argument><expr><name>un</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstUnFinishedNodesAddSuffix</name><parameter_list>(<parameter><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>nodes</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>Output</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>&amp;</operator><name>bs</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstSliceIsEmpty</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                   <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>un</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>un</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// FstLastTransition *trn = taosMemoryMalloc(sizeof(FstLastTransition));</comment>
  <comment type="line">// trn-&gt;inp = s-&gt;data[s-&gt;start];</comment>
  <comment type="line">// trn-&gt;out = out;</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>un</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>fstLastTransitionCreate</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>n</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstBuilderNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>trans</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstTransition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// FstLastTransition *trn = taosMemoryMalloc(sizeof(FstLastTransition));</comment>
    <comment type="line">// trn-&gt;inp = s-&gt;data[i];</comment>
    <comment type="line">// trn-&gt;out = out;</comment>
    <decl_stmt><decl><type><name>FstLastTransition</name><modifier>*</modifier></type> <name>trn</name> <init>= <expr><call><name>fstLastTransitionCreate</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name></type> <name>un</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>n</name></expr>, <expr><operator>.</operator><name>last</name> <operator>=</operator> <name>trn</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>nodes</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>un</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fstUnFinishedNodesPushEmpty</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>fstUnFinishedNodesFindCommPrefix</name><parameter_list>(<parameter><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name></type> <name>bs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>&amp;</operator><name>bs</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>ssz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// stack size</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>lsz</name></decl>;</decl_stmt>  <comment type="line">// data len</comment>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ssz</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>lsz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>un</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>un</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>inp</name></name> <operator>==</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>fstUnFinishedNodesFindCommPrefixAndSetOutput</name><parameter_list>(<parameter><decl><type><name>FstUnFinishedNodes</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>Output</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>Output</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>&amp;</operator><name>bs</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>lsz</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="line">// data len</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ssz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>    <comment type="line">// stack size</comment>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lsz</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>ssz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>un</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FstLastTransition</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><name><name>un</name><operator>-&gt;</operator><name>last</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>           <name>addPrefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type>           <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>inp</name></name> <operator>==</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>commPrefix</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>tAddPrefix</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>out</name></name> <operator>-</operator> <name>commPrefix</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>out</name><operator>)</operator> <operator>-</operator> <name>commPrefix</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>commPrefix</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>addPrefix</name> <operator>=</operator> <name>tAddPrefix</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>addPrefix</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>ssz</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>unf</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fstBuilderNodeUnfinishedAddOutputPrefix</name><argument_list>(<argument><expr><name>unf</name></expr></argument>, <argument><expr><name>addPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FstState</name></type> <name>fstStateCreateFrom</name><parameter_list>(<parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstState</name></type> <name>fs</name> <init>= <expr><block>{<expr><operator>.</operator><name>state</name> <operator>=</operator> <name>EmptyFinal</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>EMPTY_ADDRESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>fs</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>v</name> <init>= <expr><name><name>data</name><index>[<expr><name>addr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>t</name> <init>= <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0b11000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0b11</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fs</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>OneTransNext</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0b10</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fs</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>OneTrans</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>fs</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>AnyTrans</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  <return>return <expr><name>fs</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>FstState</name></type> <name><name>fstStateDict</name><index>[]</index></name> <init>= <expr><block>{<expr><block>{<expr><operator>.</operator><name>state</name> <operator>=</operator> <name>OneTransNext</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">0b11000000</literal></expr>}</block></expr>,
                                  <expr><block>{<expr><operator>.</operator><name>state</name> <operator>=</operator> <name>OneTrans</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">0b10000000</literal></expr>}</block></expr>,
                                  <expr><block>{<expr><operator>.</operator><name>state</name> <operator>=</operator> <name>AnyTrans</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">0b00000000</literal></expr>}</block></expr>,
                                  <expr><block>{<expr><operator>.</operator><name>state</name> <operator>=</operator> <name>EmptyFinal</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">0b00000000</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// debug</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>fstStateStr</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"ONE_TRANS_NEXT"</literal></expr>, <expr><literal type="string">"ONE_TRANS"</literal></expr>, <expr><literal type="string">"ANY_TRANS"</literal></expr>, <expr><literal type="string">"EMPTY_FINAL"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>FstState</name></type> <name>fstStateCreate</name><parameter_list>(<parameter><decl><type><name>State</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>state</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>fstStateDict</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<comment type="line">// compile</comment>
<function><type><name>void</name></type> <name>fstStateCompileForOneTransNext</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>inp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstState</name></type> <name>s</name> <init>= <expr><call><name>fstStateCreate</name><argument_list>(<argument><expr><name>OneTransNext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstStateSetCommInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>null</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><call><name>fstStateCommInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>null</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// w-&gt;write_all(&amp;[inp])</comment>
    <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>.</operator><name>val</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// w-&gt;write_all(&amp;[s.val])</comment>
  <return>return;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstStateCompileForOneTrans</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>trn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Output</name></type>    <name>out</name> <init>= <expr><name><name>trn</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>   <name>outPackSize</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>out</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>idxFilePackUint</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>   <name>transPackSize</name> <init>= <expr><call><name>fstPackDelta</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>trn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PackSizes</name></type> <name>packSizes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>FST_SET_OUTPUT_PACK_SIZE</name><argument_list>(<argument><expr><name>packSizes</name></expr></argument>, <argument><expr><name>outPackSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>FST_SET_TRANSITION_PACK_SIZE</name><argument_list>(<argument><expr><name>packSizes</name></expr></argument>, <argument><expr><name>transPackSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>packSizes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>packSizes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstState</name></type> <name>st</name> <init>= <expr><call><name>fstStateCreate</name><argument_list>(<argument><expr><name>OneTrans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>fstStateSetCommInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name><name>trn</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>null</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>inp</name> <init>= <expr><call><name>fstStateCommInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>null</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>trn</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>trn</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>st</name><operator>.</operator><name>val</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstStateCompileForAnyTrans</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sz</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>tSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>oSize</name> <init>= <expr><call><name>packSize</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>finalOutput</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// finalOutput.is_zero()</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>anyOuts</name> <init>= <expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tSize</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tSize</name></expr></argument>, <argument><expr><call><name>packDeltaSize</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oSize</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>oSize</name></expr></argument>, <argument><expr><call><name>packSize</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>anyOuts</name> <operator>=</operator> <name>anyOuts</name> <operator>||</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>out</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>PackSizes</name></type> <name>packSizes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>anyOuts</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>FST_SET_OUTPUT_PACK_SIZE</name><argument_list>(<argument><expr><name>packSizes</name></expr></argument>, <argument><expr><name>oSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>FST_SET_OUTPUT_PACK_SIZE</name><argument_list>(<argument><expr><name>packSizes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>FST_SET_TRANSITION_PACK_SIZE</name><argument_list>(<argument><expr><name>packSizes</name></expr></argument>, <argument><expr><name>tSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstState</name></type> <name>st</name> <init>= <expr><call><name>fstStateCreate</name><argument_list>(<argument><expr><name>AnyTrans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstStateSetFinalState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>isFinal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstStateSetStateNtrans</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>anyOuts</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>FST_BUILDER_NODE_IS_FINAL</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>idxFilePackUintIn</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>finalOutput</name></name></expr></argument>, <argument><expr><name>oSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>idxFilePackUintIn</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>oSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fstPackDeltaIn</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>tSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <name>TRANS_INDEX_THRESHOLD</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// A value of 255 indicates that no transition exists for the byte at that idx</comment>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>index</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>index</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>inp</name></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>index</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>packSizes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>null</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstStateStateNtrans</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>null</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// 256 can't be represented in a u8, so we abuse the fact that</comment>
    <comment type="line">// the # of transitions can never be 1 here, since 1 is always</comment>
    <comment type="line">// encoded in the state byte.</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>st</name><operator>.</operator><name>val</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<comment type="line">// set_comm_input</comment>
<function><type><name>void</name></type> <name>fstStateSetCommInput</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>inp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>val</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>COMMON_INDEX</name><argument_list>(<argument><expr><name>inp</name></expr></argument>, <argument><expr><literal type="number">0b111111</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;</operator> <name><name>fstStateDict</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name><operator>.</operator><name>val</name><operator>)</operator> <operator>|</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// comm_input</comment>
<function><type><name>uint8_t</name></type> <name>fstStateCommInput</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>null</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;</operator> <literal type="number">0b00111111</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>v</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// 0 indicate that common_input is None</comment>
  <return>return <expr><call><name>COMMON_INPUT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input_len</comment>

<function><type><name>uint64_t</name></type> <name>fstStateInputLen</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>null</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstStateCommInput</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>null</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">// end_addr</comment>
<function><type><name>uint64_t</name></type> <name>fstStateEndAddrForOneTransNext</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>fstStateInputLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>fstStateEndAddrForOneTrans</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>PackSizes</name></type> <name>sizes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>fstStateInputLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>  <comment type="line">// pack size</comment>
         <operator>-</operator> <call><name>FST_GET_TRANSITION_PACK_SIZE</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FST_GET_OUTPUT_PACK_SIZE</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>fstStateEndAddrForAnyTrans</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>PackSizes</name></type> <name>sizes</name></decl></parameter>,
                                    <parameter><decl><type><name>uint64_t</name></type> <name>nTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>oSizes</name> <init>= <expr><call><name>FST_GET_OUTPUT_PACK_SIZE</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>finalOsize</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>fstStateIsFinalState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>oSizes</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>fstStateNtransLen</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>                     <comment type="line">// pack size</comment>
         <operator>-</operator> <call><name>fstStateTotalTransSize</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>sizes</name></expr></argument>, <argument><expr><name>nTrans</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>nTrans</name> <operator>*</operator> <name>oSizes</name>  <comment type="line">// output values</comment>
         <operator>-</operator> <name>finalOsize</name></expr>;</return>                                                              <comment type="line">// final output</comment>
</block_content>}</block></function>
<comment type="line">// input</comment>
<function><type><name>uint8_t</name></type> <name>fstStateInput</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>null</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>   <name>inp</name> <init>= <expr><call><name>fstStateCommInput</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type>  <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>null</name> <operator>==</operator> <name>false</name></expr> ?</condition><then> <expr><name>inp</name></expr> </then><else>: <expr><name><name>data</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint8_t</name></type> <name>fstStateInputForAnyTrans</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>at</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <call><name>fstStateNtransLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>                             <comment type="line">// pack size</comment>
                <operator>-</operator> <call><name>fstStateTransIndexSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nTrans</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// the output size</comment>

  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>data</name><index>[<expr><name>at</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// trans_addr</comment>
<function><type><name>CompiledAddr</name></type> <name>fstStateTransAddr</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>CompiledAddr</name><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>PackSizes</name></type> <name>sizes</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>sizes</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type>   <name>tSizes</name> <init>= <expr><call><name>FST_GET_TRANSITION_PACK_SIZE</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>  <name>i</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <call><name>fstStateInputLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>  <comment type="line">// PackSizes</comment>
                 <operator>-</operator> <name>tSizes</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// refactor error logic</comment>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>unpackDelta</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>tSizes</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>CompiledAddr</name></type> <name>fstStateTransAddrForAnyTrans</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>   <name>tSizes</name> <init>= <expr><call><name>FST_GET_TRANSITION_PACK_SIZE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>at</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <call><name>fstStateNtransLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>fstStateTransIndexSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nTrans</name></name></expr></argument>)</argument_list></call> <operator>-</operator>
                <name><name>node</name><operator>-&gt;</operator><name>nTrans</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>tSizes</name><operator>)</operator> <operator>-</operator> <name>tSizes</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>unpackDelta</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>at</name></expr></argument>, <argument><expr><name>tSizes</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// sizes</comment>
<function><type><name>PackSizes</name></type> <name>fstStateSizes</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>fstStateInputLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>fstStateNtransLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>PackSizes</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>data</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="line">// Output</comment>
<function><type><name>Output</name></type> <name>fstStateOutput</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>oSizes</name> <init>= <expr><call><name>FST_GET_OUTPUT_PACK_SIZE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>oSizes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>   <name>tSizes</name> <init>= <expr><call><name>FST_GET_TRANSITION_PACK_SIZE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <call><name>fstStateInputLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>tSizes</name> <operator>-</operator> <name>oSizes</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>unpackUint64</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>oSizes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>Output</name></type> <name>fstStateOutputForAnyTrans</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>oSizes</name> <init>= <expr><call><name>FST_GET_OUTPUT_PACK_SIZE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>oSizes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type>  <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>at</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <call><name>fstStateNtransLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>  <comment type="line">// pack size</comment>
                <operator>-</operator> <call><name>fstStateTotalTransSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nTrans</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>oSizes</name><operator>)</operator> <operator>-</operator> <name>oSizes</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>unpackUint64</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>at</name></expr></argument>, <argument><expr><name>oSizes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// anyTrans specify function</comment>

<function><type><name>void</name></type> <name>fstStateSetFinalState</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>yes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>yes</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>|=</operator> <literal type="number">0b01000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>fstStateIsFinalState</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;</operator> <literal type="number">0b01000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0b01000000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fstStateSetStateNtrans</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0b00111111</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;</operator> <literal type="number">0b11000000</literal><operator>)</operator> <operator>|</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>
<comment type="line">// state_ntrans</comment>
<function><type><name>uint8_t</name></type> <name>fstStateStateNtrans</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>null</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>n</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;</operator> <literal type="number">0b00111111</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>  <comment type="line">// None</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>fstStateTotalTransSize</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>PackSizes</name></type> <name>sizes</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>nTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>idxSize</name> <init>= <expr><call><name>fstStateTransIndexSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>nTrans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>nTrans</name> <operator>+</operator> <operator>(</operator><name>nTrans</name> <operator>*</operator> <call><name>FST_GET_TRANSITION_PACK_SIZE</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <name>idxSize</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>fstStateTransIndexSize</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>nTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>nTrans</name> <operator>&gt;</operator> <name>TRANS_INDEX_THRESHOLD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">256</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>fstStateNtransLen</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>null</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstStateStateNtrans</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>null</name> <operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>fstStateNtrans</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>null</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>n</name> <init>= <expr><call><name>fstStateStateNtrans</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>null</name> <operator>!=</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>n</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">256</literal></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</return>  <comment type="line">// // "1" is never a normal legal value here, because if there, // is only 1 transition,</comment>
                            <comment type="line">// then it is encoded in the state byte</comment>
</block_content>}</block></function>
<function><type><name>Output</name></type> <name>fstStateFinalOutput</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name></decl></parameter>, <parameter><decl><type><name>PackSizes</name></type> <name>sizes</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>nTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>oSizes</name> <init>= <expr><call><name>FST_GET_OUTPUT_PACK_SIZE</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>oSizes</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>fstStateIsFinalState</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>at</name> <init>= <expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>fstStateNtransLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>  <comment type="line">// pack size</comment>
                <operator>-</operator> <call><name>fstStateTotalTransSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>sizes</name></expr></argument>, <argument><expr><name>nTrans</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>nTrans</name> <operator>*</operator> <name>oSizes</name><operator>)</operator> <operator>-</operator> <name>oSizes</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>unpackUint64</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>at</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>oSizes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>fstStateFindInput</name><parameter_list>(<parameter><decl><type><name>FstState</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>null</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>nTrans</name></name> <operator>&gt;</operator> <name>TRANS_INDEX_THRESHOLD</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>at</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <call><name>fstStateNtransLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>  <comment type="line">// pack size</comment>
                  <operator>-</operator> <call><name>fstStateTransIndexSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nTrans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>dlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><name><name>data</name><index>[<expr><name>at</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>nTrans</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>i</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <call><name>fstStateNtransLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>  <comment type="line">// pack size</comment>
                     <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>nTrans</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>end</name> <init>= <expr><name>start</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>nTrans</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FstSlice</name></type> <name>t</name> <init>= <expr><call><name>fstSliceCopy</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>node</name><operator>-&gt;</operator><name>nTrans</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>  <comment type="line">// bug</comment>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// fst node function</comment>

<function><type><name>FstNode</name><modifier>*</modifier></type> <name>fstNodeCreate</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>n</name> <init>= <expr><operator>(</operator><name>FstNode</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>FstState</name></type> <name>st</name> <init>= <expr><call><name>fstStateCreateFrom</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>EmptyFinal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>EMPTY_ADDRESS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>EMPTY_ADDRESS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>nTrans</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sizes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>fstSliceCopy</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>fstStateEndAddrForOneTransNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//? s.end_addr(data);</comment>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sizes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>nTrans</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FstSlice</name></type>  <name>data</name> <init>= <expr><call><name>fstSliceCopy</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PackSizes</name></type> <name>sz</name> <init>= <expr><call><name>fstStateSizes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>fstStateEndAddrForOneTrans</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// s.end_addr(data, sz);</comment>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>nTrans</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sizes</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>FstSlice</name></type> <name>data</name> <init>= <expr><call><name>fstSliceCopy</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>sz</name> <init>= <expr><call><name>fstStateSizes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>       <comment type="line">// s.sizes(data)</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nTrans</name> <init>= <expr><call><name>fstStateNtrans</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// s.ntrans(data)</comment>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>fstStateEndAddrForAnyTrans</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>nTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// s.end_addr(version, data, sz, ntrans);</comment>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <call><name>fstStateIsFinalState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                <comment type="line">// s.is_final_state();</comment>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>nTrans</name></name> <operator>=</operator> <name>nTrans</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sizes</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>=</operator>
        <call><name>fstStateFinalOutput</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>nTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// s.final_output(version, data, sz, ntrans);</comment>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// debug state transition</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fstNodeState</name><parameter_list>(<parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstState</name><modifier>*</modifier></type> <name>st</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>fstStateStr</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fstNodeDestroy</name><parameter_list>(<parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>FstTransitions</name><modifier>*</modifier></type> <name>fstNodeTransitions</name><parameter_list>(<parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstTransitions</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstTransitions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>t</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>FstRange</name></type> <name>range</name> <init>= <expr><block>{<expr><operator>.</operator><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>end</name> <operator>=</operator> <macro><name>FST_NODE_LEN</name><argument_list>(<argument>node</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Returns the transition at index `i`.</comment>
<function><type><name>bool</name></type> <name>fstNodeGetTransitionAt</name><parameter_list>(<parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>trn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>      <name>s</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstState</name><modifier>*</modifier></type> <name>st</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>inp</name></name> <operator>=</operator> <call><name>fstStateInput</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>fstStateTransAddr</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>inp</name></name> <operator>=</operator> <call><name>fstStateInput</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>fstStateOutput</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>fstStateTransAddr</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>inp</name></name> <operator>=</operator> <call><name>fstStateInputForAnyTrans</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>fstStateOutputForAnyTrans</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>fstStateTransAddrForAnyTrans</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Returns the transition address of the `i`th transition</comment>
<function><type><name>bool</name></type> <name>fstNodeGetTransitionAddrAt</name><parameter_list>(<parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>      <name>s</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstState</name><modifier>*</modifier></type> <name>st</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fstStateTransAddr</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fstStateTransAddr</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fstStateTransAddrForAnyTrans</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>FST_STATE_EMPTY_FINAL</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  Finds the `i`th transition corresponding to the given input byte.</comment>
<comment type="line">//  If no transition for this byte exists, then `false` is returned.</comment>
<function><type><name>bool</name></type> <name>fstNodeFindInput</name><parameter_list>(<parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>      <name>s</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstState</name><modifier>*</modifier></type> <name>st</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTransNext</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>fstStateInput</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>OneTrans</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>fstStateInput</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>AnyTrans</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>     <name>null</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>out</name> <init>= <expr><call><name>fstStateFindInput</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>null</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fstNodeCompile</name><parameter_list>(<parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>lastAddr</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>builderNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>builderNode</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sz</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>builderNode</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>&amp;&amp;</operator> <name><name>builderNode</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>builderNode</name><operator>-&gt;</operator><name>isFinal</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fstStateCompileForAnyTrans</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>builderNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>tran</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>builderNode</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tran</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>lastAddr</name> <operator>&amp;&amp;</operator> <name><name>tran</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fstStateCompileForOneTransNext</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>tran</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fstStateCompileForOneTrans</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>tran</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fstBuilderNodeCompileTo</name><parameter_list>(<parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>wrt</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>lastAddr</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>startAddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>fstNodeCompile</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wrt</name></expr></argument>, <argument><expr><name>lastAddr</name></expr></argument>, <argument><expr><name>startAddr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FstBuilder</name><modifier>*</modifier></type> <name>fstBuilderCreate</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>FstType</name></type> <name>ty</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstBuilder</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstBuilder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>b</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name> <operator>=</operator> <call><name>idxFileCreate</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>unfinished</name></name> <operator>=</operator> <call><name>fstUnFinishedNodesCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>registry</name></name> <operator>=</operator> <call><name>fstRegistryCreate</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>lastAddr</name></name> <operator>=</operator> <name>NONE_ADDRESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>  <name><name>buf64</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pBuf64</name> <init>= <expr><name>buf64</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosEncodeFixedU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf64</name></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>, <argument><expr><name>buf64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pBuf64</name> <operator>=</operator> <name>buf64</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosEncodeFixedU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf64</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>, <argument><expr><name>buf64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstBuilderDestroy</name><parameter_list>(<parameter><decl><type><name>FstBuilder</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fstBuilderFinish</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>idxFileDestroy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstUnFinishedNodesDestroy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>unfinished</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstRegistryDestroy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fstBuilderInsert</name><parameter_list>(<parameter><decl><type><name>FstBuilder</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>Output</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstOrderType</name></type> <name>t</name> <init>= <expr><call><name>fstBuilderCheckLastKey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>Ordered</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// add log info</comment>
    <expr_stmt><expr><call><name>fstBuilderInsertOutput</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"fst write key must be ordered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fstBuilderInsertOutput</name><parameter_list>(<parameter><decl><type><name>FstBuilder</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>Output</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>&amp;</operator><name>bs</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstSliceIsEmpty</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fstUnFinishedNodesSetRootOutput</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>unfinished</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>Output</name></type>   <name>out</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>prefixLen</name> <init>= <expr><call><name>fstUnFinishedNodesFindCommPrefixAndSetOutput</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>unfinished</name></name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>prefixLen</name> <operator>==</operator> <call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstBuilderCompileFrom</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>prefixLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstSlice</name></type> <name>sub</name> <init>= <expr><call><name>fstSliceCopy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>prefixLen</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstUnFinishedNodesAddSuffix</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>unfinished</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>FstOrderType</name></type> <name>fstBuilderCheckLastKey</name><parameter_list>(<parameter><decl><type><name>FstBuilder</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ckDup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>input</name> <init>= <expr><operator>&amp;</operator><name>bs</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstSliceIsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// deep copy or not</comment>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>fstSliceDeepCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><call><name>fstSliceCompare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ckDup</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>DuplicateKey</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>OutOfOrdered</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// deep copy or not</comment>
    <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>fstSliceDeepCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>Ordered</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstBuilderCompileFrom</name><parameter_list>(<parameter><decl><type><name>FstBuilder</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>istate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CompiledAddr</name></type> <name>addr</name> <init>= <expr><name>NONE_ADDRESS</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>istate</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <call><name>FST_UNFINISHED_NODES_LEN</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>unfinished</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>bn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NONE_ADDRESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>fstUnFinishedNodesPopEmpty</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>unfinished</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>fstUnFinishedNodesPopFreeze</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>unfinished</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>fstBuilderCompile</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fstBuilderNodeDestroy</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>addr</name> <operator>!=</operator> <name>NONE_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>fstUnFinishedNodesTopLastFreeze</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>unfinished</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>CompiledAddr</name></type> <name>fstBuilderCompile</name><parameter_list>(<parameter><decl><type><name>FstBuilder</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>bn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>FST_BUILDER_NODE_IS_FINAL</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FST_BUILDER_NODE_TRANS_ISEMPTY</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FST_BUILDER_NODE_FINALOUTPUT_ISZERO</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EMPTY_ADDRESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>FstRegistryEntry</name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><call><name>fstRegistryGetEntry</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FOUND</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>CompiledAddr</name></type> <name>ret</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fstRegistryEntryDestroy</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>CompiledAddr</name></type> <name>startAddr</name> <init>= <expr><operator>(</operator><name>CompiledAddr</name><operator>)</operator><operator>(</operator><call><name>FST_WRITER_COUNT</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>fstBuilderNodeCompileTo</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>lastAddr</name></name></expr></argument>, <argument><expr><name>startAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>lastAddr</name></name> <operator>=</operator> <operator>(</operator><name>CompiledAddr</name><operator>)</operator><operator>(</operator><call><name>FST_WRITER_COUNT</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>FST_REGISTRY_CELL_INSERT</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>cell</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>lastAddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fstRegistryEntryDestroy</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>b</name><operator>-&gt;</operator><name>lastAddr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>fstBuilderInsertInner</name><parameter_list>(<parameter><decl><type><name>FstBuilder</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fstBuilderCompileFrom</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>rootNode</name> <init>= <expr><call><name>fstUnFinishedNodesPopRoot</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>unfinished</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CompiledAddr</name></type>    <name>rootAddr</name> <init>= <expr><call><name>fstBuilderCompile</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstBuilderNodeDestroy</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf64</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pBuf64</name> <init>= <expr><name>buf64</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosEncodeFixedU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf64</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>, <argument><expr><name>buf64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pBuf64</name> <operator>=</operator> <name>buf64</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosEncodeFixedU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf64</name></expr></argument>, <argument><expr><name>rootAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>, <argument><expr><name>buf64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>     <name><name>buf32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>pBuf32</name> <init>= <expr><name>buf32</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sum</name> <init>= <expr><call><name>idxFileMaskedCheckSum</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosEncodeFixedU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBuf32</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>, <argument><expr><name>buf32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>idxFileFlush</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>b</name><operator>-&gt;</operator><name>wrt</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstBuilderFinish</name><parameter_list>(<parameter><decl><type><name>FstBuilder</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fstBuilderInsertInner</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>FstSlice</name></type> <name>fstNodeAsSlice</name><parameter_list>(<parameter><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstSlice</name></type>  <name>s</name> <init>= <expr><call><name>fstSliceCopy</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FstLastTransition</name><modifier>*</modifier></type> <name>fstLastTransitionCreate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>inp</name></decl></parameter>, <parameter><decl><type><name>Output</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstLastTransition</name><modifier>*</modifier></type> <name>trn</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstLastTransition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>trn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>inp</name></name> <operator>=</operator> <name>inp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
  <return>return <expr><name>trn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fstLastTransitionDestroy</name><parameter_list>(<parameter><decl><type><name>FstLastTransition</name><modifier>*</modifier></type> <name>trn</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>trn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>fstBuilderNodeUnfinishedLastCompiled</name><parameter_list>(<parameter><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>unNode</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstLastTransition</name><modifier>*</modifier></type> <name>trn</name> <init>= <expr><name><name>unNode</name><operator>-&gt;</operator><name>last</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>trn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>FstTransition</name></type> <name>t</name> <init>= <expr><block>{<expr><operator>.</operator><name>inp</name> <operator>=</operator> <name><name>trn</name><operator>-&gt;</operator><name>inp</name></name></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <name><name>trn</name><operator>-&gt;</operator><name>out</name></name></expr>, <expr><operator>.</operator><name>addr</name> <operator>=</operator> <name>addr</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>unNode</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstLastTransitionDestroy</name><argument_list>(<argument><expr><name>trn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unNode</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fstBuilderNodeUnfinishedAddOutputPrefix</name><parameter_list>(<parameter><decl><type><name>FstBuilderNodeUnfinished</name><modifier>*</modifier></type> <name>unNode</name></decl></parameter>, <parameter><decl><type><name>Output</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>FST_BUILDER_NODE_IS_FINAL</name><argument_list>(<argument><expr><name><name>unNode</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unNode</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>+=</operator> <name>out</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>unNode</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>trn</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>unNode</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>trn</name><operator>-&gt;</operator><name>out</name></name> <operator>+=</operator> <name>out</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>unNode</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unNode</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>out</name></name> <operator>+=</operator> <name>out</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>Fst</name><modifier>*</modifier></type> <name>fstCreate</name><parameter_list>(<parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>slen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;</operator> <literal type="number">36</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name> <init>= <expr><name>slen</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosDecodeFixedU64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>skip</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>version</name> <operator>&gt;</operator> <name>VERSION</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>type</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosDecodeFixedU64</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>skip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>skip</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>checkSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>checkSum</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosDecodeFixedU32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkSum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosCheckChecksum</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>checkSum</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"index file is corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// verify fst</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>CompiledAddr</name></type> <name>rootAddr</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rootAddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosDecodeFixedU64</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>fstLen</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fstLen</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosDecodeFixedU64</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO(validate root addr)</comment>
  <decl_stmt><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name> <init>= <expr><operator>(</operator><name>Fst</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <operator>(</operator><name>FstMeta</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>fst</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>FST_CREAT_FAILED</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>rootAddr</name></name> <operator>=</operator> <name>rootAddr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>ty</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>fstLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>checkSum</name></name> <operator>=</operator> <name>checkSum</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstSlice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>fstSliceCopy</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fst</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fst</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>fst</name></expr>;</return>

<label><name>FST_CREAT_FAILED</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>fst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstDestroy</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>fst</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><name><name>fst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>fst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fst</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>fst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fstGet</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>Output</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>      <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>root</name> <init>= <expr><call><name>fstGetRoot</name><argument_list>(<argument><expr><name>fst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Output</name></type>   <name>tOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>nodes</name> <init>= <expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>inp</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Output</name></type>  <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>false</name> <operator>==</operator> <call><name>fstNodeFindInput</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>inp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>FstTransition</name></type> <name>trn</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fstNodeGetTransitionAt</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tOut</name> <operator>+=</operator> <name><name>trn</name><operator>.</operator><name>out</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>fstGetNode</name><argument_list>(<argument><expr><name>fst</name></expr></argument>, <argument><expr><name><name>trn</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FST_NODE_IS_FINAL</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>tOut</name> <operator>=</operator> <name>tOut</name> <operator>+</operator> <call><name>FST_NODE_FINAL_OUTPUT</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_return</name>:</label>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>node</name> <init>= <expr><operator>(</operator><name>FstNode</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fstNodeDestroy</name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>tOut</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>FStmBuilder</name><modifier>*</modifier></type> <name>fstSearch</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>, <parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// refactor later</comment>
  <return>return <expr><call><name>stmBuilderCreate</name><argument_list>(<argument><expr><name>fst</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>FStmSt</name><modifier>*</modifier></type> <name>stmBuilderIntoStm</name><parameter_list>(<parameter><decl><type><name>FStmBuilder</name><modifier>*</modifier></type> <name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>stmStCreate</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>fst</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>aut</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>FStmStBuilder</name><modifier>*</modifier></type> <name>fstSearchWithState</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>, <parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// refactor later</comment>
  <return>return <expr><call><name>stmBuilderCreate</name><argument_list>(<argument><expr><name>fst</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FstNode</name><modifier>*</modifier></type> <name>fstGetRoot</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CompiledAddr</name></type> <name>addr</name> <init>= <expr><call><name>fstGetRootAddr</name><argument_list>(<argument><expr><name>fst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>fstGetNode</name><argument_list>(<argument><expr><name>fst</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FstNode</name><modifier>*</modifier></type> <name>fstGetNode</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// refactor later</comment>
  <return>return <expr><call><name>fstNodeCreate</name><argument_list>(<argument><expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>fst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>FstType</name></type>      <name>fstGetType</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>ty</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>CompiledAddr</name></type> <name>fstGetRootAddr</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>rootAddr</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>Output</name></type> <name>fstEmptyFinalOutput</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>null</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Output</name></type>   <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>fstGetRoot</name><argument_list>(<argument><expr><name>fst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>FST_NODE_IS_FINAL</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>FST_NODE_FINAL_OUTPUT</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>fstNodeDestroy</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fstVerify</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>checkSum</name> <init>= <expr><name><name>fst</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>checkSum</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name><name>fst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSCKSUM</name></type>  <name>initSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckChecksumWhole</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// data bound function</comment>
<function><type><name>FstBoundWithData</name><modifier>*</modifier></type> <name>fstBoundStateCreate</name><parameter_list>(<parameter><decl><type><name>FstBound</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstBoundWithData</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstBoundWithData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>fstSliceCopy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fstBoundWithDataExceededBy</name><parameter_list>(<parameter><decl><type><name>FstBoundWithData</name><modifier>*</modifier></type> <name>bound</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>slice</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><call><name>fstSliceCompare</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bound</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>bound</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Included</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>comp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bound</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Excluded</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>comp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>fstBoundWithDataIsEmpty</name><parameter_list>(<parameter><decl><type><name>FstBoundWithData</name><modifier>*</modifier></type> <name>bound</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>bound</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Unbounded</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>fstSliceIsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bound</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fstBoundWithDataIsIncluded</name><parameter_list>(<parameter><decl><type><name>FstBoundWithData</name><modifier>*</modifier></type> <name>bound</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name><name>bound</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Excluded</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>fstBoundDestroy</name><parameter_list>(<parameter><decl><type><name>FstBoundWithData</name><modifier>*</modifier></type> <name>bound</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>FStmSt</name><modifier>*</modifier></type> <name>stmStCreate</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>, <parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>automation</name></decl></parameter>, <parameter><decl><type><name>FstBoundWithData</name><modifier>*</modifier></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>FstBoundWithData</name><modifier>*</modifier></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FStmSt</name><modifier>*</modifier></type> <name>sws</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FStmSt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sws</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>sws</name><operator>-&gt;</operator><name>fst</name></name> <operator>=</operator> <name>fst</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sws</name><operator>-&gt;</operator><name>aut</name></name> <operator>=</operator> <name>automation</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sws</name><operator>-&gt;</operator><name>inp</name></name> <operator>=</operator> <operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sws</name><operator>-&gt;</operator><name>emptyOutput</name><operator>.</operator><name>null</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sws</name><operator>-&gt;</operator><name>emptyOutput</name><operator>.</operator><name>out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstStreamState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sws</name><operator>-&gt;</operator><name>endAt</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stmStSeekMin</name><argument_list>(<argument><expr><name>sws</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>sws</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>stmStDestroy</name><parameter_list>(<parameter><decl><type><name>FStmSt</name><modifier>*</modifier></type> <name>sws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>sws</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>fstStreamStateDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>stmStSeekMin</name><parameter_list>(<parameter><decl><type><name>FStmSt</name><modifier>*</modifier></type> <name>sws</name></decl></parameter>, <parameter><decl><type><name>FstBoundWithData</name><modifier>*</modifier></type> <name>min</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>aut</name> <init>= <expr><name><name>sws</name><operator>-&gt;</operator><name>aut</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstBoundWithDataIsEmpty</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>fstBoundWithDataIsIncluded</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>sws</name><operator>-&gt;</operator><name>emptyOutput</name><operator>.</operator><name>out</name></name> <operator>=</operator> <call><name>fstEmptyFinalOutput</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>fst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sws</name><operator>-&gt;</operator><name>emptyOutput</name><operator>.</operator><name>null</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>FstStreamState</name></type> <name>s</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <call><name>fstGetRoot</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>fst</name></name></expr></argument>)</argument_list></call></expr>,
                        <expr><operator>.</operator><name>trans</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                        <expr><operator>.</operator><name>out</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>null</name> <operator>=</operator> <name>false</name></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>,
                        <expr><operator>.</operator><name>autState</name> <operator>=</operator> <name><name>automFuncs</name><index>[<expr><name><name>aut</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><macro><name>start</name><argument_list>(<argument>aut</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>  <comment type="line">// auto.start callback</comment>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>inclusize</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>min</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Included</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>&amp;</operator><name><name>min</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>inclusize</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>min</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Excluded</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>&amp;</operator><name><name>min</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>fstGetRoot</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>fst</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Output</name></type>   <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>autState</name> <init>= <expr><name><name>automFuncs</name><index>[<expr><name><name>aut</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>aut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type>  <name>b</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fstNodeFindInput</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>FstTransition</name></type> <name>trn</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fstNodeGetTransitionAt</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>preState</name> <init>= <expr><name>autState</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>autState</name> <operator>=</operator> <name><name>automFuncs</name><index>[<expr><name><name>aut</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><call><name>accept</name><argument_list>(<argument><expr><name>aut</name></expr></argument>, <argument><expr><name>preState</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>FstStreamState</name></type> <name>s</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>node</name></expr>, <expr><operator>.</operator><name>trans</name> <operator>=</operator> <name>res</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>null</name> <operator>=</operator> <name>false</name></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <name>out</name></expr>}</block></expr>, <expr><operator>.</operator><name>autState</name> <operator>=</operator> <name>preState</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>out</name> <operator>+=</operator> <name><name>trn</name><operator>.</operator><name>out</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>fstGetNode</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>fst</name></name></expr></argument>, <argument><expr><name><name>trn</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// This is a little tricky. We're in this case if the</comment>
      <comment type="line">// given bound is not a prefix of any key in the FST.</comment>
      <comment type="line">// Since this is a minimum bound, we need to find the</comment>
      <comment type="line">// first transition in this node that proceeds the current</comment>
      <comment type="line">// input byte.</comment>
      <decl_stmt><decl><type><name>FstTransitions</name><modifier>*</modifier></type> <name>trans</name> <init>= <expr><call><name>fstNodeTransitions</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint64_t</name></type>        <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>start</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>trans</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>FstTransition</name></type> <name>trn</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>fstNodeGetTransitionAt</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>trn</name><operator>.</operator><name>inp</name></name> <operator>&gt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><name>FstStreamState</name></type> <name>s</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>node</name></expr>, <expr><operator>.</operator><name>trans</name> <operator>=</operator> <name>i</name></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>null</name> <operator>=</operator> <name>false</name></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <name>out</name></expr>}</block></expr>, <expr><operator>.</operator><name>autState</name> <operator>=</operator> <name>autState</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>fstNodeDestroy</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FstStreamState</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>inclusize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>trans</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPop</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>FstNode</name><modifier>*</modifier></type>      <name>n</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint64_t</name></type>      <name>trans</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>trans</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FstTransition</name></type> <name>trn</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fstNodeGetTransitionAt</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>trans</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>trn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>FstStreamState</name></type> <name>s</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>node</name> <operator>=</operator> <call><name>fstGetNode</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>fst</name></name></expr></argument>, <argument><expr><name><name>trn</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>trans</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>null</name> <operator>=</operator> <name>false</name></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <name>out</name></expr>}</block></expr>, <expr><operator>.</operator><name>autState</name> <operator>=</operator> <name>autState</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>FStmStRslt</name><modifier>*</modifier></type> <name>stmStNextWith</name><parameter_list>(<parameter><decl><type><name>FStmSt</name><modifier>*</modifier></type> <name>sws</name></decl></parameter>, <parameter><decl><type><name>streamCallback__fn</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>aut</name> <init>= <expr><name><name>sws</name><operator>-&gt;</operator><name>aut</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstOutput</name></type> <name>output</name> <init>= <expr><name><name>sws</name><operator>-&gt;</operator><name>emptyOutput</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>output</name><operator>.</operator><name>null</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FstSlice</name></type> <name>emptySlice</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fstBoundWithDataExceededBy</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>endAt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>emptySlice</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>fstStreamStateDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstStreamState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><name><name>automFuncs</name><index>[<expr><name><name>aut</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>aut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>automFuncs</name><index>[<expr><name><name>aut</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><call><name>isMatch</name><argument_list>(<argument><expr><name>aut</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>FstSlice</name></type> <name>s</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>swsResultCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><ternary><condition><expr><name>callback</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>callback</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>nodes</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FstStreamState</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>FstStreamState</name><operator>*</operator><operator>)</operator><call><name>taosArrayPop</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>trans</name></name> <operator>&gt;=</operator> <call><name>FST_NODE_LEN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>automFuncs</name><index>[<expr><name><name>aut</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><call><name>canMatch</name><argument_list>(<argument><expr><name>aut</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>autState</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>FST_NODE_ADDR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>fstGetRootAddr</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>fst</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayPop</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fstStreamStateDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>FstTransition</name></type> <name>trn</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fstNodeGetTransitionAt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Output</name></type> <name>out</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>out</name></name> <operator>+</operator> <name><name>trn</name><operator>.</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>nextState</name> <init>= <expr><name><name>automFuncs</name><index>[<expr><name><name>aut</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><call><name>accept</name><argument_list>(<argument><expr><name>aut</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>autState</name></name></expr></argument>, <argument><expr><name><name>trn</name><operator>.</operator><name>inp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>tState</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>callback</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>callback</name><argument_list>(<argument><expr><name>nextState</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>   <name>isMatch</name> <init>= <expr><name><name>automFuncs</name><index>[<expr><name><name>aut</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><call><name>isMatch</name><argument_list>(<argument><expr><name>aut</name></expr></argument>, <argument><expr><name>nextState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FstNode</name><modifier>*</modifier></type> <name>nextNode</name> <init>= <expr><call><name>fstGetNode</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>fst</name></name></expr></argument>, <argument><expr><name><name>trn</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>trn</name><operator>.</operator><name>inp</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FST_NODE_IS_FINAL</name><argument_list>(<argument><expr><name>nextNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>eofState</name> <init>= <expr><name><name>automFuncs</name><index>[<expr><name><name>aut</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><call><name>acceptEof</name><argument_list>(<argument><expr><name>aut</name></expr></argument>, <argument><expr><name>nextState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>eofState</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>isMatch</name> <operator>=</operator> <name><name>automFuncs</name><index>[<expr><name><name>aut</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><call><name>isMatch</name><argument_list>(<argument><expr><name>aut</name></expr></argument>, <argument><expr><name>eofState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>FstStreamState</name></type> <name>s1</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>node</name></name></expr>, <expr><operator>.</operator><name>trans</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>trans</name></name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr>, <expr><operator>.</operator><name>autState</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>autState</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>FstStreamState</name></type> <name>s2</name> <init>= <expr><block>{<expr><operator>.</operator><name>node</name> <operator>=</operator> <name>nextNode</name></expr>, <expr><operator>.</operator><name>trans</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>null</name> <operator>=</operator> <name>false</name></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <name>out</name></expr>}</block></expr>, <expr><operator>.</operator><name>autState</name> <operator>=</operator> <name>nextState</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>  <name>isz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>isz</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>isz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>inp</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>FstSlice</name></type> <name>slice</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>isz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fstBoundWithDataExceededBy</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>endAt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slice</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>fstStreamStateDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sws</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstStreamState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>FST_NODE_IS_FINAL</name><argument_list>(<argument><expr><name>nextNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>isMatch</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>FstOutput</name></type>   <name>fOutput</name> <init>= <expr><block>{<expr><operator>.</operator><name>null</name> <operator>=</operator> <name>false</name></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <name>out</name> <operator>+</operator> <macro><name>FST_NODE_FINAL_OUTPUT</name><argument_list>(<argument>nextNode</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FStmStRslt</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>swsResultCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slice</name></expr></argument>, <argument><expr><name>fOutput</name></expr></argument>, <argument><expr><name>tState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nodes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FStmStRslt</name><modifier>*</modifier></type> <name>swsResultCreate</name><parameter_list>(<parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>FstOutput</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FStmStRslt</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FStmStRslt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>fstSliceCopy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>swsResultDestroy</name><parameter_list>(<parameter><decl><type><name>FStmStRslt</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>result</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>startWithStateValueDestroy</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fstStreamStateDestroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>FstStreamState</name><modifier>*</modifier></type> <name>ss</name> <init>= <expr><operator>(</operator><name>FstStreamState</name><operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstNodeDestroy</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>FStmBuilder</name><modifier>*</modifier></type> <name>stmBuilderCreate</name><parameter_list>(<parameter><decl><type><name>Fst</name><modifier>*</modifier></type> <name>fst</name></decl></parameter>, <parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>aut</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FStmBuilder</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FStmBuilder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>fst</name></name> <operator>=</operator> <name>fst</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>aut</name></name> <operator>=</operator> <name>aut</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <call><name>fstBoundStateCreate</name><argument_list>(<argument><expr><name>Unbounded</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <call><name>fstBoundStateCreate</name><argument_list>(<argument><expr><name>Unbounded</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>stmBuilderDestroy</name><parameter_list>(<parameter><decl><type><name>FStmBuilder</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>stmBuilderSetRange</name><parameter_list>(<parameter><decl><type><name>FStmBuilder</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>RangeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Included</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>fstSliceDeepCopy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Excluded</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>min</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>fstSliceDeepCopy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>LE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Included</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>fstSliceDeepCopy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>LT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Excluded</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>max</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>fstSliceDeepCopy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FST_SLICE_LEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
