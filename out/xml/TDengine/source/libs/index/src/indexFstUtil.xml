<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexFstUtil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstCommon.h"</cpp:file></cpp:include>

<comment type="line">// A sentinel value used to indicate an empty final state</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>CompiledAddr</name></type> <name>EMPTY_ADDRESS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line" format="doxygen">/// A sentinel value used to indicate an invalid state.</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>CompiledAddr</name></type> <name>NONE_ADDRESS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// This version number is written to every finite state transducer created by</comment>
<comment type="line">// this version. When a finite state transducer is read, its version number is</comment>
<comment type="line">// checked against this value.</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>VERSION</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// The threshold (in number of transitions) at which an index is created for</comment>
<comment type="line">// a node's transitions. This speeds up lookup time at the expense of FST size</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>TRANS_INDEX_THRESHOLD</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<function><type><name>uint8_t</name></type> <name>packSize</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">4</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">5</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">6</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">7</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">8</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>unpackUint64</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>|</operator> <operator>(</operator><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>uint8_t</name></type> <name>packDeltaSize</name><parameter_list>(<parameter><decl><type><name>CompiledAddr</name></type> <name>nodeAddr</name></decl></parameter>, <parameter><decl><type><name>CompiledAddr</name></type> <name>transAddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>transAddr</name> <operator>==</operator> <name>EMPTY_ADDRESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>packSize</name><argument_list>(<argument><expr><name>EMPTY_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>packSize</name><argument_list>(<argument><expr><name>nodeAddr</name> <operator>-</operator> <name>transAddr</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>CompiledAddr</name></type> <name>unpackDelta</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>nodeAddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>delta</name> <init>= <expr><call><name>unpackUint64</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// delta_add = u64_to_usize</comment>
  <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <name>EMPTY_ADDRESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EMPTY_ADDRESS</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>nodeAddr</name> <operator>-</operator> <name>delta</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// fst slice func</comment>

<function><type><name>FstSlice</name></type> <name>fstSliceCreate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstString</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><operator>(</operator><name>FstString</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstString</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>FstSlice</name></type> <name>s</name> <init>= <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>str</name></expr>, <expr><operator>.</operator><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>end</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<comment type="line">// just shallow copy</comment>
<function><type><name>FstSlice</name></type> <name>fstSliceCopy</name><parameter_list>(<parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstString</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstSlice</name></type> <name>t</name> <init>= <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>str</name></expr>, <expr><operator>.</operator><name>start</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr>, <expr><operator>.</operator><name>end</name> <operator>=</operator> <name>end</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>FstSlice</name></type> <name>fstSliceDeepCopy</name><parameter_list>(<parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>slen</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tlen</name> <operator>&lt;=</operator> <name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstString</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstString</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>tlen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstSlice</name></type> <name>ans</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>tlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>ans</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>fstSliceIsEmpty</name><parameter_list>(<parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>uint8_t</name><modifier>*</modifier></type> <name>fstSliceData</name><parameter_list>(<parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstString</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstSliceDestroy</name><parameter_list>(<parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstString</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fstSliceCompare</name><parameter_list>(<parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>alen</name></decl>, <decl><type ref="prev"/><name>blen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>aBuf</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>bBuf</name> <init>= <expr><call><name>fstSliceData</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alen</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>blen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>x</name> <init>= <expr><name><name>aBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>y</name> <init>= <expr><name><name>bBuf</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt><empty_stmt>;</empty_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>alen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>blen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
