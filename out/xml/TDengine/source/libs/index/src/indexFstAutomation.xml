<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexFstAutomation.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstAutomation.h"</cpp:file></cpp:include>

<function><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>startWithStateValueCreate</name><parameter_list>(<parameter><decl><type><name>StartWithStateKind</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>ValueType</name></type> <name>ty</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>sv</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StartWithStateValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ty</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ty</name> <operator>==</operator> <name>FST_INT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>val</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ty</name> <operator>==</operator> <name>FST_CHAR</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ty</name> <operator>==</operator> <name>FST_ARRAY</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO,</comment>
    <comment type="line">// nsv-&gt;arr = taosArrayFromList()</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>sv</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>startWithStateValueDestroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>sv</name> <init>= <expr><operator>(</operator><name>StartWithStateValue</name><operator>*</operator><operator>)</operator><name>val</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FST_INT</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FST_CHAR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FST_ARRAY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>startWithStateValueDump</name><parameter_list>(<parameter><decl><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>sv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>nsv</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StartWithStateValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nsv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name><name>sv</name><operator>-&gt;</operator><name>kind</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>sv</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FST_INT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>sv</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FST_CHAR</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>nsv</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>sv</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FST_ARRAY</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>nsv</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// iterate fst</comment>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>alwaysMatchStart</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type>  <name>alwaysMatchIsMatch</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type>  <name>alwaysMatchCanMatch</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type>  <name>alwaysMatchWillAlwaysMatch</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>alwaysMatchAccpet</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>alwaysMatchAccpetEof</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>
<comment type="line">// prefix query, impl later</comment>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>prefixStart</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><name>StartWithStateValue</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>stdata</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>startWithStateValueDump</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>prefixIsMatch</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>sv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>ssv</name> <init>= <expr><operator>(</operator><name>StartWithStateValue</name><operator>*</operator><operator>)</operator><name>sv</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ssv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ssv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FST_INT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>ssv</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>prefixCanMatch</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>sv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>ssv</name> <init>= <expr><operator>(</operator><name>StartWithStateValue</name><operator>*</operator><operator>)</operator><name>sv</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ssv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>ssv</name><operator>-&gt;</operator><name>val</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type>  <name>prefixWillAlwaysMatch</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>prefixAccept</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>ssv</name> <init>= <expr><operator>(</operator><name>StartWithStateValue</name><operator>*</operator><operator>)</operator><name>state</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ssv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ssv</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>Done</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>startWithStateValueCreate</name><argument_list>(<argument><expr><name>Done</name></expr></argument>, <argument><expr><name>FST_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssv</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>ssv</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><name><name>ssv</name><operator>-&gt;</operator><name>val</name></name></expr>]</index></name> <operator>==</operator> <name>byte</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>ssv</name><operator>-&gt;</operator><name>val</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>nsv</name> <init>= <expr><call><name>startWithStateValueCreate</name><argument_list>(<argument><expr><name>Running</name></expr></argument>, <argument><expr><name>FST_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>prefixIsMatch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>nsv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>Done</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>Running</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>nsv</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>prefixAcceptEof</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>

<comment type="line">// pattern query, impl later</comment>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>patternStart</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type>  <name>patternIsMatch</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type>  <name>patternCanMatch</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type>  <name>patternWillAlwaysMatch</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>patternAccept</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>patternAcceptEof</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>AutomationFunc</name></type> <name><name>automFuncs</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>alwaysMatchStart</name></expr>, <expr><name>alwaysMatchIsMatch</name></expr>, <expr><name>alwaysMatchCanMatch</name></expr>, <expr><name>alwaysMatchWillAlwaysMatch</name></expr>, <expr><name>alwaysMatchAccpet</name></expr>,
     <expr><name>alwaysMatchAccpetEof</name></expr>}</block></expr>,
    <expr><block>{<expr><name>prefixStart</name></expr>, <expr><name>prefixIsMatch</name></expr>, <expr><name>prefixCanMatch</name></expr>, <expr><name>prefixWillAlwaysMatch</name></expr>, <expr><name>prefixAccept</name></expr>, <expr><name>prefixAcceptEof</name></expr>}</block></expr>,
    <expr><block>{<expr><name>patternStart</name></expr>, <expr><name>patternIsMatch</name></expr>, <expr><name>patternCanMatch</name></expr>, <expr><name>patternWillAlwaysMatch</name></expr>, <expr><name>patternAccept</name></expr>, <expr><name>patternAcceptEof</name></expr>}</block></expr>
    <comment type="line">// add more search type</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>automCtxCreate</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>AutomationType</name></type> <name>atype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FAutoCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>StartWithStateValue</name><modifier>*</modifier></type> <name>sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>atype</name> <operator>==</operator> <name>AUTOMATION_ALWAYS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sv</name> <operator>=</operator> <call><name>startWithStateValueCreate</name><argument_list>(<argument><expr><name>Running</name></expr></argument>, <argument><expr><name>FST_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>AUTOMATION_PREFIX</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sv</name> <operator>=</operator> <call><name>startWithStateValueCreate</name><argument_list>(<argument><expr><name>Running</name></expr></argument>, <argument><expr><name>FST_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>AUTMMATION_MATCH</name></expr>)</condition> <block>{<block_content>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// add more search type</comment>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>atype</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stdata</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>sv</name></expr>;</expr_stmt>
  <return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>automCtxDestroy</name><parameter_list>(<parameter><decl><type><name>FAutoCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>startWithStateValueDestroy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
