<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexFstRegex.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstRegex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstDfa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstSparse.h"</cpp:file></cpp:include>

<function><type><name>FstRegex</name> <modifier>*</modifier></type><name>regexCreate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstRegex</name> <modifier>*</modifier></type><name>regex</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstRegex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>regex</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>regex</name><operator>-&gt;</operator><name>orig</name></name> <operator>=</operator> <call><name>tstrdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// construct insts based on str</comment>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>insts</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>insts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>FstDfaBuilder</name> <modifier>*</modifier></type><name>builder</name> <init>= <expr><call><name>dfaBuilderCreate</name><argument_list>(<argument><expr><name>insts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>regex</name><operator>-&gt;</operator><name>dfa</name></name> <operator>=</operator> <call><name>dfaBuilderBuild</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>regex</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>regexDestroy</name><parameter_list>(<parameter><decl><type><name>FstRegex</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>regex</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>regex</name><operator>-&gt;</operator><name>orig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>regexAutomStart</name><parameter_list>(<parameter><decl><type><name>FstRegex</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line" format="doxygen">///// no nothing</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>regexAutomIsMatch</name><parameter_list>(<parameter><decl><type><name>FstRegex</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>regex</name><operator>-&gt;</operator><name>dfa</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>dfaIsMatch</name><argument_list>(<argument><expr><name><name>regex</name><operator>-&gt;</operator><name>dfa</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>regexAutomCanMatch</name><parameter_list>(<parameter><decl><type><name>FstRegex</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>null</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// make frame happy</comment>
  <return>return <expr><name>null</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>regexAutomAccept</name><parameter_list>(<parameter><decl><type><name>FstRegex</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>regex</name><operator>-&gt;</operator><name>dfa</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>dfaAccept</name><argument_list>(<argument><expr><name><name>regex</name><operator>-&gt;</operator><name>dfa</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>byte</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
