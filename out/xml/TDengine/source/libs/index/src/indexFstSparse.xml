<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexFstSparse.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstSparse.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>sparSetInitBuf</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>cap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cap</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>sparSetCreate</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstSparseSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dense</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>sz</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>sparse</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>sz</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sparSetInitBuf</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>dense</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sparSetInitBuf</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>ss</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sparSetDestroy</name><parameter_list>(<parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>dense</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>uint32_t</name></type> <name>sparSetLen</name><parameter_list>(<parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Get occupied size</comment>
  <return>return <expr><ternary><condition><expr><name>ss</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>ss</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>sparSetAdd</name><parameter_list>(<parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ip</name> <operator>&gt;=</operator> <name><name>ss</name><operator>-&gt;</operator><name>cap</name></name> <operator>||</operator> <name>ip</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>dense</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>sparse</name><index>[<expr><name>ip</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>sparSetGet</name><parameter_list>(<parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>ss</name><operator>-&gt;</operator><name>cap</name></name> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>ss</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>val</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>dense</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>sparSetContains</name><parameter_list>(<parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ip</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ip</name> <operator>&gt;=</operator> <name><name>ss</name><operator>-&gt;</operator><name>cap</name></name> <operator>||</operator> <name>ip</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>sparse</name><index>[<expr><name>ip</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>ss</name><operator>-&gt;</operator><name>cap</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>ss</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>ss</name><operator>-&gt;</operator><name>dense</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ip</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sparSetClear</name><parameter_list>(<parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sparSetInitBuf</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>dense</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sparSetInitBuf</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
