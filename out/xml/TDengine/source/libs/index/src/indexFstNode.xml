<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexFstNode.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstNode.h"</cpp:file></cpp:include>

<function><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>fstBuilderNodeDefault</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>bn</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstBuilderNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>bn</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bn</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bn</name><operator>-&gt;</operator><name>trans</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstTransition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>bn</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstBuilderNodeDestroy</name><parameter_list>(<parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fstBuilderNodeEqual</name><parameter_list>(<parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>n2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>n1</name> <operator>==</operator> <name>n2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>n1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>n2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>!=</operator> <name><name>n2</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>||</operator> <name><name>n1</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>!=</operator> <name><name>n2</name><operator>-&gt;</operator><name>finalOutput</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>s1</name> <init>= <expr><ternary><condition><expr><name><name>n1</name><operator>-&gt;</operator><name>trans</name></name></expr> ?</condition><then> <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>n1</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>s2</name> <init>= <expr><ternary><condition><expr><name><name>n2</name><operator>-&gt;</operator><name>trans</name></name></expr> ?</condition><then> <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>n2</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>s1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>t1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>n1</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>t2</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>n2</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>inp</name></name> <operator>!=</operator> <name><name>t2</name><operator>-&gt;</operator><name>inp</name></name> <operator>||</operator> <name><name>t1</name><operator>-&gt;</operator><name>out</name></name> <operator>!=</operator> <name><name>t2</name><operator>-&gt;</operator><name>out</name></name> <operator>||</operator> <name><name>t1</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name><name>t2</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>fstBuilderNodeClone</name><parameter_list>(<parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstBuilderNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//</comment>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>trans</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstTransition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>tran</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tran</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>trans</name></name> <operator>=</operator> <name>trans</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>isFinal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>finalOutput</name></name></expr>;</expr_stmt>
  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>
<comment type="line">// not destroy src, User's bussiness</comment>
<function><type><name>void</name></type> <name>fstBuilderNodeCloneFrom</name><parameter_list>(<parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>isFinal</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>isFinal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>finalOutput</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>finalOutput</name></name></expr>;</expr_stmt>

  <comment type="line">// release free  avoid mem leak</comment>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>trans</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstTransition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>trn</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>trn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// bool fstBuilderNodeCompileTo(FstBuilderNode *b, IdxFile *wrt, CompiledAddr lastAddr, CompiledAddr</comment>
<comment type="line">// startAddr) {</comment>

<comment type="line">// size_t sz = taosArrayGetSize(b-&gt;trans);</comment>
<comment type="line">// assert(sz &lt; 256);</comment>
<comment type="line">// if (FST_BUILDER_NODE_IS_FINAL(b)</comment>
<comment type="line">//    &amp;&amp; FST_BUILDER_NODE_TRANS_ISEMPTY(b)</comment>
<comment type="line">//    &amp;&amp; FST_BUILDER_NODE_FINALOUTPUT_ISZERO(b)) {</comment>
<comment type="line">//  return true;</comment>
<comment type="line">//} else if (sz != 1 || b-&gt;isFinal) {</comment>
<comment type="line">//  // AnyTrans-&gt;Compile(w, addr, node);</comment>
<comment type="line">//} else {</comment>
<comment type="line">//  FstTransition *tran = taosArrayGet(b-&gt;trans, 0);</comment>
<comment type="line">//  if (tran-&gt;addr == lastAddr &amp;&amp; tran-&gt;out == 0) {</comment>
<comment type="line">//     //OneTransNext::compile(w, lastAddr, tran-&gt;inp);</comment>
<comment type="line">//     return true;</comment>
<comment type="line">//  } else {</comment>
<comment type="line">//    //OneTrans::Compile(w, lastAddr, *tran);</comment>
<comment type="line">//     return true;</comment>
<comment type="line">//  }</comment>
<comment type="line">//}</comment>
<comment type="line">// return true;</comment>
<comment type="line">//}</comment>
</unit>
