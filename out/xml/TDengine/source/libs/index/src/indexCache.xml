<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexCache.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexCache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexComm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsched.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INDEX_KEY_LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>  <comment type="line">// test only, change later</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TERM_LIMIT</name></cpp:macro>     <cpp:value>10 * 10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_THRESHOLD</name></cpp:macro>      <cpp:value>8 * 512 * 1024</cpp:value></cpp:define>  <comment type="line">// 8M</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_SIGNAL_QUIT</name></cpp:macro>    <cpp:value>MEM_THRESHOLD * 20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_ESTIMATE_RADIO</name></cpp:macro> <cpp:value>1.5</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idxMemRef</name><parameter_list>(<parameter><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>tbl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idxMemUnRef</name><parameter_list>(<parameter><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>tbl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>idxCacheTermDestroy</name><parameter_list>(<parameter><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>idxCacheTermCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>idxCacheJsonTermCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>   <name>idxCacheTermGet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>MemTable</name><modifier>*</modifier></type> <name>idxInternalCacheCreate</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchTerm</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchPrefix</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchSuffix</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchRegex</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchLessThan</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchLessEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchGreaterThan</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchGreaterEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchRange</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*comm compare func, used in (LE/LT/GE/GT compare)*/</comment>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchCompareFunc</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>RangeType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchTerm_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchPrefix_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchSuffix_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchRegex_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchLessThan_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchLessEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchGreaterThan_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchGreaterEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchRange_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchCompareFunc_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>,
                                           <parameter><decl><type><name>RangeType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> (<modifier>*</modifier><name>cacheSearch</name><index>[]</index><index>[<expr><name>QUERY_MAX</name></expr>]</index>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <init>= <expr><block>{
    <expr><block>{<expr><name>cacheSearchTerm</name></expr></block></expr></block></expr></init><operator>,</operator> cacheSearchPrefix<operator>,</operator> cacheSearchSuffix<operator>,</operator> cacheSearchRegex<operator>,</operator> cacheSearchLessThan<operator>,</operator> cacheSearchLessEqual<operator>,</operator>
     cacheSearchGreaterThan<operator>,</operator> cacheSearchGreaterEqual<operator>,</operator> cacheSearchRange</function_decl>},
    <block>{<block_content><expr><name>cacheSearchEqual_JSON</name></expr><operator>,</operator> <expr><name>cacheSearchPrefix_JSON</name></expr><operator>,</operator> <expr><name>cacheSearchSuffix_JSON</name></expr><operator>,</operator> <expr><name>cacheSearchRegex_JSON</name></expr><operator>,</operator>
     <expr><name>cacheSearchLessThan_JSON</name></expr><operator>,</operator> <expr><name>cacheSearchLessEqual_JSON</name></expr><operator>,</operator> <expr><name>cacheSearchGreaterThan_JSON</name></expr><operator>,</operator> <expr><name>cacheSearchGreaterEqual_JSON</name></expr><operator>,</operator>
     <expr><name>cacheSearchRange_JSON</name></expr></block_content>}</block>};

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idxDoMergeWork</name><parameter_list>(<parameter><decl><type><name>SSchedMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>idxCacheIteratorNext</name><parameter_list>(<parameter><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>itera</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchTerm</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>MemTable</name><modifier>*</modifier></type>   <name>mem</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name><name>mem</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>pCt</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CacheTerm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colVal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>idxCacheTermGet</name><argument_list>(<argument><expr><name>pCt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSkipListIterator</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>tSkipListCreateIterFromVal</name><argument_list>(<argument><expr><name><name>mem</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>tSkipListIterNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>tSkipListIterGet</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>operaType</name></name> <operator>==</operator> <name>ADD_VALUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>INDEX_MERGE_ADD_DEL</name><argument_list>(<argument><expr><name><name>tr</name><operator>-&gt;</operator><name>del</name></name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call>
        <operator>*</operator><name>s</name> <operator>=</operator> <name>kTypeValue</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>operaType</name></name> <operator>==</operator> <name>DEL_VALUE</name></expr>)</condition> <block>{<block_content>
        <macro><name>INDEX_MERGE_ADD_DEL</name><argument_list>(<argument>tr-&gt;add</argument>, <argument>tr-&gt;del</argument>, <argument>c-&gt;uid</argument>)</argument_list></macro>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSkipListDestroyIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchPrefix</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchSuffix</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchRegex</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchCompareFunc</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>RangeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>MemTable</name><modifier>*</modifier></type>   <name>mem</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name><name>mem</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>_cache_range_compare</name></type> <name>cmpFn</name> <init>= <expr><call><name>idxGetCompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>pCt</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CacheTerm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colVal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>colType</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>idxCacheTermGet</name><argument_list>(<argument><expr><name>pCt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSkipListIterator</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>tSkipListCreateIter</name><argument_list>(<argument><expr><name><name>mem</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>tSkipListIterNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>tSkipListIterGet</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TExeCond</name></type>   <name>cond</name> <init>= <expr><call><name>cmpFn</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>pCt</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>MATCH</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>operaType</name></name> <operator>==</operator> <name>ADD_VALUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>INDEX_MERGE_ADD_DEL</name><argument_list>(<argument><expr><name><name>tr</name><operator>-&gt;</operator><name>del</name></name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call>
        <comment type="line">// taosArrayPush(result, &amp;c-&gt;uid);</comment>
        <operator>*</operator><name>s</name> <operator>=</operator> <name>kTypeValue</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>operaType</name></name> <operator>==</operator> <name>DEL_VALUE</name></expr>)</condition> <block>{<block_content>
        <macro><name>INDEX_MERGE_ADD_DEL</name><argument_list>(<argument>tr-&gt;add</argument>, <argument>tr-&gt;del</argument>, <argument>c-&gt;uid</argument>)</argument_list></macro>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cond</name> <operator>==</operator> <name>CONTINUE</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cond</name> <operator>==</operator> <name>BREAK</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSkipListDestroyIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchLessThan</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>LT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchLessEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>LE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchGreaterThan</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>GT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchGreaterEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>GE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchTerm_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>MemTable</name><modifier>*</modifier></type>   <name>mem</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name><name>mem</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>pCt</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CacheTerm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colVal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>exBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IDX_TYPE_CONTAIN_EXTERN_TYPE</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_JSON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>exBuf</name> <operator>=</operator> <call><name>idxPackJsonData</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name>exBuf</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>idxCacheTermGet</name><argument_list>(<argument><expr><name>pCt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSkipListIterator</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>tSkipListCreateIterFromVal</name><argument_list>(<argument><expr><name><name>mem</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>tSkipListIterNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>tSkipListIterGet</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>operaType</name></name> <operator>==</operator> <name>ADD_VALUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>INDEX_MERGE_ADD_DEL</name><argument_list>(<argument><expr><name><name>tr</name><operator>-&gt;</operator><name>del</name></name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call>
        <operator>*</operator><name>s</name> <operator>=</operator> <name>kTypeValue</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>operaType</name></name> <operator>==</operator> <name>DEL_VALUE</name></expr>)</condition> <block>{<block_content>
        <macro><name>INDEX_MERGE_ADD_DEL</name><argument_list>(<argument>tr-&gt;add</argument>, <argument>tr-&gt;del</argument>, <argument>c-&gt;uid</argument>)</argument_list></macro>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>exBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSkipListDestroyIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchSuffix_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchRegex_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>EQ</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchPrefix_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>CONTAINS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchLessThan_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>LT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchLessEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>LE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchGreaterThan_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>GT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchGreaterEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>GE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchContain_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cacheSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>CONTAINS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchRange_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchCompareFunc_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>,
                                           <parameter><decl><type><name>RangeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>_cache_range_compare</name></type> <name>cmpFn</name> <init>= <expr><call><name>idxGetCompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>MemTable</name><modifier>*</modifier></type>   <name>mem</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name><name>mem</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>pCt</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CacheTerm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colVal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>dType</name> <init>= <expr><call><name>IDX_TYPE_GET_TYPE</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>exBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONTAINS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SIndexTerm</name></type> <name>tm</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>suid</name></name></expr>,
                     <expr><operator>.</operator><name>operType</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>operType</name></name></expr>,
                     <expr><operator>.</operator><name>colType</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colType</name></name></expr>,
                     <expr><operator>.</operator><name>colName</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colVal</name></name></expr>,
                     <expr><operator>.</operator><name>nColName</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>nColVal</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>exBuf</name> <operator>=</operator> <call><name>idxPackJsonDataPrefixNoType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name>exBuf</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>exBuf</name> <operator>=</operator> <call><name>idxPackJsonDataPrefix</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name>exBuf</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>idxCacheTermGet</name><argument_list>(<argument><expr><name>pCt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSkipListIterator</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>tSkipListCreateIterFromVal</name><argument_list>(<argument><expr><name><name>mem</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>tSkipListIterNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>tSkipListIterGet</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TExeCond</name></type>   <name>cond</name> <init>= <expr><name>CONTINUE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONTAINS</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cond</name> <operator>=</operator> <name>MATCH</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name>skip</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>pCt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cond</name> <operator>=</operator> <call><name>cmpFn</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>skip</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name>dType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>MATCH</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>operaType</name></name> <operator>==</operator> <name>ADD_VALUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>INDEX_MERGE_ADD_DEL</name><argument_list>(<argument><expr><name><name>tr</name><operator>-&gt;</operator><name>del</name></name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call>
        <operator>*</operator><name>s</name> <operator>=</operator> <name>kTypeValue</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>operaType</name></name> <operator>==</operator> <name>DEL_VALUE</name></expr>)</condition> <block>{<block_content>
        <macro><name>INDEX_MERGE_ADD_DEL</name><argument_list>(<argument>tr-&gt;add</argument>, <argument>tr-&gt;del</argument>, <argument>c-&gt;uid</argument>)</argument_list></macro>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cond</name> <operator>==</operator> <name>CONTINUE</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cond</name> <operator>==</operator> <name>BREAK</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>exBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSkipListDestroyIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>cacheSearchRange</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function_decl><type><specifier>static</specifier> <name>IterateValue</name><modifier>*</modifier></type> <name>idxCacheIteratorGetValue</name><parameter_list>(<parameter><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>iter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>IndexCache</name><modifier>*</modifier></type> <name>idxCacheCreate</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>colName</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IndexCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to create index cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <call><name>idxInternalCacheCreate</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>pCache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>colName</name></name> <operator>=</operator> <ternary><condition><expr><call><name>IDX_TYPE_CONTAIN_EXTERN_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_JSON</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>tstrdup</name><argument_list>(<argument><expr><name>JSON_COLUMN</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tstrdup</name><argument_list>(<argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>occupiedMem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadCondInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>finished</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>idxCacheRef</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>idxAcquireRef</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>cache</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxCacheDebug</name><parameter_list>(<parameter><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>tbl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tbl</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>mem</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxMemRef</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipList</name><modifier>*</modifier></type>         <name>slt</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>mem</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSkipListIterator</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>tSkipListCreateIter</name><argument_list>(<argument><expr><name>slt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>tSkipListIterNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>tSkipListIterGet</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type>     <name>ct</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// TODO, add more debug info</comment>
        <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"{colVal: %s, version: %"</literal> <name>PRId64</name> <literal type="string">"} \t"</literal></expr></argument>, <argument><expr><name><name>ct</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>ct</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>tSkipListDestroyIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>idxMemUnRef</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tbl</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>imm</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>idxMemRef</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tbl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSkipList</name><modifier>*</modifier></type>         <name>slt</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>mem</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSkipListIterator</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>tSkipListCreateIter</name><argument_list>(<argument><expr><name>slt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name>tSkipListIterNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>tSkipListIterGet</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type>     <name>ct</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// TODO, add more debug info</comment>
          <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"{colVal: %s, version: %"</literal> <name>PRId64</name> <literal type="string">"} \t"</literal></expr></argument>, <argument><expr><name><name>ct</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>ct</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name>tSkipListDestroyIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>idxMemUnRef</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>idxCacheDestroySkiplist</name><parameter_list>(<parameter><decl><type><name>SSkipList</name><modifier>*</modifier></type> <name>slt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSkipListIterator</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>tSkipListCreateIter</name><argument_list>(<argument><expr><name>slt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>tSkipListIterNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>tSkipListIterGet</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type>     <name>ct</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>tSkipListDestroyIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSkipListDestroy</name><argument_list>(<argument><expr><name>slt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxCacheBroadcast</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadCondBroadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>finished</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxCacheWait</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadCondWait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>finished</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxCacheDestroyImm</name><parameter_list>(<parameter><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>tbl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tbl</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>imm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// or throw int bg thread</comment>
  <expr_stmt><expr><call><name>idxCacheBroadcast</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>idxMemUnRef</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxMemUnRef</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxCacheDestroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>idxMemUnRef</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxMemUnRef</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadCondDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>finished</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>index</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>idxReleaseRef</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SIndex</name><operator>*</operator><operator>)</operator><name><name>pCache</name><operator>-&gt;</operator><name>index</name></name><operator>)</operator><operator>-&gt;</operator><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Iterate</name><modifier>*</modifier></type> <name>idxCacheIteratorCreate</name><parameter_list>(<parameter><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>imm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Iterate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>idxMemRef</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>tbl</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>imm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>colVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <ternary><condition><expr><name>tbl</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>tSkipListCreateIter</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>idxCacheIteratorNext</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>getValue</name></name> <operator>=</operator> <name>idxCacheIteratorGetValue</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxCacheIteratorDestroy</name><parameter_list>(<parameter><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tSkipListDestroyIter</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iterateValueDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idxCacheSchedToMerge</name><parameter_list>(<parameter><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchedMsg</name></type> <name>schedMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>fp</name></name> <operator>=</operator> <name>idxDoMergeWork</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>pCache</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>notify</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>thandle</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxAcquireRef</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>index</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosScheduleTask</name><argument_list>(<argument><expr><name>indexQhandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schedMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idxCacheMakeRoomForWrite</name><parameter_list>(<parameter><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>occupiedMem</name></name> <operator>*</operator> <name>MEM_ESTIMATE_RADIO</name> <operator>&lt;</operator> <name>MEM_THRESHOLD</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>imm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO: wake up by condition variable</comment>
      <expr_stmt><expr><call><name>idxCacheWait</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>quit</name> <init>= <expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>occupiedMem</name></name> <operator>&gt;=</operator> <name>MEM_SIGNAL_QUIT</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>idxCacheRef</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>mem</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <call><name>idxInternalCacheCreate</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>pCache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>occupiedMem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>quit</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>merging</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// 1. sched to merge</comment>
      <comment type="line">// 2. unref cache in bgwork</comment>
      <expr_stmt><expr><call><name>idxCacheSchedToMerge</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>quit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>idxCachePut</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasJson</name> <init>= <expr><call><name>IDX_TYPE_CONTAIN_EXTERN_TYPE</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_JSON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>idxCacheRef</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// encode data</comment>
  <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>ct</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CacheTerm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ct</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// set up key</comment>
  <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>colType</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colType</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <call><name>idxPackJsonData</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>nColVal</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>nColVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// set value</comment>
  <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>operaType</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>operType</name></name></expr>;</expr_stmt>
  <comment type="line">// ugly code, refactor later</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>estimate</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>occupiedMem</name></name> <operator>+=</operator> <name>estimate</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxCacheMakeRoomForWrite</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>tbl</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>mem</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>idxMemRef</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSkipListPut</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxMemUnRef</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxCacheUnRef</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxCacheForceToMerge</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>idxCacheRef</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"%p is forced to merge into tfile"</literal></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>occupiedMem</name></name> <operator>+=</operator> <name>MEM_SIGNAL_QUIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxCacheMakeRoomForWrite</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxCacheUnRef</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>idxCacheDel</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fieldValue</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fvlen</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>operType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>idxQueryMem</name><parameter_list>(<parameter><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>SIndexTermQuery</name><modifier>*</modifier></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>mem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SIndexTerm</name><modifier>*</modifier></type>     <name>term</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>term</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EIndexQueryType</name></type> <name>qtype</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>qType</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IDX_TYPE_CONTAIN_EXTERN_TYPE</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_JSON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>cacheSearch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>qtype</name></expr>]</index></name><operator>(</operator><name>mem</name><operator>,</operator> <name>term</name><operator>,</operator> <name>tr</name><operator>,</operator> <name>s</name><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>cacheSearch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>qtype</name></expr>]</index></name><operator>(</operator><name>mem</name><operator>,</operator> <name>term</name><operator>,</operator> <name>tr</name><operator>,</operator> <name>s</name><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>idxCacheSearch</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SIndexTermQuery</name><modifier>*</modifier></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>STermValueType</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>MemTable</name> <modifier>*</modifier></type><name>mem</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>imm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mem</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>mem</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>imm</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>imm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxMemRef</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxMemRef</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>mem</name> <operator>&amp;&amp;</operator> <name><name>mem</name><operator>-&gt;</operator><name>mem</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>idxQueryMem</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <name>kTypeDeletion</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// continue search in imm</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>imm</name> <operator>&amp;&amp;</operator> <name><name>imm</name><operator>-&gt;</operator><name>mem</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>idxQueryMem</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>idxMemUnRef</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxMemUnRef</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"cache search, time cost %"</literal> <name>PRIu64</name> <literal type="string">"us"</literal></expr></argument>, <argument><expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>idxCacheRef</name><parameter_list>(<parameter><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_INC</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxCacheUnRef</name><parameter_list>(<parameter><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_DEC</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>idxCacheDestroy</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>idxMemRef</name><parameter_list>(<parameter><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>tbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tbl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_INC</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxMemUnRef</name><parameter_list>(<parameter><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>tbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tbl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_DEC</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipList</name><modifier>*</modifier></type> <name>slt</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>mem</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>idxCacheDestroySkiplist</name><argument_list>(<argument><expr><name>slt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idxCacheTermDestroy</name><parameter_list>(<parameter><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ct</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>idxCacheTermGet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>idxCacheTermCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>lt</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><name>l</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>rt</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><name>r</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// compare colVal</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cmp</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name><name>lt</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>cmp</name> <operator>=</operator> <ternary><condition><expr><name><name>rt</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <name><name>lt</name><operator>-&gt;</operator><name>version</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>idxFindCh</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>
  </block_content>}</block></while>
  <return>return <expr><name>p</name> <operator>-</operator> <name>a</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>idxCacheJsonTermCompareImpl</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// int alen = idxFindCh(a, '&amp;');</comment>
  <comment type="line">// int blen = idxFindCh(b, '&amp;');</comment>

  <comment type="line">// int cmp = strncmp(a, b, MIN(alen, blen));</comment>
  <comment type="line">// if (cmp == 0) {</comment>
  <comment type="line">//  cmp = alen - blen;</comment>
  <comment type="line">//  if (cmp != 0) {</comment>
  <comment type="line">//    return cmp;</comment>
  <comment type="line">//  }</comment>
  <comment type="line">//  cmp = *(a + alen) - *(b + blen);</comment>
  <comment type="line">//  if (cmp != 0) {</comment>
  <comment type="line">//    return cmp;</comment>
  <comment type="line">//  }</comment>
  <comment type="line">//  alen += 2;</comment>
  <comment type="line">//  blen += 2;</comment>
  <comment type="line">//  cmp = strcmp(a + alen, b + blen);</comment>
  <comment type="line">//}</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>idxCacheJsonTermCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>lt</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><name>l</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type> <name>rt</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><name>r</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// compare colVal</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cmp</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>rt</name><operator>-&gt;</operator><name>version</name></name> <operator>-</operator> <name><name>lt</name><operator>-&gt;</operator><name>version</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>MemTable</name><modifier>*</modifier></type> <name>idxInternalCacheCreate</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// int ttype = IDX_TYPE_CONTAIN_EXTERN_TYPE(type, TSDB_DATA_TYPE_JSON) ? TSDB_DATA_TYPE_BINARY :</comment>
  <comment type="line">// TSDB_DATA_TYPE_BINARY;</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>ttype</name> <init>= <expr><name>TSDB_DATA_TYPE_BINARY</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>cmpFn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <init>=
      <expr><ternary><condition><expr><call><name>IDX_TYPE_CONTAIN_EXTERN_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <name>TSDB_DATA_TYPE_JSON</name>)</argument_list></call></expr> ?</condition><then> <expr><name>idxCacheJsonTermCompare</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>idxCacheTermCompare</name></expr></init>;</function_decl>

  <decl_stmt><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>tbl</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MemTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>idxMemRef</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// if (ttype == TSDB_DATA_TYPE_BINARY || ttype == TSDB_DATA_TYPE_NCHAR) {</comment>
  <expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <call><name>tSkipListCreate</name><argument_list>(<argument><expr><name>MAX_SKIP_LIST_LEVEL</name></expr></argument>, <argument><expr><name>ttype</name></expr></argument>, <argument><expr><name>MAX_INDEX_KEY_LEN</name></expr></argument>, <argument><expr><name>cmpFn</name></expr></argument>, <argument><expr><name>SL_ALLOW_DUP_KEY</name></expr></argument>, <argument><expr><name>idxCacheTermGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//}</comment>
  <return>return <expr><name>tbl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idxDoMergeWork</name><parameter_list>(<parameter><decl><type><name>SSchedMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIndex</name><modifier>*</modifier></type>     <name>sidx</name> <init>= <expr><operator>(</operator><name>SIndex</name><operator>*</operator><operator>)</operator><name><name>pCache</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>quit</name> <init>= <expr><ternary><condition><expr><name><name>msg</name><operator>-&gt;</operator><name>thandle</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>thandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxFlushCacheToTFile</name><argument_list>(<argument><expr><name>sidx</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>quit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>idxCacheIteratorNext</name><parameter_list>(<parameter><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>itera</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSkipListIterator</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><name><name>itera</name><operator>-&gt;</operator><name>iter</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IterateValue</name><modifier>*</modifier></type> <name>iv</name> <init>= <expr><operator>&amp;</operator><name><name>itera</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iterateValueDestroy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>next</name> <init>= <expr><call><name>tSkipListIterNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSkipListNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>tSkipListIterGet</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CacheTerm</name><modifier>*</modifier></type>     <name>ct</name> <init>= <expr><operator>(</operator><name>CacheTerm</name><operator>*</operator><operator>)</operator><call><name>SL_GET_NODE_DATA</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>iv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>ct</name><operator>-&gt;</operator><name>operaType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iv</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <name><name>ct</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iv</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <call><name>tstrdup</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>iv</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>next</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>IterateValue</name><modifier>*</modifier></type> <name>idxCacheIteratorGetValue</name><parameter_list>(<parameter><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// opt later</comment>
  <return>return <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>val</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
