<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexFstFile.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 * * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexComm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>kBlockSize</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>blockId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SDataBlock</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deleteDataBlockFromLRU</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>idxGenLRUKey</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>blockId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SERIALIZE_STR_VAR_TO_BUF</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SERIALIZE_VAR_TO_BUF</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>, <argument><expr><name>char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxInt2str</name><argument_list>(<argument><expr><name>blockId</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int</name></type> <name>idxFileCtxDoWrite</name><parameter_list>(<parameter><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TFILE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nwr</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nwr</name> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int</name></type> <name>idxFileCtxDoRead</name><parameter_list>(<parameter><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TFILE</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MMAP</name></cpp:ifdef>
    <expr_stmt><expr><name>nRead</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>size</name></name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>size</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>nRead</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>

  <return>return <expr><name>nRead</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>idxFileCtxDoReadFrom</name><parameter_list>(<parameter><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>blkId</name> <init>= <expr><name>offset</name> <operator>/</operator> <name>kBlockSize</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>blkOffset</name> <init>= <expr><name>offset</name> <operator>%</operator> <name>kBlockSize</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>blkLeft</name> <init>= <expr><name>kBlockSize</name> <operator>-</operator> <name>blkOffset</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">64</literal> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>idxGenLRUKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>blkId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SDataBlock</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>blkLeft</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>total</name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>blkOffset</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>left</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <name>kBlockSize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><call><name>taosPReadFile</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>total</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bytes</name> <operator>==</operator> <name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
        <return>return <expr><name>total</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>cacheMemSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataBlock</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>kBlockSize</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SDataBlock</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cacheMemSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>blockId</name></name> <operator>=</operator> <name>blkId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>nread</name></name> <operator>=</operator> <call><name>taosPReadFile</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>kBlockSize</name></expr></argument>, <argument><expr><name>blkId</name> <operator>*</operator> <name>kBlockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>nread</name></name> <operator>&lt;=</operator> <name>kBlockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>nread</name></name> <operator>&lt;</operator> <name>kBlockSize</name> <operator>&amp;&amp;</operator> <name><name>blk</name><operator>-&gt;</operator><name>nread</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>blkLeft</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>total</name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>blkOffset</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LRUStatus</name></type> <name>s</name> <init>= <expr><call><name>taosLRUCacheInsert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>cacheMemSize</name></expr></argument>, <argument><expr><name>deleteDataBlockFromLRU</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>TAOS_LRU_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>TAOS_LRU_STATUS_OK</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>blkId</name> <operator>=</operator> <name>offset</name> <operator>/</operator> <name>kBlockSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>blkOffset</name> <operator>=</operator> <name>offset</name> <operator>%</operator> <name>kBlockSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>blkLeft</name> <operator>=</operator> <name>kBlockSize</name> <operator>-</operator> <name>blkOffset</name></expr>;</expr_stmt>

  </block_content>}</block> while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
  <return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int</name></type> <name>idxFileCtxGetSize</name><parameter_list>(<parameter><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TFILE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>file_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>file_size</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int</name></type> <name>idxFileCtxDoFlush</name><parameter_list>(<parameter><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TFILE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// do nothing</comment>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IFileCtx</name><modifier>*</modifier></type> <name>idxFileCtxCreate</name><parameter_list>(<parameter><decl><type><name>WriterType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>readOnly</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IFileCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TFILE</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// ugly code, refactor later</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>readOnly</name></name> <operator>=</operator> <name>readOnly</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>readOnly</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFtruncateFile</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosFStatFile</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MMAP</name></cpp:ifdef>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>tfMmapReadOnly</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to open file, error %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>END</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMEMORY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>cap</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>idxFileCtxDoWrite</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>idxFileCtxDoRead</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>idxFileCtxDoFlush</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>readFrom</name></name> <operator>=</operator> <name>idxFileCtxDoReadFrom</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>idxFileCtxGetSize</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>

  <return>return <expr><name>ctx</name></expr>;</return>
<label><name>END</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMEMORY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxFileCtxDestroy</name><parameter_list>(<parameter><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMEMORY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>readOnly</name></name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MMAP</name></cpp:ifdef>
      <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>readOnly</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>file_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>remove</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>idxFileCreate</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>wrt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>cw</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IdxFstFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cw</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>cw</name><operator>-&gt;</operator><name>wrt</name></name> <operator>=</operator> <name>wrt</name></expr>;</expr_stmt>
  <return>return <expr><name>cw</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxFileDestroy</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>cw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>idxFileFlush</name><argument_list>(<argument><expr><name>cw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>cw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idxFileWrite</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>write</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// update checksum</comment>
  <decl_stmt><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>write</name><operator>-&gt;</operator><name>wrt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>nWrite</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nWrite</name> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>write</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>write</name><operator>-&gt;</operator><name>summer</name></name> <operator>=</operator> <call><name>taosCalcChecksum</name><argument_list>(<argument><expr><name><name>write</name><operator>-&gt;</operator><name>summer</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idxFileRead</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>write</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>write</name><operator>-&gt;</operator><name>wrt</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>idxFileMaskedCheckSum</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>write</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line" format="doxygen">//////</comment>
  <return>return <expr><name><name>write</name><operator>-&gt;</operator><name>summer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idxFileFlush</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>write</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>write</name><operator>-&gt;</operator><name>wrt</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>idxFilePackUintIn</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nBytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>nBytes</name> <operator>&amp;&amp;</operator> <name>nBytes</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nBytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>idxFileWrite</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>idxFilePackUint</name><parameter_list>(<parameter><decl><type><name>IdxFstFile</name><modifier>*</modifier></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>nBytes</name> <init>= <expr><call><name>packSize</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>idxFilePackUintIn</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nBytes</name></expr>;</return>
</block_content>}</block></function>
</unit>
