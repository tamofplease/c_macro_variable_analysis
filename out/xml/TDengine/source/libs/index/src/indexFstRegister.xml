<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexFstRegister.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstRegistry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>uint64_t</name></type> <name>fstRegistryHash</name><parameter_list>(<parameter><decl><type><name>FstRegistry</name><modifier>*</modifier></type> <name>registry</name></decl></parameter>, <parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>bNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO(yihaoDeng): refactor later</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>FNV_PRIME</name> <init>= <expr><literal type="number">1099511628211</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>       <name>h</name> <init>= <expr><literal type="number">14695981039346656037u</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>^</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>bNode</name><operator>-&gt;</operator><name>isFinal</name></name><operator>)</operator> <operator>*</operator> <name>FNV_PRIME</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>^</operator> <operator>(</operator><name>bNode</name><operator>)</operator><operator>-&gt;</operator><name>finalOutput</name><operator>)</operator> <operator>*</operator> <name>FNV_PRIME</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sz</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>bNode</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstTransition</name><modifier>*</modifier></type> <name>trn</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>bNode</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>^</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>trn</name><operator>-&gt;</operator><name>inp</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>FNV_PRIME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>^</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>trn</name><operator>-&gt;</operator><name>out</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>FNV_PRIME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>^</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>trn</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>FNV_PRIME</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>h</name> <operator>%</operator> <operator>(</operator><name><name>registry</name><operator>-&gt;</operator><name>tableSize</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fstRegistryCellSwap</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>sz</name> <operator>||</operator> <name>b</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>FstRegistryCell</name><modifier>*</modifier></type> <name>cell1</name> <init>= <expr><operator>(</operator><name>FstRegistryCell</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstRegistryCell</name><modifier>*</modifier></type> <name>cell2</name> <init>= <expr><operator>(</operator><name>FstRegistryCell</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FstRegistryCell</name></type> <name>t</name> <init>= <expr><block>{<expr><operator>.</operator><name>addr</name> <operator>=</operator> <name><name>cell1</name><operator>-&gt;</operator><name>addr</name></name></expr>, <expr><operator>.</operator><name>node</name> <operator>=</operator> <name><name>cell1</name><operator>-&gt;</operator><name>node</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>cell1</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>cell2</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cell1</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>cell2</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>cell2</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cell2</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>node</name></name></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fstRegistryCellPromote</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>sz</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start</name> <operator>&gt;=</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>start</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>e</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>end</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>e</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fstRegistryCellSwap</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>FstRegistry</name><modifier>*</modifier></type> <name>fstRegistryCreate</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>tableSize</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>mruSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstRegistry</name><modifier>*</modifier></type> <name>registry</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstRegistry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>registry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>nCells</name> <init>= <expr><name>tableSize</name> <operator>*</operator> <name>mruSize</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>  <name>tb</name> <init>= <expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>nCells</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstRegistryCell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nCells</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstRegistryCell</name></type> <name>cell</name> <init>= <expr><block>{<expr><operator>.</operator><name>addr</name> <operator>=</operator> <name>NONE_ADDRESS</name></expr>, <expr><operator>.</operator><name>node</name> <operator>=</operator> <macro><name>fstBuilderNodeDefault</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>tb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>registry</name><operator>-&gt;</operator><name>tableSize</name></name> <operator>=</operator> <name>tableSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>registry</name><operator>-&gt;</operator><name>mruSize</name></name> <operator>=</operator> <name>mruSize</name></expr>;</expr_stmt>
  <return>return <expr><name>registry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fstRegistryDestroy</name><parameter_list>(<parameter><decl><type><name>FstRegistry</name><modifier>*</modifier></type> <name>registry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>registry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tb</name> <init>= <expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>FstRegistryCell</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fstBuilderNodeDestroy</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>FstRegistryEntry</name><modifier>*</modifier></type> <name>fstRegistryGetEntry</name><parameter_list>(<parameter><decl><type><name>FstRegistry</name><modifier>*</modifier></type> <name>registry</name></decl></parameter>, <parameter><decl><type><name>FstBuilderNode</name><modifier>*</modifier></type> <name>bNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>bucket</name> <init>= <expr><call><name>fstRegistryHash</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>bNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name> <init>= <expr><name><name>registry</name><operator>-&gt;</operator><name>mruSize</name></name> <operator>*</operator> <name>bucket</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>end</name> <init>= <expr><name>start</name> <operator>+</operator> <name><name>registry</name><operator>-&gt;</operator><name>mruSize</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FstRegistryEntry</name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstRegistryEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>start</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FstRegistryCell</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// cell-&gt;isNode &amp;&amp;</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name>NONE_ADDRESS</name> <operator>&amp;&amp;</operator> <call><name>fstBuilderNodeEqual</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>bNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FOUND</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
      <return>return <expr><name>entry</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fstBuilderNodeCloneFrom</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>bNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NOTFOUND</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>cell</name></name> <operator>=</operator> <name>cell</name></expr>;</expr_stmt>  <comment type="line">// copy or not</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>-</operator> <name>start</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FstRegistryCell</name><modifier>*</modifier></type> <name>cell1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cell1</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name>NONE_ADDRESS</name> <operator>&amp;&amp;</operator> <call><name>fstBuilderNodeEqual</name><argument_list>(<argument><expr><name><name>cell1</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>bNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FOUND</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>cell1</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
      <return>return <expr><name>entry</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>FstRegistryCell</name><modifier>*</modifier></type> <name>cell2</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cell2</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name>NONE_ADDRESS</name> <operator>&amp;&amp;</operator> <call><name>fstBuilderNodeEqual</name><argument_list>(<argument><expr><name><name>cell2</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>bNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FOUND</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>cell2</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
      <comment type="line">// must swap here</comment>
      <expr_stmt><expr><call><name>fstRegistryCellSwap</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>entry</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// clone from bNode, refactor later</comment>
    <expr_stmt><expr><call><name>fstBuilderNodeCloneFrom</name><argument_list>(<argument><expr><name><name>cell2</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>bNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fstRegistryCellSwap</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>FstRegistryCell</name><modifier>*</modifier></type> <name>cCell</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NOTFOUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>cell</name></name> <operator>=</operator> <name>cCell</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>FstRegistryCell</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><operator>(</operator><name>FstRegistryCell</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name>NONE_ADDRESS</name> <operator>&amp;&amp;</operator> <call><name>fstBuilderNodeEqual</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>bNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FOUND</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fstRegistryCellPromote</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type>         <name>last</name> <init>= <expr><name>end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FstRegistryCell</name><modifier>*</modifier></type> <name>cell</name> <init>= <expr><operator>(</operator><name>FstRegistryCell</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// clone from bNode, refactor later</comment>
      <expr_stmt><expr><call><name>fstBuilderNodeCloneFrom</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>bNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>fstRegistryCellPromote</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>FstRegistryCell</name><modifier>*</modifier></type> <name>cCell</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>registry</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NOTFOUND</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>cell</name></name> <operator>=</operator> <name>cCell</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>fstRegistryEntryDestroy</name><parameter_list>(<parameter><decl><type><name>FstRegistryEntry</name><modifier>*</modifier></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
</unit>
