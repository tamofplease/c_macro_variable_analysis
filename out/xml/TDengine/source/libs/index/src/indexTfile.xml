<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexTfile.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexTfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexComm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taosdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>uint64_t</name></type> <name>FILE_MAGIC_NUMBER</name> <init>= <expr><literal type="number">0xdb4775248b80fb57ull</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>TFileFstIter</name> <block>{
  <decl_stmt><decl><type><name>FStmBuilder</name><modifier>*</modifier></type> <name>fb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FStmSt</name><modifier>*</modifier></type>      <name>st</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FAutoCtx</name><modifier>*</modifier></type>    <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>rdr</name></decl>;</decl_stmt>
}</block></struct></type> <name>TFileFstIter</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TF_TABLE_TATOAL_SIZE</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(sz) + sz * sizeof(uint64_t))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>tfileStrCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>tfileValueCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tfileSerialTableIdsToBuf</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tableIds</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tfileWriteHeader</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>writer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tfileWriteFstOffset</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>tw</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tfileWriteData</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>tval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tfileWriteFooter</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>write</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// handle file corrupt later</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tfileReaderLoadHeader</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tfileReaderLoadFst</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tfileReaderVerify</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tfileReaderLoadTableIds</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SArray</name><modifier>*</modifier></type> <name>tfileGetFileList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>     <name>tfileRmExpireFile</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>tfileDestroyFileName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>elem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>     <name>tfileCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>     <name>tfileParseFileName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>tfileGenFileName</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>tfileGenFileFullName</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>fullname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * search from  tfile
 */</comment>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchTerm</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchPrefix</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchSuffix</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchRegex</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchLessThan</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchLessEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchGreaterThan</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchGreaterEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchRange</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchCompareFunc</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>RangeType</name></type> <name>ctype</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchTerm_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchPrefix_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchSuffix_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchRegex_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchLessThan_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchLessEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchGreaterThan_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchGreaterEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchRange_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchCompareFunc_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>RangeType</name></type> <name>ctype</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> (<modifier>*</modifier><name>tfSearch</name><index>[]</index><index>[<expr><name>QUERY_MAX</name></expr>]</index>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <init>= <expr><block>{
    <expr><block>{<expr><name>tfSearchTerm</name></expr></block></expr></block></expr></init><operator>,</operator> tfSearchPrefix<operator>,</operator> tfSearchSuffix<operator>,</operator> tfSearchRegex<operator>,</operator> tfSearchLessThan<operator>,</operator> tfSearchLessEqual<operator>,</operator>
     tfSearchGreaterThan<operator>,</operator> tfSearchGreaterEqual<operator>,</operator> tfSearchRange</function_decl>},
    <block>{<block_content><expr><name>tfSearchEqual_JSON</name></expr><operator>,</operator> <expr><name>tfSearchPrefix_JSON</name></expr><operator>,</operator> <expr><name>tfSearchSuffix_JSON</name></expr><operator>,</operator> <expr><name>tfSearchRegex_JSON</name></expr><operator>,</operator> <expr><name>tfSearchLessThan_JSON</name></expr><operator>,</operator>
     <expr><name>tfSearchLessEqual_JSON</name></expr><operator>,</operator> <expr><name>tfSearchGreaterThan_JSON</name></expr><operator>,</operator> <expr><name>tfSearchGreaterEqual_JSON</name></expr><operator>,</operator> <expr><name>tfSearchRange_JSON</name></expr></block_content>}</block>};

<function><type><name>TFileCache</name><modifier>*</modifier></type> <name>tfileCacheCreate</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFileCache</name><modifier>*</modifier></type> <name>tcache</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TFileCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tcache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>tableCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>files</name> <init>= <expr><call><name>tfileGetFileList</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><call><name>idxFileCtxCreate</name><argument_list>(<argument><expr><name>TFILE</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to open index:%s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>End</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lru</name></name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>lru</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name> <init>= <expr><call><name>tfileReaderCreate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"skip invalid file: %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>lru</name></name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>lru</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TFileHeader</name><modifier>*</modifier></type> <name>header</name> <init>= <expr><operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ICacheKey</name></type>    <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>colName</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>colName</name></name></expr>, <expr><operator>.</operator><name>nColName</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><macro><name>strlen</name><argument_list>(<argument>header-&gt;colName</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>idxSerialCacheKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sz</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>tableCache</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tfileReaderRef</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>tfileDestroyFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tcache</name></expr>;</return>
<label><name>End</name>:</label>
  <expr_stmt><expr><call><name>tfileCacheDestroy</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>tfileDestroyFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>tfileCacheDestroy</name><parameter_list>(<parameter><decl><type><name>TFileCache</name><modifier>*</modifier></type> <name>tcache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tcache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// free table cache</comment>
  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>reader</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>tableCache</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>reader</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>*</operator><name>reader</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"drop table cache suid:%"</literal> <name>PRIu64</name> <literal type="string">", colName:%s, colType:%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>colName</name></name></expr></argument>,
              <argument><expr><name><name>p</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tfileReaderUnRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>tableCache</name></name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>tableCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TFileReader</name><modifier>*</modifier></type> <name>tfileCacheGet</name><parameter_list>(<parameter><decl><type><name>TFileCache</name><modifier>*</modifier></type> <name>tcache</name></decl></parameter>, <parameter><decl><type><name>ICacheKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>idxSerialCacheKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sz</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>reader</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>tableCache</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>reader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tfileReaderRef</name><argument_list>(<argument><expr><operator>*</operator><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><operator>*</operator><name>reader</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>tfileCachePut</name><parameter_list>(<parameter><decl><type><name>TFileCache</name><modifier>*</modifier></type> <name>tcache</name></decl></parameter>, <parameter><decl><type><name>ICacheKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>sz</name> <init>= <expr><call><name>idxSerialCacheKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>tableCache</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>oldRdr</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>tableCache</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"found %s, should remove file %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>oldRdr</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>oldRdr</name><operator>-&gt;</operator><name>remove</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tfileReaderUnRef</name><argument_list>(<argument><expr><name>oldRdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>tableCache</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tfileReaderRef</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>
<function><type><name>TFileReader</name><modifier>*</modifier></type> <name>tfileReaderCreate</name><parameter_list>(<parameter><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TFileReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>remove</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>tfileReaderVerify</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"invalid tfile, suid:%"</literal> <name>PRIu64</name> <literal type="string">", colName:%s"</literal></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tfileReaderDestroy</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>tfileReaderLoadHeader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to load index header, suid:%"</literal> <name>PRIu64</name> <literal type="string">", colName:%s"</literal></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>suid</name></name></expr></argument>,
               <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tfileReaderDestroy</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>tfileReaderLoadFst</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to load index fst, suid:%"</literal> <name>PRIu64</name> <literal type="string">", colName:%s, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>suid</name></name></expr></argument>,
               <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>colName</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tfileReaderDestroy</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>reader</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>tfileReaderDestroy</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fstDestroy</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>fst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>remove</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"%s is removed"</literal></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"%s is not removed"</literal></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>idxFileCtxDestroy</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>remove</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchTerm</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>      <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>p</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sz</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>nColVal</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstSlice</name></type> <name>key</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TFileReader</name><operator>*</operator><operator>)</operator><name>reader</name><operator>)</operator><operator>-&gt;</operator><name>fst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>et</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cost</name> <init>= <expr><name>et</name> <operator>-</operator> <name>st</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"index: %"</literal> <name>PRIu64</name> <literal type="string">", col: %s, colVal: %s, found table info in tindex, time cost: %"</literal> <name>PRIu64</name> <literal type="string">"us"</literal></expr></argument>,
              <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tfileReaderLoadTableIds</name><argument_list>(<argument><expr><operator>(</operator><name>TFileReader</name><operator>*</operator><operator>)</operator><name>reader</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cost</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>et</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"index: %"</literal> <name>PRIu64</name> <literal type="string">", col: %s, colVal: %s, load all table info, time cost: %"</literal> <name>PRIu64</name> <literal type="string">"us"</literal></expr></argument>, <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>,
              <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchPrefix</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>p</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sz</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>nColVal</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>offsets</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FAutoCtx</name><modifier>*</modifier></type>    <name>ctx</name> <init>= <expr><call><name>automCtxCreate</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>AUTOMATION_PREFIX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FStmBuilder</name><modifier>*</modifier></type> <name>sb</name> <init>= <expr><call><name>fstSearch</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TFileReader</name><operator>*</operator><operator>)</operator><name>reader</name><operator>)</operator><operator>-&gt;</operator><name>fst</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FStmSt</name><modifier>*</modifier></type>      <name>st</name> <init>= <expr><call><name>stmBuilderIntoStm</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FStmStRslt</name><modifier>*</modifier></type>  <name>rt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>rt</name> <operator>=</operator> <call><name>stmStNextWith</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>out</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>swsResultDestroy</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>stmStDestroy</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stmBuilderDestroy</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tfileReaderLoadTableIds</name><argument_list>(<argument><expr><operator>(</operator><name>TFileReader</name><operator>*</operator><operator>)</operator><name>reader</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to find target tablelist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchSuffix</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>      <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>p</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sz</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>nColVal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstSlice</name></type> <name>key</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchRegex</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasJson</name> <init>= <expr><call><name>IDX_TYPE_CONTAIN_EXTERN_TYPE</name><argument_list>(<argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_JSON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type>      <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>p</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sz</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>nColVal</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>idxPackJsonData</name><argument_list>(<argument><expr><name>tem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstSlice</name></type> <name>key</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/*impl later*/</comment>

  <if_stmt><if>if <condition>(<expr><name>hasJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchCompareFunc</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>RangeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>                  <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>p</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                  <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>_cache_range_compare</name></type> <name>cmpFn</name> <init>= <expr><call><name>idxGetCompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>offsets</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FAutoCtx</name><modifier>*</modifier></type>    <name>ctx</name> <init>= <expr><call><name>automCtxCreate</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>AUTOMATION_ALWAYS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FStmBuilder</name><modifier>*</modifier></type> <name>sb</name> <init>= <expr><call><name>fstSearch</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TFileReader</name><operator>*</operator><operator>)</operator><name>reader</name><operator>)</operator><operator>-&gt;</operator><name>fst</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FstSlice</name></type> <name>h</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>stmBuilderSetRange</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FStmSt</name><modifier>*</modifier></type>     <name>st</name> <init>= <expr><call><name>stmBuilderIntoStm</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FStmStRslt</name><modifier>*</modifier></type> <name>rt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>rt</name> <operator>=</operator> <call><name>stmStNextWith</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>     <name>ch</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>fstSliceData</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TExeCond</name></type> <name>cond</name> <init>= <expr><call><name>cmpFn</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>MATCH</name> <operator>==</operator> <name>cond</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tfileReaderLoadTableIds</name><argument_list>(<argument><expr><operator>(</operator><name>TFileReader</name><operator>*</operator><operator>)</operator><name>reader</name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONTINUE</name> <operator>==</operator> <name>cond</name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>BREAK</name> <operator>==</operator> <name>cond</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>swsResultDestroy</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>swsResultDestroy</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>stmStDestroy</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stmBuilderDestroy</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchLessThan</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tfSearchCompareFunc</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>tem</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>LT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchLessEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tfSearchCompareFunc</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>tem</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>LE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchGreaterThan</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tfSearchCompareFunc</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>tem</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>GT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchGreaterEqual</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tfSearchCompareFunc</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>tem</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>GE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchRange</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>      <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>p</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sz</name> <init>= <expr><name><name>tem</name><operator>-&gt;</operator><name>nColVal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstSlice</name></type> <name>key</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchTerm_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>idxPackJsonData</name><argument_list>(<argument><expr><name>tem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>sz</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstSlice</name></type> <name>key</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TFileReader</name><operator>*</operator><operator>)</operator><name>reader</name><operator>)</operator><operator>-&gt;</operator><name>fst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>et</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cost</name> <init>= <expr><name>et</name> <operator>-</operator> <name>st</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"index: %"</literal> <name>PRIu64</name> <literal type="string">", col: %s, colVal: %s, found table info in tindex, time cost: %"</literal> <name>PRIu64</name> <literal type="string">"us"</literal></expr></argument>,
              <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tfileReaderLoadTableIds</name><argument_list>(<argument><expr><operator>(</operator><name>TFileReader</name><operator>*</operator><operator>)</operator><name>reader</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cost</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>et</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"index: %"</literal> <name>PRIu64</name> <literal type="string">", col: %s, colVal: %s, load all table info, offset: %"</literal> <name>PRIu64</name>
              <literal type="string">", size: %d, time cost: %"</literal> <name>PRIu64</name> <literal type="string">"us"</literal></expr></argument>,
              <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tr</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tfSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>tem</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>EQ</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchPrefix_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tfSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>tem</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>CONTAINS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchSuffix_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchRegex_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchLessThan_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tfSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>tem</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>LT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchLessEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tfSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>tem</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>LE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchGreaterThan_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tfSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>tem</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>GT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchGreaterEqual_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tfSearchCompareFunc_JSON</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>tem</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>GE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchRange_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tfSearchCompareFunc_JSON</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tem</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>RangeType</name></type> <name>ctype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>CONTAINS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SIndexTerm</name></type> <name>tm</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>tem</name><operator>-&gt;</operator><name>suid</name></name></expr>,
                     <expr><operator>.</operator><name>operType</name> <operator>=</operator> <name><name>tem</name><operator>-&gt;</operator><name>operType</name></name></expr>,
                     <expr><operator>.</operator><name>colType</name> <operator>=</operator> <name><name>tem</name><operator>-&gt;</operator><name>colType</name></name></expr>,
                     <expr><operator>.</operator><name>colName</name> <operator>=</operator> <name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr>,
                     <expr><operator>.</operator><name>nColName</name> <operator>=</operator> <name><name>tem</name><operator>-&gt;</operator><name>nColVal</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>idxPackJsonDataPrefixNoType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>idxPackJsonDataPrefix</name><argument_list>(<argument><expr><name>tem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>_cache_range_compare</name></type> <name>cmpFn</name> <init>= <expr><call><name>idxGetCompare</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>offsets</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FAutoCtx</name><modifier>*</modifier></type>    <name>ctx</name> <init>= <expr><call><name>automCtxCreate</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>AUTOMATION_PREFIX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FStmBuilder</name><modifier>*</modifier></type> <name>sb</name> <init>= <expr><call><name>fstSearch</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TFileReader</name><operator>*</operator><operator>)</operator><name>reader</name><operator>)</operator><operator>-&gt;</operator><name>fst</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FStmSt</name><modifier>*</modifier></type>     <name>st</name> <init>= <expr><call><name>stmBuilderIntoStm</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FStmStRslt</name><modifier>*</modifier></type> <name>rt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>rt</name> <operator>=</operator> <call><name>stmStNextWith</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FstSlice</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>  <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>ch</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>fstSliceData</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TExeCond</name></type> <name>cond</name> <init>= <expr><name>CONTINUE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>CONTAINS</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cond</name> <operator>=</operator> <name>MATCH</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>skip</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>swsResultDestroy</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tBuf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tBuf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cond</name> <operator>=</operator> <call><name>cmpFn</name><argument_list>(<argument><expr><name>tBuf</name> <operator>+</operator> <name>skip</name></expr></argument>, <argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><call><name>IDX_TYPE_GET_TYPE</name><argument_list>(<argument><expr><name><name>tem</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>MATCH</name> <operator>==</operator> <name>cond</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tfileReaderLoadTableIds</name><argument_list>(<argument><expr><operator>(</operator><name>TFileReader</name><operator>*</operator><operator>)</operator><name>reader</name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONTINUE</name> <operator>==</operator> <name>cond</name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>BREAK</name> <operator>==</operator> <name>cond</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>swsResultDestroy</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>swsResultDestroy</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>stmStDestroy</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stmBuilderDestroy</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>tfileReaderSearch</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>SIndexTermQuery</name><modifier>*</modifier></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndexTerm</name><modifier>*</modifier></type>     <name>term</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>term</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EIndexQueryType</name></type> <name>qtype</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>qType</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IDX_TYPE_CONTAIN_EXTERN_TYPE</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_JSON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>tfSearch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>qtype</name></expr>]</index></name><operator>(</operator><name>reader</name><operator>,</operator> <name>term</name><operator>,</operator> <name>tr</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>tfSearch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>qtype</name></expr>]</index></name><operator>(</operator><name>reader</name><operator>,</operator> <name>term</name><operator>,</operator> <name>tr</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tfileReaderUnRef</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TFileWriter</name><modifier>*</modifier></type> <name>tfileWriterOpen</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>colName</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>colType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tfileGenFileFullName</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>colName</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>wcx</name> <init>= <expr><call><name>idxFileCtxCreate</name><argument_list>(<argument><expr><name>TFILE</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wcx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TFileHeader</name></type> <name>tfh</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tfh</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tfh</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tfh</name><operator>.</operator><name>colType</name></name> <operator>=</operator> <name>colType</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>colName</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tfh</name><operator>.</operator><name>colName</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tfh</name><operator>.</operator><name>colName</name></name></expr></argument>, <argument><expr><name>colName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>tfileWriterCreate</name><argument_list>(<argument><expr><name>wcx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tfh</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>TFileReader</name><modifier>*</modifier></type> <name>tfileReaderOpen</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>colName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tfileGenFileFullName</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>colName</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>wc</name> <init>= <expr><call><name>idxFileCtxCreate</name><argument_list>(<argument><expr><name>TFILE</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to open readonly file: %s, reason: %s"</literal></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>lru</name></name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>lru</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>indexTrace</name><argument_list>(<argument><expr><literal type="string">"open read file name:%s, file size: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name> <init>= <expr><call><name>tfileReaderCreate</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>reader</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>TFileWriter</name><modifier>*</modifier></type> <name>tfileWriterCreate</name><parameter_list>(<parameter><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>TFileHeader</name><modifier>*</modifier></type> <name>header</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>tw</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TFileWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tw</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"index: %"</literal> <name>PRIu64</name> <literal type="string">" failed to alloc TFilerWriter"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <operator>*</operator><name>header</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tfileWriteHeader</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tw</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tfileWriterPut</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>tw</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// sort by coltype and write to tindex</comment>
  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>fn</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int8_t</name></type> <name>colType</name> <init>= <expr><name><name>tw</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>colType</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>colType</name> <operator>=</operator> <call><name>IDX_TYPE_GET_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>colType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name>colType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name>tfileStrCompare</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>getComparFunc</name><argument_list>(<argument><expr><name>colType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taosArraySortPWithExt</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><operator>(</operator><name>data</name><operator>)</operator></expr></argument>, <argument><expr><name>tfileValueCompare</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>fstOffset</name> <init>= <expr><name><name>tw</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// ugly code, refactor later</comment>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>, <argument><expr><name>idxUidCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayRemoveDuplicate</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>, <argument><expr><name>idxUidCompare</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>tbsz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tbsz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>fstOffset</name> <operator>+=</operator> <call><name>TF_TABLE_TATOAL_SIZE</name><argument_list>(<argument><expr><name>tbsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>tfileWriteFstOffset</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>fstOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>cap</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>tbsz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tbsz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <comment type="line">// check buf has enough space or not</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ttsz</name> <init>= <expr><call><name>TF_TABLE_TATOAL_SIZE</name><argument_list>(<argument><expr><name>tbsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>cap</name> <operator>&lt;</operator> <name>ttsz</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cap</name> <operator>=</operator> <name>ttsz</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tfileSerialTableIdsToBuf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tw</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>tw</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ttsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>tw</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>ttsz</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>fb</name></name> <operator>=</operator> <call><name>fstBuilderCreate</name><argument_list>(<argument><expr><name><name>tw</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tw</name><operator>-&gt;</operator><name>fb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tfileWriterClose</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// write data</comment>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// TODO, fst batch write later</comment>
    <decl_stmt><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>tbsz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tbsz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tfileWriteData</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to write data: %s, offset: %d len: %d"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
                 <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fstBuilderDestroy</name><argument_list>(<argument><expr><name><name>tw</name><operator>-&gt;</operator><name>fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tfileWriteFooter</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>tfileWriterClose</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>tw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tw</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>idxFileCtxDestroy</name><argument_list>(<argument><expr><name><name>tw</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>tfileWriterDestroy</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>tw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tw</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>idxFileCtxDestroy</name><argument_list>(<argument><expr><name><name>tw</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IndexTFile</name><modifier>*</modifier></type> <name>idxTFileCreate</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFileCache</name><modifier>*</modifier></type> <name>cache</name> <init>= <expr><call><name>tfileCacheCreate</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>IndexTFile</name><modifier>*</modifier></type> <name>tfile</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IndexTFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tfileCacheDestroy</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tfile</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tfile</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
  <return>return <expr><name>tfile</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxTFileDestroy</name><parameter_list>(<parameter><decl><type><name>IndexTFile</name><modifier>*</modifier></type> <name>tfile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tfile</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tfileCacheDestroy</name><argument_list>(<argument><expr><name><name>tfile</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idxTFileSearch</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tfile</name></decl></parameter>, <parameter><decl><type><name>SIndexTermQuery</name><modifier>*</modifier></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>     <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IndexTFile</name><modifier>*</modifier></type> <name>pTfile</name> <init>= <expr><name>tfile</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>term</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ICacheKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>colType</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colType</name></name></expr>, <expr><operator>.</operator><name>colName</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colName</name></name></expr>, <expr><operator>.</operator><name>nColName</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>nColName</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTfile</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name> <init>= <expr><call><name>tfileCacheGet</name><argument_list>(<argument><expr><name><name>pTfile</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTfile</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>cost</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"index tfile stage 1 cost: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tfileReaderSearch</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>idxTFilePut</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tfile</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TFileWriterOpt wOpt = {.suid = term-&gt;suid, .colType = term-&gt;colType, .colName = term-&gt;colName, .nColName =</comment>
  <comment type="line">// term-&gt;nColName, .version = 1};</comment>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>tfileIteratorNext</name><parameter_list>(<parameter><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>iiter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IterateValue</name><modifier>*</modifier></type> <name>iv</name> <init>= <expr><operator>&amp;</operator><name><name>iiter</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iterateValueDestroy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>colVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TFileFstIter</name><modifier>*</modifier></type> <name>tIter</name> <init>= <expr><name><name>iiter</name><operator>-&gt;</operator><name>iter</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FStmStRslt</name><modifier>*</modifier></type>   <name>rt</name> <init>= <expr><call><name>stmStNextWith</name><argument_list>(<argument><expr><name><name>tIter</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>ch</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>fstSliceData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>colVal</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>colVal</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>out</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>swsResultDestroy</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// set up iterate value</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tfileReaderLoadTableIds</name><argument_list>(<argument><expr><name><name>tIter</name><operator>-&gt;</operator><name>rdr</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>iv</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>iv</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ADD_VALUE</name></expr>;</expr_stmt>  <comment type="line">// value in tfile always ADD_VALUE</comment>
  <expr_stmt><expr><name><name>iv</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name>colVal</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>IterateValue</name><modifier>*</modifier></type> <name>tifileIterateGetValue</name><parameter_list>(<parameter><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>val</name></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TFileFstIter</name><modifier>*</modifier></type> <name>tfileFstIteratorCreate</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFileFstIter</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TFileFstIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>automCtxCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AUTOMATION_ALWAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>fb</name></name> <operator>=</operator> <call><name>fstSearch</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>fst</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <call><name>stmBuilderIntoStm</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>rdr</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
  <return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Iterate</name><modifier>*</modifier></type> <name>tfileIteratorCreate</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Iterate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <call><name>tfileFstIteratorCreate</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>iter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>tfileIteratorNext</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>getValue</name></name> <operator>=</operator> <name>tifileIterateGetValue</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>colVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>tfileIteratorDestroy</name><parameter_list>(<parameter><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>IterateValue</name><modifier>*</modifier></type> <name>iv</name> <init>= <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iterateValueDestroy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TFileFstIter</name><modifier>*</modifier></type> <name>tIter</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>iter</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>stmStDestroy</name><argument_list>(<argument><expr><name><name>tIter</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stmBuilderDestroy</name><argument_list>(<argument><expr><name><name>tIter</name><operator>-&gt;</operator><name>fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>automCtxDestroy</name><argument_list>(<argument><expr><name><name>tIter</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TFileReader</name><modifier>*</modifier></type> <name>tfileGetReaderByCol</name><parameter_list>(<parameter><decl><type><name>IndexTFile</name><modifier>*</modifier></type> <name>tf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>colName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>rd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ICacheKey</name></type>    <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name>suid</name></expr>, <expr><operator>.</operator><name>colType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>, <expr><operator>.</operator><name>colName</name> <operator>=</operator> <name>colName</name></expr>, <expr><operator>.</operator><name>nColName</name> <operator>=</operator> <macro><name>strlen</name><argument_list>(<argument>colName</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rd</name> <operator>=</operator> <call><name>tfileCacheGet</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileStrCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileValueCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>fn</name> <init>= <expr><operator>*</operator><operator>(</operator><name>__compar_fn_t</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>av</name> <init>= <expr><operator>(</operator><name>TFileValue</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>bv</name> <init>= <expr><operator>(</operator><name>TFileValue</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>fn</name><argument_list>(<argument><expr><name><name>av</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>bv</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TFileValue</name><modifier>*</modifier></type> <name>tfileValueCreate</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>tf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TFileValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <call><name>tstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>tableId</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tf</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>tfileValuePush</name><parameter_list>(<parameter><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>tf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>tfileValueDestroy</name><parameter_list>(<parameter><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>tf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tfileSerialTableIdsToBuf</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SERIALIZE_VAR_TO_BUF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SERIALIZE_VAR_TO_BUF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileWriteFstOffset</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>tw</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>fstOffset</name> <init>= <expr><name>offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tw</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>fstOffset</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>fstOffset</name></name> <operator>=</operator> <name>fstOffset</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>fstOffset</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <call><name><name>tw</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>tw</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fstOffset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fstOffset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"tfile write fst offset: %d"</literal></expr></argument>, <argument><expr><call><name><name>tw</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>size</name></name><argument_list>(<argument><expr><name><name>tw</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tw</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fstOffset</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileWriteHeader</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>writer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TFILE_HEADER_NO_FST</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TFileHeader</name><modifier>*</modifier></type> <name>header</name> <init>= <expr><operator>&amp;</operator><name><name>writer</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"tfile pre write header size: %d"</literal></expr></argument>, <argument><expr><call><name><name>writer</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>size</name></name><argument_list>(<argument><expr><name><name>writer</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nwrite</name> <init>= <expr><call><name><name>writer</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>writer</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <name>nwrite</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"tfile after write header size: %d"</literal></expr></argument>, <argument><expr><call><name><name>writer</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>size</name></name><argument_list>(<argument><expr><name><name>writer</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>writer</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>nwrite</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileWriteData</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>tval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFileHeader</name><modifier>*</modifier></type> <name>header</name> <init>= <expr><operator>&amp;</operator><name><name>write</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>      <name>colType</name> <init>= <expr><name><name>header</name><operator>-&gt;</operator><name>colType</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>colType</name> <operator>=</operator> <call><name>IDX_TYPE_GET_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>FstSlice</name></type> <name>key</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>tval</name><operator>-&gt;</operator><name>colVal</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>tval</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstBuilderInsert</name><argument_list>(<argument><expr><name><name>write</name><operator>-&gt;</operator><name>fb</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>tval</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileWriteFooter</name><parameter_list>(<parameter><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>write</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILE_MAGIC_NUMBER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosEncodeFixedU64</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pBuf</name></expr></argument>, <argument><expr><name>FILE_MAGIC_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nwrite</name> <init>= <expr><call><name><name>write</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>write</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"tfile write footer size: %d"</literal></expr></argument>, <argument><expr><call><name><name>write</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>size</name></name><argument_list>(<argument><expr><name><name>write</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nwrite</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FILE_MAGIC_NUMBER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nwrite</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileReaderLoadHeader</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO simple tfile header later</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TFILE_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>nread</name> <init>= <expr><call><name><name>reader</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>readFrom</name></name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"actual Read: %d, to read: %d, code:0x%x, filename: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nread</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
               <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"actual Read: %d, to read: %d, filename: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nread</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="line">// assert(nread == sizeof(buf));</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileReaderLoadFst</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>size</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>size</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// current load fst into memory, refactor it later</comment>
  <decl_stmt><decl><type><name>int</name></type>   <name>fstSize</name> <init>= <expr><name>size</name> <operator>-</operator> <name><name>reader</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>fstOffset</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FILE_MAGIC_NUMBER</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fstSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nread</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>readFrom</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fstSize</name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>fstOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>cost</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>ts</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"nread = %d, and fst offset=%d, fst size: %d, filename: %s, file size: %d, time cost: %"</literal> <name>PRId64</name> <literal type="string">"us"</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>,
            <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>fstOffset</name></name></expr></argument>, <argument><expr><name>fstSize</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// we assuse fst size less than FST_MAX_SIZE</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nread</name> <operator>&lt;=</operator> <name>fstSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FstSlice</name></type> <name>st</name> <init>= <expr><call><name>fstSliceCreate</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>fst</name></name> <operator>=</operator> <call><name>fstCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstSliceDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><name><name>reader</name><operator>-&gt;</operator><name>fst</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileReaderLoadTableIds</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO(yihao): opt later</comment>
  <decl_stmt><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// add block cache</comment>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>block</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nread</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>readFrom</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nread</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><name>block</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>nid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>left</name> <init>= <expr><name>block</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>p</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>readFrom</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>left</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>block</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>left</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>nid</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileReaderVerify</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// just validate header and Footer, file corrupted also shuild be verified later</comment>
  <decl_stmt><decl><type><name>IFileCtx</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tMagicNumber</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>tMagicNumber</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>size</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>size</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tMagicNumber</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name>size</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>ctx</name><operator>-&gt;</operator><name>readFrom</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tMagicNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tMagicNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tMagicNumber</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosDecodeFixedU64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tMagicNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>tMagicNumber</name> <operator>==</operator> <name>FILE_MAGIC_NUMBER</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tfileReaderRef</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>rd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>rd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_INC</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tfileReaderUnRef</name><parameter_list>(<parameter><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>rd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>rd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_DEC</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// do nothing</comment>
    <expr_stmt><expr><call><name>tfileReaderDestroy</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SArray</name><modifier>*</modifier></type> <name>tfileGetFileList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>version</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>  <name>files</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TdDirPtr</name></type> <name>pDir</name> <init>= <expr><call><name>taosOpenDir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDir</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>TdDirEntryPtr</name></type> <name>pDirEntry</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pDirEntry</name> <operator>=</operator> <call><name>taosReadDir</name><argument_list>(<argument><expr><name>pDir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><call><name>taosGetDirEntryName</name><argument_list>(<argument><expr><name>pDirEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>tfileParseFileName</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>tfileCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tfileRmExpireFile</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>files</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileRmExpireFile</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO(yihao): remove expire tindex after restart</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tfileDestroyFileName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>elem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>elem</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>as</name> <init>= <expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>bs</name> <init>= <expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tfileParseFileName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">"-%[^-]-%"</literal> <name>PRId64</name> <literal type="string">".tindex"</literal></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// read suid &amp; colid &amp; version  success</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<comment type="line">// tfile name suid-colId-version.tindex</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tfileGenFileName</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">"-%s-%"</literal> <name>PRId64</name> <literal type="string">".tindex"</literal></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <name>FORCE_INLINE</name></type> <name>tfileGenFileFullName</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>fullname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>col</name></decl></parameter>,
                                              <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tfileGenFileName</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
