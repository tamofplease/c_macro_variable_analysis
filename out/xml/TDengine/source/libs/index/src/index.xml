<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/index.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3 * or later ("AGPL"), as published by the Free
 * Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexCache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexComm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexTfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdataformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsched.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_NUM_OF_THREADS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_QUEUE_SIZE</name></cpp:macro>     <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_BOOL_NULL</name></cpp:macro>      <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_TINYINT_NULL</name></cpp:macro>   <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_SMALLINT_NULL</name></cpp:macro>  <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_INT_NULL</name></cpp:macro>       <cpp:value>0x80000000LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_BIGINT_NULL</name></cpp:macro>    <cpp:value>0x8000000000000000LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_TIMESTAMP_NULL</name></cpp:macro> <cpp:value>TSDB_DATA_BIGINT_NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_FLOAT_NULL</name></cpp:macro>    <cpp:value>0x7FF00000</cpp:value></cpp:define>            <comment type="line">// it is an NAN</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_DOUBLE_NULL</name></cpp:macro>   <cpp:value>0x7FFFFF0000000000LL</cpp:value></cpp:define>  <comment type="line">// an NAN</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_NCHAR_NULL</name></cpp:macro>    <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_BINARY_NULL</name></cpp:macro>   <cpp:value>0xFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_JSON_NULL</name></cpp:macro>     <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_JSON_null</name></cpp:macro>     <cpp:value>0xFFFFFFFE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_JSON_NOT_NULL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_UTINYINT_NULL</name></cpp:macro>  <cpp:value>0xFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_USMALLINT_NULL</name></cpp:macro> <cpp:value>0xFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_UINT_NULL</name></cpp:macro>      <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_UBIGINT_NULL</name></cpp:macro>   <cpp:value>0xFFFFFFFFFFFFFFFFL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_NULL_STR</name></cpp:macro>   <cpp:value>"NULL"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_DATA_NULL_STR_L</name></cpp:macro> <cpp:value>"null"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>indexQhandle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>indexRefMgt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>indexThreads</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indexDestroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>sIdx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>indexInit</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>threadNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>indexThreads</name> <operator>=</operator> <name>threadNum</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>indexThreads</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>indexThreads</name> <operator>=</operator> <name>INDEX_NUM_OF_THREADS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>indexEnvInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// refactor later</comment>
  <expr_stmt><expr><name>indexQhandle</name> <operator>=</operator> <call><name>taosInitScheduler</name><argument_list>(<argument><expr><name>INDEX_QUEUE_SIZE</name></expr></argument>, <argument><expr><name>indexThreads</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>indexRefMgt</name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>indexDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>indexCleanup</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// refacto later</comment>
  <expr_stmt><expr><call><name>taosCleanUpScheduler</name><argument_list>(<argument><expr><name>indexQhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>indexQhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name>indexRefMgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SIdxColInfo</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>colId</name></decl>;</decl_stmt>  <comment type="line">// generated by index internal</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
}</block></struct></type> <name>SIdxColInfo</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type> <name>isInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<comment type="line">// static void           indexInit();</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>idxTermSearch</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>sIdx</name></decl></parameter>, <parameter><decl><type><name>SIndexTermQuery</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idxInterRsltDestroy</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>results</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>idxMergeFinalResults</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>EIndexOperatorType</name></type> <name>oType</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>idxGenTFile</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// merge cache and tfile by opera type</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idxMergeCacheAndTFile</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>IterateValue</name><modifier>*</modifier></type> <name>icache</name></decl></parameter>, <parameter><decl><type><name>IterateValue</name><modifier>*</modifier></type> <name>iTfv</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>helper</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// static int32_t indexSerialTermKey(SIndexTerm* itm, char* buf);</comment>
<comment type="line">// int32_t        indexSerialKey(ICacheKey* key, char* buf);</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idxPost</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>pIdx</name> <init>= <expr><name>idx</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>indexWait</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>pIdx</name> <init>= <expr><name>idx</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>indexOpen</name><parameter_list>(<parameter><decl><type><name>SIndexOpts</name><modifier>*</modifier></type> <name>opts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>SIndex</name><modifier>*</modifier><modifier>*</modifier></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>isInit</name></expr></argument>, <argument><expr><name>indexEnvInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>idx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>lru</name></name> <operator>=</operator> <call><name>taosLRUCacheInit</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>cacheSize</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>lru</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosLRUCacheSetStrictCapacity</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>tindex</name></name> <operator>=</operator> <call><name>idxTFileCreate</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>tindex</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>colObj</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>tstrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>idxAddRef</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>opts</name></name> <operator>=</operator> <operator>*</operator><name>opts</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxAcquireRef</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>

<label><name>END</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexDestroy</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>indexDestroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>idx</name> <init>= <expr><name>handle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxTFileDestroy</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>tindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type> <name>lru</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>lru</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lru</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUCacheEraseUnrefEntries</name><argument_list>(<argument><expr><name>lru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosLRUCacheCleanup</name><argument_list>(<argument><expr><name>lru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>lru</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>indexClose</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>sIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sIdx</name><operator>-&gt;</operator><name>colObj</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>colObj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name>iter</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>idxCacheForceToMerge</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pCache</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"%s wait to merge"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pCache</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>indexWait</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>sIdx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"%s finish to wait"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pCache</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>colObj</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>idxCacheUnRef</name><argument_list>(<argument><expr><operator>*</operator><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>colObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sIdx</name><operator>-&gt;</operator><name>colObj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>idxReleaseRef</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxRemoveRef</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int64_t</name></type> <name>idxAddRef</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl</comment>
  <return>return <expr><call><name>taosAddRef</name><argument_list>(<argument><expr><name>indexRefMgt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>idxRemoveRef</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <return>return <expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name>indexRefMgt</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>idxAcquireRef</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl</comment>
  <expr_stmt><expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name>indexRefMgt</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>idxReleaseRef</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl</comment>
  <expr_stmt><expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>indexRefMgt</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>indexPut</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SIndexMultiTerm</name><modifier>*</modifier></type> <name>fVals</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO(yihao): reduce the lock range</comment>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>fVals</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>fVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type>      <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ICacheKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>colName</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>colName</name></name></expr>, <expr><operator>.</operator><name>nColName</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>colType</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>colType</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>sz</name> <init>= <expr><call><name>idxSerialCacheKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier><modifier>*</modifier></type> <name>cache</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>colObj</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><call><name>idxCacheCreate</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>colObj</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCache</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>fVals</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>fVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type>      <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ICacheKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>colName</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>colName</name></name></expr>, <expr><operator>.</operator><name>nColName</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>colType</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>colType</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>sz</name> <init>= <expr><call><name>idxSerialCacheKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>indexDebug</name><argument_list>(<argument><expr><literal type="string">"w suid:%"</literal> <name>PRIu64</name> <literal type="string">", colName:%s, colType:%d"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier><modifier>*</modifier></type> <name>cache</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>colObj</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>cache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>idxCachePut</name><argument_list>(<argument><expr><operator>*</operator><name>cache</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>indexSearch</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SIndexMultiTermQuery</name><modifier>*</modifier></type> <name>multiQuerys</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EIndexOperatorType</name></type> <name>opera</name> <init>= <expr><name><name>multiQuerys</name><operator>-&gt;</operator><name>opera</name></name></expr></init></decl>;</decl_stmt>  <comment type="line">// relation of querys</comment>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>iRslts</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>nQuery</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>multiQuerys</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nQuery</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SIndexTermQuery</name><modifier>*</modifier></type> <name>qterm</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>multiQuerys</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>          <name>trslt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>idxTermSearch</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>qterm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trslt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>iRslts</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>trslt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>idxMergeFinalResults</name><argument_list>(<argument><expr><name>iRslts</name></expr></argument>, <argument><expr><name>opera</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxInterRsltDestroy</name><argument_list>(<argument><expr><name>iRslts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>indexDelete</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SIndexMultiTermQuery</name><modifier>*</modifier></type> <name>query</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<comment type="line">// int indexRebuild(SIndex* index, SIndexOpts* opts) { return 0; }</comment>

<function><type><name>SIndexOpts</name><modifier>*</modifier></type> <name>indexOptsCreate</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>cacheSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndexOpts</name><modifier>*</modifier></type> <name>opts</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIndexOpts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>cacheSize</name></name> <operator>=</operator> <name>cacheSize</name></expr>;</expr_stmt>
  <return>return <expr><name>opts</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>indexOptsDestroy</name><parameter_list>(<parameter><decl><type><name>SIndexOpts</name><modifier>*</modifier></type> <name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<comment type="block">/*
 * @param: oper
 *
 */</comment>
<function><type><name>SIndexMultiTermQuery</name><modifier>*</modifier></type> <name>indexMultiTermQueryCreate</name><parameter_list>(<parameter><decl><type><name>EIndexOperatorType</name></type> <name>opera</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndexMultiTermQuery</name><modifier>*</modifier></type> <name>mtq</name> <init>= <expr><operator>(</operator><name>SIndexMultiTermQuery</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIndexMultiTermQuery</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>mtq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>mtq</name><operator>-&gt;</operator><name>opera</name></name> <operator>=</operator> <name>opera</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mtq</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIndexTermQuery</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>mtq</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>indexMultiTermQueryDestroy</name><parameter_list>(<parameter><decl><type><name>SIndexMultiTermQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SIndexTermQuery</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>SIndexTermQuery</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>indexTermDestroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>int</name></type> <name>indexMultiTermQueryAdd</name><parameter_list>(<parameter><decl><type><name>SIndexMultiTermQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>EIndexQueryType</name></type> <name>qType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndexTermQuery</name></type> <name>q</name> <init>= <expr><block>{<expr><operator>.</operator><name>qType</name> <operator>=</operator> <name>qType</name></expr>, <expr><operator>.</operator><name>term</name> <operator>=</operator> <name>term</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>indexTermCreate</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SIndexOperOnColumn</name></type> <name>oper</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>colName</name></decl></parameter>,
                            <parameter><decl><type><name>int32_t</name></type> <name>nColName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>colVal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>tm</name> <init>= <expr><operator>(</operator><name>SIndexTerm</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SIndexTerm</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>operType</name></name> <operator>=</operator> <name>oper</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>colType</name></name> <operator>=</operator> <name>colType</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>colName</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nColName</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>colName</name></expr></argument>, <argument><expr><name>nColName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>nColName</name></name> <operator>=</operator> <name>nColName</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>colVal</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nColVal</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>idxConvertDataToStr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>colVal</name></expr></argument>, <argument><expr><call><name>IDX_TYPE_GET_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>colVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>INDEX_DATA_NULL_STR</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>INDEX_DATA_NULL_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>INDEX_DATA_NULL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>emptyStr</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>emptyStr</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>emptyStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>emptyStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>nColVal</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

  <return>return <expr><name>tm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>indexTermDestroy</name><parameter_list>(<parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SIndexMultiTerm</name><modifier>*</modifier></type> <name>indexMultiTermCreate</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIndexTerm</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>indexMultiTermAdd</name><parameter_list>(<parameter><decl><type><name>SIndexMultiTerm</name><modifier>*</modifier></type> <name>terms</name></decl></parameter>, <parameter><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>indexMultiTermDestroy</name><parameter_list>(<parameter><decl><type><name>SIndexMultiTerm</name><modifier>*</modifier></type> <name>terms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>indexTermDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * rebuild index
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idxSchedRebuildIdx</name><parameter_list>(<parameter><decl><type><name>SSchedMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO, no need rebuild index</comment>
  <decl_stmt><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>idx</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>st</name> <init>= <expr><name>kFinished</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxReleaseRef</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>indexRebuild</name><parameter_list>(<parameter><decl><type><name>SIndexJson</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// set up rebuild status</comment>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>st</name> <init>= <expr><name>kRebuild</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// task put into BG thread</comment>
  <decl_stmt><decl><type><name>SSchedMsg</name></type> <name>schedMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>fp</name></name> <operator>=</operator> <name>idxSchedRebuildIdx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxAcquireRef</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosScheduleTask</name><argument_list>(<argument><expr><name>indexQhandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schedMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * check index json status
 **/</comment>
<function><type><name>bool</name></type> <name>indexIsRebuild</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// idx rebuild or not</comment>
  <return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>SIdxStatus</name><operator>)</operator><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>kRebuild</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * rebuild index
 */</comment>
<function><type><name>void</name></type> <name>indexJsonRebuild</name><parameter_list>(<parameter><decl><type><name>SIndexJson</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// idx rebuild or not</comment>
  <expr_stmt><expr><call><name>indexRebuild</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * check index json status
 **/</comment>
<function><type><name>bool</name></type> <name>indexJsonIsRebuild</name><parameter_list>(<parameter><decl><type><name>SIndexJson</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// load idx rebuild or not</comment>
  <return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>SIdxStatus</name><operator>)</operator><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>kRebuild</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>idxTermSearch</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>sIdx</name></decl></parameter>, <parameter><decl><type><name>SIndexTermQuery</name><modifier>*</modifier></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndexTerm</name><modifier>*</modifier></type> <name>term</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>term</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>colName</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>colName</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nColName</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>nColName</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Get col info</comment>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type>      <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ICacheKey</name></type> <name>key</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>colName</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colName</name></name></expr>, <expr><operator>.</operator><name>nColName</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>colType</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>colType</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>indexDebug</name><argument_list>(<argument><expr><literal type="string">"r suid:%"</literal> <name>PRIu64</name> <literal type="string">", colName:%s, colType:%d"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>idxSerialCacheKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sIdx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>colObj</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>cache</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pCache</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>*</operator><name>pCache</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sIdx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO: iterator mem and tidex</comment>
  <decl_stmt><decl><type><name>STermValueType</name></type> <name>s</name> <init>= <expr><name>kTypeValue</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name> <init>= <expr><call><name>idxTRsltCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>idxCacheSearch</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>kTypeDeletion</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"col: %s already drop by"</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// coloum already drop by other oper, no need to query tindex</comment>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>idxTFileSearch</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>tindex</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"corrupt at index(TFile) col:%s val: %s"</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>END</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>tfCost</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"tfile search cost: %"</literal> <name>PRIu64</name> <literal type="string">"us"</literal></expr></argument>, <argument><expr><name>tfCost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"corrupt at index(cache) col:%s val: %s"</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>cost</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"search cost: %"</literal> <name>PRIu64</name> <literal type="string">"us"</literal></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>idxTRsltMergeTo</name><argument_list>(<argument><expr><name>tr</name></expr></argument>, <argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>idxTRsltDestroy</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>END</name>:</label>
  <expr_stmt><expr><call><name>idxTRsltDestroy</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>idxInterRsltDestroy</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>results</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>results</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>idxMergeFinalResults</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>EIndexOperatorType</name></type> <name>oType</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// refactor, merge interResults into fResults by oType</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>uidCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayRemoveDuplicate</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>uidCompare</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>oType</name> <operator>==</operator> <name>MUST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iIntersection</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>oType</name> <operator>==</operator> <name>SHOULD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iUnion</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>oType</name> <operator>==</operator> <name>NOT</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// just one column index, enhance later</comment>
    <comment type="line">// taosArrayAddAll(fResults, interResults);</comment>
    <comment type="line">// not use currently</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idxMayMergeTempToFinalRslt</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>tfv</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>lv</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tfv</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>tfv</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>idxTRsltMergeTo</name><argument_list>(<argument><expr><name>tr</name></expr></argument>, <argument><expr><name><name>lv</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>idxTRsltClear</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tfv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// handle last iterator</comment>
      <expr_stmt><expr><call><name>idxTRsltMergeTo</name><argument_list>(<argument><expr><name>tr</name></expr></argument>, <argument><expr><name><name>lv</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tfileValueDestroy</name><argument_list>(<argument><expr><name>tfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>idxMergeCacheAndTFile</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>IterateValue</name><modifier>*</modifier></type> <name>cv</name></decl></parameter>, <parameter><decl><type><name>IterateValue</name><modifier>*</modifier></type> <name>tv</name></decl></parameter>, <parameter><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>       <name>colVal</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cv</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>cv</name><operator>-&gt;</operator><name>colVal</name></name></expr> </then><else>: <expr><name><name>tv</name><operator>-&gt;</operator><name>colVal</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>tfv</name> <init>= <expr><call><name>tfileValueCreate</name><argument_list>(<argument><expr><name>colVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>idxMayMergeTempToFinalRslt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>tfv</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>cv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>cv</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ver</name> <init>= <expr><name><name>cv</name><operator>-&gt;</operator><name>ver</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ADD_VALUE</name></expr>)</condition> <block>{<block_content>
      <macro><name>INDEX_MERGE_ADD_DEL</name><argument_list>(<argument>tr-&gt;del</argument>, <argument>tr-&gt;add</argument>, <argument>id</argument>)</argument_list></macro>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DEL_VALUE</name></expr>)</condition> <block>{<block_content>
      <macro><name>INDEX_MERGE_ADD_DEL</name><argument_list>(<argument>tr-&gt;add</argument>, <argument>tr-&gt;del</argument>, <argument>id</argument>)</argument_list></macro>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>tv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayAddAll</name><argument_list>(<argument><expr><name><name>tr</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>idxDestroyFinalRslt</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TFileValue</name><modifier>*</modifier></type> <name>tv</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tfileValueDestroy</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idxFlushCacheToTFile</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>sIdx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>sIdx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"suid %"</literal> <name>PRIu64</name> <literal type="string">" merge cache into tindex"</literal></expr></argument>, <argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><operator>(</operator><name>IndexCache</name><operator>*</operator><operator>)</operator><name>cache</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>quit</name> <operator>&amp;&amp;</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>merging</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <empty_stmt>;</empty_stmt></block_content></block></while>
  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><call><name>tfileGetReaderByCol</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>tindex</name></name></expr></argument>, <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexWarn</name><argument_list>(<argument><expr><literal type="string">"empty tfile reader found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// handle flush</comment>
  <decl_stmt><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>cacheIter</name> <init>= <expr><call><name>idxCacheIteratorCreate</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cacheIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"%p immtable is empty, ignore merge opera"</literal></expr></argument>, <argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>idxCacheDestroyImm</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tfileReaderUnRef</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>merging</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>quit</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>idxPost</name><argument_list>(<argument><expr><name>sIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>idxReleaseRef</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>Iterate</name><modifier>*</modifier></type> <name>tfileIter</name> <init>= <expr><call><name>tfileIteratorCreate</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tfileIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexWarn</name><argument_list>(<argument><expr><literal type="string">"empty tfile reader iterator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>cn</name> <init>= <expr><ternary><condition><expr><name>cacheIter</name></expr> ?</condition><then> <expr><call><name><name>cacheIter</name><operator>-&gt;</operator><name>next</name></name><argument_list>(<argument><expr><name>cacheIter</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>tn</name> <init>= <expr><ternary><condition><expr><name>tfileIter</name></expr> ?</condition><then> <expr><call><name><name>tfileIter</name><operator>-&gt;</operator><name>next</name></name><argument_list>(<argument><expr><name>tfileIter</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIdxTRslt</name><modifier>*</modifier></type> <name>tr</name> <init>= <expr><call><name>idxTRsltCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>cn</name> <operator>==</operator> <name>true</name> <operator>||</operator> <name>tn</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IterateValue</name><modifier>*</modifier></type> <name>cv</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cn</name> <operator>==</operator> <name>true</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>cacheIter</name><operator>-&gt;</operator><name>getValue</name></name><argument_list>(<argument><expr><name>cacheIter</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IterateValue</name><modifier>*</modifier></type> <name>tv</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tn</name> <operator>==</operator> <name>true</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>tfileIter</name><operator>-&gt;</operator><name>getValue</name></name><argument_list>(<argument><expr><name>tfileIter</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cn</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name>tn</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>comp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>cv</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cn</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>comp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>idxMergeCacheAndTFile</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>cv</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cn</name> <operator>=</operator> <call><name><name>cacheIter</name><operator>-&gt;</operator><name>next</name></name><argument_list>(<argument><expr><name>cacheIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tn</name> <operator>=</operator> <call><name><name>tfileIter</name><operator>-&gt;</operator><name>next</name></name><argument_list>(<argument><expr><name>tfileIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>comp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>idxMergeCacheAndTFile</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>cv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cn</name> <operator>=</operator> <call><name><name>cacheIter</name><operator>-&gt;</operator><name>next</name></name><argument_list>(<argument><expr><name>cacheIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>idxMergeCacheAndTFile</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tn</name> <operator>=</operator> <call><name><name>tfileIter</name><operator>-&gt;</operator><name>next</name></name><argument_list>(<argument><expr><name>tfileIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>idxMayMergeTempToFinalRslt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxTRsltDestroy</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>idxGenTFile</name><argument_list>(<argument><expr><name>sIdx</name></expr></argument>, <argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cost</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"success to merge , time cost: %"</literal> <name>PRId64</name> <literal type="string">"ms"</literal></expr></argument>, <argument><expr><name>cost</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>idxDestroyFinalRslt</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>idxCacheDestroyImm</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>idxCacheIteratorDestroy</name><argument_list>(<argument><expr><name>cacheIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tfileIteratorDestroy</name><argument_list>(<argument><expr><name>tfileIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tfileReaderUnRef</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>idxCacheUnRef</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>merging</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>quit</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>idxPost</name><argument_list>(<argument><expr><name>sIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>idxReleaseRef</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>iterateValueDestroy</name><parameter_list>(<parameter><decl><type><name>IterateValue</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>destroy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>val</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>idxGetAvailableVer</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>sIdx</name></decl></parameter>, <parameter><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ICacheKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>colName</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>colName</name></name></expr>, <expr><operator>.</operator><name>nColName</name> <operator>=</operator> <macro><name>strlen</name><argument_list>(<argument>cache-&gt;colName</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>ver</name> <init>= <expr><call><name>CACHE_VERSION</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IndexTFile</name><modifier>*</modifier></type> <name>tf</name> <init>= <expr><operator>(</operator><name>IndexTFile</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>sIdx</name><operator>-&gt;</operator><name>tindex</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>rd</name> <init>= <expr><call><name>tfileCacheGet</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>rd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ver</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>ver</name> <operator>&gt;</operator> <name><name>rd</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>version</name></name></expr> ?</condition><then> <expr><name>ver</name></expr> </then><else>: <expr><name><name>rd</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>version</name></name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"header: %"</literal> <name>PRId64</name> <literal type="string">", ver: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>rd</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tfileReaderUnRef</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ver</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>idxGenTFile</name><parameter_list>(<parameter><decl><type><name>SIndex</name><modifier>*</modifier></type> <name>sIdx</name></decl></parameter>, <parameter><decl><type><name>IndexCache</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>version</name> <init>= <expr><call><name>idxGetAvailableVer</name><argument_list>(<argument><expr><name>sIdx</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"file name version: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TFileWriter</name><modifier>*</modifier></type> <name>tw</name> <init>= <expr><call><name>tfileWriterOpen</name><argument_list>(<argument><expr><name><name>sIdx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tw</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to open file to write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>tfileWriterPut</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>indexError</name><argument_list>(<argument><expr><literal type="string">"failed to write into tindex "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tfileWriterClose</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TFileReader</name><modifier>*</modifier></type> <name>reader</name> <init>= <expr><call><name>tfileReaderOpen</name><argument_list>(<argument><expr><name>sIdx</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>indexInfo</name><argument_list>(<argument><expr><literal type="string">"success to create tfile, reopen it, %s"</literal></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IndexTFile</name><modifier>*</modifier></type> <name>tf</name> <init>= <expr><operator>(</operator><name>IndexTFile</name><operator>*</operator><operator>)</operator><name><name>sIdx</name><operator>-&gt;</operator><name>tindex</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TFileHeader</name><modifier>*</modifier></type> <name>header</name> <init>= <expr><operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ICacheKey</name></type>    <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>colName</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>colName</name></name></expr>, <expr><operator>.</operator><name>nColName</name> <operator>=</operator> <macro><name>strlen</name><argument_list>(<argument>header-&gt;colName</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tfileCachePut</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
<label><name>END</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>tw</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>idxFileCtxDestroy</name><argument_list>(<argument><expr><name><name>tw</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>idxSerialCacheKey</name><parameter_list>(<parameter><decl><type><name>ICacheKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasJson</name> <init>= <expr><call><name>IDX_TYPE_CONTAIN_EXTERN_TYPE</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_JSON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>  <name><name>tbuf</name><index>[<expr><literal type="number">65</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>idxInt2str</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>key</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SERIALIZE_STR_VAR_TO_BUF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SERIALIZE_VAR_TO_BUF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>, <argument><expr><name>char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SERIALIZE_STR_VAR_TO_BUF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>JSON_COLUMN</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>JSON_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SERIALIZE_STR_MEM_TO_BUF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>colName</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>nColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>buf</name> <operator>-</operator> <name>p</name></expr>;</return>
</block_content>}</block></function>
</unit>
