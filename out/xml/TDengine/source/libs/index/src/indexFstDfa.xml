<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/index/src/indexFstDfa.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indexFstDfa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>uint32_t</name></type> <name>STATE_LIMIT</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dfaInstsEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>ar</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>br</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>al</name> <init>= <expr><ternary><condition><expr><name>ar</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>bl</name> <init>= <expr><ternary><condition><expr><name>br</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>al</name> <operator>!=</operator> <name>bl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>al</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>v1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>v2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>v1</name> <operator>!=</operator> <name>v2</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>FstDfaBuilder</name> <modifier>*</modifier></type><name>dfaBuilderCreate</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>insts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstDfaBuilder</name> <modifier>*</modifier></type><name>builder</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstDfaBuilder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>builder</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>states</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DfaState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name></name> <operator>=</operator> <call><name>dfaCreate</name><argument_list>(<argument><expr><name>insts</name></expr></argument>, <argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>builder</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(
      <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><ternary><condition><expr><name>POINTER_BYTES</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr> </then><else>: <expr><name>TSDB_DATA_TYPE_INT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashSetEqualFp</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>dfaInstsEqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>builder</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dfaBuilderDestroy</name><parameter_list>(<parameter><decl><type><name>FstDfaBuilder</name> <modifier>*</modifier></type><name>builder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>builder</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><ternary><condition><expr><name><name>builder</name><operator>-&gt;</operator><name>cache</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>*</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>FstDfa</name> <modifier>*</modifier></type><name>dfaBuilderBuild</name><parameter_list>(<parameter><decl><type><name>FstDfaBuilder</name> <modifier>*</modifier></type><name>builder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name><operator>-&gt;</operator><name>insts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>sparSetCreate</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>nxt</name> <init>= <expr><call><name>sparSetCreate</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dfaAdd</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>  <modifier>*</modifier></type><name>states</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dfaBuilderCacheState</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>states</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>seen</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayPop</name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>ns</name></decl>, <decl><type ref="prev"/><name>dummpy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>dfaBuilderRunState</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>nxt</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>seen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>seen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummpy</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dummpy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>states</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>STATE_LIMIT</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Too many state;</comment>
        <comment type="line">//</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>seen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>dfaBuilderRunState</name><parameter_list>(<parameter><decl><type><name>FstDfaBuilder</name> <modifier>*</modifier></type><name>builder</name></decl></parameter>, <parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>,
                        <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sparSetClear</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>DfaState</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>insts</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ip</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>insts</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>succ</name> <init>= <expr><call><name>sparSetAdd</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>succ</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>dfaRun</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>nxtState</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dfaBuilderCacheState</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nxtState</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>=</operator> <name>nxtState</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>nxtState</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>dfaBuilderCacheState</name><parameter_list>(<parameter><decl><type><name>FstDfaBuilder</name> <modifier>*</modifier></type><name>builder</name></decl></parameter>, <parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>tinsts</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>isMatch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sparSetLen</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ip</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>false</name> <operator>==</operator> <call><name>sparSetGet</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>Inst</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name><operator>-&gt;</operator><name>insts</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>JUMP</name> <operator>||</operator> <name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>SPLIT</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>RANGE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tinsts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>MATCH</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>isMatch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tinsts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tinsts</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tinsts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tinsts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>*</operator><name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tinsts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>DfaState</name></type> <name>st</name> <init>= <expr><block>{<expr><operator>.</operator><name>insts</name> <operator>=</operator> <name>tinsts</name></expr>, <expr><operator>.</operator><name>isMatch</name> <operator>=</operator> <name>isMatch</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>dfa</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>builder</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tinsts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FstDfa</name> <modifier>*</modifier></type><name>dfaCreate</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>insts</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>states</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FstDfa</name> <modifier>*</modifier></type><name>dfa</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FstDfa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dfa</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>dfa</name><operator>-&gt;</operator><name>insts</name></name> <operator>=</operator> <name>insts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dfa</name><operator>-&gt;</operator><name>states</name></name> <operator>=</operator> <name>states</name></expr>;</expr_stmt>
  <return>return <expr><name>dfa</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>dfaIsMatch</name><parameter_list>(<parameter><decl><type><name>FstDfa</name> <modifier>*</modifier></type><name>dfa</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>si</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>dfa</name><operator>-&gt;</operator><name>states</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>si</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>dfa</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>DfaState</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dfa</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>st</name><operator>-&gt;</operator><name>isMatch</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>dfaAccept</name><parameter_list>(<parameter><decl><type><name>FstDfa</name> <modifier>*</modifier></type><name>dfa</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>si</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>dfa</name><operator>-&gt;</operator><name>states</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>si</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>dfa</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>DfaState</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dfa</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>byte</name></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>dfaAdd</name><parameter_list>(<parameter><decl><type><name>FstDfa</name> <modifier>*</modifier></type><name>dfa</name></decl></parameter>, <parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ip</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>sparSetContains</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>succ</name> <init>= <expr><call><name>sparSetAdd</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// assert(succ == true);</comment>
  <decl_stmt><decl><type><name>Inst</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dfa</name><operator>-&gt;</operator><name>insts</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>MATCH</name> <operator>||</operator> <name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>RANGE</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// do nothing</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>JUMP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dfaAdd</name><argument_list>(<argument><expr><name>dfa</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name><name>inst</name><operator>-&gt;</operator><name>jv</name><operator>.</operator><name>step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>SPLIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dfaAdd</name><argument_list>(<argument><expr><name>dfa</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name><name>inst</name><operator>-&gt;</operator><name>sv</name><operator>.</operator><name>len1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfaAdd</name><argument_list>(<argument><expr><name>dfa</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name><name>inst</name><operator>-&gt;</operator><name>sv</name><operator>.</operator><name>len2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>dfaRun</name><parameter_list>(<parameter><decl><type><name>FstDfa</name> <modifier>*</modifier></type><name>dfa</name></decl></parameter>, <parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>FstSparseSet</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>isMatch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sparSetClear</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sparSetLen</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ip</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>false</name> <operator>==</operator> <call><name>sparSetGet</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>Inst</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dfa</name><operator>-&gt;</operator><name>insts</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>JUMP</name> <operator>||</operator> <name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>SPLIT</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>MATCH</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>isMatch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>ty</name></name> <operator>==</operator> <name>RANGE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>rv</name><operator>.</operator><name>start</name></name> <operator>&lt;=</operator> <name>byte</name> <operator>&amp;&amp;</operator> <name>byte</name> <operator>&lt;=</operator> <name><name>inst</name><operator>-&gt;</operator><name>rv</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dfaAdd</name><argument_list>(<argument><expr><name>dfa</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>ip</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>isMatch</name></expr>;</return>
</block_content>}</block></function>
</unit>
