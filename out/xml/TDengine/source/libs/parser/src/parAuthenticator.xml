<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/parser/src/parAuthenticator.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmdnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parInt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SAuthCxt</name> <block>{
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type>   <name>pParseCxt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>errCode</name></decl>;</decl_stmt>
}</block></struct></type> <name>SAuthCxt</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>authQuery</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkAuth</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><name>AUTH_TYPE</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParseCxt</name> <init>= <expr><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pParseCxt</name><operator>-&gt;</operator><name>isSuperUser</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pParseCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pDbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFname</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>dbFname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>pass</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getUserAuthFromCache</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pMetaCache</name></name></expr></argument>, <argument><expr><name><name>pParseCxt</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><name>dbFname</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pParseCxt</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                             <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pParseCxt</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                             <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pParseCxt</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                             <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pParseCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogChkAuth</name><argument_list>(<argument><expr><name><name>pParseCxt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name><name>pParseCxt</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>, <argument><expr><name>dbFname</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><ternary><condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>pass</name></expr> ?</condition><then> <expr><name>TSDB_CODE_SUCCESS</name></expr> </then><else>: <expr><name>TSDB_CODE_PAR_PERMISSION_DENIED</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>code</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>authSubquery</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <call><name>authQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DEAL_RES_CONTINUE</name></expr> </then><else>: <expr><name>DEAL_RES_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>authSelectImpl</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name> <init>= <expr><name>pContext</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_REAL_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>checkAuth</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>AUTH_TYPE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr> ?</condition><then> <expr><name>DEAL_RES_CONTINUE</name></expr> </then><else>: <expr><name>DEAL_RES_ERROR</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_TEMP_TABLE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>authSubquery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>STempTableNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pSubquery</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>authSelect</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>nodesWalkSelectStmt</name><argument_list>(<argument><expr><name>pSelect</name></expr></argument>, <argument><expr><name>SQL_CLAUSE_FROM</name></expr></argument>, <argument><expr><name>authSelectImpl</name></expr></argument>, <argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>authSetOperator</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSetOperator</name><modifier>*</modifier></type> <name>pSetOper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>authQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSetOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>authQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSetOper</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>authDropUser</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDropUserStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>isSuperUser</name></name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>useName</name></name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_PAR_PERMISSION_DENIED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>authDelete</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SDeleteStmt</name><modifier>*</modifier></type> <name>pDelete</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>checkAuth</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name><name>pDelete</name><operator>-&gt;</operator><name>pFromTable</name></name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>AUTH_TYPE_WRITE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>authInsert</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SInsertStmt</name><modifier>*</modifier></type> <name>pInsert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>checkAuth</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name><operator>*</operator><operator>)</operator><name><name>pInsert</name><operator>-&gt;</operator><name>pTable</name></name><operator>)</operator><operator>-&gt;</operator><name><name>table</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>AUTH_TYPE_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>authQuery</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pInsert</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>authShowTables</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SShowStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>checkAuth</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pDbName</name></name><operator>)</operator><operator>-&gt;</operator><name>literal</name></expr></argument>, <argument><expr><name>AUTH_TYPE_READ</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>authShowCreateTable</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SShowCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>checkAuth</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>AUTH_TYPE_READ</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>authQuery</name><parameter_list>(<parameter><decl><type><name>SAuthCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_SET_OPERATOR</name></expr>:</case>
      <return>return <expr><call><name>authSetOperator</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SSetOperator</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SELECT_STMT</name></expr>:</case>
      <return>return <expr><call><name>authSelect</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DROP_USER_STMT</name></expr>:</case>
      <return>return <expr><call><name>authDropUser</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDropUserStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_DELETE_STMT</name></expr>:</case>
      <return>return <expr><call><name>authDelete</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SDeleteStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_INSERT_STMT</name></expr>:</case>
      <return>return <expr><call><name>authInsert</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SInsertStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_DNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_MNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_MODULES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_QNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_SNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_BNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CLUSTER_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_LICENCES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_VGROUPS_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_DATABASE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_TABLE_DISTRIBUTED_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_VNODES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_SCORES_STMT</name></expr>:</case>
      <return>return <expr><ternary><condition><expr><operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pParseCxt</name><operator>-&gt;</operator><name>enableSysInfo</name></name></expr> ?</condition><then> <expr><name>TSDB_CODE_PAR_PERMISSION_DENIED</name></expr> </then><else>: <expr><name>TSDB_CODE_SUCCESS</name></expr></else></ternary></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_TABLES_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_STABLES_STMT</name></expr>:</case>
      <return>return <expr><call><name>authShowTables</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SShowStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_TABLE_STMT</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_STABLE_STMT</name></expr>:</case>
      <return>return <expr><call><name>authShowCreateTable</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SShowCreateTableStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>authenticate</name><parameter_list>(<parameter><decl><type><name>SParseContext</name><modifier>*</modifier></type> <name>pParseCxt</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SParseMetaCache</name><modifier>*</modifier></type> <name>pMetaCache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAuthCxt</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>pParseCxt</name> <operator>=</operator> <name>pParseCxt</name></expr>, <expr><operator>.</operator><name>pMetaCache</name> <operator>=</operator> <name>pMetaCache</name></expr>, <expr><operator>.</operator><name>errCode</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>authQuery</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
